// This module contains a collection of YANG definitions
// for Cisco IOS-XR clns-isis package operational data.
// 
// This module contains definitions
// for the following management objects:
//   isis: IS-IS operational data
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package clns_isis_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package clns_isis_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-clns-isis-oper isis}", reflect.TypeOf(Isis{}))
    ydk.RegisterEntity("Cisco-IOS-XR-clns-isis-oper:isis", reflect.TypeOf(Isis{}))
}

// IsisIfClnsMtuInvalidReason represents Isis if clns mtu invalid reason
type IsisIfClnsMtuInvalidReason string

const (
    // isis intf clns mtu invalid too small
    IsisIfClnsMtuInvalidReason_isis_intf_clns_mtu_invalid_too_small IsisIfClnsMtuInvalidReason = "isis-intf-clns-mtu-invalid-too-small"

    // isis intf clns mtu invalid internal error
    IsisIfClnsMtuInvalidReason_isis_intf_clns_mtu_invalid_internal_error IsisIfClnsMtuInvalidReason = "isis-intf-clns-mtu-invalid-internal-error"
)

// IsisFrrTiebreaker represents Isis frr tiebreaker
type IsisFrrTiebreaker string

const (
    // Backup path is via downstream node
    IsisFrrTiebreaker_isis_frr_tiebreaker_down_stream IsisFrrTiebreaker = "isis-frr-tiebreaker-down-stream"

    // Backup path is line card disjoint
    IsisFrrTiebreaker_isis_frr_tiebreaker_lc_disjoint IsisFrrTiebreaker = "isis-frr-tiebreaker-lc-disjoint"

    // Backup path has lowest metric
    IsisFrrTiebreaker_isis_frr_tiebreaker_low_est_backup_metric IsisFrrTiebreaker = "isis-frr-tiebreaker-low-est-backup-metric"

    // Backup path is node protecting
    IsisFrrTiebreaker_isis_frr_tiebreaker_node_protecting IsisFrrTiebreaker = "isis-frr-tiebreaker-node-protecting"

    // Backup path is ECMP
    IsisFrrTiebreaker_isis_frr_tiebreaker_primary_path IsisFrrTiebreaker = "isis-frr-tiebreaker-primary-path"

    // Backup path is not an ECMP
    IsisFrrTiebreaker_isis_frr_tiebreaker_secondary_path IsisFrrTiebreaker = "isis-frr-tiebreaker-secondary-path"

    // Backup path is SRLG disjoint
    IsisFrrTiebreaker_isis_frr_tiebreaker_srlg_disjoint IsisFrrTiebreaker = "isis-frr-tiebreaker-srlg-disjoint"

    // Backup path is link protecting
    IsisFrrTiebreaker_isis_frr_tiebreaker_default IsisFrrTiebreaker = "isis-frr-tiebreaker-default"
)

// IsisIfAfFwdAddrUnknownReason represents Isis if af fwd addr unknown reason
type IsisIfAfFwdAddrUnknownReason string

const (
    // isis intf af fwd addr unknown cfg passive
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_cfg_passive IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-cfg-passive"

    // isis intf af fwd addr unknown proto doesnt
    // exist
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_proto_doesnt_exist IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-proto-doesnt-exist"

    // isis intf af fwd addr unknown next hop reg
    // error
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_next_hop_reg_error IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-next-hop-reg-error"

    // isis intf af fwd addr unknown no link local add
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_no_link_local_add IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-no-link-local-add"

    // isis intf af fwd addr unknown af not up
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_af_not_up IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-af-not-up"

    // isis intf af fwd addr unknown vrf enabled
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_vrf_enabled IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-vrf-enabled"

    // isis intf af fwd addr unknown internal error
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_internal_error IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-internal-error"
)

// IsisSubAfId represents Isis sub af id
type IsisSubAfId string

const (
    // Unicast
    IsisSubAfId_unicast IsisSubAfId = "unicast"

    // Multicast
    IsisSubAfId_multicast IsisSubAfId = "multicast"
)

// IsisErrLogLevel represents Isis err log level
type IsisErrLogLevel string

const (
    // isis err log level info
    IsisErrLogLevel_isis_err_log_level_info IsisErrLogLevel = "isis-err-log-level-info"

    // isis err log level warn
    IsisErrLogLevel_isis_err_log_level_warn IsisErrLogLevel = "isis-err-log-level-warn"

    // isis err log level critical
    IsisErrLogLevel_isis_err_log_level_critical IsisErrLogLevel = "isis-err-log-level-critical"
)

// IsisUloopEvent represents Isis uloop event
type IsisUloopEvent string

const (
    // isis u loop event none
    IsisUloopEvent_isis_u_loop_event_none IsisUloopEvent = "isis-u-loop-event-none"

    // isis u loop event link down
    IsisUloopEvent_isis_u_loop_event_link_down IsisUloopEvent = "isis-u-loop-event-link-down"

    // isis u loop event link up
    IsisUloopEvent_isis_u_loop_event_link_up IsisUloopEvent = "isis-u-loop-event-link-up"

    // isis u loop event ol bit set
    IsisUloopEvent_isis_u_loop_event_ol_bit_set IsisUloopEvent = "isis-u-loop-event-ol-bit-set"

    // isis u loop event ol bit unset
    IsisUloopEvent_isis_u_loop_event_ol_bit_unset IsisUloopEvent = "isis-u-loop-event-ol-bit-unset"
)

// SrmsMiAfEB represents Srms mi af e b
type SrmsMiAfEB string

const (
    // None
    SrmsMiAfEB_none SrmsMiAfEB = "none"

    // IPv4
    SrmsMiAfEB_ipv4 SrmsMiAfEB = "ipv4"

    // IPv6
    SrmsMiAfEB_ipv6 SrmsMiAfEB = "ipv6"
)

// IsisAdjTopoStatus represents Status of a topology in an adjacency
type IsisAdjTopoStatus string

const (
    // Topology is included in adjacency
    IsisAdjTopoStatus_isis_adj_topo_status_ok IsisAdjTopoStatus = "isis-adj-topo-status-ok"

    // Topology is not configured on the interface
    IsisAdjTopoStatus_isis_adj_topo_status_intf_not_configured IsisAdjTopoStatus = "isis-adj-topo-status-intf-not-configured"

    // Topology is not running on the interface
    IsisAdjTopoStatus_isis_adj_topo_status_intf_not_running IsisAdjTopoStatus = "isis-adj-topo-status-intf-not-running"

    // Adjacency is in INIT state
    IsisAdjTopoStatus_isis_adj_topo_status_init_state IsisAdjTopoStatus = "isis-adj-topo-status-init-state"

    // Neighbor doesn't participate in topology
    IsisAdjTopoStatus_isis_adj_topo_status_neighbor_doesnt_participate IsisAdjTopoStatus = "isis-adj-topo-status-neighbor-doesnt-participate"

    // Neighbor IIH doesn't contain IPv4 address TLV
    IsisAdjTopoStatus_isis_adj_topo_status_ipv4_address_tlv_missing IsisAdjTopoStatus = "isis-adj-topo-status-ipv4-address-tlv-missing"

    // Neighbor's IPv4 address TLV is empty
    IsisAdjTopoStatus_isis_adj_topo_status_ipv4_address_tlv_empty IsisAdjTopoStatus = "isis-adj-topo-status-ipv4-address-tlv-empty"

    // Neighbor IIH doesn't contain IPv6 address TLV
    IsisAdjTopoStatus_isis_adj_topo_status_ipv6_address_tlv_missing IsisAdjTopoStatus = "isis-adj-topo-status-ipv6-address-tlv-missing"

    // Neighbor's IPv6 address TLV is empty
    IsisAdjTopoStatus_isis_adj_topo_status_ipv6_address_tlv_empty IsisAdjTopoStatus = "isis-adj-topo-status-ipv6-address-tlv-empty"

    // Neighbor's IPv4 address matches ours
    IsisAdjTopoStatus_isis_adj_topo_status_ipv4_address_matches_ours IsisAdjTopoStatus = "isis-adj-topo-status-ipv4-address-matches-ours"

    // Neighbor's IPv6 address matches ours
    IsisAdjTopoStatus_isis_adj_topo_status_ipv6_address_matches_ours IsisAdjTopoStatus = "isis-adj-topo-status-ipv6-address-matches-ours"

    // Neighbor's IPv4 address is in a different
    // subnet to ours
    IsisAdjTopoStatus_isis_adj_topo_status_ipv4_address_subnet_mismatch IsisAdjTopoStatus = "isis-adj-topo-status-ipv4-address-subnet-mismatch"

    // Neighbor's IPv6 address is not link local
    IsisAdjTopoStatus_isis_adj_topo_status_ipv6_address_not_link_local IsisAdjTopoStatus = "isis-adj-topo-status-ipv6-address-not-link-local"
)

// IsisIfDisabledReason represents Isis if disabled reason
type IsisIfDisabledReason string

const (
    // isis intf disabled no net cfg
    IsisIfDisabledReason_isis_intf_disabled_no_net_cfg IsisIfDisabledReason = "isis-intf-disabled-no-net-cfg"

    // isis intf disabled area missing
    IsisIfDisabledReason_isis_intf_disabled_area_missing IsisIfDisabledReason = "isis-intf-disabled-area-missing"

    // isis intf disabled no area running
    IsisIfDisabledReason_isis_intf_disabled_no_area_running IsisIfDisabledReason = "isis-intf-disabled-no-area-running"

    // isis intf disabled no topos cfg
    IsisIfDisabledReason_isis_intf_disabled_no_topos_cfg IsisIfDisabledReason = "isis-intf-disabled-no-topos-cfg"

    // isis intf disabled no imd conn
    IsisIfDisabledReason_isis_intf_disabled_no_imd_conn IsisIfDisabledReason = "isis-intf-disabled-no-imd-conn"

    // isis intf disabled imd reg error
    IsisIfDisabledReason_isis_intf_disabled_imd_reg_error IsisIfDisabledReason = "isis-intf-disabled-imd-reg-error"

    // isis intf disabled level mismatch
    IsisIfDisabledReason_isis_intf_disabled_level_mismatch IsisIfDisabledReason = "isis-intf-disabled-level-mismatch"

    // isis intf disabled base caps error
    IsisIfDisabledReason_isis_intf_disabled_base_caps_error IsisIfDisabledReason = "isis-intf-disabled-base-caps-error"

    // isis intf disabled intf doesnt exist
    IsisIfDisabledReason_isis_intf_disabled_intf_doesnt_exist IsisIfDisabledReason = "isis-intf-disabled-intf-doesnt-exist"

    // isis intf disabled intf shutdown
    IsisIfDisabledReason_isis_intf_disabled_intf_shutdown IsisIfDisabledReason = "isis-intf-disabled-intf-shutdown"

    // isis intf disabled internal error
    IsisIfDisabledReason_isis_intf_disabled_internal_error IsisIfDisabledReason = "isis-intf-disabled-internal-error"
)

// IsisShTeLink represents Isis sh te link
type IsisShTeLink string

const (
    // Tunnel is absolute
    IsisShTeLink_isis_sh_te_link_p2p IsisShTeLink = "isis-sh-te-link-p2p"

    // Broadcast link
    IsisShTeLink_isis_sh_te_link_broadcast IsisShTeLink = "isis-sh-te-link-broadcast"
)

// SrmsMiSrcEB represents Srms mi src e b
type SrmsMiSrcEB string

const (
    // None
    SrmsMiSrcEB_none SrmsMiSrcEB = "none"

    // Local
    SrmsMiSrcEB_local SrmsMiSrcEB = "local"

    // Remote
    SrmsMiSrcEB_remote SrmsMiSrcEB = "remote"
)

// IsisLspDbOp represents Isis lsp db op
type IsisLspDbOp string

const (
    // Clear the LSP database
    IsisLspDbOp_isis_lsp_db_clear IsisLspDbOp = "isis-lsp-db-clear"

    // Insertion of new LSP
    IsisLspDbOp_isis_lsp_db_insert_new_lsp IsisLspDbOp = "isis-lsp-db-insert-new-lsp"

    // LSP replacing LSP
    IsisLspDbOp_isis_lsp_db_replace_lsp_with_lsp IsisLspDbOp = "isis-lsp-db-replace-lsp-with-lsp"

    // LSP purged by the local system
    IsisLspDbOp_isis_lsp_db_purge_lsp IsisLspDbOp = "isis-lsp-db-purge-lsp"

    // Removal of the LSP from the database
    IsisLspDbOp_isis_lsp_db_delete_lsp IsisLspDbOp = "isis-lsp-db-delete-lsp"
)

// IsisIfAfPrefixUnknownReason represents Isis if af prefix unknown reason
type IsisIfAfPrefixUnknownReason string

const (
    // isis intf af prefix unknown adv suppressed
    IsisIfAfPrefixUnknownReason_isis_intf_af_prefix_unknown_adv_suppressed IsisIfAfPrefixUnknownReason = "isis-intf-af-prefix-unknown-adv-suppressed"

    // isis intf af prefix unknown global addr reg
    // error
    IsisIfAfPrefixUnknownReason_isis_intf_af_prefix_unknown_global_addr_reg_error IsisIfAfPrefixUnknownReason = "isis-intf-af-prefix-unknown-global-addr-reg-error"

    // isis intf af prefix unknown internal error
    IsisIfAfPrefixUnknownReason_isis_intf_af_prefix_unknown_internal_error IsisIfAfPrefixUnknownReason = "isis-intf-af-prefix-unknown-internal-error"
)

// IsisMetricStyle represents Isis metric style
type IsisMetricStyle string

const (
    // old-style (ISO 10589) metrics
    IsisMetricStyle_isis_metric_style_narrow IsisMetricStyle = "isis-metric-style-narrow"

    // new-style 32-bit metrics
    IsisMetricStyle_isis_metric_style_wide IsisMetricStyle = "isis-metric-style-wide"

    // send/accept both forms of metric
    IsisMetricStyle_isis_metric_style_transition IsisMetricStyle = "isis-metric-style-transition"
)

// IsisIfAfProtoDownReason represents Isis if af proto down reason
type IsisIfAfProtoDownReason string

const (
    // isis intf af proto down imd conn fail
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_imd_conn_fail IsisIfAfProtoDownReason = "isis-intf-af-proto-down-imd-conn-fail"

    // isis intf af proto down imd node doesnt exist
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_imd_node_doesnt_exist IsisIfAfProtoDownReason = "isis-intf-af-proto-down-imd-node-doesnt-exist"

    // isis intf af proto down imd exist reg error
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_imd_exist_reg_error IsisIfAfProtoDownReason = "isis-intf-af-proto-down-imd-exist-reg-error"

    // isis intf af proto down imd state reg error
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_imd_state_reg_error IsisIfAfProtoDownReason = "isis-intf-af-proto-down-imd-state-reg-error"

    // isis intf af proto down af not up
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_af_not_up IsisIfAfProtoDownReason = "isis-intf-af-proto-down-af-not-up"

    // isis intf af proto down internal error
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_internal_error IsisIfAfProtoDownReason = "isis-intf-af-proto-down-internal-error"
)

// IsisStartupStatus represents Isis startup status
type IsisStartupStatus string

const (
    // Startup-state-machine controlled restart in
    // progress
    IsisStartupStatus_isis_startup_ssm_active IsisStartupStatus = "isis-startup-ssm-active"

    // Startup-state-machine controlled restart
    // complete
    IsisStartupStatus_isis_startup_ssm_complete IsisStartupStatus = "isis-startup-ssm-complete"

    // Startup-state-machine controlled restart
    // aborted
    IsisStartupStatus_isis_startup_ssm_aborted IsisStartupStatus = "isis-startup-ssm-aborted"

    // Startup-state-machine controlled not attempted
    IsisStartupStatus_isis_startup_ssm_not_run IsisStartupStatus = "isis-startup-ssm-not-run"
)

// IsisUp represents Isis up
type IsisUp string

const (
    // Down
    IsisUp_isis_down IsisUp = "isis-down"

    // Up
    IsisUp_isis_up IsisUp = "isis-up"
)

// IsisMetricMode represents Isis metric mode
type IsisMetricMode string

const (
    // Fixed
    IsisMetricMode_isis_metric_mode_fixed IsisMetricMode = "isis-metric-mode-fixed"

    // Relative
    IsisMetricMode_isis_metric_mode_relative IsisMetricMode = "isis-metric-mode-relative"

    // Absolute
    IsisMetricMode_isis_metric_mode_absolute IsisMetricMode = "isis-metric-mode-absolute"
)

// IsisMediaClass represents Isis media class
type IsisMediaClass string

const (
    // LAN
    IsisMediaClass_isis_media_class_lan IsisMediaClass = "isis-media-class-lan"

    // P2P
    IsisMediaClass_isis_media_class_p2p IsisMediaClass = "isis-media-class-p2p"

    // Loopback
    IsisMediaClass_isis_media_class_loop_back IsisMediaClass = "isis-media-class-loop-back"
)

// IsisNsfFlavor represents Isis nsf flavor
type IsisNsfFlavor string

const (
    // NSF not configured
    IsisNsfFlavor_isis_nsf_flav_or_none IsisNsfFlavor = "isis-nsf-flav-or-none"

    // Cisco-proprietary NSF
    IsisNsfFlavor_isis_nsf_flav_or_cisco IsisNsfFlavor = "isis-nsf-flav-or-cisco"

    // IETF-standard NSF
    IsisNsfFlavor_isis_nsf_flav_or_ietf IsisNsfFlavor = "isis-nsf-flav-or-ietf"

    // Cisco-proprietary NSR
    IsisNsfFlavor_isis_nsf_flav_or_nsr IsisNsfFlavor = "isis-nsf-flav-or-nsr"
)

// IsisAdjTopoChange represents Per-topology change type for an adjacency
type IsisAdjTopoChange string

const (
    // Topology up
    IsisAdjTopoChange_isis_adj_topo_up_change IsisAdjTopoChange = "isis-adj-topo-up-change"

    // Topology next-hop changed
    IsisAdjTopoChange_isis_adj_topo_next_hop_change IsisAdjTopoChange = "isis-adj-topo-next-hop-change"

    // Topology down
    IsisAdjTopoChange_isis_adj_topo_down_change IsisAdjTopoChange = "isis-adj-topo-down-change"
)

// IsisIfMcastInvalidReason represents Isis if mcast invalid reason
type IsisIfMcastInvalidReason string

const (
    // Error when attempting to join this multicast
    // group
    IsisIfMcastInvalidReason_isis_intf_mcast_invalid_join_error IsisIfMcastInvalidReason = "isis-intf-mcast-invalid-join-error"

    // Internal error
    IsisIfMcastInvalidReason_isis_intf_mcast_invalid_internal_error IsisIfMcastInvalidReason = "isis-intf-mcast-invalid-internal-error"

    // Multicast group membership not yet requested
    IsisIfMcastInvalidReason_isis_intf_mcast_invalid_not_yet_needed IsisIfMcastInvalidReason = "isis-intf-mcast-invalid-not-yet-needed"
)

// IsisIfTopoAdvPrefixDisabledReason represents Isis if topo adv prefix disabled reason
type IsisIfTopoAdvPrefixDisabledReason string

const (
    // isis intf topo adv prefix disabled intf
    // suppressed
    IsisIfTopoAdvPrefixDisabledReason_isis_intf_topo_adv_prefix_disabled_intf_suppressed IsisIfTopoAdvPrefixDisabledReason = "isis-intf-topo-adv-prefix-disabled-intf-suppressed"

    // isis intf topo adv prefix disabled af not up
    IsisIfTopoAdvPrefixDisabledReason_isis_intf_topo_adv_prefix_disabled_af_not_up IsisIfTopoAdvPrefixDisabledReason = "isis-intf-topo-adv-prefix-disabled-af-not-up"

    // isis intf topo adv prefix disabled af prefixes
    // unknown
    IsisIfTopoAdvPrefixDisabledReason_isis_intf_topo_adv_prefix_disabled_af_prefixes_unknown IsisIfTopoAdvPrefixDisabledReason = "isis-intf-topo-adv-prefix-disabled-af-prefixes-unknown"

    // isis intf topo adv prefix disabled internal
    // error
    IsisIfTopoAdvPrefixDisabledReason_isis_intf_topo_adv_prefix_disabled_internal_error IsisIfTopoAdvPrefixDisabledReason = "isis-intf-topo-adv-prefix-disabled-internal-error"
)

// IsisShTePceFloodingScope represents Isis sh te pce flooding scope
type IsisShTePceFloodingScope string

const (
    // Flooding is disabled
    IsisShTePceFloodingScope_none IsisShTePceFloodingScope = "none"

    // Area wide flooding
    IsisShTePceFloodingScope_area IsisShTePceFloodingScope = "area"

    // Domain wide flooding
    IsisShTePceFloodingScope_domain IsisShTePceFloodingScope = "domain"
)

// IsisLspTrigger represents Isis lsp trigger
type IsisLspTrigger string

const (
    // Any configuration change
    IsisLspTrigger_isis_lsp_trig_config IsisLspTrigger = "isis-lsp-trig-config"

    // New adjacency came up
    IsisLspTrigger_isis_lsp_trig_newadj IsisLspTrigger = "isis-lsp-trig-newadj"

    // Adjacency went down
    IsisLspTrigger_isis_lsp_trig_deladj IsisLspTrigger = "isis-lsp-trig-deladj"

    // DIS changed, or pseudonode changed
    IsisLspTrigger_isis_lsp_trig_dr_change IsisLspTrigger = "isis-lsp-trig-dr-change"

    // Active area set changed
    IsisLspTrigger_isis_lsp_trig_area_set IsisLspTrigger = "isis-lsp-trig-area-set"

    // Attached bit changed state
    IsisLspTrigger_isis_lsp_trig_attach IsisLspTrigger = "isis-lsp-trig-attach"

    // LSPDB overload bit changed state
    IsisLspTrigger_isis_lsp_trig_hippity IsisLspTrigger = "isis-lsp-trig-hippity"

    // LSP regeneration
    IsisLspTrigger_isis_lsp_trig_regen IsisLspTrigger = "isis-lsp-trig-regen"

    // Directly connected IP prefix up
    IsisLspTrigger_isis_lsp_trig_ip_if_up IsisLspTrigger = "isis-lsp-trig-ip-if-up"

    // Directly connected IP prefix down
    IsisLspTrigger_isis_lsp_trig_ip_if_down IsisLspTrigger = "isis-lsp-trig-ip-if-down"

    // Interarea IP route appeared or gone
    IsisLspTrigger_isis_lsp_trig_ip_inter_area IsisLspTrigger = "isis-lsp-trig-ip-inter-area"

    // Redistributed IP route appeared or gone
    IsisLspTrigger_isis_lsp_trig_ip_external IsisLspTrigger = "isis-lsp-trig-ip-external"

    // Full IP redistribution
    IsisLspTrigger_isis_lsp_trig_ip_external_full IsisLspTrigger = "isis-lsp-trig-ip-external-full"

    // Default information originate changed
    IsisLspTrigger_isis_lsp_trig_ip_def_orig IsisLspTrigger = "isis-lsp-trig-ip-def-orig"

    // IP interface address changed
    IsisLspTrigger_isis_lsp_trig_ip_addr_chg IsisLspTrigger = "isis-lsp-trig-ip-addr-chg"

    // TE bandwidth resource information
    IsisLspTrigger_isis_lsp_trig_te_info IsisLspTrigger = "isis-lsp-trig-te-info"

    // TE PCE information
    IsisLspTrigger_isis_lsp_trig_te_pce_info IsisLspTrigger = "isis-lsp-trig-te-pce-info"

    // TE forwarding adjacency information
    IsisLspTrigger_isis_lsp_trig_te_fa_info IsisLspTrigger = "isis-lsp-trig-te-fa-info"

    // NSR FO is done
    IsisLspTrigger_isis_lsp_trig_nsr_fo IsisLspTrigger = "isis-lsp-trig-nsr-fo"

    // Pseudo-node generation canceled
    IsisLspTrigger_isis_lsp_trig_pn_cancel IsisLspTrigger = "isis-lsp-trig-pn-cancel"

    // Link-group offset metric change
    IsisLspTrigger_isis_lsp_trig_lkgp IsisLspTrigger = "isis-lsp-trig-lkgp"

    // Proactive Protection metric change
    IsisLspTrigger_isis_lsp_trig_pp IsisLspTrigger = "isis-lsp-trig-pp"

    // Any configuration change that requires all LSPs
    // to be updated
    IsisLspTrigger_isis_lsp_trig_config_force_send IsisLspTrigger = "isis-lsp-trig-config-force-send"

    // Any configuration change that requires the LBD
    // database re-init.
    IsisLspTrigger_isis_lsp_trig_config_force_init IsisLspTrigger = "isis-lsp-trig-config-force-init"

    // Adjacency SID added
    IsisLspTrigger_isis_lsp_trig_adj_sid_add IsisLspTrigger = "isis-lsp-trig-adj-sid-add"

    // Adjacency SID deleted
    IsisLspTrigger_isis_lsp_trig_adj_sid_delete IsisLspTrigger = "isis-lsp-trig-adj-sid-delete"

    // Maximum SID depth change
    IsisLspTrigger_isis_lsp_trig_msd IsisLspTrigger = "isis-lsp-trig-msd"

    // Adjacency SID wait timer expired
    IsisLspTrigger_isis_lsp_trig_adj_sid_wait_timer IsisLspTrigger = "isis-lsp-trig-adj-sid-wait-timer"

    // Direct LSP generation
    IsisLspTrigger_isis_lsp_trig_direct_gen IsisLspTrigger = "isis-lsp-trig-direct-gen"
)

// IsisEnabled represents Isis enabled
type IsisEnabled string

const (
    // Disabled
    IsisEnabled_isis_disabled IsisEnabled = "isis-disabled"

    // Enabled
    IsisEnabled_isis_enabled IsisEnabled = "isis-enabled"
)

// IsisIfAdvPrefixDisabledReason represents Isis if adv prefix disabled reason
type IsisIfAdvPrefixDisabledReason string

const (
    // isis intf adv prefix disabled if cfg suppressed
    IsisIfAdvPrefixDisabledReason_isis_intf_adv_prefix_disabled_if_cfg_suppressed IsisIfAdvPrefixDisabledReason = "isis-intf-adv-prefix-disabled-if-cfg-suppressed"

    // isis intf adv prefix disabled no topo
    // participate
    IsisIfAdvPrefixDisabledReason_isis_intf_adv_prefix_disabled_no_topo_participate IsisIfAdvPrefixDisabledReason = "isis-intf-adv-prefix-disabled-no-topo-participate"

    // isis intf adv prefix disabled internal error
    IsisIfAdvPrefixDisabledReason_isis_intf_adv_prefix_disabled_internal_error IsisIfAdvPrefixDisabledReason = "isis-intf-adv-prefix-disabled-internal-error"
)

// IsisAdjState represents Isis adj state
type IsisAdjState string

const (
    // Adjacency up
    IsisAdjState_isis_adj_up_state IsisAdjState = "isis-adj-up-state"

    // Adjacency initializing
    IsisAdjState_isis_adj_init_state IsisAdjState = "isis-adj-init-state"

    // Adjacency down/failed
    IsisAdjState_isis_adj_failed_state IsisAdjState = "isis-adj-failed-state"
)

// IsisIfClnsProtoDownReason represents Isis if clns proto down reason
type IsisIfClnsProtoDownReason string

const (
    // isis intf clns proto down add to intf stack
    // fail
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_add_to_intf_stack_fail IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-add-to-intf-stack-fail"

    // isis intf clns proto down no imd conn
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_no_imd_conn IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-no-imd-conn"

    // isis intf clns proto down imd node doesnt exist
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_imd_node_doesnt_exist IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-imd-node-doesnt-exist"

    // isis intf clns proto down imd exist reg error
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_imd_exist_reg_error IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-imd-exist-reg-error"

    // isis intf clns proto down imd state reg error
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_imd_state_reg_error IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-imd-state-reg-error"

    // isis intf clns proto down clns not up
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_clns_not_up IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-clns-not-up"
)

// IsisSpfTrigger represents Isis spf trigger
type IsisSpfTrigger string

const (
    // Configuration change
    IsisSpfTrigger_isis_spf_trig_config IsisSpfTrigger = "isis-spf-trig-config"

    // NSR FO is done
    IsisSpfTrigger_isis_spf_trig_nsr_fo IsisSpfTrigger = "isis-spf-trig-nsr-fo"

    // Periodic SPF
    IsisSpfTrigger_isis_spf_trig_periodic IsisSpfTrigger = "isis-spf-trig-periodic"

    // Cleared route table
    IsisSpfTrigger_isis_spf_trig_clear IsisSpfTrigger = "isis-spf-trig-clear"

    // New adjacency
    IsisSpfTrigger_isis_spf_trig_newadj IsisSpfTrigger = "isis-spf-trig-newadj"

    // Deleted adjacency
    IsisSpfTrigger_isis_spf_trig_deladj IsisSpfTrigger = "isis-spf-trig-deladj"

    // IP nexthop address change
    IsisSpfTrigger_isis_spf_trig_next_hop IsisSpfTrigger = "isis-spf-trig-next-hop"

    // Changed interface metric
    IsisSpfTrigger_isis_spf_trig_metric IsisSpfTrigger = "isis-spf-trig-metric"

    // Change to elected DIS
    IsisSpfTrigger_isis_spf_trig_dis IsisSpfTrigger = "isis-spf-trig-dis"

    // Change to per-link FRR config
    IsisSpfTrigger_isis_spf_trig_frr_per_link IsisSpfTrigger = "isis-spf-trig-frr-per-link"

    // Change to per-prefix FRR config
    IsisSpfTrigger_isis_spf_trig_frr_per_prefix IsisSpfTrigger = "isis-spf-trig-frr-per-prefix"

    // Change to UCMP config/calculation
    IsisSpfTrigger_isis_spf_trig_ucmp IsisSpfTrigger = "isis-spf-trig-ucmp"

    // New TE Autoroute Tunnel
    IsisSpfTrigger_isis_spf_trig_new_tunnel IsisSpfTrigger = "isis-spf-trig-new-tunnel"

    // Deleted TE Autoroute Tunnel
    IsisSpfTrigger_isis_spf_trig_del_tunnel IsisSpfTrigger = "isis-spf-trig-del-tunnel"

    // Changed TE Autoroute Tunnel
    IsisSpfTrigger_isis_spf_trig_chg_tunnel IsisSpfTrigger = "isis-spf-trig-chg-tunnel"

    // New LSP zero which participates in topology
    IsisSpfTrigger_isis_spf_trig_new_node IsisSpfTrigger = "isis-spf-trig-new-node"

    // New LSP zero which no longer participates in
    // topology
    IsisSpfTrigger_isis_spf_trig_del_node IsisSpfTrigger = "isis-spf-trig-del-node"

    // Previously unseen LSP fragment
    IsisSpfTrigger_isis_spf_trig_newlsp IsisSpfTrigger = "isis-spf-trig-newlsp"

    // LSP expired
    IsisSpfTrigger_isis_spf_trig_lsp_expiry IsisSpfTrigger = "isis-spf-trig-lsp-expiry"

    // Attached bit set
    IsisSpfTrigger_isis_spf_trig_attach_set IsisSpfTrigger = "isis-spf-trig-attach-set"

    // Attached bit cleared
    IsisSpfTrigger_isis_spf_trig_attach_clr IsisSpfTrigger = "isis-spf-trig-attach-clr"

    // Overload bit set
    IsisSpfTrigger_isis_spf_trig_overload_set IsisSpfTrigger = "isis-spf-trig-overload-set"

    // Overload bit cleared
    IsisSpfTrigger_isis_spf_trig_overload_clr IsisSpfTrigger = "isis-spf-trig-overload-clr"

    // Good news link TLV content change
    IsisSpfTrigger_isis_spf_trig_link_good IsisSpfTrigger = "isis-spf-trig-link-good"

    // Bad news link TLV content change
    IsisSpfTrigger_isis_spf_trig_link_bad IsisSpfTrigger = "isis-spf-trig-link-bad"

    // Good news prefix TLV content change
    IsisSpfTrigger_isis_spf_trig_prefix_good IsisSpfTrigger = "isis-spf-trig-prefix-good"

    // Bad news prefix TLV content change
    IsisSpfTrigger_isis_spf_trig_prefix_bad IsisSpfTrigger = "isis-spf-trig-prefix-bad"

    // Neutral (neither good nor bad news) prefix TLV
    // content change
    IsisSpfTrigger_isis_spf_trig_prefix IsisSpfTrigger = "isis-spf-trig-prefix"

    // Area address TLV content change
    IsisSpfTrigger_isis_spf_trig_area_addr IsisSpfTrigger = "isis-spf-trig-area-addr"

    // IP address TLV content change
    IsisSpfTrigger_isis_spf_trig_ip_addr IsisSpfTrigger = "isis-spf-trig-ip-addr"

    // Router id TLV content change
    IsisSpfTrigger_isis_spf_trig_rtrid IsisSpfTrigger = "isis-spf-trig-rtrid"

    // Prefix policy change
    IsisSpfTrigger_isis_spf_trig_prefix_policy IsisSpfTrigger = "isis-spf-trig-prefix-policy"
)

// SrmsMiFlagEB represents Srms mi flag e b
type SrmsMiFlagEB string

const (
    // False
    SrmsMiFlagEB_false SrmsMiFlagEB = "false"

    // True
    SrmsMiFlagEB_true SrmsMiFlagEB = "true"
)

// IsisReachable represents Isis reachable
type IsisReachable string

const (
    // Unreachable
    IsisReachable_isis_unreachable IsisReachable = "isis-unreachable"

    // Reachable
    IsisReachable_isis_reachable IsisReachable = "isis-reachable"
)

// IsisLevels represents Isis levels
type IsisLevels string

const (
    // isis levels none
    IsisLevels_isis_levels_none IsisLevels = "isis-levels-none"

    // isis levels 1
    IsisLevels_isis_levels_1 IsisLevels = "isis-levels-1"

    // isis levels 2
    IsisLevels_isis_levels_2 IsisLevels = "isis-levels-2"

    // isis levels 12
    IsisLevels_isis_levels_12 IsisLevels = "isis-levels-12"

    // isis levels total
    IsisLevels_isis_levels_total IsisLevels = "isis-levels-total"
)

// IsisPrefixPriority represents Isis prefix priority
type IsisPrefixPriority string

const (
    // Critical priority prefixes
    IsisPrefixPriority_isis_prefix_priority_critical IsisPrefixPriority = "isis-prefix-priority-critical"

    // High priority prefixes
    IsisPrefixPriority_isis_prefix_priority_high IsisPrefixPriority = "isis-prefix-priority-high"

    // Medium priority prefixes
    IsisPrefixPriority_isis_prefix_priority_med IsisPrefixPriority = "isis-prefix-priority-med"

    // Low priority prefixes
    IsisPrefixPriority_isis_prefix_priority_low IsisPrefixPriority = "isis-prefix-priority-low"
)

// IsisAdjStateReason represents Isis adj state reason
type IsisAdjStateReason string

const (
    // NSF Restart
    IsisAdjStateReason_isis_adj_up_nsf_restart IsisAdjStateReason = "isis-adj-up-nsf-restart"

    // New adjacency
    IsisAdjStateReason_isis_adj_up_new_adj IsisAdjStateReason = "isis-adj-up-new-adj"

    // Restarted
    IsisAdjStateReason_isis_adj_up_restarted IsisAdjStateReason = "isis-adj-up-restarted"

    // Restored during NSF
    IsisAdjStateReason_isis_adj_up_nsf_restored IsisAdjStateReason = "isis-adj-up-nsf-restored"

    // Restored from checkpoint
    IsisAdjStateReason_isis_adj_up_chkpt_restored IsisAdjStateReason = "isis-adj-up-chkpt-restored"

    // Into INIT
    IsisAdjStateReason_isis_adj_init_reason IsisAdjStateReason = "isis-adj-init-reason"

    // Neighbor forgot us
    IsisAdjStateReason_isis_adj_init_neighbor_forgot IsisAdjStateReason = "isis-adj-init-neighbor-forgot"

    // Holdtime expired
    IsisAdjStateReason_isis_adj_down_hold_time IsisAdjStateReason = "isis-adj-down-hold-time"

    // Interface state going down
    IsisAdjStateReason_isis_adj_down_if_down IsisAdjStateReason = "isis-adj-down-if-down"

    // Area address/level mismatch
    IsisAdjStateReason_isis_adj_down_cfg_mismatch IsisAdjStateReason = "isis-adj-down-cfg-mismatch"

    // Circuit ID changed
    IsisAdjStateReason_isis_adj_down_circ_id IsisAdjStateReason = "isis-adj-down-circ-id"

    // NSF could not CSNP Ack P2P adjacency
    IsisAdjStateReason_isis_adj_down_nsf_ack_fail IsisAdjStateReason = "isis-adj-down-nsf-ack-fail"

    // Clear of the Adjacency DB
    IsisAdjStateReason_isis_adj_down_db_clear IsisAdjStateReason = "isis-adj-down-db-clear"

    // Neighbors have no common link topology
    IsisAdjStateReason_isis_adj_down_no_common_topology IsisAdjStateReason = "isis-adj-down-no-common-topology"

    // Restart TLV missing during IETF NSF restart
    IsisAdjStateReason_isis_adj_down_restart_tlv_missing IsisAdjStateReason = "isis-adj-down-restart-tlv-missing"

    // BFD session has gone DOWN
    IsisAdjStateReason_isis_adj_down_bfd_down IsisAdjStateReason = "isis-adj-down-bfd-down"

    // 3-way state down
    IsisAdjStateReason_isis_adj_down_3way_down IsisAdjStateReason = "isis-adj-down-3way-down"
)

// IsisIfClnsSnpaUnknownReason represents Isis if clns snpa unknown reason
type IsisIfClnsSnpaUnknownReason string

const (
    // isis intf clns snpa unknown access error
    IsisIfClnsSnpaUnknownReason_isis_intf_clns_snpa_unknown_access_error IsisIfClnsSnpaUnknownReason = "isis-intf-clns-snpa-unknown-access-error"

    // isis intf clns snpa unknown not lan
    IsisIfClnsSnpaUnknownReason_isis_intf_clns_snpa_unknown_not_lan IsisIfClnsSnpaUnknownReason = "isis-intf-clns-snpa-unknown-not-lan"

    // isis intf clns snpa unknown internal error
    IsisIfClnsSnpaUnknownReason_isis_intf_clns_snpa_unknown_internal_error IsisIfClnsSnpaUnknownReason = "isis-intf-clns-snpa-unknown-internal-error"
)

// IsisFrr represents Isis frr
type IsisFrr string

const (
    // Computation disabled
    IsisFrr_isis_frr_type_none IsisFrr = "isis-frr-type-none"

    // Prefix independent per-link computation
    IsisFrr_isis_frr_type_per_link IsisFrr = "isis-frr-type-per-link"

    // Prefix dependent computation
    IsisFrr_isis_frr_type_per_prefix IsisFrr = "isis-frr-type-per-prefix"

    // Segment Routing Microloop Avoidance computation
    IsisFrr_isis_frr_type_sr_u_loop IsisFrr = "isis-frr-type-sr-u-loop"
)

// IsisIfTopoAdjFormDisabledReason represents Isis if topo adj form disabled reason
type IsisIfTopoAdjFormDisabledReason string

const (
    // isis intf topo adj form disabled intf passive
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_intf_passive IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-intf-passive"

    // isis intf topo adj form disabled af not up
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_af_not_up IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-af-not-up"

    // isis intf topo adj form disabled af fwd addr
    // unknown
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_af_fwd_addr_unknown IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-af-fwd-addr-unknown"

    // isis intf topo adj form disabled topo not cfg
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_topo_not_cfg IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-topo-not-cfg"

    // isis intf topo adj form disabled topo can not
    // participate
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_topo_can_not_participate IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-topo-can-not-participate"

    // isis intf topo adj form disabled idle
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_idle IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-idle"

    // isis intf topo adj form disabled internal error
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_internal_error IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-internal-error"

    // isis intf topo adj form disabled mtu
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_mtu IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-mtu"

    // isis intf topo adj form disabled snpa
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_snpa IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-snpa"

    // isis intf topo adj form disabled mcast
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_mcast IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-mcast"
)

// IsisAdjBfdState represents Current BFD state of an adjacency
type IsisAdjBfdState string

const (
    // No BFD session created
    IsisAdjBfdState_isis_adj_bfd_no_state IsisAdjBfdState = "isis-adj-bfd-no-state"

    // BFD session is DOWN
    IsisAdjBfdState_isis_adj_bfd_down_state IsisAdjBfdState = "isis-adj-bfd-down-state"

    // Waiting for BFD session to come UP
    IsisAdjBfdState_isis_adj_bfd_init_state IsisAdjBfdState = "isis-adj-bfd-init-state"

    // BFD session is UP
    IsisAdjBfdState_isis_adj_bfd_up_state IsisAdjBfdState = "isis-adj-bfd-up-state"
)

// IsisAfId represents Isis af id
type IsisAfId string

const (
    // IPv4
    IsisAfId_ipv4 IsisAfId = "ipv4"

    // IPv6
    IsisAfId_ipv6 IsisAfId = "ipv6"
)

// IsisRedistProto represents Isis redist proto
type IsisRedistProto string

const (
    // Redistributed protocol is Connected
    IsisRedistProto_isis_redist_connected IsisRedistProto = "isis-redist-connected"

    // Redistributed protocol is Static
    IsisRedistProto_isis_redist_static IsisRedistProto = "isis-redist-static"

    // Redistributed protocol is OSPF
    IsisRedistProto_isis_redist_ospf IsisRedistProto = "isis-redist-ospf"

    // Redistributed protocol is BGP
    IsisRedistProto_isis_redist_bgp IsisRedistProto = "isis-redist-bgp"

    // Redistributed protocol is IS-IS
    IsisRedistProto_isis_redist_isis IsisRedistProto = "isis-redist-isis"

    // Redistributed protocol is OSPFv3
    IsisRedistProto_isis_redist_ospfv3 IsisRedistProto = "isis-redist-ospfv3"

    // Redistributed protocol is RIP
    IsisRedistProto_isis_redist_rip IsisRedistProto = "isis-redist-rip"

    // Redistributed protocol is EIGRP
    IsisRedistProto_isis_redist_eigrp IsisRedistProto = "isis-redist-eigrp"

    // Redistributed protocol is Subscriber
    IsisRedistProto_isis_redist_subscriber IsisRedistProto = "isis-redist-subscriber"

    // Redistributed protocol is Application
    IsisRedistProto_isis_redist_application IsisRedistProto = "isis-redist-application"

    // Redistributed protocol is Mobile
    IsisRedistProto_isis_redist_mobile IsisRedistProto = "isis-redist-mobile"
)

// IsisIfTopoDisabledReason represents Isis if topo disabled reason
type IsisIfTopoDisabledReason string

const (
    // isis intf topo disabled not cfg
    IsisIfTopoDisabledReason_isis_intf_topo_disabled_not_cfg IsisIfTopoDisabledReason = "isis-intf-topo-disabled-not-cfg"

    // isis intf topo disabled internal error
    IsisIfTopoDisabledReason_isis_intf_topo_disabled_internal_error IsisIfTopoDisabledReason = "isis-intf-topo-disabled-internal-error"
)

// IsisShRouteAdvOrigin represents Origin of a prefix advertisement
type IsisShRouteAdvOrigin string

const (
    // IS-IS interface prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_interface IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-interface"

    // Redistributed prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_redistributed IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-redistributed"

    // Native prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_native IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-native"

    // Summary prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_summary IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-summary"

    // Explicit origination of default prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_default IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-default"
)

// IsisKnown represents Isis known
type IsisKnown string

const (
    // Unknown
    IsisKnown_isis_unknown IsisKnown = "isis-unknown"

    // Known
    IsisKnown_isis_known IsisKnown = "isis-known"
)

// IsisLevel represents Isis level
type IsisLevel string

const (
    // isis level0
    IsisLevel_isis_level0 IsisLevel = "isis-level0"

    // isis level1
    IsisLevel_isis_level1 IsisLevel = "isis-level1"

    // isis level2
    IsisLevel_isis_level2 IsisLevel = "isis-level2"
)

// IsisIfAdjFormDisabledReason represents Isis if adj form disabled reason
type IsisIfAdjFormDisabledReason string

const (
    // isis intf adj form disabled cfg passive
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_cfg_passive IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-cfg-passive"

    // isis intf adj form disabled no topo participate
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_no_topo_participate IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-no-topo-participate"

    // isis intf adj form disabled add to intf stack
    // fail
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_add_to_intf_stack_fail IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-add-to-intf-stack-fail"

    // isis intf adj form disabled clns io
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_clns_io IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-clns-io"

    // isis intf adj form disabled internal error
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_internal_error IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-internal-error"
)

// IsisPrefixOrigin represents Isis prefix origin
type IsisPrefixOrigin string

const (
    // Level 1 Summary Null Route
    IsisPrefixOrigin_isis_prefix_origin_l1_summary_null IsisPrefixOrigin = "isis-prefix-origin-l1-summary-null"

    // Level 1 Route
    IsisPrefixOrigin_isis_prefix_origin_l1 IsisPrefixOrigin = "isis-prefix-origin-l1"

    // Level 2 Summary Null Route
    IsisPrefixOrigin_isis_prefix_origin_l2_summary_null IsisPrefixOrigin = "isis-prefix-origin-l2-summary-null"

    // Level 2 Route
    IsisPrefixOrigin_isis_prefix_origin_l2 IsisPrefixOrigin = "isis-prefix-origin-l2"

    // Level 1 Interarea Summary Null Route
    IsisPrefixOrigin_isis_prefix_origin_inter_area_summary_null IsisPrefixOrigin = "isis-prefix-origin-inter-area-summary-null"

    // Level 1 Interarea Route
    IsisPrefixOrigin_isis_prefix_origin_inter_area IsisPrefixOrigin = "isis-prefix-origin-inter-area"

    // Nearest Attached Default Route
    IsisPrefixOrigin_isis_prefix_origin_default_nearest_attached IsisPrefixOrigin = "isis-prefix-origin-default-nearest-attached"
)

// IsisIfAfDisabledReason represents Isis if af disabled reason
type IsisIfAfDisabledReason string

const (
    // isis intf af disabled no topo enabled
    IsisIfAfDisabledReason_isis_intf_af_disabled_no_topo_enabled IsisIfAfDisabledReason = "isis-intf-af-disabled-no-topo-enabled"

    // isis intf af disabled internal error
    IsisIfAfDisabledReason_isis_intf_af_disabled_internal_error IsisIfAfDisabledReason = "isis-intf-af-disabled-internal-error"
)

// IsisTilfaComputation represents Isis tilfa computation
type IsisTilfaComputation string

const (
    // isis tilfa comp none
    IsisTilfaComputation_isis_tilfa_comp_none IsisTilfaComputation = "isis-tilfa-comp-none"

    // isis tilfa comp link
    IsisTilfaComputation_isis_tilfa_comp_link IsisTilfaComputation = "isis-tilfa-comp-link"

    // isis tilfa comp node
    IsisTilfaComputation_isis_tilfa_comp_node IsisTilfaComputation = "isis-tilfa-comp-node"

    // isis tilfa comp srlg
    IsisTilfaComputation_isis_tilfa_comp_srlg IsisTilfaComputation = "isis-tilfa-comp-srlg"

    // isis tilfa comp node srlg
    IsisTilfaComputation_isis_tilfa_comp_node_srlg IsisTilfaComputation = "isis-tilfa-comp-node-srlg"
)

// IsisSpfClass represents Types of route calculation
type IsisSpfClass string

const (
    // Remote microloop avoidance SPF
    IsisSpfClass_isis_spf_frr_sr_u_loop IsisSpfClass = "isis-spf-frr-sr-u-loop"

    // FRR per-link SPF
    IsisSpfClass_isis_spf_frr_per_link IsisSpfClass = "isis-spf-frr-per-link"

    // PRC
    IsisSpfClass_isis_spf_partial IsisSpfClass = "isis-spf-partial"

    // FRR per-prefix SPF
    IsisSpfClass_isis_spf_frr_per_prefix IsisSpfClass = "isis-spf-frr-per-prefix"

    // UCMP SPF
    IsisSpfClass_isis_spf_ucmp_calc IsisSpfClass = "isis-spf-ucmp-calc"

    // Next Hop
    IsisSpfClass_isis_spf_next_hop IsisSpfClass = "isis-spf-next-hop"

    // Incremental SPF
    IsisSpfClass_isis_spf_incremental IsisSpfClass = "isis-spf-incremental"

    // Full SPF
    IsisSpfClass_isis_spf_full IsisSpfClass = "isis-spf-full"
)

// IsisValid represents Isis valid
type IsisValid string

const (
    // Invalid
    IsisValid_isis_invalid IsisValid = "isis-invalid"

    // Valid
    IsisValid_isis_valid IsisValid = "isis-valid"
)

// IsisUloopAvoidance represents Isis uloop avoidance
type IsisUloopAvoidance string

const (
    // No MicroLoop avoidance
    IsisUloopAvoidance_isis_u_loop_avoidance_type_none IsisUloopAvoidance = "isis-u-loop-avoidance-type-none"

    // Apply MicroLoop avoidance for all prefixes
    IsisUloopAvoidance_isis_u_loop_avoidance_type_all IsisUloopAvoidance = "isis-u-loop-avoidance-type-all"

    // Apply MicroLoop avoidance only for protected
    // prefixes
    IsisUloopAvoidance_isis_u_loop_avoidance_type_protected IsisUloopAvoidance = "isis-u-loop-avoidance-type-protected"

    // Segment Routing MicroLoop avoidance for All
    // single-link changes
    IsisUloopAvoidance_isis_u_loop_avoidance_type_sr IsisUloopAvoidance = "isis-u-loop-avoidance-type-sr"
)

// Isis
// IS-IS operational data
type Isis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Per-instance operational data.
    Instances Isis_Instances
}

func (isis *Isis) GetFilter() yfilter.YFilter { return isis.YFilter }

func (isis *Isis) SetFilter(yf yfilter.YFilter) { isis.YFilter = yf }

func (isis *Isis) GetGoName(yname string) string {
    if yname == "instances" { return "Instances" }
    return ""
}

func (isis *Isis) GetSegmentPath() string {
    return "Cisco-IOS-XR-clns-isis-oper:isis"
}

func (isis *Isis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instances" {
        return &isis.Instances
    }
    return nil
}

func (isis *Isis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["instances"] = &isis.Instances
    return children
}

func (isis *Isis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (isis *Isis) GetBundleName() string { return "cisco_ios_xr" }

func (isis *Isis) GetYangName() string { return "isis" }

func (isis *Isis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isis *Isis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isis *Isis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isis *Isis) SetParent(parent types.Entity) { isis.parent = parent }

func (isis *Isis) GetParent() types.Entity { return isis.parent }

func (isis *Isis) GetParentYangName() string { return "Cisco-IOS-XR-clns-isis-oper" }

// Isis_Instances
// Per-instance operational data
type Isis_Instances struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IS-IS instance. The type is slice of Isis_Instances_Instance.
    Instance []Isis_Instances_Instance
}

func (instances *Isis_Instances) GetFilter() yfilter.YFilter { return instances.YFilter }

func (instances *Isis_Instances) SetFilter(yf yfilter.YFilter) { instances.YFilter = yf }

func (instances *Isis_Instances) GetGoName(yname string) string {
    if yname == "instance" { return "Instance" }
    return ""
}

func (instances *Isis_Instances) GetSegmentPath() string {
    return "instances"
}

func (instances *Isis_Instances) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instance" {
        for _, c := range instances.Instance {
            if instances.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance{}
        instances.Instance = append(instances.Instance, child)
        return &instances.Instance[len(instances.Instance)-1]
    }
    return nil
}

func (instances *Isis_Instances) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range instances.Instance {
        children[instances.Instance[i].GetSegmentPath()] = &instances.Instance[i]
    }
    return children
}

func (instances *Isis_Instances) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (instances *Isis_Instances) GetBundleName() string { return "cisco_ios_xr" }

func (instances *Isis_Instances) GetYangName() string { return "instances" }

func (instances *Isis_Instances) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instances *Isis_Instances) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instances *Isis_Instances) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instances *Isis_Instances) SetParent(parent types.Entity) { instances.parent = parent }

func (instances *Isis_Instances) GetParent() types.Entity { return instances.parent }

func (instances *Isis_Instances) GetParentYangName() string { return "isis" }

// Isis_Instances_Instance
// IS-IS instance
type Isis_Instances_Instance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Instance identifier. The type is string with
    // length: 1..40.
    InstanceName interface{}

    // Neighbor table.
    Neighbors Isis_Instances_Instance_Neighbors

    // Hostname table.
    HostNames Isis_Instances_Instance_HostNames

    // Per-instance statistics.
    StatisticsGlobal Isis_Instances_Instance_StatisticsGlobal

    // Level table.
    Levels Isis_Instances_Instance_Levels

    // Topology table.
    Topologies Isis_Instances_Instance_Topologies

    // NSR Status information.
    NsrStatus Isis_Instances_Instance_NsrStatus

    // Interface table.
    Interfaces Isis_Instances_Instance_Interfaces

    // Checkpointed adjacency table.
    CheckpointAdjacencies Isis_Instances_Instance_CheckpointAdjacencies

    // Segment Routing Mapping Server operational data.
    Srms Isis_Instances_Instance_Srms

    // Log of errors and warnings.
    ErrorLog Isis_Instances_Instance_ErrorLog

    // Checkpointed interface table.
    CheckpointInterfaces Isis_Instances_Instance_CheckpointInterfaces

    // Interface statistics table.
    InterfaceStatistics Isis_Instances_Instance_InterfaceStatistics

    // Basic protocol information about an IS-IS instance.
    Protocol Isis_Instances_Instance_Protocol

    // Neighbor-summary table.
    NeighborSummaries Isis_Instances_Instance_NeighborSummaries

    // Checkpointed LSP table.
    CheckpointLsps Isis_Instances_Instance_CheckpointLsps

    // Mesh-group information.
    MeshGroups Isis_Instances_Instance_MeshGroups

    // NSR Statistics information.
    NsrStatistics Isis_Instances_Instance_NsrStatistics

    // Checkpointed TE tunnel table.
    CheckpointTeTunnels Isis_Instances_Instance_CheckpointTeTunnels
}

func (instance *Isis_Instances_Instance) GetFilter() yfilter.YFilter { return instance.YFilter }

func (instance *Isis_Instances_Instance) SetFilter(yf yfilter.YFilter) { instance.YFilter = yf }

func (instance *Isis_Instances_Instance) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "host-names" { return "HostNames" }
    if yname == "statistics-global" { return "StatisticsGlobal" }
    if yname == "levels" { return "Levels" }
    if yname == "topologies" { return "Topologies" }
    if yname == "nsr-status" { return "NsrStatus" }
    if yname == "interfaces" { return "Interfaces" }
    if yname == "checkpoint-adjacencies" { return "CheckpointAdjacencies" }
    if yname == "srms" { return "Srms" }
    if yname == "error-log" { return "ErrorLog" }
    if yname == "checkpoint-interfaces" { return "CheckpointInterfaces" }
    if yname == "interface-statistics" { return "InterfaceStatistics" }
    if yname == "protocol" { return "Protocol" }
    if yname == "neighbor-summaries" { return "NeighborSummaries" }
    if yname == "checkpoint-lsps" { return "CheckpointLsps" }
    if yname == "mesh-groups" { return "MeshGroups" }
    if yname == "nsr-statistics" { return "NsrStatistics" }
    if yname == "checkpoint-te-tunnels" { return "CheckpointTeTunnels" }
    return ""
}

func (instance *Isis_Instances_Instance) GetSegmentPath() string {
    return "instance" + "[instance-name='" + fmt.Sprintf("%v", instance.InstanceName) + "']"
}

func (instance *Isis_Instances_Instance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbors" {
        return &instance.Neighbors
    }
    if childYangName == "host-names" {
        return &instance.HostNames
    }
    if childYangName == "statistics-global" {
        return &instance.StatisticsGlobal
    }
    if childYangName == "levels" {
        return &instance.Levels
    }
    if childYangName == "topologies" {
        return &instance.Topologies
    }
    if childYangName == "nsr-status" {
        return &instance.NsrStatus
    }
    if childYangName == "interfaces" {
        return &instance.Interfaces
    }
    if childYangName == "checkpoint-adjacencies" {
        return &instance.CheckpointAdjacencies
    }
    if childYangName == "srms" {
        return &instance.Srms
    }
    if childYangName == "error-log" {
        return &instance.ErrorLog
    }
    if childYangName == "checkpoint-interfaces" {
        return &instance.CheckpointInterfaces
    }
    if childYangName == "interface-statistics" {
        return &instance.InterfaceStatistics
    }
    if childYangName == "protocol" {
        return &instance.Protocol
    }
    if childYangName == "neighbor-summaries" {
        return &instance.NeighborSummaries
    }
    if childYangName == "checkpoint-lsps" {
        return &instance.CheckpointLsps
    }
    if childYangName == "mesh-groups" {
        return &instance.MeshGroups
    }
    if childYangName == "nsr-statistics" {
        return &instance.NsrStatistics
    }
    if childYangName == "checkpoint-te-tunnels" {
        return &instance.CheckpointTeTunnels
    }
    return nil
}

func (instance *Isis_Instances_Instance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbors"] = &instance.Neighbors
    children["host-names"] = &instance.HostNames
    children["statistics-global"] = &instance.StatisticsGlobal
    children["levels"] = &instance.Levels
    children["topologies"] = &instance.Topologies
    children["nsr-status"] = &instance.NsrStatus
    children["interfaces"] = &instance.Interfaces
    children["checkpoint-adjacencies"] = &instance.CheckpointAdjacencies
    children["srms"] = &instance.Srms
    children["error-log"] = &instance.ErrorLog
    children["checkpoint-interfaces"] = &instance.CheckpointInterfaces
    children["interface-statistics"] = &instance.InterfaceStatistics
    children["protocol"] = &instance.Protocol
    children["neighbor-summaries"] = &instance.NeighborSummaries
    children["checkpoint-lsps"] = &instance.CheckpointLsps
    children["mesh-groups"] = &instance.MeshGroups
    children["nsr-statistics"] = &instance.NsrStatistics
    children["checkpoint-te-tunnels"] = &instance.CheckpointTeTunnels
    return children
}

func (instance *Isis_Instances_Instance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = instance.InstanceName
    return leafs
}

func (instance *Isis_Instances_Instance) GetBundleName() string { return "cisco_ios_xr" }

func (instance *Isis_Instances_Instance) GetYangName() string { return "instance" }

func (instance *Isis_Instances_Instance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instance *Isis_Instances_Instance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instance *Isis_Instances_Instance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instance *Isis_Instances_Instance) SetParent(parent types.Entity) { instance.parent = parent }

func (instance *Isis_Instances_Instance) GetParent() types.Entity { return instance.parent }

func (instance *Isis_Instances_Instance) GetParentYangName() string { return "instances" }

// Isis_Instances_Instance_Neighbors
// Neighbor table
type Isis_Instances_Instance_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A single neighbor router. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor.
    Neighbor []Isis_Instances_Instance_Neighbors_Neighbor
}

func (neighbors *Isis_Instances_Instance_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Isis_Instances_Instance_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Isis_Instances_Instance_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Isis_Instances_Instance_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Isis_Instances_Instance_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Isis_Instances_Instance_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Isis_Instances_Instance_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Isis_Instances_Instance_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Isis_Instances_Instance_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Isis_Instances_Instance_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Isis_Instances_Instance_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Isis_Instances_Instance_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Isis_Instances_Instance_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Isis_Instances_Instance_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Isis_Instances_Instance_Neighbors) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_Neighbors_Neighbor
// A single neighbor router
type Isis_Instances_Instance_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSystemId interface{}

    // Neighbor SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Local interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    LocalInterface interface{}

    // Neighbor (adjacency) state. The type is IsisAdjState.
    NeighborState interface{}

    // Circuit type. The type is IsisLevels.
    NeighborCircuitType interface{}

    // TRUE if neighbor is IETF-NSF capable. The type is interface{} with range:
    // 0..4294967295.
    NeighborIetfNsfCapableFlag interface{}

    // Link media type. The type is IsisMediaClass.
    NeighborMediaType interface{}

    // Time (s) until neighbor declared down if no IIH received. The type is
    // interface{} with range: 0..4294967295.
    NeighborHoldtime interface{}

    // TRUE if NeighborUptime is set. The type is bool.
    NeighborUptimeValidFlag interface{}

    // How long the neighbor has been up (s). The type is interface{} with range:
    // 0..4294967295.
    NeighborUptime interface{}

    // ISIS NSR STANDBY. The type is bool.
    NsrStandby interface{}

    // Active area addresses. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress.
    NeighborActiveAreaAddress []Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress

    // Topologies supported by both neighbor and local system. The type is slice
    // of Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported.
    TopologiesSupported []Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported

    // Per address-family data. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData.
    NeighborPerAddressFamilyData []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData
}

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "system-id" { return "SystemId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-system-id" { return "NeighborSystemId" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "local-interface" { return "LocalInterface" }
    if yname == "neighbor-state" { return "NeighborState" }
    if yname == "neighbor-circuit-type" { return "NeighborCircuitType" }
    if yname == "neighbor-ietf-nsf-capable-flag" { return "NeighborIetfNsfCapableFlag" }
    if yname == "neighbor-media-type" { return "NeighborMediaType" }
    if yname == "neighbor-holdtime" { return "NeighborHoldtime" }
    if yname == "neighbor-uptime-valid-flag" { return "NeighborUptimeValidFlag" }
    if yname == "neighbor-uptime" { return "NeighborUptime" }
    if yname == "nsr-standby" { return "NsrStandby" }
    if yname == "neighbor-active-area-address" { return "NeighborActiveAreaAddress" }
    if yname == "topologies-supported" { return "TopologiesSupported" }
    if yname == "neighbor-per-address-family-data" { return "NeighborPerAddressFamilyData" }
    return ""
}

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor"
}

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-active-area-address" {
        for _, c := range neighbor.NeighborActiveAreaAddress {
            if neighbor.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress{}
        neighbor.NeighborActiveAreaAddress = append(neighbor.NeighborActiveAreaAddress, child)
        return &neighbor.NeighborActiveAreaAddress[len(neighbor.NeighborActiveAreaAddress)-1]
    }
    if childYangName == "topologies-supported" {
        for _, c := range neighbor.TopologiesSupported {
            if neighbor.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported{}
        neighbor.TopologiesSupported = append(neighbor.TopologiesSupported, child)
        return &neighbor.TopologiesSupported[len(neighbor.TopologiesSupported)-1]
    }
    if childYangName == "neighbor-per-address-family-data" {
        for _, c := range neighbor.NeighborPerAddressFamilyData {
            if neighbor.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData{}
        neighbor.NeighborPerAddressFamilyData = append(neighbor.NeighborPerAddressFamilyData, child)
        return &neighbor.NeighborPerAddressFamilyData[len(neighbor.NeighborPerAddressFamilyData)-1]
    }
    return nil
}

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbor.NeighborActiveAreaAddress {
        children[neighbor.NeighborActiveAreaAddress[i].GetSegmentPath()] = &neighbor.NeighborActiveAreaAddress[i]
    }
    for i := range neighbor.TopologiesSupported {
        children[neighbor.TopologiesSupported[i].GetSegmentPath()] = &neighbor.TopologiesSupported[i]
    }
    for i := range neighbor.NeighborPerAddressFamilyData {
        children[neighbor.NeighborPerAddressFamilyData[i].GetSegmentPath()] = &neighbor.NeighborPerAddressFamilyData[i]
    }
    return children
}

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-id"] = neighbor.SystemId
    leafs["interface-name"] = neighbor.InterfaceName
    leafs["neighbor-system-id"] = neighbor.NeighborSystemId
    leafs["neighbor-snpa"] = neighbor.NeighborSnpa
    leafs["local-interface"] = neighbor.LocalInterface
    leafs["neighbor-state"] = neighbor.NeighborState
    leafs["neighbor-circuit-type"] = neighbor.NeighborCircuitType
    leafs["neighbor-ietf-nsf-capable-flag"] = neighbor.NeighborIetfNsfCapableFlag
    leafs["neighbor-media-type"] = neighbor.NeighborMediaType
    leafs["neighbor-holdtime"] = neighbor.NeighborHoldtime
    leafs["neighbor-uptime-valid-flag"] = neighbor.NeighborUptimeValidFlag
    leafs["neighbor-uptime"] = neighbor.NeighborUptime
    leafs["nsr-standby"] = neighbor.NsrStandby
    return leafs
}

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress
// Active area addresses
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern: [a-fA-F0-9]{2}(\.[a-fA-F0-9]{4}){0,6}.
    Entry interface{}
}

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetFilter() yfilter.YFilter { return neighborActiveAreaAddress.YFilter }

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) SetFilter(yf yfilter.YFilter) { neighborActiveAreaAddress.YFilter = yf }

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetSegmentPath() string {
    return "neighbor-active-area-address"
}

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = neighborActiveAreaAddress.Entry
    return leafs
}

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetBundleName() string { return "cisco_ios_xr" }

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetYangName() string { return "neighbor-active-area-address" }

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) SetParent(parent types.Entity) { neighborActiveAreaAddress.parent = parent }

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetParent() types.Entity { return neighborActiveAreaAddress.parent }

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetParentYangName() string { return "neighbor" }

// Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported
// Topologies supported by both neighbor and local
// system
type Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetFilter() yfilter.YFilter { return topologiesSupported.YFilter }

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) SetFilter(yf yfilter.YFilter) { topologiesSupported.YFilter = yf }

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "topology-name" { return "TopologyName" }
    return ""
}

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetSegmentPath() string {
    return "topologies-supported"
}

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = topologiesSupported.AfName
    leafs["saf-name"] = topologiesSupported.SafName
    leafs["vrf-name"] = topologiesSupported.VrfName
    leafs["topology-name"] = topologiesSupported.TopologyName
    return leafs
}

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetBundleName() string { return "cisco_ios_xr" }

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetYangName() string { return "topologies-supported" }

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) SetParent(parent types.Entity) { topologiesSupported.parent = parent }

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetParent() types.Entity { return topologiesSupported.parent }

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetParentYangName() string { return "neighbor" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData
// Per address-family data
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // IPV4 neighbor info.
    Ipv4 Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4

    // IPV6 neighbor info.
    Ipv6 Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6
}

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetFilter() yfilter.YFilter { return neighborPerAddressFamilyData.YFilter }

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) SetFilter(yf yfilter.YFilter) { neighborPerAddressFamilyData.YFilter = yf }

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetSegmentPath() string {
    return "neighbor-per-address-family-data"
}

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &neighborPerAddressFamilyData.Ipv4
    }
    if childYangName == "ipv6" {
        return &neighborPerAddressFamilyData.Ipv6
    }
    return nil
}

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &neighborPerAddressFamilyData.Ipv4
    children["ipv6"] = &neighborPerAddressFamilyData.Ipv6
    return children
}

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = neighborPerAddressFamilyData.AfName
    return leafs
}

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetBundleName() string { return "cisco_ios_xr" }

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetYangName() string { return "neighbor-per-address-family-data" }

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) SetParent(parent types.Entity) { neighborPerAddressFamilyData.parent = parent }

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetParent() types.Entity { return neighborPerAddressFamilyData.parent }

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetParentYangName() string { return "neighbor" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4
// IPV4 neighbor info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NextHop interface{}

    // Adjacency SID.
    AdjacencySid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid

    // Adjacency SID not eligible for FRR protection.
    NonFrrAdjacencySid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid

    // Adjacency interface addresses. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress.
    InterfaceAddress []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress

    // Per bundle member Adjacency sid. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid.
    UnderlyingAdjacencySid []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface.
    UnderlyingInterface []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface
}

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetGoName(yname string) string {
    if yname == "next-hop" { return "NextHop" }
    if yname == "adjacency-sid" { return "AdjacencySid" }
    if yname == "non-frr-adjacency-sid" { return "NonFrrAdjacencySid" }
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "underlying-adjacency-sid" { return "UnderlyingAdjacencySid" }
    if yname == "underlying-interface" { return "UnderlyingInterface" }
    return ""
}

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-sid" {
        return &ipv4.AdjacencySid
    }
    if childYangName == "non-frr-adjacency-sid" {
        return &ipv4.NonFrrAdjacencySid
    }
    if childYangName == "interface-address" {
        for _, c := range ipv4.InterfaceAddress {
            if ipv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress{}
        ipv4.InterfaceAddress = append(ipv4.InterfaceAddress, child)
        return &ipv4.InterfaceAddress[len(ipv4.InterfaceAddress)-1]
    }
    if childYangName == "underlying-adjacency-sid" {
        for _, c := range ipv4.UnderlyingAdjacencySid {
            if ipv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid{}
        ipv4.UnderlyingAdjacencySid = append(ipv4.UnderlyingAdjacencySid, child)
        return &ipv4.UnderlyingAdjacencySid[len(ipv4.UnderlyingAdjacencySid)-1]
    }
    if childYangName == "underlying-interface" {
        for _, c := range ipv4.UnderlyingInterface {
            if ipv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface{}
        ipv4.UnderlyingInterface = append(ipv4.UnderlyingInterface, child)
        return &ipv4.UnderlyingInterface[len(ipv4.UnderlyingInterface)-1]
    }
    return nil
}

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-sid"] = &ipv4.AdjacencySid
    children["non-frr-adjacency-sid"] = &ipv4.NonFrrAdjacencySid
    for i := range ipv4.InterfaceAddress {
        children[ipv4.InterfaceAddress[i].GetSegmentPath()] = &ipv4.InterfaceAddress[i]
    }
    for i := range ipv4.UnderlyingAdjacencySid {
        children[ipv4.UnderlyingAdjacencySid[i].GetSegmentPath()] = &ipv4.UnderlyingAdjacencySid[i]
    }
    for i := range ipv4.UnderlyingInterface {
        children[ipv4.UnderlyingInterface[i].GetSegmentPath()] = &ipv4.UnderlyingInterface[i]
    }
    return children
}

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["next-hop"] = ipv4.NextHop
    return leafs
}

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetParentYangName() string { return "neighbor-per-address-family-data" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid
// Adjacency SID
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetFilter() yfilter.YFilter { return adjacencySid.YFilter }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) SetFilter(yf yfilter.YFilter) { adjacencySid.YFilter = yf }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetGoName(yname string) string {
    if yname == "adjacency-sid-value" { return "AdjacencySidValue" }
    if yname == "adjacency-sid-backup" { return "AdjacencySidBackup" }
    if yname == "adjacency-sid-backup-te" { return "AdjacencySidBackupTe" }
    return ""
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetSegmentPath() string {
    return "adjacency-sid"
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-sid-backup" {
        return &adjacencySid.AdjacencySidBackup
    }
    if childYangName == "adjacency-sid-backup-te" {
        return &adjacencySid.AdjacencySidBackupTe
    }
    return nil
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-sid-backup"] = &adjacencySid.AdjacencySidBackup
    children["adjacency-sid-backup-te"] = &adjacencySid.AdjacencySidBackupTe
    return children
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adjacency-sid-value"] = adjacencySid.AdjacencySidValue
    return leafs
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetYangName() string { return "adjacency-sid" }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) SetParent(parent types.Entity) { adjacencySid.parent = parent }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetParent() types.Entity { return adjacencySid.parent }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetParentYangName() string { return "ipv4" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetFilter() yfilter.YFilter { return adjacencySidBackup.YFilter }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) SetFilter(yf yfilter.YFilter) { adjacencySidBackup.YFilter = yf }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetSegmentPath() string {
    return "adjacency-sid-backup"
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackup.BackupLabelStack {
            if adjacencySidBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack{}
        adjacencySidBackup.BackupLabelStack = append(adjacencySidBackup.BackupLabelStack, child)
        return &adjacencySidBackup.BackupLabelStack[len(adjacencySidBackup.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackup.BackupLabelStack {
        children[adjacencySidBackup.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackup.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackup.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackup.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackup.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackup.BackupInterface
    return leafs
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetYangName() string { return "adjacency-sid-backup" }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) SetParent(parent types.Entity) { adjacencySidBackup.parent = parent }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetParent() types.Entity { return adjacencySidBackup.parent }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetParentYangName() string { return "adjacency-sid" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetFilter() yfilter.YFilter { return adjacencySidBackupTe.YFilter }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) SetFilter(yf yfilter.YFilter) { adjacencySidBackupTe.YFilter = yf }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetSegmentPath() string {
    return "adjacency-sid-backup-te"
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackupTe.BackupLabelStack {
            if adjacencySidBackupTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack{}
        adjacencySidBackupTe.BackupLabelStack = append(adjacencySidBackupTe.BackupLabelStack, child)
        return &adjacencySidBackupTe.BackupLabelStack[len(adjacencySidBackupTe.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackupTe.BackupLabelStack {
        children[adjacencySidBackupTe.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackupTe.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackupTe.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackupTe.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackupTe.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackupTe.BackupInterface
    return leafs
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetYangName() string { return "adjacency-sid-backup-te" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) SetParent(parent types.Entity) { adjacencySidBackupTe.parent = parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetParent() types.Entity { return adjacencySidBackupTe.parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetParentYangName() string { return "adjacency-sid" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup-te" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid
// Adjacency SID not eligible for FRR protection
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetFilter() yfilter.YFilter { return nonFrrAdjacencySid.YFilter }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) SetFilter(yf yfilter.YFilter) { nonFrrAdjacencySid.YFilter = yf }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetGoName(yname string) string {
    if yname == "adjacency-sid-value" { return "AdjacencySidValue" }
    if yname == "adjacency-sid-backup" { return "AdjacencySidBackup" }
    if yname == "adjacency-sid-backup-te" { return "AdjacencySidBackupTe" }
    return ""
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetSegmentPath() string {
    return "non-frr-adjacency-sid"
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-sid-backup" {
        return &nonFrrAdjacencySid.AdjacencySidBackup
    }
    if childYangName == "adjacency-sid-backup-te" {
        return &nonFrrAdjacencySid.AdjacencySidBackupTe
    }
    return nil
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-sid-backup"] = &nonFrrAdjacencySid.AdjacencySidBackup
    children["adjacency-sid-backup-te"] = &nonFrrAdjacencySid.AdjacencySidBackupTe
    return children
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adjacency-sid-value"] = nonFrrAdjacencySid.AdjacencySidValue
    return leafs
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetBundleName() string { return "cisco_ios_xr" }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetYangName() string { return "non-frr-adjacency-sid" }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) SetParent(parent types.Entity) { nonFrrAdjacencySid.parent = parent }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetParent() types.Entity { return nonFrrAdjacencySid.parent }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetParentYangName() string { return "ipv4" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetFilter() yfilter.YFilter { return adjacencySidBackup.YFilter }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) SetFilter(yf yfilter.YFilter) { adjacencySidBackup.YFilter = yf }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetSegmentPath() string {
    return "adjacency-sid-backup"
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackup.BackupLabelStack {
            if adjacencySidBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack{}
        adjacencySidBackup.BackupLabelStack = append(adjacencySidBackup.BackupLabelStack, child)
        return &adjacencySidBackup.BackupLabelStack[len(adjacencySidBackup.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackup.BackupLabelStack {
        children[adjacencySidBackup.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackup.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackup.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackup.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackup.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackup.BackupInterface
    return leafs
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetYangName() string { return "adjacency-sid-backup" }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) SetParent(parent types.Entity) { adjacencySidBackup.parent = parent }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetParent() types.Entity { return adjacencySidBackup.parent }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetParentYangName() string { return "non-frr-adjacency-sid" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetFilter() yfilter.YFilter { return adjacencySidBackupTe.YFilter }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) SetFilter(yf yfilter.YFilter) { adjacencySidBackupTe.YFilter = yf }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetSegmentPath() string {
    return "adjacency-sid-backup-te"
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackupTe.BackupLabelStack {
            if adjacencySidBackupTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack{}
        adjacencySidBackupTe.BackupLabelStack = append(adjacencySidBackupTe.BackupLabelStack, child)
        return &adjacencySidBackupTe.BackupLabelStack[len(adjacencySidBackupTe.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackupTe.BackupLabelStack {
        children[adjacencySidBackupTe.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackupTe.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackupTe.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackupTe.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackupTe.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackupTe.BackupInterface
    return leafs
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetYangName() string { return "adjacency-sid-backup-te" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) SetParent(parent types.Entity) { adjacencySidBackupTe.parent = parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetParent() types.Entity { return adjacencySidBackupTe.parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetParentYangName() string { return "non-frr-adjacency-sid" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup-te" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress
// Adjacency interface addresses
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetFilter() yfilter.YFilter { return interfaceAddress.YFilter }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) SetFilter(yf yfilter.YFilter) { interfaceAddress.YFilter = yf }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetSegmentPath() string {
    return "interface-address"
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = interfaceAddress.Entry
    return leafs
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetYangName() string { return "interface-address" }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) SetParent(parent types.Entity) { interfaceAddress.parent = parent }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetParent() types.Entity { return interfaceAddress.parent }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetParentYangName() string { return "ipv4" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid
// Per bundle member Adjacency sid
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetFilter() yfilter.YFilter { return underlyingAdjacencySid.YFilter }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) SetFilter(yf yfilter.YFilter) { underlyingAdjacencySid.YFilter = yf }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetSegmentPath() string {
    return "underlying-adjacency-sid"
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = underlyingAdjacencySid.Entry
    return leafs
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetBundleName() string { return "cisco_ios_xr" }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetYangName() string { return "underlying-adjacency-sid" }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) SetParent(parent types.Entity) { underlyingAdjacencySid.parent = parent }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetParent() types.Entity { return underlyingAdjacencySid.parent }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetParentYangName() string { return "ipv4" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetFilter() yfilter.YFilter { return underlyingInterface.YFilter }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) SetFilter(yf yfilter.YFilter) { underlyingInterface.YFilter = yf }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetSegmentPath() string {
    return "underlying-interface"
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = underlyingInterface.InterfaceHandle
    leafs["interface-name"] = underlyingInterface.InterfaceName
    return leafs
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetBundleName() string { return "cisco_ios_xr" }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetYangName() string { return "underlying-interface" }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) SetParent(parent types.Entity) { underlyingInterface.parent = parent }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetParent() types.Entity { return underlyingInterface.parent }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetParentYangName() string { return "ipv4" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6
// IPV6 neighbor info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency next hop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHop interface{}

    // Adjacency SID.
    AdjacencySid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid

    // Adjacency SID not eligible for FRR protection.
    NonFrrAdjacencySid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid

    // Adjacency interface addresses. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress.
    InterfaceAddress []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress

    // Per bundle member Adjacency sid. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid.
    UnderlyingAdjacencySid []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface.
    UnderlyingInterface []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface
}

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetFilter() yfilter.YFilter { return ipv6.YFilter }

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) SetFilter(yf yfilter.YFilter) { ipv6.YFilter = yf }

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetGoName(yname string) string {
    if yname == "next-hop" { return "NextHop" }
    if yname == "adjacency-sid" { return "AdjacencySid" }
    if yname == "non-frr-adjacency-sid" { return "NonFrrAdjacencySid" }
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "underlying-adjacency-sid" { return "UnderlyingAdjacencySid" }
    if yname == "underlying-interface" { return "UnderlyingInterface" }
    return ""
}

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetSegmentPath() string {
    return "ipv6"
}

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-sid" {
        return &ipv6.AdjacencySid
    }
    if childYangName == "non-frr-adjacency-sid" {
        return &ipv6.NonFrrAdjacencySid
    }
    if childYangName == "interface-address" {
        for _, c := range ipv6.InterfaceAddress {
            if ipv6.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress{}
        ipv6.InterfaceAddress = append(ipv6.InterfaceAddress, child)
        return &ipv6.InterfaceAddress[len(ipv6.InterfaceAddress)-1]
    }
    if childYangName == "underlying-adjacency-sid" {
        for _, c := range ipv6.UnderlyingAdjacencySid {
            if ipv6.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid{}
        ipv6.UnderlyingAdjacencySid = append(ipv6.UnderlyingAdjacencySid, child)
        return &ipv6.UnderlyingAdjacencySid[len(ipv6.UnderlyingAdjacencySid)-1]
    }
    if childYangName == "underlying-interface" {
        for _, c := range ipv6.UnderlyingInterface {
            if ipv6.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface{}
        ipv6.UnderlyingInterface = append(ipv6.UnderlyingInterface, child)
        return &ipv6.UnderlyingInterface[len(ipv6.UnderlyingInterface)-1]
    }
    return nil
}

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-sid"] = &ipv6.AdjacencySid
    children["non-frr-adjacency-sid"] = &ipv6.NonFrrAdjacencySid
    for i := range ipv6.InterfaceAddress {
        children[ipv6.InterfaceAddress[i].GetSegmentPath()] = &ipv6.InterfaceAddress[i]
    }
    for i := range ipv6.UnderlyingAdjacencySid {
        children[ipv6.UnderlyingAdjacencySid[i].GetSegmentPath()] = &ipv6.UnderlyingAdjacencySid[i]
    }
    for i := range ipv6.UnderlyingInterface {
        children[ipv6.UnderlyingInterface[i].GetSegmentPath()] = &ipv6.UnderlyingInterface[i]
    }
    return children
}

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["next-hop"] = ipv6.NextHop
    return leafs
}

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetYangName() string { return "ipv6" }

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) SetParent(parent types.Entity) { ipv6.parent = parent }

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetParent() types.Entity { return ipv6.parent }

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetParentYangName() string { return "neighbor-per-address-family-data" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid
// Adjacency SID
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetFilter() yfilter.YFilter { return adjacencySid.YFilter }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) SetFilter(yf yfilter.YFilter) { adjacencySid.YFilter = yf }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetGoName(yname string) string {
    if yname == "adjacency-sid-value" { return "AdjacencySidValue" }
    if yname == "adjacency-sid-backup" { return "AdjacencySidBackup" }
    if yname == "adjacency-sid-backup-te" { return "AdjacencySidBackupTe" }
    return ""
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetSegmentPath() string {
    return "adjacency-sid"
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-sid-backup" {
        return &adjacencySid.AdjacencySidBackup
    }
    if childYangName == "adjacency-sid-backup-te" {
        return &adjacencySid.AdjacencySidBackupTe
    }
    return nil
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-sid-backup"] = &adjacencySid.AdjacencySidBackup
    children["adjacency-sid-backup-te"] = &adjacencySid.AdjacencySidBackupTe
    return children
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adjacency-sid-value"] = adjacencySid.AdjacencySidValue
    return leafs
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetYangName() string { return "adjacency-sid" }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) SetParent(parent types.Entity) { adjacencySid.parent = parent }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetParent() types.Entity { return adjacencySid.parent }

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetParentYangName() string { return "ipv6" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetFilter() yfilter.YFilter { return adjacencySidBackup.YFilter }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) SetFilter(yf yfilter.YFilter) { adjacencySidBackup.YFilter = yf }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetSegmentPath() string {
    return "adjacency-sid-backup"
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackup.BackupLabelStack {
            if adjacencySidBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack{}
        adjacencySidBackup.BackupLabelStack = append(adjacencySidBackup.BackupLabelStack, child)
        return &adjacencySidBackup.BackupLabelStack[len(adjacencySidBackup.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackup.BackupLabelStack {
        children[adjacencySidBackup.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackup.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackup.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackup.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackup.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackup.BackupInterface
    return leafs
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetYangName() string { return "adjacency-sid-backup" }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) SetParent(parent types.Entity) { adjacencySidBackup.parent = parent }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetParent() types.Entity { return adjacencySidBackup.parent }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetParentYangName() string { return "adjacency-sid" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetFilter() yfilter.YFilter { return adjacencySidBackupTe.YFilter }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) SetFilter(yf yfilter.YFilter) { adjacencySidBackupTe.YFilter = yf }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetSegmentPath() string {
    return "adjacency-sid-backup-te"
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackupTe.BackupLabelStack {
            if adjacencySidBackupTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack{}
        adjacencySidBackupTe.BackupLabelStack = append(adjacencySidBackupTe.BackupLabelStack, child)
        return &adjacencySidBackupTe.BackupLabelStack[len(adjacencySidBackupTe.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackupTe.BackupLabelStack {
        children[adjacencySidBackupTe.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackupTe.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackupTe.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackupTe.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackupTe.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackupTe.BackupInterface
    return leafs
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetYangName() string { return "adjacency-sid-backup-te" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) SetParent(parent types.Entity) { adjacencySidBackupTe.parent = parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetParent() types.Entity { return adjacencySidBackupTe.parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetParentYangName() string { return "adjacency-sid" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup-te" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid
// Adjacency SID not eligible for FRR protection
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetFilter() yfilter.YFilter { return nonFrrAdjacencySid.YFilter }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) SetFilter(yf yfilter.YFilter) { nonFrrAdjacencySid.YFilter = yf }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetGoName(yname string) string {
    if yname == "adjacency-sid-value" { return "AdjacencySidValue" }
    if yname == "adjacency-sid-backup" { return "AdjacencySidBackup" }
    if yname == "adjacency-sid-backup-te" { return "AdjacencySidBackupTe" }
    return ""
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetSegmentPath() string {
    return "non-frr-adjacency-sid"
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-sid-backup" {
        return &nonFrrAdjacencySid.AdjacencySidBackup
    }
    if childYangName == "adjacency-sid-backup-te" {
        return &nonFrrAdjacencySid.AdjacencySidBackupTe
    }
    return nil
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-sid-backup"] = &nonFrrAdjacencySid.AdjacencySidBackup
    children["adjacency-sid-backup-te"] = &nonFrrAdjacencySid.AdjacencySidBackupTe
    return children
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adjacency-sid-value"] = nonFrrAdjacencySid.AdjacencySidValue
    return leafs
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetBundleName() string { return "cisco_ios_xr" }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetYangName() string { return "non-frr-adjacency-sid" }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) SetParent(parent types.Entity) { nonFrrAdjacencySid.parent = parent }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetParent() types.Entity { return nonFrrAdjacencySid.parent }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetParentYangName() string { return "ipv6" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetFilter() yfilter.YFilter { return adjacencySidBackup.YFilter }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) SetFilter(yf yfilter.YFilter) { adjacencySidBackup.YFilter = yf }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetSegmentPath() string {
    return "adjacency-sid-backup"
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackup.BackupLabelStack {
            if adjacencySidBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack{}
        adjacencySidBackup.BackupLabelStack = append(adjacencySidBackup.BackupLabelStack, child)
        return &adjacencySidBackup.BackupLabelStack[len(adjacencySidBackup.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackup.BackupLabelStack {
        children[adjacencySidBackup.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackup.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackup.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackup.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackup.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackup.BackupInterface
    return leafs
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetYangName() string { return "adjacency-sid-backup" }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) SetParent(parent types.Entity) { adjacencySidBackup.parent = parent }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetParent() types.Entity { return adjacencySidBackup.parent }

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetParentYangName() string { return "non-frr-adjacency-sid" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetFilter() yfilter.YFilter { return adjacencySidBackupTe.YFilter }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) SetFilter(yf yfilter.YFilter) { adjacencySidBackupTe.YFilter = yf }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetSegmentPath() string {
    return "adjacency-sid-backup-te"
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackupTe.BackupLabelStack {
            if adjacencySidBackupTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack{}
        adjacencySidBackupTe.BackupLabelStack = append(adjacencySidBackupTe.BackupLabelStack, child)
        return &adjacencySidBackupTe.BackupLabelStack[len(adjacencySidBackupTe.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackupTe.BackupLabelStack {
        children[adjacencySidBackupTe.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackupTe.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackupTe.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackupTe.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackupTe.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackupTe.BackupInterface
    return leafs
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetYangName() string { return "adjacency-sid-backup-te" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) SetParent(parent types.Entity) { adjacencySidBackupTe.parent = parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetParent() types.Entity { return adjacencySidBackupTe.parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetParentYangName() string { return "non-frr-adjacency-sid" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup-te" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress
// Adjacency interface addresses
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetFilter() yfilter.YFilter { return interfaceAddress.YFilter }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) SetFilter(yf yfilter.YFilter) { interfaceAddress.YFilter = yf }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetSegmentPath() string {
    return "interface-address"
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = interfaceAddress.Entry
    return leafs
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetYangName() string { return "interface-address" }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) SetParent(parent types.Entity) { interfaceAddress.parent = parent }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetParent() types.Entity { return interfaceAddress.parent }

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetParentYangName() string { return "ipv6" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid
// Per bundle member Adjacency sid
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetFilter() yfilter.YFilter { return underlyingAdjacencySid.YFilter }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) SetFilter(yf yfilter.YFilter) { underlyingAdjacencySid.YFilter = yf }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetSegmentPath() string {
    return "underlying-adjacency-sid"
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = underlyingAdjacencySid.Entry
    return leafs
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetBundleName() string { return "cisco_ios_xr" }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetYangName() string { return "underlying-adjacency-sid" }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) SetParent(parent types.Entity) { underlyingAdjacencySid.parent = parent }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetParent() types.Entity { return underlyingAdjacencySid.parent }

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetParentYangName() string { return "ipv6" }

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetFilter() yfilter.YFilter { return underlyingInterface.YFilter }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) SetFilter(yf yfilter.YFilter) { underlyingInterface.YFilter = yf }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetSegmentPath() string {
    return "underlying-interface"
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = underlyingInterface.InterfaceHandle
    leafs["interface-name"] = underlyingInterface.InterfaceName
    return leafs
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetBundleName() string { return "cisco_ios_xr" }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetYangName() string { return "underlying-interface" }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) SetParent(parent types.Entity) { underlyingInterface.parent = parent }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetParent() types.Entity { return underlyingInterface.parent }

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetParentYangName() string { return "ipv6" }

// Isis_Instances_Instance_HostNames
// Hostname table
type Isis_Instances_Instance_HostNames struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hostname table entry. The type is slice of
    // Isis_Instances_Instance_HostNames_HostName.
    HostName []Isis_Instances_Instance_HostNames_HostName
}

func (hostNames *Isis_Instances_Instance_HostNames) GetFilter() yfilter.YFilter { return hostNames.YFilter }

func (hostNames *Isis_Instances_Instance_HostNames) SetFilter(yf yfilter.YFilter) { hostNames.YFilter = yf }

func (hostNames *Isis_Instances_Instance_HostNames) GetGoName(yname string) string {
    if yname == "host-name" { return "HostName" }
    return ""
}

func (hostNames *Isis_Instances_Instance_HostNames) GetSegmentPath() string {
    return "host-names"
}

func (hostNames *Isis_Instances_Instance_HostNames) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "host-name" {
        for _, c := range hostNames.HostName {
            if hostNames.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_HostNames_HostName{}
        hostNames.HostName = append(hostNames.HostName, child)
        return &hostNames.HostName[len(hostNames.HostName)-1]
    }
    return nil
}

func (hostNames *Isis_Instances_Instance_HostNames) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hostNames.HostName {
        children[hostNames.HostName[i].GetSegmentPath()] = &hostNames.HostName[i]
    }
    return children
}

func (hostNames *Isis_Instances_Instance_HostNames) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hostNames *Isis_Instances_Instance_HostNames) GetBundleName() string { return "cisco_ios_xr" }

func (hostNames *Isis_Instances_Instance_HostNames) GetYangName() string { return "host-names" }

func (hostNames *Isis_Instances_Instance_HostNames) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hostNames *Isis_Instances_Instance_HostNames) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hostNames *Isis_Instances_Instance_HostNames) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hostNames *Isis_Instances_Instance_HostNames) SetParent(parent types.Entity) { hostNames.parent = parent }

func (hostNames *Isis_Instances_Instance_HostNames) GetParent() types.Entity { return hostNames.parent }

func (hostNames *Isis_Instances_Instance_HostNames) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_HostNames_HostName
// Hostname table entry
type Isis_Instances_Instance_HostNames_HostName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // TRUE if this is the local IS. The type is bool.
    LocalIsFlag interface{}

    // Host levels. The type is IsisLevels.
    HostLevels interface{}

    // Host name. The type is string.
    HostName interface{}
}

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetFilter() yfilter.YFilter { return hostName.YFilter }

func (hostName *Isis_Instances_Instance_HostNames_HostName) SetFilter(yf yfilter.YFilter) { hostName.YFilter = yf }

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetGoName(yname string) string {
    if yname == "system-id" { return "SystemId" }
    if yname == "local-is-flag" { return "LocalIsFlag" }
    if yname == "host-levels" { return "HostLevels" }
    if yname == "host-name" { return "HostName" }
    return ""
}

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetSegmentPath() string {
    return "host-name" + "[system-id='" + fmt.Sprintf("%v", hostName.SystemId) + "']"
}

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-id"] = hostName.SystemId
    leafs["local-is-flag"] = hostName.LocalIsFlag
    leafs["host-levels"] = hostName.HostLevels
    leafs["host-name"] = hostName.HostName
    return leafs
}

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetBundleName() string { return "cisco_ios_xr" }

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetYangName() string { return "host-name" }

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hostName *Isis_Instances_Instance_HostNames_HostName) SetParent(parent types.Entity) { hostName.parent = parent }

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetParent() types.Entity { return hostName.parent }

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetParentYangName() string { return "host-names" }

// Isis_Instances_Instance_StatisticsGlobal
// Per-instance statistics
type Isis_Instances_Instance_StatisticsGlobal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Statistics.
    Statistics Isis_Instances_Instance_StatisticsGlobal_Statistics

    // Per-area data. The type is slice of
    // Isis_Instances_Instance_StatisticsGlobal_PerAreaData.
    PerAreaData []Isis_Instances_Instance_StatisticsGlobal_PerAreaData
}

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetFilter() yfilter.YFilter { return statisticsGlobal.YFilter }

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) SetFilter(yf yfilter.YFilter) { statisticsGlobal.YFilter = yf }

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetGoName(yname string) string {
    if yname == "statistics" { return "Statistics" }
    if yname == "per-area-data" { return "PerAreaData" }
    return ""
}

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetSegmentPath() string {
    return "statistics-global"
}

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "statistics" {
        return &statisticsGlobal.Statistics
    }
    if childYangName == "per-area-data" {
        for _, c := range statisticsGlobal.PerAreaData {
            if statisticsGlobal.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_StatisticsGlobal_PerAreaData{}
        statisticsGlobal.PerAreaData = append(statisticsGlobal.PerAreaData, child)
        return &statisticsGlobal.PerAreaData[len(statisticsGlobal.PerAreaData)-1]
    }
    return nil
}

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["statistics"] = &statisticsGlobal.Statistics
    for i := range statisticsGlobal.PerAreaData {
        children[statisticsGlobal.PerAreaData[i].GetSegmentPath()] = &statisticsGlobal.PerAreaData[i]
    }
    return children
}

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetBundleName() string { return "cisco_ios_xr" }

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetYangName() string { return "statistics-global" }

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) SetParent(parent types.Entity) { statisticsGlobal.parent = parent }

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetParent() types.Entity { return statisticsGlobal.parent }

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_StatisticsGlobal_Statistics
// Statistics
type Isis_Instances_Instance_StatisticsGlobal_Statistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-PSNP cache lookups. The type is interface{} with range: 0..4294967295.
    FastPsnpLookupCount interface{}

    // Fast-PSNP cache hits. The type is interface{} with range: 0..4294967295.
    FastPsnpLookupHitCount interface{}

    // Fast-CSNP cache lookups. The type is interface{} with range: 0..4294967295.
    FastCsnpLookupCount interface{}

    // Fast-CSNP cache hits. The type is interface{} with range: 0..4294967295.
    FastCsnpLookupHitCount interface{}

    // Fast-CSNP cache updates. The type is interface{} with range: 0..4294967295.
    FastCsnpCacheUpdateCount interface{}

    // LSPs received with holdtime 0. The type is interface{} with range:
    // 0..4294967295.
    ZeroHoldtimeLspCount interface{}

    // LSPs received with invalid checksum. The type is interface{} with range:
    // 0..4294967295.
    InvalidChecksumLspCount interface{}

    // IIHs dropped - Not Used. The type is interface{} with range: 0..4294967295.
    IihDroppedCount interface{}

    // LSPs dropped. The type is interface{} with range: 0..4294967295.
    LspDroppedCount interface{}

    // SNPs dropped. The type is interface{} with range: 0..4294967295.
    SnpDroppedCount interface{}

    // Maximum IIH queue length - Not Used. The type is interface{} with range:
    // 0..4294967295.
    MaximumIihQueueLength interface{}

    // Maximum update PDU queue length. The type is interface{} with range:
    // 0..4294967295.
    MaximumPduQueueLength interface{}

    // Update PDU queue length. The type is interface{} with range: 0..4294967295.
    PduQueueLength interface{}

    // Average hello receive rate in packets per second. The type is interface{}
    // with range: 0..4294967295. Units are packet/s.
    AvgHelloRecvRate interface{}

    // Average csnp receive rate in packets per second. The type is interface{}
    // with range: 0..4294967295. Units are packet/s.
    AvgCsnpRecvRate interface{}

    // Average psnp receive rate in packets per second. The type is interface{}
    // with range: 0..4294967295. Units are packet/s.
    AvgPsnpRecvRate interface{}

    // Average LSP receive rate in packets per second. The type is interface{}
    // with range: 0..4294967295. Units are packet/s.
    AvgLspRecvRate interface{}

    // Average hello send rate in packets per second. The type is interface{} with
    // range: 0..4294967295. Units are packet/s.
    AvgHelloSendRate interface{}

    // Average csnp send rate in packets per second. The type is interface{} with
    // range: 0..4294967295. Units are packet/s.
    AvgCsnpSendRate interface{}

    // Average psnp send rate in packets per second. The type is interface{} with
    // range: 0..4294967295. Units are packet/s.
    AvgPsnpSendRate interface{}

    // Average LSP send rate in packets per second. The type is interface{} with
    // range: 0..4294967295. Units are packet/s.
    AvgLspSendRate interface{}

    // Average hello process time.
    AvgHelloProcessTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime

    // Average CSNP process time.
    AvgCsnpProcessTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime

    // Average PSNP process time.
    AvgPsnpProcessTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime

    // Average LSP process time.
    AvgLspProcessTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime

    // Average hello transmit time.
    AvgHelloTransmitTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime

    // Average CSNP transmit time.
    AvgCsnpTransmitTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime

    // Average PSNP transmit time.
    AvgPsnpTransmitTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime

    // Average LSP transmit time.
    AvgLspTransmitTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetFilter() yfilter.YFilter { return statistics.YFilter }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) SetFilter(yf yfilter.YFilter) { statistics.YFilter = yf }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetGoName(yname string) string {
    if yname == "fast-psnp-lookup-count" { return "FastPsnpLookupCount" }
    if yname == "fast-psnp-lookup-hit-count" { return "FastPsnpLookupHitCount" }
    if yname == "fast-csnp-lookup-count" { return "FastCsnpLookupCount" }
    if yname == "fast-csnp-lookup-hit-count" { return "FastCsnpLookupHitCount" }
    if yname == "fast-csnp-cache-update-count" { return "FastCsnpCacheUpdateCount" }
    if yname == "zero-holdtime-lsp-count" { return "ZeroHoldtimeLspCount" }
    if yname == "invalid-checksum-lsp-count" { return "InvalidChecksumLspCount" }
    if yname == "iih-dropped-count" { return "IihDroppedCount" }
    if yname == "lsp-dropped-count" { return "LspDroppedCount" }
    if yname == "snp-dropped-count" { return "SnpDroppedCount" }
    if yname == "maximum-iih-queue-length" { return "MaximumIihQueueLength" }
    if yname == "maximum-pdu-queue-length" { return "MaximumPduQueueLength" }
    if yname == "pdu-queue-length" { return "PduQueueLength" }
    if yname == "avg-hello-recv-rate" { return "AvgHelloRecvRate" }
    if yname == "avg-csnp-recv-rate" { return "AvgCsnpRecvRate" }
    if yname == "avg-psnp-recv-rate" { return "AvgPsnpRecvRate" }
    if yname == "avg-lsp-recv-rate" { return "AvgLspRecvRate" }
    if yname == "avg-hello-send-rate" { return "AvgHelloSendRate" }
    if yname == "avg-csnp-send-rate" { return "AvgCsnpSendRate" }
    if yname == "avg-psnp-send-rate" { return "AvgPsnpSendRate" }
    if yname == "avg-lsp-send-rate" { return "AvgLspSendRate" }
    if yname == "avg-hello-process-time" { return "AvgHelloProcessTime" }
    if yname == "avg-csnp-process-time" { return "AvgCsnpProcessTime" }
    if yname == "avg-psnp-process-time" { return "AvgPsnpProcessTime" }
    if yname == "avg-lsp-process-time" { return "AvgLspProcessTime" }
    if yname == "avg-hello-transmit-time" { return "AvgHelloTransmitTime" }
    if yname == "avg-csnp-transmit-time" { return "AvgCsnpTransmitTime" }
    if yname == "avg-psnp-transmit-time" { return "AvgPsnpTransmitTime" }
    if yname == "avg-lsp-transmit-time" { return "AvgLspTransmitTime" }
    return ""
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetSegmentPath() string {
    return "statistics"
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "avg-hello-process-time" {
        return &statistics.AvgHelloProcessTime
    }
    if childYangName == "avg-csnp-process-time" {
        return &statistics.AvgCsnpProcessTime
    }
    if childYangName == "avg-psnp-process-time" {
        return &statistics.AvgPsnpProcessTime
    }
    if childYangName == "avg-lsp-process-time" {
        return &statistics.AvgLspProcessTime
    }
    if childYangName == "avg-hello-transmit-time" {
        return &statistics.AvgHelloTransmitTime
    }
    if childYangName == "avg-csnp-transmit-time" {
        return &statistics.AvgCsnpTransmitTime
    }
    if childYangName == "avg-psnp-transmit-time" {
        return &statistics.AvgPsnpTransmitTime
    }
    if childYangName == "avg-lsp-transmit-time" {
        return &statistics.AvgLspTransmitTime
    }
    return nil
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["avg-hello-process-time"] = &statistics.AvgHelloProcessTime
    children["avg-csnp-process-time"] = &statistics.AvgCsnpProcessTime
    children["avg-psnp-process-time"] = &statistics.AvgPsnpProcessTime
    children["avg-lsp-process-time"] = &statistics.AvgLspProcessTime
    children["avg-hello-transmit-time"] = &statistics.AvgHelloTransmitTime
    children["avg-csnp-transmit-time"] = &statistics.AvgCsnpTransmitTime
    children["avg-psnp-transmit-time"] = &statistics.AvgPsnpTransmitTime
    children["avg-lsp-transmit-time"] = &statistics.AvgLspTransmitTime
    return children
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-psnp-lookup-count"] = statistics.FastPsnpLookupCount
    leafs["fast-psnp-lookup-hit-count"] = statistics.FastPsnpLookupHitCount
    leafs["fast-csnp-lookup-count"] = statistics.FastCsnpLookupCount
    leafs["fast-csnp-lookup-hit-count"] = statistics.FastCsnpLookupHitCount
    leafs["fast-csnp-cache-update-count"] = statistics.FastCsnpCacheUpdateCount
    leafs["zero-holdtime-lsp-count"] = statistics.ZeroHoldtimeLspCount
    leafs["invalid-checksum-lsp-count"] = statistics.InvalidChecksumLspCount
    leafs["iih-dropped-count"] = statistics.IihDroppedCount
    leafs["lsp-dropped-count"] = statistics.LspDroppedCount
    leafs["snp-dropped-count"] = statistics.SnpDroppedCount
    leafs["maximum-iih-queue-length"] = statistics.MaximumIihQueueLength
    leafs["maximum-pdu-queue-length"] = statistics.MaximumPduQueueLength
    leafs["pdu-queue-length"] = statistics.PduQueueLength
    leafs["avg-hello-recv-rate"] = statistics.AvgHelloRecvRate
    leafs["avg-csnp-recv-rate"] = statistics.AvgCsnpRecvRate
    leafs["avg-psnp-recv-rate"] = statistics.AvgPsnpRecvRate
    leafs["avg-lsp-recv-rate"] = statistics.AvgLspRecvRate
    leafs["avg-hello-send-rate"] = statistics.AvgHelloSendRate
    leafs["avg-csnp-send-rate"] = statistics.AvgCsnpSendRate
    leafs["avg-psnp-send-rate"] = statistics.AvgPsnpSendRate
    leafs["avg-lsp-send-rate"] = statistics.AvgLspSendRate
    return leafs
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetBundleName() string { return "cisco_ios_xr" }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetYangName() string { return "statistics" }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) SetParent(parent types.Entity) { statistics.parent = parent }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetParent() types.Entity { return statistics.parent }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetParentYangName() string { return "statistics-global" }

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime
// Average hello process time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetFilter() yfilter.YFilter { return avgHelloProcessTime.YFilter }

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) SetFilter(yf yfilter.YFilter) { avgHelloProcessTime.YFilter = yf }

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetSegmentPath() string {
    return "avg-hello-process-time"
}

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = avgHelloProcessTime.Seconds
    leafs["nano-seconds"] = avgHelloProcessTime.NanoSeconds
    return leafs
}

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetBundleName() string { return "cisco_ios_xr" }

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetYangName() string { return "avg-hello-process-time" }

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) SetParent(parent types.Entity) { avgHelloProcessTime.parent = parent }

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetParent() types.Entity { return avgHelloProcessTime.parent }

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetParentYangName() string { return "statistics" }

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime
// Average CSNP process time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetFilter() yfilter.YFilter { return avgCsnpProcessTime.YFilter }

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) SetFilter(yf yfilter.YFilter) { avgCsnpProcessTime.YFilter = yf }

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetSegmentPath() string {
    return "avg-csnp-process-time"
}

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = avgCsnpProcessTime.Seconds
    leafs["nano-seconds"] = avgCsnpProcessTime.NanoSeconds
    return leafs
}

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetBundleName() string { return "cisco_ios_xr" }

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetYangName() string { return "avg-csnp-process-time" }

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) SetParent(parent types.Entity) { avgCsnpProcessTime.parent = parent }

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetParent() types.Entity { return avgCsnpProcessTime.parent }

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetParentYangName() string { return "statistics" }

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime
// Average PSNP process time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetFilter() yfilter.YFilter { return avgPsnpProcessTime.YFilter }

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) SetFilter(yf yfilter.YFilter) { avgPsnpProcessTime.YFilter = yf }

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetSegmentPath() string {
    return "avg-psnp-process-time"
}

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = avgPsnpProcessTime.Seconds
    leafs["nano-seconds"] = avgPsnpProcessTime.NanoSeconds
    return leafs
}

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetBundleName() string { return "cisco_ios_xr" }

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetYangName() string { return "avg-psnp-process-time" }

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) SetParent(parent types.Entity) { avgPsnpProcessTime.parent = parent }

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetParent() types.Entity { return avgPsnpProcessTime.parent }

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetParentYangName() string { return "statistics" }

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime
// Average LSP process time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetFilter() yfilter.YFilter { return avgLspProcessTime.YFilter }

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) SetFilter(yf yfilter.YFilter) { avgLspProcessTime.YFilter = yf }

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetSegmentPath() string {
    return "avg-lsp-process-time"
}

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = avgLspProcessTime.Seconds
    leafs["nano-seconds"] = avgLspProcessTime.NanoSeconds
    return leafs
}

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetBundleName() string { return "cisco_ios_xr" }

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetYangName() string { return "avg-lsp-process-time" }

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) SetParent(parent types.Entity) { avgLspProcessTime.parent = parent }

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetParent() types.Entity { return avgLspProcessTime.parent }

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetParentYangName() string { return "statistics" }

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime
// Average hello transmit time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetFilter() yfilter.YFilter { return avgHelloTransmitTime.YFilter }

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) SetFilter(yf yfilter.YFilter) { avgHelloTransmitTime.YFilter = yf }

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetSegmentPath() string {
    return "avg-hello-transmit-time"
}

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = avgHelloTransmitTime.Seconds
    leafs["nano-seconds"] = avgHelloTransmitTime.NanoSeconds
    return leafs
}

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetBundleName() string { return "cisco_ios_xr" }

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetYangName() string { return "avg-hello-transmit-time" }

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) SetParent(parent types.Entity) { avgHelloTransmitTime.parent = parent }

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetParent() types.Entity { return avgHelloTransmitTime.parent }

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetParentYangName() string { return "statistics" }

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime
// Average CSNP transmit time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetFilter() yfilter.YFilter { return avgCsnpTransmitTime.YFilter }

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) SetFilter(yf yfilter.YFilter) { avgCsnpTransmitTime.YFilter = yf }

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetSegmentPath() string {
    return "avg-csnp-transmit-time"
}

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = avgCsnpTransmitTime.Seconds
    leafs["nano-seconds"] = avgCsnpTransmitTime.NanoSeconds
    return leafs
}

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetBundleName() string { return "cisco_ios_xr" }

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetYangName() string { return "avg-csnp-transmit-time" }

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) SetParent(parent types.Entity) { avgCsnpTransmitTime.parent = parent }

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetParent() types.Entity { return avgCsnpTransmitTime.parent }

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetParentYangName() string { return "statistics" }

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime
// Average PSNP transmit time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetFilter() yfilter.YFilter { return avgPsnpTransmitTime.YFilter }

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) SetFilter(yf yfilter.YFilter) { avgPsnpTransmitTime.YFilter = yf }

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetSegmentPath() string {
    return "avg-psnp-transmit-time"
}

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = avgPsnpTransmitTime.Seconds
    leafs["nano-seconds"] = avgPsnpTransmitTime.NanoSeconds
    return leafs
}

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetBundleName() string { return "cisco_ios_xr" }

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetYangName() string { return "avg-psnp-transmit-time" }

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) SetParent(parent types.Entity) { avgPsnpTransmitTime.parent = parent }

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetParent() types.Entity { return avgPsnpTransmitTime.parent }

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetParentYangName() string { return "statistics" }

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime
// Average LSP transmit time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetFilter() yfilter.YFilter { return avgLspTransmitTime.YFilter }

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) SetFilter(yf yfilter.YFilter) { avgLspTransmitTime.YFilter = yf }

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetSegmentPath() string {
    return "avg-lsp-transmit-time"
}

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = avgLspTransmitTime.Seconds
    leafs["nano-seconds"] = avgLspTransmitTime.NanoSeconds
    return leafs
}

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetBundleName() string { return "cisco_ios_xr" }

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetYangName() string { return "avg-lsp-transmit-time" }

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) SetParent(parent types.Entity) { avgLspTransmitTime.parent = parent }

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetParent() types.Entity { return avgLspTransmitTime.parent }

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetParentYangName() string { return "statistics" }

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData
// Per-area data
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level this data applies to. The type is IsisLevel.
    Level interface{}

    // Statistics.
    Statistics Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics

    // Per-topoogy statistics. The type is slice of
    // Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData.
    PerTopologyData []Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData
}

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetFilter() yfilter.YFilter { return perAreaData.YFilter }

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) SetFilter(yf yfilter.YFilter) { perAreaData.YFilter = yf }

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "statistics" { return "Statistics" }
    if yname == "per-topology-data" { return "PerTopologyData" }
    return ""
}

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetSegmentPath() string {
    return "per-area-data"
}

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "statistics" {
        return &perAreaData.Statistics
    }
    if childYangName == "per-topology-data" {
        for _, c := range perAreaData.PerTopologyData {
            if perAreaData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData{}
        perAreaData.PerTopologyData = append(perAreaData.PerTopologyData, child)
        return &perAreaData.PerTopologyData[len(perAreaData.PerTopologyData)-1]
    }
    return nil
}

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["statistics"] = &perAreaData.Statistics
    for i := range perAreaData.PerTopologyData {
        children[perAreaData.PerTopologyData[i].GetSegmentPath()] = &perAreaData.PerTopologyData[i]
    }
    return children
}

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = perAreaData.Level
    return leafs
}

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetBundleName() string { return "cisco_ios_xr" }

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetYangName() string { return "per-area-data" }

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) SetParent(parent types.Entity) { perAreaData.parent = parent }

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetParent() types.Entity { return perAreaData.parent }

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetParentYangName() string { return "statistics-global" }

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics
// Statistics
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of times system LSP rebuilt. The type is interface{} with range:
    // 0..4294967295.
    SystemLspBuildCount interface{}

    // Number of times system LSP refreshed. The type is interface{} with range:
    // 0..4294967295.
    SystemLspRefreshCount interface{}
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetFilter() yfilter.YFilter { return statistics.YFilter }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) SetFilter(yf yfilter.YFilter) { statistics.YFilter = yf }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetGoName(yname string) string {
    if yname == "system-lsp-build-count" { return "SystemLspBuildCount" }
    if yname == "system-lsp-refresh-count" { return "SystemLspRefreshCount" }
    return ""
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetSegmentPath() string {
    return "statistics"
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-lsp-build-count"] = statistics.SystemLspBuildCount
    leafs["system-lsp-refresh-count"] = statistics.SystemLspRefreshCount
    return leafs
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetBundleName() string { return "cisco_ios_xr" }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetYangName() string { return "statistics" }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) SetParent(parent types.Entity) { statistics.parent = parent }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetParent() types.Entity { return statistics.parent }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetParentYangName() string { return "per-area-data" }

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData
// Per-topoogy statistics
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology ID.
    Id Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id

    // Statistics.
    Statistics Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics
}

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetFilter() yfilter.YFilter { return perTopologyData.YFilter }

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) SetFilter(yf yfilter.YFilter) { perTopologyData.YFilter = yf }

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetGoName(yname string) string {
    if yname == "id" { return "Id" }
    if yname == "statistics" { return "Statistics" }
    return ""
}

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetSegmentPath() string {
    return "per-topology-data"
}

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "id" {
        return &perTopologyData.Id
    }
    if childYangName == "statistics" {
        return &perTopologyData.Statistics
    }
    return nil
}

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["id"] = &perTopologyData.Id
    children["statistics"] = &perTopologyData.Statistics
    return children
}

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetBundleName() string { return "cisco_ios_xr" }

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetYangName() string { return "per-topology-data" }

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) SetParent(parent types.Entity) { perTopologyData.parent = parent }

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetParent() types.Entity { return perTopologyData.parent }

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetParentYangName() string { return "per-area-data" }

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id
// Topology ID
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetFilter() yfilter.YFilter { return id.YFilter }

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) SetFilter(yf yfilter.YFilter) { id.YFilter = yf }

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "topology-name" { return "TopologyName" }
    return ""
}

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetSegmentPath() string {
    return "id"
}

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = id.AfName
    leafs["saf-name"] = id.SafName
    leafs["vrf-name"] = id.VrfName
    leafs["topology-name"] = id.TopologyName
    return leafs
}

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetBundleName() string { return "cisco_ios_xr" }

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetYangName() string { return "id" }

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) SetParent(parent types.Entity) { id.parent = parent }

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetParent() types.Entity { return id.parent }

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetParentYangName() string { return "per-topology-data" }

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics
// Statistics
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of full SPF calculations run. The type is interface{} with range:
    // 0..4294967295.
    SpfRunCount interface{}

    // Number of ISPF calculations run. The type is interface{} with range:
    // 0..4294967295.
    IspfRunCount interface{}

    // Number of Next Hop Calculations run. The type is interface{} with range:
    // 0..4294967295.
    NhcRunCount interface{}

    // Number of PRCs run. The type is interface{} with range: 0..4294967295.
    PrcRunCount interface{}

    // Number of periodic SPF calculations run. The type is interface{} with
    // range: 0..4294967295.
    PeriodicRunCount interface{}
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetFilter() yfilter.YFilter { return statistics.YFilter }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) SetFilter(yf yfilter.YFilter) { statistics.YFilter = yf }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetGoName(yname string) string {
    if yname == "spf-run-count" { return "SpfRunCount" }
    if yname == "ispf-run-count" { return "IspfRunCount" }
    if yname == "nhc-run-count" { return "NhcRunCount" }
    if yname == "prc-run-count" { return "PrcRunCount" }
    if yname == "periodic-run-count" { return "PeriodicRunCount" }
    return ""
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetSegmentPath() string {
    return "statistics"
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["spf-run-count"] = statistics.SpfRunCount
    leafs["ispf-run-count"] = statistics.IspfRunCount
    leafs["nhc-run-count"] = statistics.NhcRunCount
    leafs["prc-run-count"] = statistics.PrcRunCount
    leafs["periodic-run-count"] = statistics.PeriodicRunCount
    return leafs
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetBundleName() string { return "cisco_ios_xr" }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetYangName() string { return "statistics" }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) SetParent(parent types.Entity) { statistics.parent = parent }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetParent() types.Entity { return statistics.parent }

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetParentYangName() string { return "per-topology-data" }

// Isis_Instances_Instance_Levels
// Level table
type Isis_Instances_Instance_Levels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Per-level operational data. The type is slice of
    // Isis_Instances_Instance_Levels_Level.
    Level []Isis_Instances_Instance_Levels_Level
}

func (levels *Isis_Instances_Instance_Levels) GetFilter() yfilter.YFilter { return levels.YFilter }

func (levels *Isis_Instances_Instance_Levels) SetFilter(yf yfilter.YFilter) { levels.YFilter = yf }

func (levels *Isis_Instances_Instance_Levels) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    return ""
}

func (levels *Isis_Instances_Instance_Levels) GetSegmentPath() string {
    return "levels"
}

func (levels *Isis_Instances_Instance_Levels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "level" {
        for _, c := range levels.Level {
            if levels.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level{}
        levels.Level = append(levels.Level, child)
        return &levels.Level[len(levels.Level)-1]
    }
    return nil
}

func (levels *Isis_Instances_Instance_Levels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range levels.Level {
        children[levels.Level[i].GetSegmentPath()] = &levels.Level[i]
    }
    return children
}

func (levels *Isis_Instances_Instance_Levels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (levels *Isis_Instances_Instance_Levels) GetBundleName() string { return "cisco_ios_xr" }

func (levels *Isis_Instances_Instance_Levels) GetYangName() string { return "levels" }

func (levels *Isis_Instances_Instance_Levels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (levels *Isis_Instances_Instance_Levels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (levels *Isis_Instances_Instance_Levels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (levels *Isis_Instances_Instance_Levels) SetParent(parent types.Entity) { levels.parent = parent }

func (levels *Isis_Instances_Instance_Levels) GetParent() types.Entity { return levels.parent }

func (levels *Isis_Instances_Instance_Levels) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_Levels_Level
// Per-level operational data
type Isis_Instances_Instance_Levels_Level struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Level. The type is IsisInternalLevel.
    Level interface{}

    // Log of adjacency changes within a single level.
    AdjacencyLog Isis_Instances_Instance_Levels_Level_AdjacencyLog

    // Summary information for one level's LSP database.
    LspTableSummary Isis_Instances_Instance_Levels_Level_LspTableSummary

    // Adjacency table.
    Adjacencies Isis_Instances_Instance_Levels_Level_Adjacencies

    // Detailed LSP table. Use to retrieve LSPs with TLV content.
    DetailedLsps Isis_Instances_Instance_Levels_Level_DetailedLsps

    // LSP table.
    Lsps Isis_Instances_Instance_Levels_Level_Lsps

    // LSP-log for a single level.
    LspLog Isis_Instances_Instance_Levels_Level_LspLog

    // Database-log for a single level.
    DatabaseLog Isis_Instances_Instance_Levels_Level_DatabaseLog
}

func (level *Isis_Instances_Instance_Levels_Level) GetFilter() yfilter.YFilter { return level.YFilter }

func (level *Isis_Instances_Instance_Levels_Level) SetFilter(yf yfilter.YFilter) { level.YFilter = yf }

func (level *Isis_Instances_Instance_Levels_Level) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "adjacency-log" { return "AdjacencyLog" }
    if yname == "lsp-table-summary" { return "LspTableSummary" }
    if yname == "adjacencies" { return "Adjacencies" }
    if yname == "detailed-lsps" { return "DetailedLsps" }
    if yname == "lsps" { return "Lsps" }
    if yname == "lsp-log" { return "LspLog" }
    if yname == "database-log" { return "DatabaseLog" }
    return ""
}

func (level *Isis_Instances_Instance_Levels_Level) GetSegmentPath() string {
    return "level" + "[level='" + fmt.Sprintf("%v", level.Level) + "']"
}

func (level *Isis_Instances_Instance_Levels_Level) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-log" {
        return &level.AdjacencyLog
    }
    if childYangName == "lsp-table-summary" {
        return &level.LspTableSummary
    }
    if childYangName == "adjacencies" {
        return &level.Adjacencies
    }
    if childYangName == "detailed-lsps" {
        return &level.DetailedLsps
    }
    if childYangName == "lsps" {
        return &level.Lsps
    }
    if childYangName == "lsp-log" {
        return &level.LspLog
    }
    if childYangName == "database-log" {
        return &level.DatabaseLog
    }
    return nil
}

func (level *Isis_Instances_Instance_Levels_Level) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-log"] = &level.AdjacencyLog
    children["lsp-table-summary"] = &level.LspTableSummary
    children["adjacencies"] = &level.Adjacencies
    children["detailed-lsps"] = &level.DetailedLsps
    children["lsps"] = &level.Lsps
    children["lsp-log"] = &level.LspLog
    children["database-log"] = &level.DatabaseLog
    return children
}

func (level *Isis_Instances_Instance_Levels_Level) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = level.Level
    return leafs
}

func (level *Isis_Instances_Instance_Levels_Level) GetBundleName() string { return "cisco_ios_xr" }

func (level *Isis_Instances_Instance_Levels_Level) GetYangName() string { return "level" }

func (level *Isis_Instances_Instance_Levels_Level) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (level *Isis_Instances_Instance_Levels_Level) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (level *Isis_Instances_Instance_Levels_Level) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (level *Isis_Instances_Instance_Levels_Level) SetParent(parent types.Entity) { level.parent = parent }

func (level *Isis_Instances_Instance_Levels_Level) GetParent() types.Entity { return level.parent }

func (level *Isis_Instances_Instance_Levels_Level) GetParentYangName() string { return "levels" }

// Isis_Instances_Instance_Levels_Level_AdjacencyLog
// Log of adjacency changes within a single
// level
type Isis_Instances_Instance_Levels_Level_AdjacencyLog struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency Log entries. The type is slice of
    // Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry.
    LogEntry []Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry
}

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetFilter() yfilter.YFilter { return adjacencyLog.YFilter }

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) SetFilter(yf yfilter.YFilter) { adjacencyLog.YFilter = yf }

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetGoName(yname string) string {
    if yname == "log-entry" { return "LogEntry" }
    return ""
}

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetSegmentPath() string {
    return "adjacency-log"
}

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "log-entry" {
        for _, c := range adjacencyLog.LogEntry {
            if adjacencyLog.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry{}
        adjacencyLog.LogEntry = append(adjacencyLog.LogEntry, child)
        return &adjacencyLog.LogEntry[len(adjacencyLog.LogEntry)-1]
    }
    return nil
}

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencyLog.LogEntry {
        children[adjacencyLog.LogEntry[i].GetSegmentPath()] = &adjacencyLog.LogEntry[i]
    }
    return children
}

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetYangName() string { return "adjacency-log" }

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) SetParent(parent types.Entity) { adjacencyLog.parent = parent }

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetParent() types.Entity { return adjacencyLog.parent }

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetParentYangName() string { return "level" }

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry
// Adjacency Log entries
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    AdjLogNeighborSystemId interface{}

    // Interface name. The type is string.
    InterfaceName interface{}

    // Previous adjacency state. The type is IsisAdjState.
    PrevAdjState interface{}

    // Current adjacency state. The type is IsisAdjState.
    CurAdjState interface{}

    // Reason adjacency changed state. The type is IsisAdjStateReason.
    StateReason interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData

    // Per-topology changes. The type is slice of
    // Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange.
    AdjacencyPerTopologyChange []Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange
}

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetFilter() yfilter.YFilter { return logEntry.YFilter }

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) SetFilter(yf yfilter.YFilter) { logEntry.YFilter = yf }

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetGoName(yname string) string {
    if yname == "adj-log-neighbor-system-id" { return "AdjLogNeighborSystemId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "prev-adj-state" { return "PrevAdjState" }
    if yname == "cur-adj-state" { return "CurAdjState" }
    if yname == "state-reason" { return "StateReason" }
    if yname == "generic-data" { return "GenericData" }
    if yname == "adjacency-per-topology-change" { return "AdjacencyPerTopologyChange" }
    return ""
}

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetSegmentPath() string {
    return "log-entry"
}

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-data" {
        return &logEntry.GenericData
    }
    if childYangName == "adjacency-per-topology-change" {
        for _, c := range logEntry.AdjacencyPerTopologyChange {
            if logEntry.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange{}
        logEntry.AdjacencyPerTopologyChange = append(logEntry.AdjacencyPerTopologyChange, child)
        return &logEntry.AdjacencyPerTopologyChange[len(logEntry.AdjacencyPerTopologyChange)-1]
    }
    return nil
}

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-data"] = &logEntry.GenericData
    for i := range logEntry.AdjacencyPerTopologyChange {
        children[logEntry.AdjacencyPerTopologyChange[i].GetSegmentPath()] = &logEntry.AdjacencyPerTopologyChange[i]
    }
    return children
}

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adj-log-neighbor-system-id"] = logEntry.AdjLogNeighborSystemId
    leafs["interface-name"] = logEntry.InterfaceName
    leafs["prev-adj-state"] = logEntry.PrevAdjState
    leafs["cur-adj-state"] = logEntry.CurAdjState
    leafs["state-reason"] = logEntry.StateReason
    return leafs
}

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetBundleName() string { return "cisco_ios_xr" }

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetYangName() string { return "log-entry" }

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) SetParent(parent types.Entity) { logEntry.parent = parent }

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetParent() types.Entity { return logEntry.parent }

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetParentYangName() string { return "adjacency-log" }

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetFilter() yfilter.YFilter { return genericData.YFilter }

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) SetFilter(yf yfilter.YFilter) { genericData.YFilter = yf }

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetGoName(yname string) string {
    if yname == "timestamp" { return "Timestamp" }
    return ""
}

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetSegmentPath() string {
    return "generic-data"
}

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "timestamp" {
        return &genericData.Timestamp
    }
    return nil
}

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["timestamp"] = &genericData.Timestamp
    return children
}

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetBundleName() string { return "cisco_ios_xr" }

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetYangName() string { return "generic-data" }

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) SetParent(parent types.Entity) { genericData.parent = parent }

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetParent() types.Entity { return genericData.parent }

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetFilter() yfilter.YFilter { return timestamp.YFilter }

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) SetFilter(yf yfilter.YFilter) { timestamp.YFilter = yf }

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetSegmentPath() string {
    return "timestamp"
}

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = timestamp.Seconds
    leafs["nano-seconds"] = timestamp.NanoSeconds
    return leafs
}

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetBundleName() string { return "cisco_ios_xr" }

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetYangName() string { return "timestamp" }

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) SetParent(parent types.Entity) { timestamp.parent = parent }

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetParent() types.Entity { return timestamp.parent }

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetParentYangName() string { return "generic-data" }

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange
// Per-topology changes
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Change. The type is IsisAdjTopoChange.
    Change interface{}

    // Topology ID.
    Id Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id
}

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetFilter() yfilter.YFilter { return adjacencyPerTopologyChange.YFilter }

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) SetFilter(yf yfilter.YFilter) { adjacencyPerTopologyChange.YFilter = yf }

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetGoName(yname string) string {
    if yname == "change" { return "Change" }
    if yname == "id" { return "Id" }
    return ""
}

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetSegmentPath() string {
    return "adjacency-per-topology-change"
}

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "id" {
        return &adjacencyPerTopologyChange.Id
    }
    return nil
}

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["id"] = &adjacencyPerTopologyChange.Id
    return children
}

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["change"] = adjacencyPerTopologyChange.Change
    return leafs
}

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetYangName() string { return "adjacency-per-topology-change" }

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) SetParent(parent types.Entity) { adjacencyPerTopologyChange.parent = parent }

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetParent() types.Entity { return adjacencyPerTopologyChange.parent }

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id
// Topology ID
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetFilter() yfilter.YFilter { return id.YFilter }

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) SetFilter(yf yfilter.YFilter) { id.YFilter = yf }

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "topology-name" { return "TopologyName" }
    return ""
}

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetSegmentPath() string {
    return "id"
}

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = id.AfName
    leafs["saf-name"] = id.SafName
    leafs["vrf-name"] = id.VrfName
    leafs["topology-name"] = id.TopologyName
    return leafs
}

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetBundleName() string { return "cisco_ios_xr" }

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetYangName() string { return "id" }

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) SetParent(parent types.Entity) { id.parent = parent }

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetParent() types.Entity { return id.parent }

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetParentYangName() string { return "adjacency-per-topology-change" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary
// Summary information for one level's LSP
// database
type Isis_Instances_Instance_Levels_Level_LspTableSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Statistics for fragment 0 LSPs.
    Fragment0LspStats Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats

    // Statistics for all LSP fragments.
    AllFragmentLspStats Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats
}

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetFilter() yfilter.YFilter { return lspTableSummary.YFilter }

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) SetFilter(yf yfilter.YFilter) { lspTableSummary.YFilter = yf }

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetGoName(yname string) string {
    if yname == "fragment0lsp-stats" { return "Fragment0LspStats" }
    if yname == "all-fragment-lsp-stats" { return "AllFragmentLspStats" }
    return ""
}

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetSegmentPath() string {
    return "lsp-table-summary"
}

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fragment0lsp-stats" {
        return &lspTableSummary.Fragment0LspStats
    }
    if childYangName == "all-fragment-lsp-stats" {
        return &lspTableSummary.AllFragmentLspStats
    }
    return nil
}

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fragment0lsp-stats"] = &lspTableSummary.Fragment0LspStats
    children["all-fragment-lsp-stats"] = &lspTableSummary.AllFragmentLspStats
    return children
}

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetBundleName() string { return "cisco_ios_xr" }

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetYangName() string { return "lsp-table-summary" }

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) SetParent(parent types.Entity) { lspTableSummary.parent = parent }

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetParent() types.Entity { return lspTableSummary.parent }

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetParentYangName() string { return "level" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats
// Statistics for fragment 0 LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary by class of node.
    NodeCounters Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters

    // Per topology counters. The type is slice of
    // Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter.
    PerTopologyCounter []Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter
}

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetFilter() yfilter.YFilter { return fragment0LspStats.YFilter }

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) SetFilter(yf yfilter.YFilter) { fragment0LspStats.YFilter = yf }

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetGoName(yname string) string {
    if yname == "node-counters" { return "NodeCounters" }
    if yname == "per-topology-counter" { return "PerTopologyCounter" }
    return ""
}

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetSegmentPath() string {
    return "fragment0lsp-stats"
}

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-counters" {
        return &fragment0LspStats.NodeCounters
    }
    if childYangName == "per-topology-counter" {
        for _, c := range fragment0LspStats.PerTopologyCounter {
            if fragment0LspStats.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter{}
        fragment0LspStats.PerTopologyCounter = append(fragment0LspStats.PerTopologyCounter, child)
        return &fragment0LspStats.PerTopologyCounter[len(fragment0LspStats.PerTopologyCounter)-1]
    }
    return nil
}

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["node-counters"] = &fragment0LspStats.NodeCounters
    for i := range fragment0LspStats.PerTopologyCounter {
        children[fragment0LspStats.PerTopologyCounter[i].GetSegmentPath()] = &fragment0LspStats.PerTopologyCounter[i]
    }
    return children
}

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetBundleName() string { return "cisco_ios_xr" }

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetYangName() string { return "fragment0lsp-stats" }

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) SetParent(parent types.Entity) { fragment0LspStats.parent = parent }

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetParent() types.Entity { return fragment0LspStats.parent }

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetParentYangName() string { return "lsp-table-summary" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters
// Summary by class of node
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router LSPs.
    RouteLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount

    // Pseudonode LSPs.
    PseudoNodeLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetFilter() yfilter.YFilter { return nodeCounters.YFilter }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) SetFilter(yf yfilter.YFilter) { nodeCounters.YFilter = yf }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetGoName(yname string) string {
    if yname == "route-lsp-count" { return "RouteLspCount" }
    if yname == "pseudo-node-lsp-count" { return "PseudoNodeLspCount" }
    return ""
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetSegmentPath() string {
    return "node-counters"
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-lsp-count" {
        return &nodeCounters.RouteLspCount
    }
    if childYangName == "pseudo-node-lsp-count" {
        return &nodeCounters.PseudoNodeLspCount
    }
    return nil
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-lsp-count"] = &nodeCounters.RouteLspCount
    children["pseudo-node-lsp-count"] = &nodeCounters.PseudoNodeLspCount
    return children
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetBundleName() string { return "cisco_ios_xr" }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetYangName() string { return "node-counters" }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) SetParent(parent types.Entity) { nodeCounters.parent = parent }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetParent() types.Entity { return nodeCounters.parent }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetParentYangName() string { return "fragment0lsp-stats" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount
// Router LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetFilter() yfilter.YFilter { return routeLspCount.YFilter }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) SetFilter(yf yfilter.YFilter) { routeLspCount.YFilter = yf }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetGoName(yname string) string {
    if yname == "active-lsp-count" { return "ActiveLspCount" }
    if yname == "purged-lsp-count" { return "PurgedLspCount" }
    return ""
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetSegmentPath() string {
    return "route-lsp-count"
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-lsp-count"] = routeLspCount.ActiveLspCount
    leafs["purged-lsp-count"] = routeLspCount.PurgedLspCount
    return leafs
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetBundleName() string { return "cisco_ios_xr" }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetYangName() string { return "route-lsp-count" }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) SetParent(parent types.Entity) { routeLspCount.parent = parent }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetParent() types.Entity { return routeLspCount.parent }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetParentYangName() string { return "node-counters" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount
// Pseudonode LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetFilter() yfilter.YFilter { return pseudoNodeLspCount.YFilter }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) SetFilter(yf yfilter.YFilter) { pseudoNodeLspCount.YFilter = yf }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetGoName(yname string) string {
    if yname == "active-lsp-count" { return "ActiveLspCount" }
    if yname == "purged-lsp-count" { return "PurgedLspCount" }
    return ""
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetSegmentPath() string {
    return "pseudo-node-lsp-count"
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-lsp-count"] = pseudoNodeLspCount.ActiveLspCount
    leafs["purged-lsp-count"] = pseudoNodeLspCount.PurgedLspCount
    return leafs
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetBundleName() string { return "cisco_ios_xr" }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetYangName() string { return "pseudo-node-lsp-count" }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) SetParent(parent types.Entity) { pseudoNodeLspCount.parent = parent }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetParent() types.Entity { return pseudoNodeLspCount.parent }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetParentYangName() string { return "node-counters" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter
// Per topology counters
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology ID.
    Id Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id

    // Number of LSPs with their per-topology overload bit set.
    OverloadedLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount

    // Number of LSPs with their per-topology attached bit set.
    AttachedLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount
}

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetFilter() yfilter.YFilter { return perTopologyCounter.YFilter }

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) SetFilter(yf yfilter.YFilter) { perTopologyCounter.YFilter = yf }

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetGoName(yname string) string {
    if yname == "id" { return "Id" }
    if yname == "overloaded-lsp-count" { return "OverloadedLspCount" }
    if yname == "attached-lsp-count" { return "AttachedLspCount" }
    return ""
}

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetSegmentPath() string {
    return "per-topology-counter"
}

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "id" {
        return &perTopologyCounter.Id
    }
    if childYangName == "overloaded-lsp-count" {
        return &perTopologyCounter.OverloadedLspCount
    }
    if childYangName == "attached-lsp-count" {
        return &perTopologyCounter.AttachedLspCount
    }
    return nil
}

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["id"] = &perTopologyCounter.Id
    children["overloaded-lsp-count"] = &perTopologyCounter.OverloadedLspCount
    children["attached-lsp-count"] = &perTopologyCounter.AttachedLspCount
    return children
}

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetBundleName() string { return "cisco_ios_xr" }

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetYangName() string { return "per-topology-counter" }

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) SetParent(parent types.Entity) { perTopologyCounter.parent = parent }

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetParent() types.Entity { return perTopologyCounter.parent }

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetParentYangName() string { return "fragment0lsp-stats" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id
// Topology ID
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetFilter() yfilter.YFilter { return id.YFilter }

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) SetFilter(yf yfilter.YFilter) { id.YFilter = yf }

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "topology-name" { return "TopologyName" }
    return ""
}

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetSegmentPath() string {
    return "id"
}

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = id.AfName
    leafs["saf-name"] = id.SafName
    leafs["vrf-name"] = id.VrfName
    leafs["topology-name"] = id.TopologyName
    return leafs
}

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetBundleName() string { return "cisco_ios_xr" }

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetYangName() string { return "id" }

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) SetParent(parent types.Entity) { id.parent = parent }

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetParent() types.Entity { return id.parent }

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetParentYangName() string { return "per-topology-counter" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount
// Number of LSPs with their per-topology overload
// bit set
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetFilter() yfilter.YFilter { return overloadedLspCount.YFilter }

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) SetFilter(yf yfilter.YFilter) { overloadedLspCount.YFilter = yf }

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetGoName(yname string) string {
    if yname == "active-lsp-count" { return "ActiveLspCount" }
    if yname == "purged-lsp-count" { return "PurgedLspCount" }
    return ""
}

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetSegmentPath() string {
    return "overloaded-lsp-count"
}

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-lsp-count"] = overloadedLspCount.ActiveLspCount
    leafs["purged-lsp-count"] = overloadedLspCount.PurgedLspCount
    return leafs
}

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetBundleName() string { return "cisco_ios_xr" }

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetYangName() string { return "overloaded-lsp-count" }

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) SetParent(parent types.Entity) { overloadedLspCount.parent = parent }

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetParent() types.Entity { return overloadedLspCount.parent }

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetParentYangName() string { return "per-topology-counter" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount
// Number of LSPs with their per-topology attached
// bit set
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetFilter() yfilter.YFilter { return attachedLspCount.YFilter }

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) SetFilter(yf yfilter.YFilter) { attachedLspCount.YFilter = yf }

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetGoName(yname string) string {
    if yname == "active-lsp-count" { return "ActiveLspCount" }
    if yname == "purged-lsp-count" { return "PurgedLspCount" }
    return ""
}

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetSegmentPath() string {
    return "attached-lsp-count"
}

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-lsp-count"] = attachedLspCount.ActiveLspCount
    leafs["purged-lsp-count"] = attachedLspCount.PurgedLspCount
    return leafs
}

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetBundleName() string { return "cisco_ios_xr" }

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetYangName() string { return "attached-lsp-count" }

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) SetParent(parent types.Entity) { attachedLspCount.parent = parent }

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetParent() types.Entity { return attachedLspCount.parent }

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetParentYangName() string { return "per-topology-counter" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats
// Statistics for all LSP fragments
type Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary by class of node.
    NodeCounters Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters
}

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetFilter() yfilter.YFilter { return allFragmentLspStats.YFilter }

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) SetFilter(yf yfilter.YFilter) { allFragmentLspStats.YFilter = yf }

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetGoName(yname string) string {
    if yname == "node-counters" { return "NodeCounters" }
    return ""
}

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetSegmentPath() string {
    return "all-fragment-lsp-stats"
}

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-counters" {
        return &allFragmentLspStats.NodeCounters
    }
    return nil
}

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["node-counters"] = &allFragmentLspStats.NodeCounters
    return children
}

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetBundleName() string { return "cisco_ios_xr" }

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetYangName() string { return "all-fragment-lsp-stats" }

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) SetParent(parent types.Entity) { allFragmentLspStats.parent = parent }

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetParent() types.Entity { return allFragmentLspStats.parent }

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetParentYangName() string { return "lsp-table-summary" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters
// Summary by class of node
type Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router LSPs.
    RouteLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount

    // Pseudonode LSPs.
    PseudoNodeLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetFilter() yfilter.YFilter { return nodeCounters.YFilter }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) SetFilter(yf yfilter.YFilter) { nodeCounters.YFilter = yf }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetGoName(yname string) string {
    if yname == "route-lsp-count" { return "RouteLspCount" }
    if yname == "pseudo-node-lsp-count" { return "PseudoNodeLspCount" }
    return ""
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetSegmentPath() string {
    return "node-counters"
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-lsp-count" {
        return &nodeCounters.RouteLspCount
    }
    if childYangName == "pseudo-node-lsp-count" {
        return &nodeCounters.PseudoNodeLspCount
    }
    return nil
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-lsp-count"] = &nodeCounters.RouteLspCount
    children["pseudo-node-lsp-count"] = &nodeCounters.PseudoNodeLspCount
    return children
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetBundleName() string { return "cisco_ios_xr" }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetYangName() string { return "node-counters" }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) SetParent(parent types.Entity) { nodeCounters.parent = parent }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetParent() types.Entity { return nodeCounters.parent }

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetParentYangName() string { return "all-fragment-lsp-stats" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount
// Router LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetFilter() yfilter.YFilter { return routeLspCount.YFilter }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) SetFilter(yf yfilter.YFilter) { routeLspCount.YFilter = yf }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetGoName(yname string) string {
    if yname == "active-lsp-count" { return "ActiveLspCount" }
    if yname == "purged-lsp-count" { return "PurgedLspCount" }
    return ""
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetSegmentPath() string {
    return "route-lsp-count"
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-lsp-count"] = routeLspCount.ActiveLspCount
    leafs["purged-lsp-count"] = routeLspCount.PurgedLspCount
    return leafs
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetBundleName() string { return "cisco_ios_xr" }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetYangName() string { return "route-lsp-count" }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) SetParent(parent types.Entity) { routeLspCount.parent = parent }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetParent() types.Entity { return routeLspCount.parent }

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetParentYangName() string { return "node-counters" }

// Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount
// Pseudonode LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetFilter() yfilter.YFilter { return pseudoNodeLspCount.YFilter }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) SetFilter(yf yfilter.YFilter) { pseudoNodeLspCount.YFilter = yf }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetGoName(yname string) string {
    if yname == "active-lsp-count" { return "ActiveLspCount" }
    if yname == "purged-lsp-count" { return "PurgedLspCount" }
    return ""
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetSegmentPath() string {
    return "pseudo-node-lsp-count"
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-lsp-count"] = pseudoNodeLspCount.ActiveLspCount
    leafs["purged-lsp-count"] = pseudoNodeLspCount.PurgedLspCount
    return leafs
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetBundleName() string { return "cisco_ios_xr" }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetYangName() string { return "pseudo-node-lsp-count" }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) SetParent(parent types.Entity) { pseudoNodeLspCount.parent = parent }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetParent() types.Entity { return pseudoNodeLspCount.parent }

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetParentYangName() string { return "node-counters" }

// Isis_Instances_Instance_Levels_Level_Adjacencies
// Adjacency table
type Isis_Instances_Instance_Levels_Level_Adjacencies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A single IS-IS adjacency. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency.
    Adjacency []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency
}

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetFilter() yfilter.YFilter { return adjacencies.YFilter }

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) SetFilter(yf yfilter.YFilter) { adjacencies.YFilter = yf }

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetGoName(yname string) string {
    if yname == "adjacency" { return "Adjacency" }
    return ""
}

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetSegmentPath() string {
    return "adjacencies"
}

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency" {
        for _, c := range adjacencies.Adjacency {
            if adjacencies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency{}
        adjacencies.Adjacency = append(adjacencies.Adjacency, child)
        return &adjacencies.Adjacency[len(adjacencies.Adjacency)-1]
    }
    return nil
}

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencies.Adjacency {
        children[adjacencies.Adjacency[i].GetSegmentPath()] = &adjacencies.Adjacency[i]
    }
    return children
}

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetYangName() string { return "adjacencies" }

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) SetParent(parent types.Entity) { adjacencies.parent = parent }

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetParent() types.Entity { return adjacencies.parent }

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetParentYangName() string { return "level" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency
// A single IS-IS adjacency
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    AdjacencySystemId interface{}

    // Neighbor SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    AdjacencySnpa interface{}

    // Local interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    AdjacencyInterface interface{}

    // Link media type. The type is IsisMediaClass.
    AdjacencyMediaType interface{}

    // Adjacency state. The type is IsisAdjState.
    AdjacencyState interface{}

    // Adjacency IPv4 BFD state. The type is IsisAdjBfdState.
    AdjacencyBfdState interface{}

    // Adjacency IPv6 BFD state. The type is IsisAdjBfdState.
    AdjacencyIpv6BfdState interface{}

    // Is IPv4 BFD retry timer running. The type is bool.
    AdjIpv4BfdRetryRunning interface{}

    // Is IPv6 BFD retry timer running. The type is bool.
    AdjIpv6BfdRetryRunning interface{}

    // Time to expiration of IPv4 BFD retry timer (s). The type is interface{}
    // with range: 0..4294967295.
    AdjIpv4BfdRetryExp interface{}

    // Time to expiration of IPv6 BFD retry timer (s). The type is interface{}
    // with range: 0..4294967295.
    AdjIpv6BfdRetryExp interface{}

    // IPv4 BFD retry counter. The type is interface{} with range: 0..4294967295.
    AdjIpv4BfdRetryCount interface{}

    // IPv6 BFD retry counter. The type is interface{} with range: 0..4294967295.
    AdjIpv6BfdRetryCount interface{}

    // TRUE if AdjacencyUptime is set. The type is bool.
    AdjacencyUptimeValidFlag interface{}

    // How long the adjacency has been up (s). The type is interface{} with range:
    // 0..4294967295.
    AdjacencyUptime interface{}

    // Time (s) until adjacency declared down if no IIH received. The type is
    // interface{} with range: 0..4294967295.
    AdjacencyHoldtime interface{}

    // Adjacency checkpoint object ID. The type is interface{} with range:
    // 0..4294967295.
    AdjacencyCheckpointObjectId interface{}

    // TRUE if neighbor is IETF-NSF capable. The type is bool.
    AdjacencyIetfNsfCapableFlag interface{}

    // Priority of DIS on this LAN. Valid only if aj_media_class is
    // ISIS_MEDIA_CLASS_LAN. The type is interface{} with range: 0..255.
    AdjacencyDispriority interface{}

    // Neighbor IS priority. Valid only if aj_media_class is ISIS_MEDIA_CLASS_LAN.
    // The type is interface{} with range: 0..255.
    AdjacencyNeighborPriority interface{}

    // Local IS priority. Valid only if aj_media_class is ISIS_MEDIA_CLASS_LAN.
    // The type is interface{} with range: 0..255.
    AdjacencyLocalPriority interface{}

    // TRUE if local system is DIS. Valid only if AdjacencyMediaType is
    // ISIS_MEDIA_CLASS_LAN. The type is bool.
    LocalDisFlag interface{}

    // TRUE if neighbor is DIS. Valid only if AdjacencyMediaType is
    // ISIS_MEDIA_CLASS_LAN. The type is bool.
    NeighborDisFlag interface{}

    // ISIS NSR STANDBY. The type is interface{} with range: 0..255.
    NsrStandby interface{}

    // Area addresses active over this adjacency. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress.
    AdjacencyAreaAddress []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress

    // Per-topology data. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology.
    AdjacencyTopology []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology

    // Per-address-family data. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData.
    AdjacencyPerAddressFamilyData []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData
}

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetFilter() yfilter.YFilter { return adjacency.YFilter }

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) SetFilter(yf yfilter.YFilter) { adjacency.YFilter = yf }

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetGoName(yname string) string {
    if yname == "system-id" { return "SystemId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "adjacency-system-id" { return "AdjacencySystemId" }
    if yname == "adjacency-snpa" { return "AdjacencySnpa" }
    if yname == "adjacency-interface" { return "AdjacencyInterface" }
    if yname == "adjacency-media-type" { return "AdjacencyMediaType" }
    if yname == "adjacency-state" { return "AdjacencyState" }
    if yname == "adjacency-bfd-state" { return "AdjacencyBfdState" }
    if yname == "adjacency-ipv6bfd-state" { return "AdjacencyIpv6BfdState" }
    if yname == "adj-ipv4bfd-retry-running" { return "AdjIpv4BfdRetryRunning" }
    if yname == "adj-ipv6bfd-retry-running" { return "AdjIpv6BfdRetryRunning" }
    if yname == "adj-ipv4bfd-retry-exp" { return "AdjIpv4BfdRetryExp" }
    if yname == "adj-ipv6bfd-retry-exp" { return "AdjIpv6BfdRetryExp" }
    if yname == "adj-ipv4bfd-retry-count" { return "AdjIpv4BfdRetryCount" }
    if yname == "adj-ipv6bfd-retry-count" { return "AdjIpv6BfdRetryCount" }
    if yname == "adjacency-uptime-valid-flag" { return "AdjacencyUptimeValidFlag" }
    if yname == "adjacency-uptime" { return "AdjacencyUptime" }
    if yname == "adjacency-holdtime" { return "AdjacencyHoldtime" }
    if yname == "adjacency-checkpoint-object-id" { return "AdjacencyCheckpointObjectId" }
    if yname == "adjacency-ietf-nsf-capable-flag" { return "AdjacencyIetfNsfCapableFlag" }
    if yname == "adjacency-dispriority" { return "AdjacencyDispriority" }
    if yname == "adjacency-neighbor-priority" { return "AdjacencyNeighborPriority" }
    if yname == "adjacency-local-priority" { return "AdjacencyLocalPriority" }
    if yname == "local-dis-flag" { return "LocalDisFlag" }
    if yname == "neighbor-dis-flag" { return "NeighborDisFlag" }
    if yname == "nsr-standby" { return "NsrStandby" }
    if yname == "adjacency-area-address" { return "AdjacencyAreaAddress" }
    if yname == "adjacency-topology" { return "AdjacencyTopology" }
    if yname == "adjacency-per-address-family-data" { return "AdjacencyPerAddressFamilyData" }
    return ""
}

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetSegmentPath() string {
    return "adjacency"
}

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-area-address" {
        for _, c := range adjacency.AdjacencyAreaAddress {
            if adjacency.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress{}
        adjacency.AdjacencyAreaAddress = append(adjacency.AdjacencyAreaAddress, child)
        return &adjacency.AdjacencyAreaAddress[len(adjacency.AdjacencyAreaAddress)-1]
    }
    if childYangName == "adjacency-topology" {
        for _, c := range adjacency.AdjacencyTopology {
            if adjacency.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology{}
        adjacency.AdjacencyTopology = append(adjacency.AdjacencyTopology, child)
        return &adjacency.AdjacencyTopology[len(adjacency.AdjacencyTopology)-1]
    }
    if childYangName == "adjacency-per-address-family-data" {
        for _, c := range adjacency.AdjacencyPerAddressFamilyData {
            if adjacency.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData{}
        adjacency.AdjacencyPerAddressFamilyData = append(adjacency.AdjacencyPerAddressFamilyData, child)
        return &adjacency.AdjacencyPerAddressFamilyData[len(adjacency.AdjacencyPerAddressFamilyData)-1]
    }
    return nil
}

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacency.AdjacencyAreaAddress {
        children[adjacency.AdjacencyAreaAddress[i].GetSegmentPath()] = &adjacency.AdjacencyAreaAddress[i]
    }
    for i := range adjacency.AdjacencyTopology {
        children[adjacency.AdjacencyTopology[i].GetSegmentPath()] = &adjacency.AdjacencyTopology[i]
    }
    for i := range adjacency.AdjacencyPerAddressFamilyData {
        children[adjacency.AdjacencyPerAddressFamilyData[i].GetSegmentPath()] = &adjacency.AdjacencyPerAddressFamilyData[i]
    }
    return children
}

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-id"] = adjacency.SystemId
    leafs["interface-name"] = adjacency.InterfaceName
    leafs["adjacency-system-id"] = adjacency.AdjacencySystemId
    leafs["adjacency-snpa"] = adjacency.AdjacencySnpa
    leafs["adjacency-interface"] = adjacency.AdjacencyInterface
    leafs["adjacency-media-type"] = adjacency.AdjacencyMediaType
    leafs["adjacency-state"] = adjacency.AdjacencyState
    leafs["adjacency-bfd-state"] = adjacency.AdjacencyBfdState
    leafs["adjacency-ipv6bfd-state"] = adjacency.AdjacencyIpv6BfdState
    leafs["adj-ipv4bfd-retry-running"] = adjacency.AdjIpv4BfdRetryRunning
    leafs["adj-ipv6bfd-retry-running"] = adjacency.AdjIpv6BfdRetryRunning
    leafs["adj-ipv4bfd-retry-exp"] = adjacency.AdjIpv4BfdRetryExp
    leafs["adj-ipv6bfd-retry-exp"] = adjacency.AdjIpv6BfdRetryExp
    leafs["adj-ipv4bfd-retry-count"] = adjacency.AdjIpv4BfdRetryCount
    leafs["adj-ipv6bfd-retry-count"] = adjacency.AdjIpv6BfdRetryCount
    leafs["adjacency-uptime-valid-flag"] = adjacency.AdjacencyUptimeValidFlag
    leafs["adjacency-uptime"] = adjacency.AdjacencyUptime
    leafs["adjacency-holdtime"] = adjacency.AdjacencyHoldtime
    leafs["adjacency-checkpoint-object-id"] = adjacency.AdjacencyCheckpointObjectId
    leafs["adjacency-ietf-nsf-capable-flag"] = adjacency.AdjacencyIetfNsfCapableFlag
    leafs["adjacency-dispriority"] = adjacency.AdjacencyDispriority
    leafs["adjacency-neighbor-priority"] = adjacency.AdjacencyNeighborPriority
    leafs["adjacency-local-priority"] = adjacency.AdjacencyLocalPriority
    leafs["local-dis-flag"] = adjacency.LocalDisFlag
    leafs["neighbor-dis-flag"] = adjacency.NeighborDisFlag
    leafs["nsr-standby"] = adjacency.NsrStandby
    return leafs
}

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetBundleName() string { return "cisco_ios_xr" }

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetYangName() string { return "adjacency" }

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) SetParent(parent types.Entity) { adjacency.parent = parent }

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetParent() types.Entity { return adjacency.parent }

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetParentYangName() string { return "adjacencies" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress
// Area addresses active over this adjacency
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern: [a-fA-F0-9]{2}(\.[a-fA-F0-9]{4}){0,6}.
    Entry interface{}
}

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetFilter() yfilter.YFilter { return adjacencyAreaAddress.YFilter }

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) SetFilter(yf yfilter.YFilter) { adjacencyAreaAddress.YFilter = yf }

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetSegmentPath() string {
    return "adjacency-area-address"
}

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = adjacencyAreaAddress.Entry
    return leafs
}

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetYangName() string { return "adjacency-area-address" }

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) SetParent(parent types.Entity) { adjacencyAreaAddress.parent = parent }

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetParent() types.Entity { return adjacencyAreaAddress.parent }

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetParentYangName() string { return "adjacency" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology
// Per-topology data
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status of topology in adjacency. The type is IsisAdjTopoStatus.
    TopologyStatus interface{}

    // TRUE if suppressed parallel point-to-point link. The type is bool.
    ParallelP2PLinkSuppressedFlag interface{}

    // Topology ID.
    Id Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id
}

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetFilter() yfilter.YFilter { return adjacencyTopology.YFilter }

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) SetFilter(yf yfilter.YFilter) { adjacencyTopology.YFilter = yf }

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetGoName(yname string) string {
    if yname == "topology-status" { return "TopologyStatus" }
    if yname == "parallel-p2p-link-suppressed-flag" { return "ParallelP2PLinkSuppressedFlag" }
    if yname == "id" { return "Id" }
    return ""
}

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetSegmentPath() string {
    return "adjacency-topology"
}

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "id" {
        return &adjacencyTopology.Id
    }
    return nil
}

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["id"] = &adjacencyTopology.Id
    return children
}

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-status"] = adjacencyTopology.TopologyStatus
    leafs["parallel-p2p-link-suppressed-flag"] = adjacencyTopology.ParallelP2PLinkSuppressedFlag
    return leafs
}

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetYangName() string { return "adjacency-topology" }

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) SetParent(parent types.Entity) { adjacencyTopology.parent = parent }

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetParent() types.Entity { return adjacencyTopology.parent }

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetParentYangName() string { return "adjacency" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id
// Topology ID
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetFilter() yfilter.YFilter { return id.YFilter }

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) SetFilter(yf yfilter.YFilter) { id.YFilter = yf }

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "topology-name" { return "TopologyName" }
    return ""
}

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetSegmentPath() string {
    return "id"
}

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = id.AfName
    leafs["saf-name"] = id.SafName
    leafs["vrf-name"] = id.VrfName
    leafs["topology-name"] = id.TopologyName
    return leafs
}

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetBundleName() string { return "cisco_ios_xr" }

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetYangName() string { return "id" }

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) SetParent(parent types.Entity) { id.parent = parent }

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetParent() types.Entity { return id.parent }

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetParentYangName() string { return "adjacency-topology" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData
// Per-address-family data
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // IPV4 neighbor info.
    Ipv4 Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4

    // IPV6 neighbor info.
    Ipv6 Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6
}

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetFilter() yfilter.YFilter { return adjacencyPerAddressFamilyData.YFilter }

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) SetFilter(yf yfilter.YFilter) { adjacencyPerAddressFamilyData.YFilter = yf }

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetSegmentPath() string {
    return "adjacency-per-address-family-data"
}

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &adjacencyPerAddressFamilyData.Ipv4
    }
    if childYangName == "ipv6" {
        return &adjacencyPerAddressFamilyData.Ipv6
    }
    return nil
}

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &adjacencyPerAddressFamilyData.Ipv4
    children["ipv6"] = &adjacencyPerAddressFamilyData.Ipv6
    return children
}

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = adjacencyPerAddressFamilyData.AfName
    return leafs
}

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetYangName() string { return "adjacency-per-address-family-data" }

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) SetParent(parent types.Entity) { adjacencyPerAddressFamilyData.parent = parent }

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetParent() types.Entity { return adjacencyPerAddressFamilyData.parent }

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetParentYangName() string { return "adjacency" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4
// IPV4 neighbor info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NextHop interface{}

    // Adjacency SID.
    AdjacencySid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid

    // Adjacency SID not eligible for FRR protection.
    NonFrrAdjacencySid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid

    // Adjacency interface addresses. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress.
    InterfaceAddress []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress

    // Per bundle member Adjacency sid. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid.
    UnderlyingAdjacencySid []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface.
    UnderlyingInterface []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface
}

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetGoName(yname string) string {
    if yname == "next-hop" { return "NextHop" }
    if yname == "adjacency-sid" { return "AdjacencySid" }
    if yname == "non-frr-adjacency-sid" { return "NonFrrAdjacencySid" }
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "underlying-adjacency-sid" { return "UnderlyingAdjacencySid" }
    if yname == "underlying-interface" { return "UnderlyingInterface" }
    return ""
}

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-sid" {
        return &ipv4.AdjacencySid
    }
    if childYangName == "non-frr-adjacency-sid" {
        return &ipv4.NonFrrAdjacencySid
    }
    if childYangName == "interface-address" {
        for _, c := range ipv4.InterfaceAddress {
            if ipv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress{}
        ipv4.InterfaceAddress = append(ipv4.InterfaceAddress, child)
        return &ipv4.InterfaceAddress[len(ipv4.InterfaceAddress)-1]
    }
    if childYangName == "underlying-adjacency-sid" {
        for _, c := range ipv4.UnderlyingAdjacencySid {
            if ipv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid{}
        ipv4.UnderlyingAdjacencySid = append(ipv4.UnderlyingAdjacencySid, child)
        return &ipv4.UnderlyingAdjacencySid[len(ipv4.UnderlyingAdjacencySid)-1]
    }
    if childYangName == "underlying-interface" {
        for _, c := range ipv4.UnderlyingInterface {
            if ipv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface{}
        ipv4.UnderlyingInterface = append(ipv4.UnderlyingInterface, child)
        return &ipv4.UnderlyingInterface[len(ipv4.UnderlyingInterface)-1]
    }
    return nil
}

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-sid"] = &ipv4.AdjacencySid
    children["non-frr-adjacency-sid"] = &ipv4.NonFrrAdjacencySid
    for i := range ipv4.InterfaceAddress {
        children[ipv4.InterfaceAddress[i].GetSegmentPath()] = &ipv4.InterfaceAddress[i]
    }
    for i := range ipv4.UnderlyingAdjacencySid {
        children[ipv4.UnderlyingAdjacencySid[i].GetSegmentPath()] = &ipv4.UnderlyingAdjacencySid[i]
    }
    for i := range ipv4.UnderlyingInterface {
        children[ipv4.UnderlyingInterface[i].GetSegmentPath()] = &ipv4.UnderlyingInterface[i]
    }
    return children
}

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["next-hop"] = ipv4.NextHop
    return leafs
}

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetParentYangName() string { return "adjacency-per-address-family-data" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid
// Adjacency SID
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetFilter() yfilter.YFilter { return adjacencySid.YFilter }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) SetFilter(yf yfilter.YFilter) { adjacencySid.YFilter = yf }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetGoName(yname string) string {
    if yname == "adjacency-sid-value" { return "AdjacencySidValue" }
    if yname == "adjacency-sid-backup" { return "AdjacencySidBackup" }
    if yname == "adjacency-sid-backup-te" { return "AdjacencySidBackupTe" }
    return ""
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetSegmentPath() string {
    return "adjacency-sid"
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-sid-backup" {
        return &adjacencySid.AdjacencySidBackup
    }
    if childYangName == "adjacency-sid-backup-te" {
        return &adjacencySid.AdjacencySidBackupTe
    }
    return nil
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-sid-backup"] = &adjacencySid.AdjacencySidBackup
    children["adjacency-sid-backup-te"] = &adjacencySid.AdjacencySidBackupTe
    return children
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adjacency-sid-value"] = adjacencySid.AdjacencySidValue
    return leafs
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetYangName() string { return "adjacency-sid" }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) SetParent(parent types.Entity) { adjacencySid.parent = parent }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetParent() types.Entity { return adjacencySid.parent }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetParentYangName() string { return "ipv4" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetFilter() yfilter.YFilter { return adjacencySidBackup.YFilter }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) SetFilter(yf yfilter.YFilter) { adjacencySidBackup.YFilter = yf }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetSegmentPath() string {
    return "adjacency-sid-backup"
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackup.BackupLabelStack {
            if adjacencySidBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack{}
        adjacencySidBackup.BackupLabelStack = append(adjacencySidBackup.BackupLabelStack, child)
        return &adjacencySidBackup.BackupLabelStack[len(adjacencySidBackup.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackup.BackupLabelStack {
        children[adjacencySidBackup.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackup.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackup.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackup.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackup.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackup.BackupInterface
    return leafs
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetYangName() string { return "adjacency-sid-backup" }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) SetParent(parent types.Entity) { adjacencySidBackup.parent = parent }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetParent() types.Entity { return adjacencySidBackup.parent }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetParentYangName() string { return "adjacency-sid" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetFilter() yfilter.YFilter { return adjacencySidBackupTe.YFilter }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) SetFilter(yf yfilter.YFilter) { adjacencySidBackupTe.YFilter = yf }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetSegmentPath() string {
    return "adjacency-sid-backup-te"
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackupTe.BackupLabelStack {
            if adjacencySidBackupTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack{}
        adjacencySidBackupTe.BackupLabelStack = append(adjacencySidBackupTe.BackupLabelStack, child)
        return &adjacencySidBackupTe.BackupLabelStack[len(adjacencySidBackupTe.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackupTe.BackupLabelStack {
        children[adjacencySidBackupTe.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackupTe.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackupTe.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackupTe.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackupTe.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackupTe.BackupInterface
    return leafs
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetYangName() string { return "adjacency-sid-backup-te" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) SetParent(parent types.Entity) { adjacencySidBackupTe.parent = parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetParent() types.Entity { return adjacencySidBackupTe.parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetParentYangName() string { return "adjacency-sid" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup-te" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid
// Adjacency SID not eligible for FRR protection
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetFilter() yfilter.YFilter { return nonFrrAdjacencySid.YFilter }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) SetFilter(yf yfilter.YFilter) { nonFrrAdjacencySid.YFilter = yf }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetGoName(yname string) string {
    if yname == "adjacency-sid-value" { return "AdjacencySidValue" }
    if yname == "adjacency-sid-backup" { return "AdjacencySidBackup" }
    if yname == "adjacency-sid-backup-te" { return "AdjacencySidBackupTe" }
    return ""
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetSegmentPath() string {
    return "non-frr-adjacency-sid"
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-sid-backup" {
        return &nonFrrAdjacencySid.AdjacencySidBackup
    }
    if childYangName == "adjacency-sid-backup-te" {
        return &nonFrrAdjacencySid.AdjacencySidBackupTe
    }
    return nil
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-sid-backup"] = &nonFrrAdjacencySid.AdjacencySidBackup
    children["adjacency-sid-backup-te"] = &nonFrrAdjacencySid.AdjacencySidBackupTe
    return children
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adjacency-sid-value"] = nonFrrAdjacencySid.AdjacencySidValue
    return leafs
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetBundleName() string { return "cisco_ios_xr" }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetYangName() string { return "non-frr-adjacency-sid" }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) SetParent(parent types.Entity) { nonFrrAdjacencySid.parent = parent }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetParent() types.Entity { return nonFrrAdjacencySid.parent }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetParentYangName() string { return "ipv4" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetFilter() yfilter.YFilter { return adjacencySidBackup.YFilter }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) SetFilter(yf yfilter.YFilter) { adjacencySidBackup.YFilter = yf }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetSegmentPath() string {
    return "adjacency-sid-backup"
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackup.BackupLabelStack {
            if adjacencySidBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack{}
        adjacencySidBackup.BackupLabelStack = append(adjacencySidBackup.BackupLabelStack, child)
        return &adjacencySidBackup.BackupLabelStack[len(adjacencySidBackup.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackup.BackupLabelStack {
        children[adjacencySidBackup.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackup.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackup.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackup.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackup.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackup.BackupInterface
    return leafs
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetYangName() string { return "adjacency-sid-backup" }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) SetParent(parent types.Entity) { adjacencySidBackup.parent = parent }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetParent() types.Entity { return adjacencySidBackup.parent }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetParentYangName() string { return "non-frr-adjacency-sid" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetFilter() yfilter.YFilter { return adjacencySidBackupTe.YFilter }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) SetFilter(yf yfilter.YFilter) { adjacencySidBackupTe.YFilter = yf }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetSegmentPath() string {
    return "adjacency-sid-backup-te"
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackupTe.BackupLabelStack {
            if adjacencySidBackupTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack{}
        adjacencySidBackupTe.BackupLabelStack = append(adjacencySidBackupTe.BackupLabelStack, child)
        return &adjacencySidBackupTe.BackupLabelStack[len(adjacencySidBackupTe.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackupTe.BackupLabelStack {
        children[adjacencySidBackupTe.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackupTe.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackupTe.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackupTe.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackupTe.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackupTe.BackupInterface
    return leafs
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetYangName() string { return "adjacency-sid-backup-te" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) SetParent(parent types.Entity) { adjacencySidBackupTe.parent = parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetParent() types.Entity { return adjacencySidBackupTe.parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetParentYangName() string { return "non-frr-adjacency-sid" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup-te" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress
// Adjacency interface addresses
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetFilter() yfilter.YFilter { return interfaceAddress.YFilter }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) SetFilter(yf yfilter.YFilter) { interfaceAddress.YFilter = yf }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetSegmentPath() string {
    return "interface-address"
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = interfaceAddress.Entry
    return leafs
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetYangName() string { return "interface-address" }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) SetParent(parent types.Entity) { interfaceAddress.parent = parent }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetParent() types.Entity { return interfaceAddress.parent }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetParentYangName() string { return "ipv4" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid
// Per bundle member Adjacency sid
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetFilter() yfilter.YFilter { return underlyingAdjacencySid.YFilter }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) SetFilter(yf yfilter.YFilter) { underlyingAdjacencySid.YFilter = yf }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetSegmentPath() string {
    return "underlying-adjacency-sid"
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = underlyingAdjacencySid.Entry
    return leafs
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetBundleName() string { return "cisco_ios_xr" }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetYangName() string { return "underlying-adjacency-sid" }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) SetParent(parent types.Entity) { underlyingAdjacencySid.parent = parent }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetParent() types.Entity { return underlyingAdjacencySid.parent }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetParentYangName() string { return "ipv4" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetFilter() yfilter.YFilter { return underlyingInterface.YFilter }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) SetFilter(yf yfilter.YFilter) { underlyingInterface.YFilter = yf }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetSegmentPath() string {
    return "underlying-interface"
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = underlyingInterface.InterfaceHandle
    leafs["interface-name"] = underlyingInterface.InterfaceName
    return leafs
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetBundleName() string { return "cisco_ios_xr" }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetYangName() string { return "underlying-interface" }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) SetParent(parent types.Entity) { underlyingInterface.parent = parent }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetParent() types.Entity { return underlyingInterface.parent }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetParentYangName() string { return "ipv4" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6
// IPV6 neighbor info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency next hop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHop interface{}

    // Adjacency SID.
    AdjacencySid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid

    // Adjacency SID not eligible for FRR protection.
    NonFrrAdjacencySid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid

    // Adjacency interface addresses. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress.
    InterfaceAddress []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress

    // Per bundle member Adjacency sid. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid.
    UnderlyingAdjacencySid []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface.
    UnderlyingInterface []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface
}

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetFilter() yfilter.YFilter { return ipv6.YFilter }

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) SetFilter(yf yfilter.YFilter) { ipv6.YFilter = yf }

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetGoName(yname string) string {
    if yname == "next-hop" { return "NextHop" }
    if yname == "adjacency-sid" { return "AdjacencySid" }
    if yname == "non-frr-adjacency-sid" { return "NonFrrAdjacencySid" }
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "underlying-adjacency-sid" { return "UnderlyingAdjacencySid" }
    if yname == "underlying-interface" { return "UnderlyingInterface" }
    return ""
}

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetSegmentPath() string {
    return "ipv6"
}

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-sid" {
        return &ipv6.AdjacencySid
    }
    if childYangName == "non-frr-adjacency-sid" {
        return &ipv6.NonFrrAdjacencySid
    }
    if childYangName == "interface-address" {
        for _, c := range ipv6.InterfaceAddress {
            if ipv6.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress{}
        ipv6.InterfaceAddress = append(ipv6.InterfaceAddress, child)
        return &ipv6.InterfaceAddress[len(ipv6.InterfaceAddress)-1]
    }
    if childYangName == "underlying-adjacency-sid" {
        for _, c := range ipv6.UnderlyingAdjacencySid {
            if ipv6.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid{}
        ipv6.UnderlyingAdjacencySid = append(ipv6.UnderlyingAdjacencySid, child)
        return &ipv6.UnderlyingAdjacencySid[len(ipv6.UnderlyingAdjacencySid)-1]
    }
    if childYangName == "underlying-interface" {
        for _, c := range ipv6.UnderlyingInterface {
            if ipv6.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface{}
        ipv6.UnderlyingInterface = append(ipv6.UnderlyingInterface, child)
        return &ipv6.UnderlyingInterface[len(ipv6.UnderlyingInterface)-1]
    }
    return nil
}

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-sid"] = &ipv6.AdjacencySid
    children["non-frr-adjacency-sid"] = &ipv6.NonFrrAdjacencySid
    for i := range ipv6.InterfaceAddress {
        children[ipv6.InterfaceAddress[i].GetSegmentPath()] = &ipv6.InterfaceAddress[i]
    }
    for i := range ipv6.UnderlyingAdjacencySid {
        children[ipv6.UnderlyingAdjacencySid[i].GetSegmentPath()] = &ipv6.UnderlyingAdjacencySid[i]
    }
    for i := range ipv6.UnderlyingInterface {
        children[ipv6.UnderlyingInterface[i].GetSegmentPath()] = &ipv6.UnderlyingInterface[i]
    }
    return children
}

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["next-hop"] = ipv6.NextHop
    return leafs
}

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetYangName() string { return "ipv6" }

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) SetParent(parent types.Entity) { ipv6.parent = parent }

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetParent() types.Entity { return ipv6.parent }

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetParentYangName() string { return "adjacency-per-address-family-data" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid
// Adjacency SID
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetFilter() yfilter.YFilter { return adjacencySid.YFilter }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) SetFilter(yf yfilter.YFilter) { adjacencySid.YFilter = yf }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetGoName(yname string) string {
    if yname == "adjacency-sid-value" { return "AdjacencySidValue" }
    if yname == "adjacency-sid-backup" { return "AdjacencySidBackup" }
    if yname == "adjacency-sid-backup-te" { return "AdjacencySidBackupTe" }
    return ""
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetSegmentPath() string {
    return "adjacency-sid"
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-sid-backup" {
        return &adjacencySid.AdjacencySidBackup
    }
    if childYangName == "adjacency-sid-backup-te" {
        return &adjacencySid.AdjacencySidBackupTe
    }
    return nil
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-sid-backup"] = &adjacencySid.AdjacencySidBackup
    children["adjacency-sid-backup-te"] = &adjacencySid.AdjacencySidBackupTe
    return children
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adjacency-sid-value"] = adjacencySid.AdjacencySidValue
    return leafs
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetYangName() string { return "adjacency-sid" }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) SetParent(parent types.Entity) { adjacencySid.parent = parent }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetParent() types.Entity { return adjacencySid.parent }

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetParentYangName() string { return "ipv6" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetFilter() yfilter.YFilter { return adjacencySidBackup.YFilter }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) SetFilter(yf yfilter.YFilter) { adjacencySidBackup.YFilter = yf }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetSegmentPath() string {
    return "adjacency-sid-backup"
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackup.BackupLabelStack {
            if adjacencySidBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack{}
        adjacencySidBackup.BackupLabelStack = append(adjacencySidBackup.BackupLabelStack, child)
        return &adjacencySidBackup.BackupLabelStack[len(adjacencySidBackup.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackup.BackupLabelStack {
        children[adjacencySidBackup.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackup.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackup.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackup.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackup.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackup.BackupInterface
    return leafs
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetYangName() string { return "adjacency-sid-backup" }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) SetParent(parent types.Entity) { adjacencySidBackup.parent = parent }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetParent() types.Entity { return adjacencySidBackup.parent }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetParentYangName() string { return "adjacency-sid" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetFilter() yfilter.YFilter { return adjacencySidBackupTe.YFilter }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) SetFilter(yf yfilter.YFilter) { adjacencySidBackupTe.YFilter = yf }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetSegmentPath() string {
    return "adjacency-sid-backup-te"
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackupTe.BackupLabelStack {
            if adjacencySidBackupTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack{}
        adjacencySidBackupTe.BackupLabelStack = append(adjacencySidBackupTe.BackupLabelStack, child)
        return &adjacencySidBackupTe.BackupLabelStack[len(adjacencySidBackupTe.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackupTe.BackupLabelStack {
        children[adjacencySidBackupTe.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackupTe.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackupTe.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackupTe.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackupTe.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackupTe.BackupInterface
    return leafs
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetYangName() string { return "adjacency-sid-backup-te" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) SetParent(parent types.Entity) { adjacencySidBackupTe.parent = parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetParent() types.Entity { return adjacencySidBackupTe.parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetParentYangName() string { return "adjacency-sid" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup-te" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid
// Adjacency SID not eligible for FRR protection
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetFilter() yfilter.YFilter { return nonFrrAdjacencySid.YFilter }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) SetFilter(yf yfilter.YFilter) { nonFrrAdjacencySid.YFilter = yf }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetGoName(yname string) string {
    if yname == "adjacency-sid-value" { return "AdjacencySidValue" }
    if yname == "adjacency-sid-backup" { return "AdjacencySidBackup" }
    if yname == "adjacency-sid-backup-te" { return "AdjacencySidBackupTe" }
    return ""
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetSegmentPath() string {
    return "non-frr-adjacency-sid"
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-sid-backup" {
        return &nonFrrAdjacencySid.AdjacencySidBackup
    }
    if childYangName == "adjacency-sid-backup-te" {
        return &nonFrrAdjacencySid.AdjacencySidBackupTe
    }
    return nil
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-sid-backup"] = &nonFrrAdjacencySid.AdjacencySidBackup
    children["adjacency-sid-backup-te"] = &nonFrrAdjacencySid.AdjacencySidBackupTe
    return children
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adjacency-sid-value"] = nonFrrAdjacencySid.AdjacencySidValue
    return leafs
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetBundleName() string { return "cisco_ios_xr" }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetYangName() string { return "non-frr-adjacency-sid" }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) SetParent(parent types.Entity) { nonFrrAdjacencySid.parent = parent }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetParent() types.Entity { return nonFrrAdjacencySid.parent }

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetParentYangName() string { return "ipv6" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetFilter() yfilter.YFilter { return adjacencySidBackup.YFilter }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) SetFilter(yf yfilter.YFilter) { adjacencySidBackup.YFilter = yf }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetSegmentPath() string {
    return "adjacency-sid-backup"
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackup.BackupLabelStack {
            if adjacencySidBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack{}
        adjacencySidBackup.BackupLabelStack = append(adjacencySidBackup.BackupLabelStack, child)
        return &adjacencySidBackup.BackupLabelStack[len(adjacencySidBackup.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackup.BackupLabelStack {
        children[adjacencySidBackup.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackup.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackup.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackup.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackup.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackup.BackupInterface
    return leafs
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetYangName() string { return "adjacency-sid-backup" }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) SetParent(parent types.Entity) { adjacencySidBackup.parent = parent }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetParent() types.Entity { return adjacencySidBackup.parent }

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetParentYangName() string { return "non-frr-adjacency-sid" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetFilter() yfilter.YFilter { return adjacencySidBackupTe.YFilter }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) SetFilter(yf yfilter.YFilter) { adjacencySidBackupTe.YFilter = yf }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetGoName(yname string) string {
    if yname == "backup-label-stack-size" { return "BackupLabelStackSize" }
    if yname == "backup-node-address" { return "BackupNodeAddress" }
    if yname == "backup-nexthop" { return "BackupNexthop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label-stack" { return "BackupLabelStack" }
    return ""
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetSegmentPath() string {
    return "adjacency-sid-backup-te"
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-label-stack" {
        for _, c := range adjacencySidBackupTe.BackupLabelStack {
            if adjacencySidBackupTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack{}
        adjacencySidBackupTe.BackupLabelStack = append(adjacencySidBackupTe.BackupLabelStack, child)
        return &adjacencySidBackupTe.BackupLabelStack[len(adjacencySidBackupTe.BackupLabelStack)-1]
    }
    return nil
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adjacencySidBackupTe.BackupLabelStack {
        children[adjacencySidBackupTe.BackupLabelStack[i].GetSegmentPath()] = &adjacencySidBackupTe.BackupLabelStack[i]
    }
    return children
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-label-stack-size"] = adjacencySidBackupTe.BackupLabelStackSize
    leafs["backup-node-address"] = adjacencySidBackupTe.BackupNodeAddress
    leafs["backup-nexthop"] = adjacencySidBackupTe.BackupNexthop
    leafs["backup-interface"] = adjacencySidBackupTe.BackupInterface
    return leafs
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetYangName() string { return "adjacency-sid-backup-te" }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) SetParent(parent types.Entity) { adjacencySidBackupTe.parent = parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetParent() types.Entity { return adjacencySidBackupTe.parent }

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetParentYangName() string { return "non-frr-adjacency-sid" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetFilter() yfilter.YFilter { return backupLabelStack.YFilter }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetFilter(yf yfilter.YFilter) { backupLabelStack.YFilter = yf }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetSegmentPath() string {
    return "backup-label-stack"
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = backupLabelStack.Entry
    return leafs
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleName() string { return "cisco_ios_xr" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetYangName() string { return "backup-label-stack" }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) SetParent(parent types.Entity) { backupLabelStack.parent = parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParent() types.Entity { return backupLabelStack.parent }

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetParentYangName() string { return "adjacency-sid-backup-te" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress
// Adjacency interface addresses
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetFilter() yfilter.YFilter { return interfaceAddress.YFilter }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) SetFilter(yf yfilter.YFilter) { interfaceAddress.YFilter = yf }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetSegmentPath() string {
    return "interface-address"
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = interfaceAddress.Entry
    return leafs
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetYangName() string { return "interface-address" }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) SetParent(parent types.Entity) { interfaceAddress.parent = parent }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetParent() types.Entity { return interfaceAddress.parent }

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetParentYangName() string { return "ipv6" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid
// Per bundle member Adjacency sid
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetFilter() yfilter.YFilter { return underlyingAdjacencySid.YFilter }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) SetFilter(yf yfilter.YFilter) { underlyingAdjacencySid.YFilter = yf }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetSegmentPath() string {
    return "underlying-adjacency-sid"
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = underlyingAdjacencySid.Entry
    return leafs
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetBundleName() string { return "cisco_ios_xr" }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetYangName() string { return "underlying-adjacency-sid" }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) SetParent(parent types.Entity) { underlyingAdjacencySid.parent = parent }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetParent() types.Entity { return underlyingAdjacencySid.parent }

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetParentYangName() string { return "ipv6" }

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetFilter() yfilter.YFilter { return underlyingInterface.YFilter }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) SetFilter(yf yfilter.YFilter) { underlyingInterface.YFilter = yf }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetSegmentPath() string {
    return "underlying-interface"
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = underlyingInterface.InterfaceHandle
    leafs["interface-name"] = underlyingInterface.InterfaceName
    return leafs
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetBundleName() string { return "cisco_ios_xr" }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetYangName() string { return "underlying-interface" }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) SetParent(parent types.Entity) { underlyingInterface.parent = parent }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetParent() types.Entity { return underlyingInterface.parent }

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetParentYangName() string { return "ipv6" }

// Isis_Instances_Instance_Levels_Level_DetailedLsps
// Detailed LSP table. Use to retrieve LSPs
// with TLV content.
type Isis_Instances_Instance_Levels_Level_DetailedLsps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An IS-IS LSP with detailed TLV data included. The type is slice of
    // Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp.
    DetailedLsp []Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp
}

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetFilter() yfilter.YFilter { return detailedLsps.YFilter }

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) SetFilter(yf yfilter.YFilter) { detailedLsps.YFilter = yf }

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetGoName(yname string) string {
    if yname == "detailed-lsp" { return "DetailedLsp" }
    return ""
}

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetSegmentPath() string {
    return "detailed-lsps"
}

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detailed-lsp" {
        for _, c := range detailedLsps.DetailedLsp {
            if detailedLsps.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp{}
        detailedLsps.DetailedLsp = append(detailedLsps.DetailedLsp, child)
        return &detailedLsps.DetailedLsp[len(detailedLsps.DetailedLsp)-1]
    }
    return nil
}

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range detailedLsps.DetailedLsp {
        children[detailedLsps.DetailedLsp[i].GetSegmentPath()] = &detailedLsps.DetailedLsp[i]
    }
    return children
}

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetBundleName() string { return "cisco_ios_xr" }

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetYangName() string { return "detailed-lsps" }

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) SetParent(parent types.Entity) { detailedLsps.parent = parent }

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetParent() types.Entity { return detailedLsps.parent }

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetParentYangName() string { return "level" }

// Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp
// An IS-IS LSP with detailed TLV data
// included
type Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // LSP as received/sent over the wire, starting from the LSP ID field. The
    // type is string with pattern: ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    LspBody interface{}

    // Information from the LSP header.
    LspHeaderData Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData
}

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetFilter() yfilter.YFilter { return detailedLsp.YFilter }

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) SetFilter(yf yfilter.YFilter) { detailedLsp.YFilter = yf }

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetGoName(yname string) string {
    if yname == "lsp-id" { return "LspId" }
    if yname == "lsp-body" { return "LspBody" }
    if yname == "lsp-header-data" { return "LspHeaderData" }
    return ""
}

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetSegmentPath() string {
    return "detailed-lsp" + "[lsp-id='" + fmt.Sprintf("%v", detailedLsp.LspId) + "']"
}

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-header-data" {
        return &detailedLsp.LspHeaderData
    }
    return nil
}

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-header-data"] = &detailedLsp.LspHeaderData
    return children
}

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-id"] = detailedLsp.LspId
    leafs["lsp-body"] = detailedLsp.LspBody
    return leafs
}

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetBundleName() string { return "cisco_ios_xr" }

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetYangName() string { return "detailed-lsp" }

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) SetParent(parent types.Entity) { detailedLsp.parent = parent }

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetParent() types.Entity { return detailedLsp.parent }

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetParentYangName() string { return "detailed-lsps" }

// Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData
// Information from the LSP header
type Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // TRUE if this is a locally generated LSP. The type is bool.
    LocalLspFlag interface{}

    // TRUE if this LSP has not expired. The type is bool.
    LspActiveFlag interface{}

    // Time, in seconds, until LSP expiry (if active) or deletion (if expired) .
    // The type is interface{} with range: 0..65535. Units are second.
    LspHoldtime interface{}

    // The LSP sequence number. The type is interface{} with range: 0..4294967295.
    LspSequenceNumber interface{}

    // The LSP checksum. The type is interface{} with range: 0..65535.
    LspChecksum interface{}

    // TRUE if partition repair is supported. The type is bool.
    LspPartitionRepairSupportedFlag interface{}

    // TRUE if attached bit is set. The type is bool.
    LspAttachedFlag interface{}

    // TRUE if the overload bit is set. The type is bool.
    LspOverloadedFlag interface{}

    // TRUE if the LSP is non-v1a, XXX for testing. The type is interface{} with
    // range: 0..65535.
    LspNonv1AFlag interface{}

    // The type of the IS sourcing the LSP. The type is IsisLevels.
    LspLevel interface{}

    // The total length of the LSP. The type is interface{} with range: 0..65535.
    LspLength interface{}

    // max area addresses. The type is interface{} with range: 0..255.
    MaxAreaAddresses interface{}

    // System Id length. The type is interface{} with range: 0..255.
    IdLength interface{}

    // isis version. The type is interface{} with range: 0..255.
    Version interface{}

    // isis version2. The type is interface{} with range: 0..255.
    Version2 interface{}
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetFilter() yfilter.YFilter { return lspHeaderData.YFilter }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) SetFilter(yf yfilter.YFilter) { lspHeaderData.YFilter = yf }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetGoName(yname string) string {
    if yname == "lsp-id" { return "LspId" }
    if yname == "local-lsp-flag" { return "LocalLspFlag" }
    if yname == "lsp-active-flag" { return "LspActiveFlag" }
    if yname == "lsp-holdtime" { return "LspHoldtime" }
    if yname == "lsp-sequence-number" { return "LspSequenceNumber" }
    if yname == "lsp-checksum" { return "LspChecksum" }
    if yname == "lsp-partition-repair-supported-flag" { return "LspPartitionRepairSupportedFlag" }
    if yname == "lsp-attached-flag" { return "LspAttachedFlag" }
    if yname == "lsp-overloaded-flag" { return "LspOverloadedFlag" }
    if yname == "lsp-nonv1a-flag" { return "LspNonv1AFlag" }
    if yname == "lsp-level" { return "LspLevel" }
    if yname == "lsp-length" { return "LspLength" }
    if yname == "max-area-addresses" { return "MaxAreaAddresses" }
    if yname == "id-length" { return "IdLength" }
    if yname == "version" { return "Version" }
    if yname == "version2" { return "Version2" }
    return ""
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetSegmentPath() string {
    return "lsp-header-data"
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-id"] = lspHeaderData.LspId
    leafs["local-lsp-flag"] = lspHeaderData.LocalLspFlag
    leafs["lsp-active-flag"] = lspHeaderData.LspActiveFlag
    leafs["lsp-holdtime"] = lspHeaderData.LspHoldtime
    leafs["lsp-sequence-number"] = lspHeaderData.LspSequenceNumber
    leafs["lsp-checksum"] = lspHeaderData.LspChecksum
    leafs["lsp-partition-repair-supported-flag"] = lspHeaderData.LspPartitionRepairSupportedFlag
    leafs["lsp-attached-flag"] = lspHeaderData.LspAttachedFlag
    leafs["lsp-overloaded-flag"] = lspHeaderData.LspOverloadedFlag
    leafs["lsp-nonv1a-flag"] = lspHeaderData.LspNonv1AFlag
    leafs["lsp-level"] = lspHeaderData.LspLevel
    leafs["lsp-length"] = lspHeaderData.LspLength
    leafs["max-area-addresses"] = lspHeaderData.MaxAreaAddresses
    leafs["id-length"] = lspHeaderData.IdLength
    leafs["version"] = lspHeaderData.Version
    leafs["version2"] = lspHeaderData.Version2
    return leafs
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetBundleName() string { return "cisco_ios_xr" }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetYangName() string { return "lsp-header-data" }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) SetParent(parent types.Entity) { lspHeaderData.parent = parent }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetParent() types.Entity { return lspHeaderData.parent }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetParentYangName() string { return "detailed-lsp" }

// Isis_Instances_Instance_Levels_Level_Lsps
// LSP table
type Isis_Instances_Instance_Levels_Level_Lsps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An IS-IS LSP (header information only). The type is slice of
    // Isis_Instances_Instance_Levels_Level_Lsps_Lsp.
    Lsp []Isis_Instances_Instance_Levels_Level_Lsps_Lsp
}

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetFilter() yfilter.YFilter { return lsps.YFilter }

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) SetFilter(yf yfilter.YFilter) { lsps.YFilter = yf }

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetGoName(yname string) string {
    if yname == "lsp" { return "Lsp" }
    return ""
}

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetSegmentPath() string {
    return "lsps"
}

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp" {
        for _, c := range lsps.Lsp {
            if lsps.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_Lsps_Lsp{}
        lsps.Lsp = append(lsps.Lsp, child)
        return &lsps.Lsp[len(lsps.Lsp)-1]
    }
    return nil
}

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lsps.Lsp {
        children[lsps.Lsp[i].GetSegmentPath()] = &lsps.Lsp[i]
    }
    return children
}

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetBundleName() string { return "cisco_ios_xr" }

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetYangName() string { return "lsps" }

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) SetParent(parent types.Entity) { lsps.parent = parent }

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetParent() types.Entity { return lsps.parent }

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetParentYangName() string { return "level" }

// Isis_Instances_Instance_Levels_Level_Lsps_Lsp
// An IS-IS LSP (header information only)
type Isis_Instances_Instance_Levels_Level_Lsps_Lsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // LSP as received/sent over the wire, starting from the LSP ID field. The
    // type is string with pattern: ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    LspBody interface{}

    // Information from the LSP header.
    LspHeaderData Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData
}

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetFilter() yfilter.YFilter { return lsp.YFilter }

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) SetFilter(yf yfilter.YFilter) { lsp.YFilter = yf }

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetGoName(yname string) string {
    if yname == "lsp-id" { return "LspId" }
    if yname == "lsp-body" { return "LspBody" }
    if yname == "lsp-header-data" { return "LspHeaderData" }
    return ""
}

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetSegmentPath() string {
    return "lsp" + "[lsp-id='" + fmt.Sprintf("%v", lsp.LspId) + "']"
}

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-header-data" {
        return &lsp.LspHeaderData
    }
    return nil
}

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-header-data"] = &lsp.LspHeaderData
    return children
}

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-id"] = lsp.LspId
    leafs["lsp-body"] = lsp.LspBody
    return leafs
}

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetBundleName() string { return "cisco_ios_xr" }

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetYangName() string { return "lsp" }

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) SetParent(parent types.Entity) { lsp.parent = parent }

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetParent() types.Entity { return lsp.parent }

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetParentYangName() string { return "lsps" }

// Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData
// Information from the LSP header
type Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // TRUE if this is a locally generated LSP. The type is bool.
    LocalLspFlag interface{}

    // TRUE if this LSP has not expired. The type is bool.
    LspActiveFlag interface{}

    // Time, in seconds, until LSP expiry (if active) or deletion (if expired) .
    // The type is interface{} with range: 0..65535. Units are second.
    LspHoldtime interface{}

    // The LSP sequence number. The type is interface{} with range: 0..4294967295.
    LspSequenceNumber interface{}

    // The LSP checksum. The type is interface{} with range: 0..65535.
    LspChecksum interface{}

    // TRUE if partition repair is supported. The type is bool.
    LspPartitionRepairSupportedFlag interface{}

    // TRUE if attached bit is set. The type is bool.
    LspAttachedFlag interface{}

    // TRUE if the overload bit is set. The type is bool.
    LspOverloadedFlag interface{}

    // TRUE if the LSP is non-v1a, XXX for testing. The type is interface{} with
    // range: 0..65535.
    LspNonv1AFlag interface{}

    // The type of the IS sourcing the LSP. The type is IsisLevels.
    LspLevel interface{}

    // The total length of the LSP. The type is interface{} with range: 0..65535.
    LspLength interface{}

    // max area addresses. The type is interface{} with range: 0..255.
    MaxAreaAddresses interface{}

    // System Id length. The type is interface{} with range: 0..255.
    IdLength interface{}

    // isis version. The type is interface{} with range: 0..255.
    Version interface{}

    // isis version2. The type is interface{} with range: 0..255.
    Version2 interface{}
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetFilter() yfilter.YFilter { return lspHeaderData.YFilter }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) SetFilter(yf yfilter.YFilter) { lspHeaderData.YFilter = yf }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetGoName(yname string) string {
    if yname == "lsp-id" { return "LspId" }
    if yname == "local-lsp-flag" { return "LocalLspFlag" }
    if yname == "lsp-active-flag" { return "LspActiveFlag" }
    if yname == "lsp-holdtime" { return "LspHoldtime" }
    if yname == "lsp-sequence-number" { return "LspSequenceNumber" }
    if yname == "lsp-checksum" { return "LspChecksum" }
    if yname == "lsp-partition-repair-supported-flag" { return "LspPartitionRepairSupportedFlag" }
    if yname == "lsp-attached-flag" { return "LspAttachedFlag" }
    if yname == "lsp-overloaded-flag" { return "LspOverloadedFlag" }
    if yname == "lsp-nonv1a-flag" { return "LspNonv1AFlag" }
    if yname == "lsp-level" { return "LspLevel" }
    if yname == "lsp-length" { return "LspLength" }
    if yname == "max-area-addresses" { return "MaxAreaAddresses" }
    if yname == "id-length" { return "IdLength" }
    if yname == "version" { return "Version" }
    if yname == "version2" { return "Version2" }
    return ""
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetSegmentPath() string {
    return "lsp-header-data"
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-id"] = lspHeaderData.LspId
    leafs["local-lsp-flag"] = lspHeaderData.LocalLspFlag
    leafs["lsp-active-flag"] = lspHeaderData.LspActiveFlag
    leafs["lsp-holdtime"] = lspHeaderData.LspHoldtime
    leafs["lsp-sequence-number"] = lspHeaderData.LspSequenceNumber
    leafs["lsp-checksum"] = lspHeaderData.LspChecksum
    leafs["lsp-partition-repair-supported-flag"] = lspHeaderData.LspPartitionRepairSupportedFlag
    leafs["lsp-attached-flag"] = lspHeaderData.LspAttachedFlag
    leafs["lsp-overloaded-flag"] = lspHeaderData.LspOverloadedFlag
    leafs["lsp-nonv1a-flag"] = lspHeaderData.LspNonv1AFlag
    leafs["lsp-level"] = lspHeaderData.LspLevel
    leafs["lsp-length"] = lspHeaderData.LspLength
    leafs["max-area-addresses"] = lspHeaderData.MaxAreaAddresses
    leafs["id-length"] = lspHeaderData.IdLength
    leafs["version"] = lspHeaderData.Version
    leafs["version2"] = lspHeaderData.Version2
    return leafs
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetBundleName() string { return "cisco_ios_xr" }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetYangName() string { return "lsp-header-data" }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) SetParent(parent types.Entity) { lspHeaderData.parent = parent }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetParent() types.Entity { return lspHeaderData.parent }

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetParentYangName() string { return "lsp" }

// Isis_Instances_Instance_Levels_Level_LspLog
// LSP-log for a single level
type Isis_Instances_Instance_Levels_Level_LspLog struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log entries. The type is slice of
    // Isis_Instances_Instance_Levels_Level_LspLog_LogEntry.
    LogEntry []Isis_Instances_Instance_Levels_Level_LspLog_LogEntry
}

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetFilter() yfilter.YFilter { return lspLog.YFilter }

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) SetFilter(yf yfilter.YFilter) { lspLog.YFilter = yf }

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetGoName(yname string) string {
    if yname == "log-entry" { return "LogEntry" }
    return ""
}

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetSegmentPath() string {
    return "lsp-log"
}

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "log-entry" {
        for _, c := range lspLog.LogEntry {
            if lspLog.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_LspLog_LogEntry{}
        lspLog.LogEntry = append(lspLog.LogEntry, child)
        return &lspLog.LogEntry[len(lspLog.LogEntry)-1]
    }
    return nil
}

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lspLog.LogEntry {
        children[lspLog.LogEntry[i].GetSegmentPath()] = &lspLog.LogEntry[i]
    }
    return children
}

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetBundleName() string { return "cisco_ios_xr" }

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetYangName() string { return "lsp-log" }

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) SetParent(parent types.Entity) { lspLog.parent = parent }

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetParent() types.Entity { return lspLog.parent }

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetParentYangName() string { return "level" }

// Isis_Instances_Instance_Levels_Level_LspLog_LogEntry
// Log entries
type Isis_Instances_Instance_Levels_Level_LspLog_LogEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of triggers on this run. May not be equal to the number of trigger
    // event types if one or more trigger events has occurred more than once. The
    // type is interface{} with range: 0..4294967295.
    TriggerCount interface{}

    // Number of delayed triggers. The type is interface{} with range:
    // 0..4294967295.
    DelayedTriggerCount interface{}

    // Appropriate interface, if any. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    LogInterface interface{}

    // Pseudo-node number. The type is interface{} with range: 0..255.
    PseudoNodeNumber interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData

    // Triggers applying to this log entry. The type is slice of
    // Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger.
    Trigger []Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger
}

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetFilter() yfilter.YFilter { return logEntry.YFilter }

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) SetFilter(yf yfilter.YFilter) { logEntry.YFilter = yf }

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetGoName(yname string) string {
    if yname == "trigger-count" { return "TriggerCount" }
    if yname == "delayed-trigger-count" { return "DelayedTriggerCount" }
    if yname == "log-interface" { return "LogInterface" }
    if yname == "pseudo-node-number" { return "PseudoNodeNumber" }
    if yname == "generic-data" { return "GenericData" }
    if yname == "trigger" { return "Trigger" }
    return ""
}

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetSegmentPath() string {
    return "log-entry"
}

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-data" {
        return &logEntry.GenericData
    }
    if childYangName == "trigger" {
        for _, c := range logEntry.Trigger {
            if logEntry.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger{}
        logEntry.Trigger = append(logEntry.Trigger, child)
        return &logEntry.Trigger[len(logEntry.Trigger)-1]
    }
    return nil
}

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-data"] = &logEntry.GenericData
    for i := range logEntry.Trigger {
        children[logEntry.Trigger[i].GetSegmentPath()] = &logEntry.Trigger[i]
    }
    return children
}

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["trigger-count"] = logEntry.TriggerCount
    leafs["delayed-trigger-count"] = logEntry.DelayedTriggerCount
    leafs["log-interface"] = logEntry.LogInterface
    leafs["pseudo-node-number"] = logEntry.PseudoNodeNumber
    return leafs
}

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetBundleName() string { return "cisco_ios_xr" }

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetYangName() string { return "log-entry" }

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) SetParent(parent types.Entity) { logEntry.parent = parent }

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetParent() types.Entity { return logEntry.parent }

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetParentYangName() string { return "lsp-log" }

// Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetFilter() yfilter.YFilter { return genericData.YFilter }

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) SetFilter(yf yfilter.YFilter) { genericData.YFilter = yf }

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetGoName(yname string) string {
    if yname == "timestamp" { return "Timestamp" }
    return ""
}

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetSegmentPath() string {
    return "generic-data"
}

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "timestamp" {
        return &genericData.Timestamp
    }
    return nil
}

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["timestamp"] = &genericData.Timestamp
    return children
}

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetBundleName() string { return "cisco_ios_xr" }

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetYangName() string { return "generic-data" }

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) SetParent(parent types.Entity) { genericData.parent = parent }

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetParent() types.Entity { return genericData.parent }

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetFilter() yfilter.YFilter { return timestamp.YFilter }

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) SetFilter(yf yfilter.YFilter) { timestamp.YFilter = yf }

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetSegmentPath() string {
    return "timestamp"
}

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = timestamp.Seconds
    leafs["nano-seconds"] = timestamp.NanoSeconds
    return leafs
}

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetBundleName() string { return "cisco_ios_xr" }

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetYangName() string { return "timestamp" }

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) SetParent(parent types.Entity) { timestamp.parent = parent }

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetParent() types.Entity { return timestamp.parent }

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetParentYangName() string { return "generic-data" }

// Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger
// Triggers applying to this log entry.
type Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is IsisLspTrigger.
    Entry interface{}
}

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetFilter() yfilter.YFilter { return trigger.YFilter }

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) SetFilter(yf yfilter.YFilter) { trigger.YFilter = yf }

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetSegmentPath() string {
    return "trigger"
}

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = trigger.Entry
    return leafs
}

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetBundleName() string { return "cisco_ios_xr" }

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetYangName() string { return "trigger" }

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) SetParent(parent types.Entity) { trigger.parent = parent }

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetParent() types.Entity { return trigger.parent }

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_Levels_Level_DatabaseLog
// Database-log for a single level
type Isis_Instances_Instance_Levels_Level_DatabaseLog struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entries. The type is slice of
    // Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry.
    LogEntry []Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry
}

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetFilter() yfilter.YFilter { return databaseLog.YFilter }

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) SetFilter(yf yfilter.YFilter) { databaseLog.YFilter = yf }

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetGoName(yname string) string {
    if yname == "log-entry" { return "LogEntry" }
    return ""
}

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetSegmentPath() string {
    return "database-log"
}

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "log-entry" {
        for _, c := range databaseLog.LogEntry {
            if databaseLog.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry{}
        databaseLog.LogEntry = append(databaseLog.LogEntry, child)
        return &databaseLog.LogEntry[len(databaseLog.LogEntry)-1]
    }
    return nil
}

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range databaseLog.LogEntry {
        children[databaseLog.LogEntry[i].GetSegmentPath()] = &databaseLog.LogEntry[i]
    }
    return children
}

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetBundleName() string { return "cisco_ios_xr" }

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetYangName() string { return "database-log" }

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) SetParent(parent types.Entity) { databaseLog.parent = parent }

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetParent() types.Entity { return databaseLog.parent }

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetParentYangName() string { return "level" }

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry
// Entries
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operation applying to this entry. The type is IsisLspDbOp.
    LspdbOperation interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData

    // Entry being inserted or the updated version of an old entry.
    NewLspEntry Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry

    // Entry being replaced.
    OldLspEntry Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry
}

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetFilter() yfilter.YFilter { return logEntry.YFilter }

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) SetFilter(yf yfilter.YFilter) { logEntry.YFilter = yf }

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetGoName(yname string) string {
    if yname == "lspdb-operation" { return "LspdbOperation" }
    if yname == "generic-data" { return "GenericData" }
    if yname == "new-lsp-entry" { return "NewLspEntry" }
    if yname == "old-lsp-entry" { return "OldLspEntry" }
    return ""
}

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetSegmentPath() string {
    return "log-entry"
}

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-data" {
        return &logEntry.GenericData
    }
    if childYangName == "new-lsp-entry" {
        return &logEntry.NewLspEntry
    }
    if childYangName == "old-lsp-entry" {
        return &logEntry.OldLspEntry
    }
    return nil
}

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-data"] = &logEntry.GenericData
    children["new-lsp-entry"] = &logEntry.NewLspEntry
    children["old-lsp-entry"] = &logEntry.OldLspEntry
    return children
}

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lspdb-operation"] = logEntry.LspdbOperation
    return leafs
}

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetBundleName() string { return "cisco_ios_xr" }

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetYangName() string { return "log-entry" }

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) SetParent(parent types.Entity) { logEntry.parent = parent }

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetParent() types.Entity { return logEntry.parent }

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetParentYangName() string { return "database-log" }

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetFilter() yfilter.YFilter { return genericData.YFilter }

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) SetFilter(yf yfilter.YFilter) { genericData.YFilter = yf }

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetGoName(yname string) string {
    if yname == "timestamp" { return "Timestamp" }
    return ""
}

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetSegmentPath() string {
    return "generic-data"
}

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "timestamp" {
        return &genericData.Timestamp
    }
    return nil
}

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["timestamp"] = &genericData.Timestamp
    return children
}

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetBundleName() string { return "cisco_ios_xr" }

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetYangName() string { return "generic-data" }

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) SetParent(parent types.Entity) { genericData.parent = parent }

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetParent() types.Entity { return genericData.parent }

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetFilter() yfilter.YFilter { return timestamp.YFilter }

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) SetFilter(yf yfilter.YFilter) { timestamp.YFilter = yf }

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetSegmentPath() string {
    return "timestamp"
}

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = timestamp.Seconds
    leafs["nano-seconds"] = timestamp.NanoSeconds
    return leafs
}

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetBundleName() string { return "cisco_ios_xr" }

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetYangName() string { return "timestamp" }

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) SetParent(parent types.Entity) { timestamp.parent = parent }

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetParent() types.Entity { return timestamp.parent }

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetParentYangName() string { return "generic-data" }

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry
// Entry being inserted or the updated version of
// an old entry.
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // TRUE if this is a locally generated LSP. The type is bool.
    LocalLspFlag interface{}

    // TRUE if this LSP has not expired. The type is bool.
    LspActiveFlag interface{}

    // Time, in seconds, until LSP expiry (if active) or deletion (if expired) .
    // The type is interface{} with range: 0..65535. Units are second.
    LspHoldtime interface{}

    // The LSP sequence number. The type is interface{} with range: 0..4294967295.
    LspSequenceNumber interface{}

    // The LSP checksum. The type is interface{} with range: 0..65535.
    LspChecksum interface{}

    // TRUE if partition repair is supported. The type is bool.
    LspPartitionRepairSupportedFlag interface{}

    // TRUE if attached bit is set. The type is bool.
    LspAttachedFlag interface{}

    // TRUE if the overload bit is set. The type is bool.
    LspOverloadedFlag interface{}

    // TRUE if the LSP is non-v1a, XXX for testing. The type is interface{} with
    // range: 0..65535.
    LspNonv1AFlag interface{}

    // The type of the IS sourcing the LSP. The type is IsisLevels.
    LspLevel interface{}

    // The total length of the LSP. The type is interface{} with range: 0..65535.
    LspLength interface{}

    // max area addresses. The type is interface{} with range: 0..255.
    MaxAreaAddresses interface{}

    // System Id length. The type is interface{} with range: 0..255.
    IdLength interface{}

    // isis version. The type is interface{} with range: 0..255.
    Version interface{}

    // isis version2. The type is interface{} with range: 0..255.
    Version2 interface{}
}

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetFilter() yfilter.YFilter { return newLspEntry.YFilter }

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) SetFilter(yf yfilter.YFilter) { newLspEntry.YFilter = yf }

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetGoName(yname string) string {
    if yname == "lsp-id" { return "LspId" }
    if yname == "local-lsp-flag" { return "LocalLspFlag" }
    if yname == "lsp-active-flag" { return "LspActiveFlag" }
    if yname == "lsp-holdtime" { return "LspHoldtime" }
    if yname == "lsp-sequence-number" { return "LspSequenceNumber" }
    if yname == "lsp-checksum" { return "LspChecksum" }
    if yname == "lsp-partition-repair-supported-flag" { return "LspPartitionRepairSupportedFlag" }
    if yname == "lsp-attached-flag" { return "LspAttachedFlag" }
    if yname == "lsp-overloaded-flag" { return "LspOverloadedFlag" }
    if yname == "lsp-nonv1a-flag" { return "LspNonv1AFlag" }
    if yname == "lsp-level" { return "LspLevel" }
    if yname == "lsp-length" { return "LspLength" }
    if yname == "max-area-addresses" { return "MaxAreaAddresses" }
    if yname == "id-length" { return "IdLength" }
    if yname == "version" { return "Version" }
    if yname == "version2" { return "Version2" }
    return ""
}

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetSegmentPath() string {
    return "new-lsp-entry"
}

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-id"] = newLspEntry.LspId
    leafs["local-lsp-flag"] = newLspEntry.LocalLspFlag
    leafs["lsp-active-flag"] = newLspEntry.LspActiveFlag
    leafs["lsp-holdtime"] = newLspEntry.LspHoldtime
    leafs["lsp-sequence-number"] = newLspEntry.LspSequenceNumber
    leafs["lsp-checksum"] = newLspEntry.LspChecksum
    leafs["lsp-partition-repair-supported-flag"] = newLspEntry.LspPartitionRepairSupportedFlag
    leafs["lsp-attached-flag"] = newLspEntry.LspAttachedFlag
    leafs["lsp-overloaded-flag"] = newLspEntry.LspOverloadedFlag
    leafs["lsp-nonv1a-flag"] = newLspEntry.LspNonv1AFlag
    leafs["lsp-level"] = newLspEntry.LspLevel
    leafs["lsp-length"] = newLspEntry.LspLength
    leafs["max-area-addresses"] = newLspEntry.MaxAreaAddresses
    leafs["id-length"] = newLspEntry.IdLength
    leafs["version"] = newLspEntry.Version
    leafs["version2"] = newLspEntry.Version2
    return leafs
}

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetBundleName() string { return "cisco_ios_xr" }

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetYangName() string { return "new-lsp-entry" }

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) SetParent(parent types.Entity) { newLspEntry.parent = parent }

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetParent() types.Entity { return newLspEntry.parent }

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry
// Entry being replaced.
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // TRUE if this is a locally generated LSP. The type is bool.
    LocalLspFlag interface{}

    // TRUE if this LSP has not expired. The type is bool.
    LspActiveFlag interface{}

    // Time, in seconds, until LSP expiry (if active) or deletion (if expired) .
    // The type is interface{} with range: 0..65535. Units are second.
    LspHoldtime interface{}

    // The LSP sequence number. The type is interface{} with range: 0..4294967295.
    LspSequenceNumber interface{}

    // The LSP checksum. The type is interface{} with range: 0..65535.
    LspChecksum interface{}

    // TRUE if partition repair is supported. The type is bool.
    LspPartitionRepairSupportedFlag interface{}

    // TRUE if attached bit is set. The type is bool.
    LspAttachedFlag interface{}

    // TRUE if the overload bit is set. The type is bool.
    LspOverloadedFlag interface{}

    // TRUE if the LSP is non-v1a, XXX for testing. The type is interface{} with
    // range: 0..65535.
    LspNonv1AFlag interface{}

    // The type of the IS sourcing the LSP. The type is IsisLevels.
    LspLevel interface{}

    // The total length of the LSP. The type is interface{} with range: 0..65535.
    LspLength interface{}

    // max area addresses. The type is interface{} with range: 0..255.
    MaxAreaAddresses interface{}

    // System Id length. The type is interface{} with range: 0..255.
    IdLength interface{}

    // isis version. The type is interface{} with range: 0..255.
    Version interface{}

    // isis version2. The type is interface{} with range: 0..255.
    Version2 interface{}
}

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetFilter() yfilter.YFilter { return oldLspEntry.YFilter }

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) SetFilter(yf yfilter.YFilter) { oldLspEntry.YFilter = yf }

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetGoName(yname string) string {
    if yname == "lsp-id" { return "LspId" }
    if yname == "local-lsp-flag" { return "LocalLspFlag" }
    if yname == "lsp-active-flag" { return "LspActiveFlag" }
    if yname == "lsp-holdtime" { return "LspHoldtime" }
    if yname == "lsp-sequence-number" { return "LspSequenceNumber" }
    if yname == "lsp-checksum" { return "LspChecksum" }
    if yname == "lsp-partition-repair-supported-flag" { return "LspPartitionRepairSupportedFlag" }
    if yname == "lsp-attached-flag" { return "LspAttachedFlag" }
    if yname == "lsp-overloaded-flag" { return "LspOverloadedFlag" }
    if yname == "lsp-nonv1a-flag" { return "LspNonv1AFlag" }
    if yname == "lsp-level" { return "LspLevel" }
    if yname == "lsp-length" { return "LspLength" }
    if yname == "max-area-addresses" { return "MaxAreaAddresses" }
    if yname == "id-length" { return "IdLength" }
    if yname == "version" { return "Version" }
    if yname == "version2" { return "Version2" }
    return ""
}

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetSegmentPath() string {
    return "old-lsp-entry"
}

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-id"] = oldLspEntry.LspId
    leafs["local-lsp-flag"] = oldLspEntry.LocalLspFlag
    leafs["lsp-active-flag"] = oldLspEntry.LspActiveFlag
    leafs["lsp-holdtime"] = oldLspEntry.LspHoldtime
    leafs["lsp-sequence-number"] = oldLspEntry.LspSequenceNumber
    leafs["lsp-checksum"] = oldLspEntry.LspChecksum
    leafs["lsp-partition-repair-supported-flag"] = oldLspEntry.LspPartitionRepairSupportedFlag
    leafs["lsp-attached-flag"] = oldLspEntry.LspAttachedFlag
    leafs["lsp-overloaded-flag"] = oldLspEntry.LspOverloadedFlag
    leafs["lsp-nonv1a-flag"] = oldLspEntry.LspNonv1AFlag
    leafs["lsp-level"] = oldLspEntry.LspLevel
    leafs["lsp-length"] = oldLspEntry.LspLength
    leafs["max-area-addresses"] = oldLspEntry.MaxAreaAddresses
    leafs["id-length"] = oldLspEntry.IdLength
    leafs["version"] = oldLspEntry.Version
    leafs["version2"] = oldLspEntry.Version2
    return leafs
}

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetBundleName() string { return "cisco_ios_xr" }

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetYangName() string { return "old-lsp-entry" }

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) SetParent(parent types.Entity) { oldLspEntry.parent = parent }

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetParent() types.Entity { return oldLspEntry.parent }

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_Topologies
// Topology table
type Isis_Instances_Instance_Topologies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Per-topology data. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology.
    Topology []Isis_Instances_Instance_Topologies_Topology
}

func (topologies *Isis_Instances_Instance_Topologies) GetFilter() yfilter.YFilter { return topologies.YFilter }

func (topologies *Isis_Instances_Instance_Topologies) SetFilter(yf yfilter.YFilter) { topologies.YFilter = yf }

func (topologies *Isis_Instances_Instance_Topologies) GetGoName(yname string) string {
    if yname == "topology" { return "Topology" }
    return ""
}

func (topologies *Isis_Instances_Instance_Topologies) GetSegmentPath() string {
    return "topologies"
}

func (topologies *Isis_Instances_Instance_Topologies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "topology" {
        for _, c := range topologies.Topology {
            if topologies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology{}
        topologies.Topology = append(topologies.Topology, child)
        return &topologies.Topology[len(topologies.Topology)-1]
    }
    return nil
}

func (topologies *Isis_Instances_Instance_Topologies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range topologies.Topology {
        children[topologies.Topology[i].GetSegmentPath()] = &topologies.Topology[i]
    }
    return children
}

func (topologies *Isis_Instances_Instance_Topologies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (topologies *Isis_Instances_Instance_Topologies) GetBundleName() string { return "cisco_ios_xr" }

func (topologies *Isis_Instances_Instance_Topologies) GetYangName() string { return "topologies" }

func (topologies *Isis_Instances_Instance_Topologies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (topologies *Isis_Instances_Instance_Topologies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (topologies *Isis_Instances_Instance_Topologies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (topologies *Isis_Instances_Instance_Topologies) SetParent(parent types.Entity) { topologies.parent = parent }

func (topologies *Isis_Instances_Instance_Topologies) GetParent() types.Entity { return topologies.parent }

func (topologies *Isis_Instances_Instance_Topologies) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_Topologies_Topology
// Per-topology data
type Isis_Instances_Instance_Topologies_Topology struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is IsisAddressFamily.
    AfName interface{}

    // Sub address family. The type is IsisSubAddressFamily.
    SafName interface{}

    // Topology Name. The type is string with length: 1..32.
    TopologyName interface{}

    // FRR summary information for a particular IS-IS topology.
    FrrSummary Isis_Instances_Instance_Topologies_Topology_FrrSummary

    // Per-topology level table.
    TopologyLevels Isis_Instances_Instance_Topologies_Topology_TopologyLevels

    // IPv6 local route.
    Ipv6Routes Isis_Instances_Instance_Topologies_Topology_Ipv6Routes

    // IPv6 FRR table.
    Ipv6FrrBackups Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups

    // IPv4 FRR table.
    Ipv4FrrBackups Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups

    // IPv4 local route table.
    Ipv4Routes Isis_Instances_Instance_Topologies_Topology_Ipv4Routes
}

func (topology *Isis_Instances_Instance_Topologies_Topology) GetFilter() yfilter.YFilter { return topology.YFilter }

func (topology *Isis_Instances_Instance_Topologies_Topology) SetFilter(yf yfilter.YFilter) { topology.YFilter = yf }

func (topology *Isis_Instances_Instance_Topologies_Topology) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    if yname == "topology-name" { return "TopologyName" }
    if yname == "frr-summary" { return "FrrSummary" }
    if yname == "topology-levels" { return "TopologyLevels" }
    if yname == "ipv6-routes" { return "Ipv6Routes" }
    if yname == "ipv6frr-backups" { return "Ipv6FrrBackups" }
    if yname == "ipv4frr-backups" { return "Ipv4FrrBackups" }
    if yname == "ipv4-routes" { return "Ipv4Routes" }
    return ""
}

func (topology *Isis_Instances_Instance_Topologies_Topology) GetSegmentPath() string {
    return "topology"
}

func (topology *Isis_Instances_Instance_Topologies_Topology) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-summary" {
        return &topology.FrrSummary
    }
    if childYangName == "topology-levels" {
        return &topology.TopologyLevels
    }
    if childYangName == "ipv6-routes" {
        return &topology.Ipv6Routes
    }
    if childYangName == "ipv6frr-backups" {
        return &topology.Ipv6FrrBackups
    }
    if childYangName == "ipv4frr-backups" {
        return &topology.Ipv4FrrBackups
    }
    if childYangName == "ipv4-routes" {
        return &topology.Ipv4Routes
    }
    return nil
}

func (topology *Isis_Instances_Instance_Topologies_Topology) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-summary"] = &topology.FrrSummary
    children["topology-levels"] = &topology.TopologyLevels
    children["ipv6-routes"] = &topology.Ipv6Routes
    children["ipv6frr-backups"] = &topology.Ipv6FrrBackups
    children["ipv4frr-backups"] = &topology.Ipv4FrrBackups
    children["ipv4-routes"] = &topology.Ipv4Routes
    return children
}

func (topology *Isis_Instances_Instance_Topologies_Topology) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = topology.AfName
    leafs["saf-name"] = topology.SafName
    leafs["topology-name"] = topology.TopologyName
    return leafs
}

func (topology *Isis_Instances_Instance_Topologies_Topology) GetBundleName() string { return "cisco_ios_xr" }

func (topology *Isis_Instances_Instance_Topologies_Topology) GetYangName() string { return "topology" }

func (topology *Isis_Instances_Instance_Topologies_Topology) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (topology *Isis_Instances_Instance_Topologies_Topology) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (topology *Isis_Instances_Instance_Topologies_Topology) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (topology *Isis_Instances_Instance_Topologies_Topology) SetParent(parent types.Entity) { topology.parent = parent }

func (topology *Isis_Instances_Instance_Topologies_Topology) GetParent() types.Entity { return topology.parent }

func (topology *Isis_Instances_Instance_Topologies_Topology) GetParentYangName() string { return "topologies" }

// Isis_Instances_Instance_Topologies_Topology_FrrSummary
// FRR summary information for a particular
// IS-IS topology
type Isis_Instances_Instance_Topologies_Topology_FrrSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FRR summary for prefixes reachable in L1.
    Level1Prefixes Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes

    // FRR summary for prefixes reachable in L2.
    Level2Prefixes Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes

    // Unreachable prefixes.
    UnreachablePrefixes Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes
}

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetFilter() yfilter.YFilter { return frrSummary.YFilter }

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) SetFilter(yf yfilter.YFilter) { frrSummary.YFilter = yf }

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetGoName(yname string) string {
    if yname == "level1-prefixes" { return "Level1Prefixes" }
    if yname == "level2-prefixes" { return "Level2Prefixes" }
    if yname == "unreachable-prefixes" { return "UnreachablePrefixes" }
    return ""
}

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetSegmentPath() string {
    return "frr-summary"
}

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "level1-prefixes" {
        return &frrSummary.Level1Prefixes
    }
    if childYangName == "level2-prefixes" {
        return &frrSummary.Level2Prefixes
    }
    if childYangName == "unreachable-prefixes" {
        return &frrSummary.UnreachablePrefixes
    }
    return nil
}

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["level1-prefixes"] = &frrSummary.Level1Prefixes
    children["level2-prefixes"] = &frrSummary.Level2Prefixes
    children["unreachable-prefixes"] = &frrSummary.UnreachablePrefixes
    return children
}

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetBundleName() string { return "cisco_ios_xr" }

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetYangName() string { return "frr-summary" }

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) SetParent(parent types.Entity) { frrSummary.parent = parent }

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetParent() types.Entity { return frrSummary.parent }

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetParentYangName() string { return "topology" }

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes
// FRR summary for prefixes reachable in L1
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of prefixes with all paths having FRR backup.
    AllPathsProtected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected

    // Number of prefixes with some paths having FRR backup.
    SomePathsProtected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected

    // Number of reachable prefixes without FRR backup.
    Unprotected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected
}

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetFilter() yfilter.YFilter { return level1Prefixes.YFilter }

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) SetFilter(yf yfilter.YFilter) { level1Prefixes.YFilter = yf }

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetGoName(yname string) string {
    if yname == "all-paths-protected" { return "AllPathsProtected" }
    if yname == "some-paths-protected" { return "SomePathsProtected" }
    if yname == "unprotected" { return "Unprotected" }
    return ""
}

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetSegmentPath() string {
    return "level1-prefixes"
}

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "all-paths-protected" {
        return &level1Prefixes.AllPathsProtected
    }
    if childYangName == "some-paths-protected" {
        return &level1Prefixes.SomePathsProtected
    }
    if childYangName == "unprotected" {
        return &level1Prefixes.Unprotected
    }
    return nil
}

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["all-paths-protected"] = &level1Prefixes.AllPathsProtected
    children["some-paths-protected"] = &level1Prefixes.SomePathsProtected
    children["unprotected"] = &level1Prefixes.Unprotected
    return children
}

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetBundleName() string { return "cisco_ios_xr" }

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetYangName() string { return "level1-prefixes" }

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) SetParent(parent types.Entity) { level1Prefixes.parent = parent }

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetParent() types.Entity { return level1Prefixes.parent }

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetParentYangName() string { return "frr-summary" }

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected
// Number of prefixes with all paths having FRR
// backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetFilter() yfilter.YFilter { return allPathsProtected.YFilter }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) SetFilter(yf yfilter.YFilter) { allPathsProtected.YFilter = yf }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetSegmentPath() string {
    return "all-paths-protected"
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = allPathsProtected.Critical
    leafs["high"] = allPathsProtected.High
    leafs["medium"] = allPathsProtected.Medium
    leafs["low"] = allPathsProtected.Low
    return leafs
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetBundleName() string { return "cisco_ios_xr" }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetYangName() string { return "all-paths-protected" }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) SetParent(parent types.Entity) { allPathsProtected.parent = parent }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetParent() types.Entity { return allPathsProtected.parent }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetParentYangName() string { return "level1-prefixes" }

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected
// Number of prefixes with some paths having FRR
// backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetFilter() yfilter.YFilter { return somePathsProtected.YFilter }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) SetFilter(yf yfilter.YFilter) { somePathsProtected.YFilter = yf }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetSegmentPath() string {
    return "some-paths-protected"
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = somePathsProtected.Critical
    leafs["high"] = somePathsProtected.High
    leafs["medium"] = somePathsProtected.Medium
    leafs["low"] = somePathsProtected.Low
    return leafs
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetBundleName() string { return "cisco_ios_xr" }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetYangName() string { return "some-paths-protected" }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) SetParent(parent types.Entity) { somePathsProtected.parent = parent }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetParent() types.Entity { return somePathsProtected.parent }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetParentYangName() string { return "level1-prefixes" }

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected
// Number of reachable prefixes without FRR backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetFilter() yfilter.YFilter { return unprotected.YFilter }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) SetFilter(yf yfilter.YFilter) { unprotected.YFilter = yf }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetSegmentPath() string {
    return "unprotected"
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = unprotected.Critical
    leafs["high"] = unprotected.High
    leafs["medium"] = unprotected.Medium
    leafs["low"] = unprotected.Low
    return leafs
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetBundleName() string { return "cisco_ios_xr" }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetYangName() string { return "unprotected" }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) SetParent(parent types.Entity) { unprotected.parent = parent }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetParent() types.Entity { return unprotected.parent }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetParentYangName() string { return "level1-prefixes" }

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes
// FRR summary for prefixes reachable in L2
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of prefixes with all paths having FRR backup.
    AllPathsProtected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected

    // Number of prefixes with some paths having FRR backup.
    SomePathsProtected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected

    // Number of reachable prefixes without FRR backup.
    Unprotected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected
}

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetFilter() yfilter.YFilter { return level2Prefixes.YFilter }

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) SetFilter(yf yfilter.YFilter) { level2Prefixes.YFilter = yf }

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetGoName(yname string) string {
    if yname == "all-paths-protected" { return "AllPathsProtected" }
    if yname == "some-paths-protected" { return "SomePathsProtected" }
    if yname == "unprotected" { return "Unprotected" }
    return ""
}

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetSegmentPath() string {
    return "level2-prefixes"
}

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "all-paths-protected" {
        return &level2Prefixes.AllPathsProtected
    }
    if childYangName == "some-paths-protected" {
        return &level2Prefixes.SomePathsProtected
    }
    if childYangName == "unprotected" {
        return &level2Prefixes.Unprotected
    }
    return nil
}

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["all-paths-protected"] = &level2Prefixes.AllPathsProtected
    children["some-paths-protected"] = &level2Prefixes.SomePathsProtected
    children["unprotected"] = &level2Prefixes.Unprotected
    return children
}

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetBundleName() string { return "cisco_ios_xr" }

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetYangName() string { return "level2-prefixes" }

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) SetParent(parent types.Entity) { level2Prefixes.parent = parent }

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetParent() types.Entity { return level2Prefixes.parent }

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetParentYangName() string { return "frr-summary" }

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected
// Number of prefixes with all paths having FRR
// backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetFilter() yfilter.YFilter { return allPathsProtected.YFilter }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) SetFilter(yf yfilter.YFilter) { allPathsProtected.YFilter = yf }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetSegmentPath() string {
    return "all-paths-protected"
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = allPathsProtected.Critical
    leafs["high"] = allPathsProtected.High
    leafs["medium"] = allPathsProtected.Medium
    leafs["low"] = allPathsProtected.Low
    return leafs
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetBundleName() string { return "cisco_ios_xr" }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetYangName() string { return "all-paths-protected" }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) SetParent(parent types.Entity) { allPathsProtected.parent = parent }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetParent() types.Entity { return allPathsProtected.parent }

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetParentYangName() string { return "level2-prefixes" }

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected
// Number of prefixes with some paths having FRR
// backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetFilter() yfilter.YFilter { return somePathsProtected.YFilter }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) SetFilter(yf yfilter.YFilter) { somePathsProtected.YFilter = yf }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetSegmentPath() string {
    return "some-paths-protected"
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = somePathsProtected.Critical
    leafs["high"] = somePathsProtected.High
    leafs["medium"] = somePathsProtected.Medium
    leafs["low"] = somePathsProtected.Low
    return leafs
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetBundleName() string { return "cisco_ios_xr" }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetYangName() string { return "some-paths-protected" }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) SetParent(parent types.Entity) { somePathsProtected.parent = parent }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetParent() types.Entity { return somePathsProtected.parent }

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetParentYangName() string { return "level2-prefixes" }

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected
// Number of reachable prefixes without FRR backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetFilter() yfilter.YFilter { return unprotected.YFilter }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) SetFilter(yf yfilter.YFilter) { unprotected.YFilter = yf }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetSegmentPath() string {
    return "unprotected"
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = unprotected.Critical
    leafs["high"] = unprotected.High
    leafs["medium"] = unprotected.Medium
    leafs["low"] = unprotected.Low
    return leafs
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetBundleName() string { return "cisco_ios_xr" }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetYangName() string { return "unprotected" }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) SetParent(parent types.Entity) { unprotected.parent = parent }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetParent() types.Entity { return unprotected.parent }

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetParentYangName() string { return "level2-prefixes" }

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes
// Unreachable prefixes
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetFilter() yfilter.YFilter { return unreachablePrefixes.YFilter }

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) SetFilter(yf yfilter.YFilter) { unreachablePrefixes.YFilter = yf }

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetSegmentPath() string {
    return "unreachable-prefixes"
}

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = unreachablePrefixes.Critical
    leafs["high"] = unreachablePrefixes.High
    leafs["medium"] = unreachablePrefixes.Medium
    leafs["low"] = unreachablePrefixes.Low
    return leafs
}

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetYangName() string { return "unreachable-prefixes" }

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) SetParent(parent types.Entity) { unreachablePrefixes.parent = parent }

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetParent() types.Entity { return unreachablePrefixes.parent }

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetParentYangName() string { return "frr-summary" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels
// Per-topology level table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Per-level topology operational data. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel.
    TopologyLevel []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel
}

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetFilter() yfilter.YFilter { return topologyLevels.YFilter }

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) SetFilter(yf yfilter.YFilter) { topologyLevels.YFilter = yf }

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetGoName(yname string) string {
    if yname == "topology-level" { return "TopologyLevel" }
    return ""
}

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetSegmentPath() string {
    return "topology-levels"
}

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "topology-level" {
        for _, c := range topologyLevels.TopologyLevel {
            if topologyLevels.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel{}
        topologyLevels.TopologyLevel = append(topologyLevels.TopologyLevel, child)
        return &topologyLevels.TopologyLevel[len(topologyLevels.TopologyLevel)-1]
    }
    return nil
}

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range topologyLevels.TopologyLevel {
        children[topologyLevels.TopologyLevel[i].GetSegmentPath()] = &topologyLevels.TopologyLevel[i]
    }
    return children
}

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetBundleName() string { return "cisco_ios_xr" }

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetYangName() string { return "topology-levels" }

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) SetParent(parent types.Entity) { topologyLevels.parent = parent }

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetParent() types.Entity { return topologyLevels.parent }

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetParentYangName() string { return "topology" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel
// Per-level topology operational data
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Level. The type is IsisInternalLevel.
    Level interface{}

    // TE advertisements for a single level and topology. Only available within
    // the IPv4 Unicast topology.
    TeAdvertisements Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements

    // TE adjacency-log for a single level and topology. Only available within the
    // IPv4 Unicast topology.
    TeAdjacencyLog Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog

    // Log of route calculations for a single level and topology.
    SpfLog Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog

    // TE tunnels table. Only available within the IPv4 Unicast topology.
    TeTunnels Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels

    // IPv4 IS Topology table.
    Ipv4LinkTopologies Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies

    // Summary information for a particular IS Topology.
    TopologySummary Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary

    // IPv6 IS Topology table.
    Ipv6LinkTopologies Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies
}

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetFilter() yfilter.YFilter { return topologyLevel.YFilter }

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) SetFilter(yf yfilter.YFilter) { topologyLevel.YFilter = yf }

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "te-advertisements" { return "TeAdvertisements" }
    if yname == "te-adjacency-log" { return "TeAdjacencyLog" }
    if yname == "spf-log" { return "SpfLog" }
    if yname == "te-tunnels" { return "TeTunnels" }
    if yname == "ipv4-link-topologies" { return "Ipv4LinkTopologies" }
    if yname == "topology-summary" { return "TopologySummary" }
    if yname == "ipv6-link-topologies" { return "Ipv6LinkTopologies" }
    return ""
}

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetSegmentPath() string {
    return "topology-level" + "[level='" + fmt.Sprintf("%v", topologyLevel.Level) + "']"
}

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "te-advertisements" {
        return &topologyLevel.TeAdvertisements
    }
    if childYangName == "te-adjacency-log" {
        return &topologyLevel.TeAdjacencyLog
    }
    if childYangName == "spf-log" {
        return &topologyLevel.SpfLog
    }
    if childYangName == "te-tunnels" {
        return &topologyLevel.TeTunnels
    }
    if childYangName == "ipv4-link-topologies" {
        return &topologyLevel.Ipv4LinkTopologies
    }
    if childYangName == "topology-summary" {
        return &topologyLevel.TopologySummary
    }
    if childYangName == "ipv6-link-topologies" {
        return &topologyLevel.Ipv6LinkTopologies
    }
    return nil
}

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["te-advertisements"] = &topologyLevel.TeAdvertisements
    children["te-adjacency-log"] = &topologyLevel.TeAdjacencyLog
    children["spf-log"] = &topologyLevel.SpfLog
    children["te-tunnels"] = &topologyLevel.TeTunnels
    children["ipv4-link-topologies"] = &topologyLevel.Ipv4LinkTopologies
    children["topology-summary"] = &topologyLevel.TopologySummary
    children["ipv6-link-topologies"] = &topologyLevel.Ipv6LinkTopologies
    return children
}

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = topologyLevel.Level
    return leafs
}

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetBundleName() string { return "cisco_ios_xr" }

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetYangName() string { return "topology-level" }

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) SetParent(parent types.Entity) { topologyLevel.parent = parent }

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetParent() types.Entity { return topologyLevel.parent }

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetParentYangName() string { return "topology-levels" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements
// TE advertisements for a single level and
// topology. Only available within the IPv4
// Unicast topology.
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Indicates whether any TE advertisements are present. The type is bool.
    TeAdvDataPresent interface{}

    // Local system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    TeSystemId interface{}

    // Local TE router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TeLocalRouterId interface{}

    // TE PCE advertisements.
    Tepceadv Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv

    // List of TE advertisement entries. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv.
    TeAdv []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv
}

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetFilter() yfilter.YFilter { return teAdvertisements.YFilter }

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) SetFilter(yf yfilter.YFilter) { teAdvertisements.YFilter = yf }

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetGoName(yname string) string {
    if yname == "te-adv-data-present" { return "TeAdvDataPresent" }
    if yname == "te-system-id" { return "TeSystemId" }
    if yname == "te-local-router-id" { return "TeLocalRouterId" }
    if yname == "tepceadv" { return "Tepceadv" }
    if yname == "te-adv" { return "TeAdv" }
    return ""
}

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetSegmentPath() string {
    return "te-advertisements"
}

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tepceadv" {
        return &teAdvertisements.Tepceadv
    }
    if childYangName == "te-adv" {
        for _, c := range teAdvertisements.TeAdv {
            if teAdvertisements.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv{}
        teAdvertisements.TeAdv = append(teAdvertisements.TeAdv, child)
        return &teAdvertisements.TeAdv[len(teAdvertisements.TeAdv)-1]
    }
    return nil
}

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tepceadv"] = &teAdvertisements.Tepceadv
    for i := range teAdvertisements.TeAdv {
        children[teAdvertisements.TeAdv[i].GetSegmentPath()] = &teAdvertisements.TeAdv[i]
    }
    return children
}

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-adv-data-present"] = teAdvertisements.TeAdvDataPresent
    leafs["te-system-id"] = teAdvertisements.TeSystemId
    leafs["te-local-router-id"] = teAdvertisements.TeLocalRouterId
    return leafs
}

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetBundleName() string { return "cisco_ios_xr" }

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetYangName() string { return "te-advertisements" }

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) SetParent(parent types.Entity) { teAdvertisements.parent = parent }

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetParent() types.Entity { return teAdvertisements.parent }

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetParentYangName() string { return "topology-level" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv
// TE PCE advertisements
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Indicates whether any PCE advertisements are present. The type is bool.
    PceAdvDataPresent interface{}

    // Flooding scope for PCE advertisement. The type is IsisShTePceFloodingScope.
    PceFloodingScope interface{}

    // IPv4 PCE address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PceAddressIpv4 interface{}

    // PCE path scope bits. The type is interface{} with range: 0..255.
    PcePathScopeBits interface{}

    // PCE path scope preferences. The type is interface{} with range: 0..65535.
    PcePathScopePrefs interface{}
}

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetFilter() yfilter.YFilter { return tepceadv.YFilter }

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) SetFilter(yf yfilter.YFilter) { tepceadv.YFilter = yf }

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetGoName(yname string) string {
    if yname == "pce-adv-data-present" { return "PceAdvDataPresent" }
    if yname == "pce-flooding-scope" { return "PceFloodingScope" }
    if yname == "pce-address-ipv4" { return "PceAddressIpv4" }
    if yname == "pce-path-scope-bits" { return "PcePathScopeBits" }
    if yname == "pce-path-scope-prefs" { return "PcePathScopePrefs" }
    return ""
}

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetSegmentPath() string {
    return "tepceadv"
}

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pce-adv-data-present"] = tepceadv.PceAdvDataPresent
    leafs["pce-flooding-scope"] = tepceadv.PceFloodingScope
    leafs["pce-address-ipv4"] = tepceadv.PceAddressIpv4
    leafs["pce-path-scope-bits"] = tepceadv.PcePathScopeBits
    leafs["pce-path-scope-prefs"] = tepceadv.PcePathScopePrefs
    return leafs
}

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetBundleName() string { return "cisco_ios_xr" }

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetYangName() string { return "tepceadv" }

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) SetParent(parent types.Entity) { tepceadv.parent = parent }

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetParent() types.Entity { return tepceadv.parent }

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetParentYangName() string { return "te-advertisements" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv
// List of TE advertisement entries
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    TeNeighborSystemId interface{}

    // Link type. The type is IsisShTeLink.
    LinkType interface{}

    // Local IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TeNeighborIpAddress interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    TeMetric interface{}

    // Physical link bandwidth. The type is interface{} with range: 0..4294967295.
    TePhysicalLinkBandwidth interface{}

    // Reservable link bandwidth in global pool. The type is interface{} with
    // range: 0..4294967295.
    TeReservedLinkBandwidth interface{}

    // Reservable link bandwidth in subpool. The type is interface{} with range:
    // 0..4294967295.
    TeSubpoolReservedLinkBandwidth interface{}

    // Affinity bits. The type is interface{} with range: 0..4294967295.
    TeAffinity interface{}

    // TE Ext Admin Number. The type is interface{} with range: 0..4294967295.
    TeExtAdminNum interface{}

    // Indicates whether any TE sub TLVs are present. The type is bool.
    TeSubTlvDataPresent interface{}

    // Bandwidth in use in global pool. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth.
    TeTransmittedBandwidth []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth

    // Bandwidth in use in subpool. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth.
    TeSubpoolTransmittedBandwidth []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth

    // TE Extended Admin Group. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub.
    TeExtAdminSub []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub

    // List of TE sub TLVs. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv.
    TeSubTlv []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv
}

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetFilter() yfilter.YFilter { return teAdv.YFilter }

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) SetFilter(yf yfilter.YFilter) { teAdv.YFilter = yf }

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetGoName(yname string) string {
    if yname == "te-neighbor-system-id" { return "TeNeighborSystemId" }
    if yname == "link-type" { return "LinkType" }
    if yname == "local-ip-address" { return "LocalIpAddress" }
    if yname == "te-neighbor-ip-address" { return "TeNeighborIpAddress" }
    if yname == "te-metric" { return "TeMetric" }
    if yname == "te-physical-link-bandwidth" { return "TePhysicalLinkBandwidth" }
    if yname == "te-reserved-link-bandwidth" { return "TeReservedLinkBandwidth" }
    if yname == "te-subpool-reserved-link-bandwidth" { return "TeSubpoolReservedLinkBandwidth" }
    if yname == "te-affinity" { return "TeAffinity" }
    if yname == "te-ext-admin-num" { return "TeExtAdminNum" }
    if yname == "te-sub-tlv-data-present" { return "TeSubTlvDataPresent" }
    if yname == "te-transmitted-bandwidth" { return "TeTransmittedBandwidth" }
    if yname == "te-subpool-transmitted-bandwidth" { return "TeSubpoolTransmittedBandwidth" }
    if yname == "te-ext-admin-sub" { return "TeExtAdminSub" }
    if yname == "te-sub-tlv" { return "TeSubTlv" }
    return ""
}

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetSegmentPath() string {
    return "te-adv"
}

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "te-transmitted-bandwidth" {
        for _, c := range teAdv.TeTransmittedBandwidth {
            if teAdv.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth{}
        teAdv.TeTransmittedBandwidth = append(teAdv.TeTransmittedBandwidth, child)
        return &teAdv.TeTransmittedBandwidth[len(teAdv.TeTransmittedBandwidth)-1]
    }
    if childYangName == "te-subpool-transmitted-bandwidth" {
        for _, c := range teAdv.TeSubpoolTransmittedBandwidth {
            if teAdv.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth{}
        teAdv.TeSubpoolTransmittedBandwidth = append(teAdv.TeSubpoolTransmittedBandwidth, child)
        return &teAdv.TeSubpoolTransmittedBandwidth[len(teAdv.TeSubpoolTransmittedBandwidth)-1]
    }
    if childYangName == "te-ext-admin-sub" {
        for _, c := range teAdv.TeExtAdminSub {
            if teAdv.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub{}
        teAdv.TeExtAdminSub = append(teAdv.TeExtAdminSub, child)
        return &teAdv.TeExtAdminSub[len(teAdv.TeExtAdminSub)-1]
    }
    if childYangName == "te-sub-tlv" {
        for _, c := range teAdv.TeSubTlv {
            if teAdv.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv{}
        teAdv.TeSubTlv = append(teAdv.TeSubTlv, child)
        return &teAdv.TeSubTlv[len(teAdv.TeSubTlv)-1]
    }
    return nil
}

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range teAdv.TeTransmittedBandwidth {
        children[teAdv.TeTransmittedBandwidth[i].GetSegmentPath()] = &teAdv.TeTransmittedBandwidth[i]
    }
    for i := range teAdv.TeSubpoolTransmittedBandwidth {
        children[teAdv.TeSubpoolTransmittedBandwidth[i].GetSegmentPath()] = &teAdv.TeSubpoolTransmittedBandwidth[i]
    }
    for i := range teAdv.TeExtAdminSub {
        children[teAdv.TeExtAdminSub[i].GetSegmentPath()] = &teAdv.TeExtAdminSub[i]
    }
    for i := range teAdv.TeSubTlv {
        children[teAdv.TeSubTlv[i].GetSegmentPath()] = &teAdv.TeSubTlv[i]
    }
    return children
}

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-neighbor-system-id"] = teAdv.TeNeighborSystemId
    leafs["link-type"] = teAdv.LinkType
    leafs["local-ip-address"] = teAdv.LocalIpAddress
    leafs["te-neighbor-ip-address"] = teAdv.TeNeighborIpAddress
    leafs["te-metric"] = teAdv.TeMetric
    leafs["te-physical-link-bandwidth"] = teAdv.TePhysicalLinkBandwidth
    leafs["te-reserved-link-bandwidth"] = teAdv.TeReservedLinkBandwidth
    leafs["te-subpool-reserved-link-bandwidth"] = teAdv.TeSubpoolReservedLinkBandwidth
    leafs["te-affinity"] = teAdv.TeAffinity
    leafs["te-ext-admin-num"] = teAdv.TeExtAdminNum
    leafs["te-sub-tlv-data-present"] = teAdv.TeSubTlvDataPresent
    return leafs
}

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetBundleName() string { return "cisco_ios_xr" }

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetYangName() string { return "te-adv" }

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) SetParent(parent types.Entity) { teAdv.parent = parent }

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetParent() types.Entity { return teAdv.parent }

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetParentYangName() string { return "te-advertisements" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth
// Bandwidth in use in global pool
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetFilter() yfilter.YFilter { return teTransmittedBandwidth.YFilter }

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) SetFilter(yf yfilter.YFilter) { teTransmittedBandwidth.YFilter = yf }

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetSegmentPath() string {
    return "te-transmitted-bandwidth"
}

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = teTransmittedBandwidth.Entry
    return leafs
}

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetYangName() string { return "te-transmitted-bandwidth" }

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) SetParent(parent types.Entity) { teTransmittedBandwidth.parent = parent }

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetParent() types.Entity { return teTransmittedBandwidth.parent }

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetParentYangName() string { return "te-adv" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth
// Bandwidth in use in subpool
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetFilter() yfilter.YFilter { return teSubpoolTransmittedBandwidth.YFilter }

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) SetFilter(yf yfilter.YFilter) { teSubpoolTransmittedBandwidth.YFilter = yf }

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetSegmentPath() string {
    return "te-subpool-transmitted-bandwidth"
}

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = teSubpoolTransmittedBandwidth.Entry
    return leafs
}

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetYangName() string { return "te-subpool-transmitted-bandwidth" }

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) SetParent(parent types.Entity) { teSubpoolTransmittedBandwidth.parent = parent }

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetParent() types.Entity { return teSubpoolTransmittedBandwidth.parent }

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetParentYangName() string { return "te-adv" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub
// TE Extended Admin Group
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetFilter() yfilter.YFilter { return teExtAdminSub.YFilter }

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) SetFilter(yf yfilter.YFilter) { teExtAdminSub.YFilter = yf }

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetSegmentPath() string {
    return "te-ext-admin-sub"
}

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = teExtAdminSub.Entry
    return leafs
}

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetBundleName() string { return "cisco_ios_xr" }

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetYangName() string { return "te-ext-admin-sub" }

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) SetParent(parent types.Entity) { teExtAdminSub.parent = parent }

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetParent() types.Entity { return teExtAdminSub.parent }

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetParentYangName() string { return "te-adv" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv
// List of TE sub TLVs
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is interface{} with range: 0..65535.
    TeSubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    TeSubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TeSubTlvValue interface{}
}

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetFilter() yfilter.YFilter { return teSubTlv.YFilter }

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) SetFilter(yf yfilter.YFilter) { teSubTlv.YFilter = yf }

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetGoName(yname string) string {
    if yname == "te-sub-tlv-type" { return "TeSubTlvType" }
    if yname == "te-sub-tlv-length" { return "TeSubTlvLength" }
    if yname == "te-sub-tlv-value" { return "TeSubTlvValue" }
    return ""
}

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetSegmentPath() string {
    return "te-sub-tlv"
}

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-sub-tlv-type"] = teSubTlv.TeSubTlvType
    leafs["te-sub-tlv-length"] = teSubTlv.TeSubTlvLength
    leafs["te-sub-tlv-value"] = teSubTlv.TeSubTlvValue
    return leafs
}

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetBundleName() string { return "cisco_ios_xr" }

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetYangName() string { return "te-sub-tlv" }

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) SetParent(parent types.Entity) { teSubTlv.parent = parent }

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetParent() types.Entity { return teSubTlv.parent }

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetParentYangName() string { return "te-adv" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog
// TE adjacency-log for a single level and
// topology. Only available within the IPv4
// Unicast topology.
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log entries. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry.
    LogEntry []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry
}

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetFilter() yfilter.YFilter { return teAdjacencyLog.YFilter }

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) SetFilter(yf yfilter.YFilter) { teAdjacencyLog.YFilter = yf }

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetGoName(yname string) string {
    if yname == "log-entry" { return "LogEntry" }
    return ""
}

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetSegmentPath() string {
    return "te-adjacency-log"
}

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "log-entry" {
        for _, c := range teAdjacencyLog.LogEntry {
            if teAdjacencyLog.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry{}
        teAdjacencyLog.LogEntry = append(teAdjacencyLog.LogEntry, child)
        return &teAdjacencyLog.LogEntry[len(teAdjacencyLog.LogEntry)-1]
    }
    return nil
}

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range teAdjacencyLog.LogEntry {
        children[teAdjacencyLog.LogEntry[i].GetSegmentPath()] = &teAdjacencyLog.LogEntry[i]
    }
    return children
}

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetBundleName() string { return "cisco_ios_xr" }

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetYangName() string { return "te-adjacency-log" }

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) SetParent(parent types.Entity) { teAdjacencyLog.parent = parent }

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetParent() types.Entity { return teAdjacencyLog.parent }

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetParentYangName() string { return "topology-level" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry
// Log entries
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor ip address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborIpAddress interface{}

    // Up (TRUE) or down. The type is bool.
    Status interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    LogInterface interface{}

    // Neighbor system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    TeLogNeighborSystemId interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetFilter() yfilter.YFilter { return logEntry.YFilter }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) SetFilter(yf yfilter.YFilter) { logEntry.YFilter = yf }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetGoName(yname string) string {
    if yname == "neighbor-ip-address" { return "NeighborIpAddress" }
    if yname == "status" { return "Status" }
    if yname == "log-interface" { return "LogInterface" }
    if yname == "te-log-neighbor-system-id" { return "TeLogNeighborSystemId" }
    if yname == "generic-data" { return "GenericData" }
    return ""
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetSegmentPath() string {
    return "log-entry"
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-data" {
        return &logEntry.GenericData
    }
    return nil
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-data"] = &logEntry.GenericData
    return children
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-ip-address"] = logEntry.NeighborIpAddress
    leafs["status"] = logEntry.Status
    leafs["log-interface"] = logEntry.LogInterface
    leafs["te-log-neighbor-system-id"] = logEntry.TeLogNeighborSystemId
    return leafs
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetBundleName() string { return "cisco_ios_xr" }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetYangName() string { return "log-entry" }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) SetParent(parent types.Entity) { logEntry.parent = parent }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetParent() types.Entity { return logEntry.parent }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetParentYangName() string { return "te-adjacency-log" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetFilter() yfilter.YFilter { return genericData.YFilter }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) SetFilter(yf yfilter.YFilter) { genericData.YFilter = yf }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetGoName(yname string) string {
    if yname == "timestamp" { return "Timestamp" }
    return ""
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetSegmentPath() string {
    return "generic-data"
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "timestamp" {
        return &genericData.Timestamp
    }
    return nil
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["timestamp"] = &genericData.Timestamp
    return children
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetBundleName() string { return "cisco_ios_xr" }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetYangName() string { return "generic-data" }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) SetParent(parent types.Entity) { genericData.parent = parent }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetParent() types.Entity { return genericData.parent }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetFilter() yfilter.YFilter { return timestamp.YFilter }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) SetFilter(yf yfilter.YFilter) { timestamp.YFilter = yf }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetSegmentPath() string {
    return "timestamp"
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = timestamp.Seconds
    leafs["nano-seconds"] = timestamp.NanoSeconds
    return leafs
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetBundleName() string { return "cisco_ios_xr" }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetYangName() string { return "timestamp" }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) SetParent(parent types.Entity) { timestamp.parent = parent }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetParent() types.Entity { return timestamp.parent }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetParentYangName() string { return "generic-data" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog
// Log of route calculations for a single
// level and topology
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SPF Log entries. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry.
    LogEntry []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry
}

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetFilter() yfilter.YFilter { return spfLog.YFilter }

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) SetFilter(yf yfilter.YFilter) { spfLog.YFilter = yf }

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetGoName(yname string) string {
    if yname == "log-entry" { return "LogEntry" }
    return ""
}

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetSegmentPath() string {
    return "spf-log"
}

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "log-entry" {
        for _, c := range spfLog.LogEntry {
            if spfLog.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry{}
        spfLog.LogEntry = append(spfLog.LogEntry, child)
        return &spfLog.LogEntry[len(spfLog.LogEntry)-1]
    }
    return nil
}

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spfLog.LogEntry {
        children[spfLog.LogEntry[i].GetSegmentPath()] = &spfLog.LogEntry[i]
    }
    return children
}

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetBundleName() string { return "cisco_ios_xr" }

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetYangName() string { return "spf-log" }

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) SetParent(parent types.Entity) { spfLog.parent = parent }

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetParent() types.Entity { return spfLog.parent }

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetParentYangName() string { return "topology-level" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry
// SPF Log entries
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of calculation. The type is IsisSpfClass.
    Class interface{}

    // Time between the first trigger and the start of the route calculation, in
    // milliseconds. The type is interface{} with range: 0..4294967295. Units are
    // millisecond.
    WaitEnforced interface{}

    // Minimum time from end of this route calculation until the start of the
    // next, in milliseconds. The type is interface{} with range: 0..4294967295.
    // Units are millisecond.
    NextWaitInterval interface{}

    // Number of LSPs which arrived during the route calculation. The type is
    // interface{} with range: 0..4294967295.
    UpdatedLspCount interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData

    // Trigger information.
    Triggers Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers

    // Statistics for the SPT calculation phase.
    SptCalculationStatistics Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics

    // Statistics for the route update phase.
    RouteUpdateStatistics Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetFilter() yfilter.YFilter { return logEntry.YFilter }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) SetFilter(yf yfilter.YFilter) { logEntry.YFilter = yf }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetGoName(yname string) string {
    if yname == "class" { return "Class" }
    if yname == "wait-enforced" { return "WaitEnforced" }
    if yname == "next-wait-interval" { return "NextWaitInterval" }
    if yname == "updated-lsp-count" { return "UpdatedLspCount" }
    if yname == "generic-data" { return "GenericData" }
    if yname == "triggers" { return "Triggers" }
    if yname == "spt-calculation-statistics" { return "SptCalculationStatistics" }
    if yname == "route-update-statistics" { return "RouteUpdateStatistics" }
    return ""
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetSegmentPath() string {
    return "log-entry"
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-data" {
        return &logEntry.GenericData
    }
    if childYangName == "triggers" {
        return &logEntry.Triggers
    }
    if childYangName == "spt-calculation-statistics" {
        return &logEntry.SptCalculationStatistics
    }
    if childYangName == "route-update-statistics" {
        return &logEntry.RouteUpdateStatistics
    }
    return nil
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-data"] = &logEntry.GenericData
    children["triggers"] = &logEntry.Triggers
    children["spt-calculation-statistics"] = &logEntry.SptCalculationStatistics
    children["route-update-statistics"] = &logEntry.RouteUpdateStatistics
    return children
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["class"] = logEntry.Class
    leafs["wait-enforced"] = logEntry.WaitEnforced
    leafs["next-wait-interval"] = logEntry.NextWaitInterval
    leafs["updated-lsp-count"] = logEntry.UpdatedLspCount
    return leafs
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetBundleName() string { return "cisco_ios_xr" }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetYangName() string { return "log-entry" }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) SetParent(parent types.Entity) { logEntry.parent = parent }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetParent() types.Entity { return logEntry.parent }

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetParentYangName() string { return "spf-log" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData
// Generic entry data.
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetFilter() yfilter.YFilter { return genericData.YFilter }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) SetFilter(yf yfilter.YFilter) { genericData.YFilter = yf }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetGoName(yname string) string {
    if yname == "timestamp" { return "Timestamp" }
    return ""
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetSegmentPath() string {
    return "generic-data"
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "timestamp" {
        return &genericData.Timestamp
    }
    return nil
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["timestamp"] = &genericData.Timestamp
    return children
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetBundleName() string { return "cisco_ios_xr" }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetYangName() string { return "generic-data" }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) SetParent(parent types.Entity) { genericData.parent = parent }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetParent() types.Entity { return genericData.parent }

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetFilter() yfilter.YFilter { return timestamp.YFilter }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) SetFilter(yf yfilter.YFilter) { timestamp.YFilter = yf }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetSegmentPath() string {
    return "timestamp"
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = timestamp.Seconds
    leafs["nano-seconds"] = timestamp.NanoSeconds
    return leafs
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetBundleName() string { return "cisco_ios_xr" }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetYangName() string { return "timestamp" }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) SetParent(parent types.Entity) { timestamp.parent = parent }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetParent() types.Entity { return timestamp.parent }

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetParentYangName() string { return "generic-data" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers
// Trigger information
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of unique triggers on this run. The type is interface{} with range:
    // 0..4294967295.
    UniqueTriggerCount interface{}

    // ID of the first LSP to trigger the calculation, if any. The type is string
    // with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    FirstTriggerLspId interface{}

    // ID of a changed link in the first trigger LSP, if any. The type is string
    // with pattern: [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    TriggerLink interface{}

    // ID of a changed next hop, if any. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    TriggerNextHopId interface{}

    // Is this SR micro loop calculation?. The type is bool.
    IsSrUloopCalculation interface{}

    // Is this SR micro loop calculation for link down?. The type is bool.
    IsSrUloopLinkDown interface{}

    // ID of a changed prefix in the first trigger LSP, if any.
    TriggerPrefix Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix

    // Triggers applying to this log entry. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger.
    Trigger []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger
}

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetFilter() yfilter.YFilter { return triggers.YFilter }

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) SetFilter(yf yfilter.YFilter) { triggers.YFilter = yf }

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetGoName(yname string) string {
    if yname == "unique-trigger-count" { return "UniqueTriggerCount" }
    if yname == "first-trigger-lsp-id" { return "FirstTriggerLspId" }
    if yname == "trigger-link" { return "TriggerLink" }
    if yname == "trigger-next-hop-id" { return "TriggerNextHopId" }
    if yname == "is-sr-uloop-calculation" { return "IsSrUloopCalculation" }
    if yname == "is-sr-uloop-link-down" { return "IsSrUloopLinkDown" }
    if yname == "trigger-prefix" { return "TriggerPrefix" }
    if yname == "trigger" { return "Trigger" }
    return ""
}

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetSegmentPath() string {
    return "triggers"
}

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "trigger-prefix" {
        return &triggers.TriggerPrefix
    }
    if childYangName == "trigger" {
        for _, c := range triggers.Trigger {
            if triggers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger{}
        triggers.Trigger = append(triggers.Trigger, child)
        return &triggers.Trigger[len(triggers.Trigger)-1]
    }
    return nil
}

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["trigger-prefix"] = &triggers.TriggerPrefix
    for i := range triggers.Trigger {
        children[triggers.Trigger[i].GetSegmentPath()] = &triggers.Trigger[i]
    }
    return children
}

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["unique-trigger-count"] = triggers.UniqueTriggerCount
    leafs["first-trigger-lsp-id"] = triggers.FirstTriggerLspId
    leafs["trigger-link"] = triggers.TriggerLink
    leafs["trigger-next-hop-id"] = triggers.TriggerNextHopId
    leafs["is-sr-uloop-calculation"] = triggers.IsSrUloopCalculation
    leafs["is-sr-uloop-link-down"] = triggers.IsSrUloopLinkDown
    return leafs
}

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetBundleName() string { return "cisco_ios_xr" }

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetYangName() string { return "triggers" }

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) SetParent(parent types.Entity) { triggers.parent = parent }

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetParent() types.Entity { return triggers.parent }

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix
// ID of a changed prefix in the first trigger LSP,
// if any
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // ipv4.
    Ipv4 Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4

    // ipv6.
    Ipv6 Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6
}

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetFilter() yfilter.YFilter { return triggerPrefix.YFilter }

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) SetFilter(yf yfilter.YFilter) { triggerPrefix.YFilter = yf }

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetSegmentPath() string {
    return "trigger-prefix"
}

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &triggerPrefix.Ipv4
    }
    if childYangName == "ipv6" {
        return &triggerPrefix.Ipv6
    }
    return nil
}

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &triggerPrefix.Ipv4
    children["ipv6"] = &triggerPrefix.Ipv6
    return children
}

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = triggerPrefix.AfName
    return leafs
}

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetYangName() string { return "trigger-prefix" }

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) SetParent(parent types.Entity) { triggerPrefix.parent = parent }

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetParent() types.Entity { return triggerPrefix.parent }

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetParentYangName() string { return "triggers" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4
// ipv4
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4.Prefix
    leafs["prefix-length"] = ipv4.PrefixLength
    return leafs
}

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetParentYangName() string { return "trigger-prefix" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6
// ipv6
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetFilter() yfilter.YFilter { return ipv6.YFilter }

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) SetFilter(yf yfilter.YFilter) { ipv6.YFilter = yf }

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetSegmentPath() string {
    return "ipv6"
}

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6.Prefix
    leafs["prefix-length"] = ipv6.PrefixLength
    return leafs
}

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetYangName() string { return "ipv6" }

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) SetParent(parent types.Entity) { ipv6.parent = parent }

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetParent() types.Entity { return ipv6.parent }

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetParentYangName() string { return "trigger-prefix" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger
// Triggers applying to this log entry
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is IsisSpfTrigger.
    Entry interface{}
}

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetFilter() yfilter.YFilter { return trigger.YFilter }

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) SetFilter(yf yfilter.YFilter) { trigger.YFilter = yf }

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetSegmentPath() string {
    return "trigger"
}

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = trigger.Entry
    return leafs
}

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetBundleName() string { return "cisco_ios_xr" }

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetYangName() string { return "trigger" }

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) SetParent(parent types.Entity) { trigger.parent = parent }

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetParent() types.Entity { return trigger.parent }

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetParentYangName() string { return "triggers" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics
// Statistics for the SPT calculation phase
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Duration of the SPT calculation.
    Duration Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration

    // Node counts.
    NodeCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts
}

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetFilter() yfilter.YFilter { return sptCalculationStatistics.YFilter }

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) SetFilter(yf yfilter.YFilter) { sptCalculationStatistics.YFilter = yf }

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetGoName(yname string) string {
    if yname == "duration" { return "Duration" }
    if yname == "node-counts" { return "NodeCounts" }
    return ""
}

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetSegmentPath() string {
    return "spt-calculation-statistics"
}

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "duration" {
        return &sptCalculationStatistics.Duration
    }
    if childYangName == "node-counts" {
        return &sptCalculationStatistics.NodeCounts
    }
    return nil
}

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["duration"] = &sptCalculationStatistics.Duration
    children["node-counts"] = &sptCalculationStatistics.NodeCounts
    return children
}

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetYangName() string { return "spt-calculation-statistics" }

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) SetParent(parent types.Entity) { sptCalculationStatistics.parent = parent }

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetParent() types.Entity { return sptCalculationStatistics.parent }

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration
// Duration of the SPT calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetFilter() yfilter.YFilter { return duration.YFilter }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) SetFilter(yf yfilter.YFilter) { duration.YFilter = yf }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetSegmentPath() string {
    return "duration"
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = duration.RealDuration
    leafs["cpu-duration"] = duration.CpuDuration
    return leafs
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetBundleName() string { return "cisco_ios_xr" }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetYangName() string { return "duration" }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) SetParent(parent types.Entity) { duration.parent = parent }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetParent() types.Entity { return duration.parent }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetParentYangName() string { return "spt-calculation-statistics" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts
// Node counts
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of unreachable nodes in the database. The type is interface{} with
    // range: 0..4294967295.
    Unreachable interface{}

    // Number of reachable nodes in the database. The type is interface{} with
    // range: 0..4294967295.
    Reachable interface{}

    // Number of nodes added to the SPT. The type is interface{} with range:
    // 0..4294967295.
    Added interface{}

    // Number of nodes deleted from the SPT. The type is interface{} with range:
    // 0..4294967295.
    Deleted interface{}

    // Number of modified nodes (first hop and/or metric change). The type is
    // interface{} with range: 0..4294967295.
    Modified interface{}

    // Number of nodes touched whilst calculating the SPT. The type is interface{}
    // with range: 0..4294967295.
    Touched interface{}
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetFilter() yfilter.YFilter { return nodeCounts.YFilter }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) SetFilter(yf yfilter.YFilter) { nodeCounts.YFilter = yf }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetGoName(yname string) string {
    if yname == "unreachable" { return "Unreachable" }
    if yname == "reachable" { return "Reachable" }
    if yname == "added" { return "Added" }
    if yname == "deleted" { return "Deleted" }
    if yname == "modified" { return "Modified" }
    if yname == "touched" { return "Touched" }
    return ""
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetSegmentPath() string {
    return "node-counts"
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["unreachable"] = nodeCounts.Unreachable
    leafs["reachable"] = nodeCounts.Reachable
    leafs["added"] = nodeCounts.Added
    leafs["deleted"] = nodeCounts.Deleted
    leafs["modified"] = nodeCounts.Modified
    leafs["touched"] = nodeCounts.Touched
    return leafs
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetBundleName() string { return "cisco_ios_xr" }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetYangName() string { return "node-counts" }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) SetParent(parent types.Entity) { nodeCounts.parent = parent }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetParent() types.Entity { return nodeCounts.parent }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetParentYangName() string { return "spt-calculation-statistics" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics
// Statistics for the route update phase
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Duration of the routing table update.
    Duration Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration

    // Breakdown of the time taken by the routing table update.
    DurationBreakdown Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown

    // Node counts.
    NodeCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts

    // Prefix item counts.
    ItemCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts

    // Distinct prefix counts.
    RouteCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts

    // Number of RIB batches sent.
    RibBatchCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts
}

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetFilter() yfilter.YFilter { return routeUpdateStatistics.YFilter }

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) SetFilter(yf yfilter.YFilter) { routeUpdateStatistics.YFilter = yf }

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetGoName(yname string) string {
    if yname == "duration" { return "Duration" }
    if yname == "duration-breakdown" { return "DurationBreakdown" }
    if yname == "node-counts" { return "NodeCounts" }
    if yname == "item-counts" { return "ItemCounts" }
    if yname == "route-counts" { return "RouteCounts" }
    if yname == "rib-batch-counts" { return "RibBatchCounts" }
    return ""
}

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetSegmentPath() string {
    return "route-update-statistics"
}

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "duration" {
        return &routeUpdateStatistics.Duration
    }
    if childYangName == "duration-breakdown" {
        return &routeUpdateStatistics.DurationBreakdown
    }
    if childYangName == "node-counts" {
        return &routeUpdateStatistics.NodeCounts
    }
    if childYangName == "item-counts" {
        return &routeUpdateStatistics.ItemCounts
    }
    if childYangName == "route-counts" {
        return &routeUpdateStatistics.RouteCounts
    }
    if childYangName == "rib-batch-counts" {
        return &routeUpdateStatistics.RibBatchCounts
    }
    return nil
}

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["duration"] = &routeUpdateStatistics.Duration
    children["duration-breakdown"] = &routeUpdateStatistics.DurationBreakdown
    children["node-counts"] = &routeUpdateStatistics.NodeCounts
    children["item-counts"] = &routeUpdateStatistics.ItemCounts
    children["route-counts"] = &routeUpdateStatistics.RouteCounts
    children["rib-batch-counts"] = &routeUpdateStatistics.RibBatchCounts
    return children
}

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetYangName() string { return "route-update-statistics" }

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) SetParent(parent types.Entity) { routeUpdateStatistics.parent = parent }

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetParent() types.Entity { return routeUpdateStatistics.parent }

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration
// Duration of the routing table update
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetFilter() yfilter.YFilter { return duration.YFilter }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) SetFilter(yf yfilter.YFilter) { duration.YFilter = yf }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetSegmentPath() string {
    return "duration"
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = duration.RealDuration
    leafs["cpu-duration"] = duration.CpuDuration
    return leafs
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetBundleName() string { return "cisco_ios_xr" }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetYangName() string { return "duration" }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) SetParent(parent types.Entity) { duration.parent = parent }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetParent() types.Entity { return duration.parent }

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetParentYangName() string { return "route-update-statistics" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown
// Breakdown of the time taken by the routing table
// update
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time to update IS-IS's local RIB.
    LocalRibUpdate Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate

    // Time to build the update to send to the global RIB.
    GlobalRibBuild Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild

    // Time to send the update to the global RIB.
    GlobalRibSend Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend
}

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetFilter() yfilter.YFilter { return durationBreakdown.YFilter }

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) SetFilter(yf yfilter.YFilter) { durationBreakdown.YFilter = yf }

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetGoName(yname string) string {
    if yname == "local-rib-update" { return "LocalRibUpdate" }
    if yname == "global-rib-build" { return "GlobalRibBuild" }
    if yname == "global-rib-send" { return "GlobalRibSend" }
    return ""
}

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetSegmentPath() string {
    return "duration-breakdown"
}

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "local-rib-update" {
        return &durationBreakdown.LocalRibUpdate
    }
    if childYangName == "global-rib-build" {
        return &durationBreakdown.GlobalRibBuild
    }
    if childYangName == "global-rib-send" {
        return &durationBreakdown.GlobalRibSend
    }
    return nil
}

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["local-rib-update"] = &durationBreakdown.LocalRibUpdate
    children["global-rib-build"] = &durationBreakdown.GlobalRibBuild
    children["global-rib-send"] = &durationBreakdown.GlobalRibSend
    return children
}

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetBundleName() string { return "cisco_ios_xr" }

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetYangName() string { return "duration-breakdown" }

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) SetParent(parent types.Entity) { durationBreakdown.parent = parent }

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetParent() types.Entity { return durationBreakdown.parent }

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetParentYangName() string { return "route-update-statistics" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate
// Time to update IS-IS's local RIB
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority.
    Critical Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical

    // High priority.
    High Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High

    // Medium priority.
    Medium Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium

    // Low priority.
    Low Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low
}

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetFilter() yfilter.YFilter { return localRibUpdate.YFilter }

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) SetFilter(yf yfilter.YFilter) { localRibUpdate.YFilter = yf }

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetSegmentPath() string {
    return "local-rib-update"
}

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "critical" {
        return &localRibUpdate.Critical
    }
    if childYangName == "high" {
        return &localRibUpdate.High
    }
    if childYangName == "medium" {
        return &localRibUpdate.Medium
    }
    if childYangName == "low" {
        return &localRibUpdate.Low
    }
    return nil
}

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["critical"] = &localRibUpdate.Critical
    children["high"] = &localRibUpdate.High
    children["medium"] = &localRibUpdate.Medium
    children["low"] = &localRibUpdate.Low
    return children
}

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetBundleName() string { return "cisco_ios_xr" }

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetYangName() string { return "local-rib-update" }

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) SetParent(parent types.Entity) { localRibUpdate.parent = parent }

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetParent() types.Entity { return localRibUpdate.parent }

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetParentYangName() string { return "duration-breakdown" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical
// Critical priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetFilter() yfilter.YFilter { return critical.YFilter }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) SetFilter(yf yfilter.YFilter) { critical.YFilter = yf }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetSegmentPath() string {
    return "critical"
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = critical.RealDuration
    leafs["cpu-duration"] = critical.CpuDuration
    return leafs
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetBundleName() string { return "cisco_ios_xr" }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetYangName() string { return "critical" }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) SetParent(parent types.Entity) { critical.parent = parent }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetParent() types.Entity { return critical.parent }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetParentYangName() string { return "local-rib-update" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High
// High priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetFilter() yfilter.YFilter { return high.YFilter }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) SetFilter(yf yfilter.YFilter) { high.YFilter = yf }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetSegmentPath() string {
    return "high"
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = high.RealDuration
    leafs["cpu-duration"] = high.CpuDuration
    return leafs
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetBundleName() string { return "cisco_ios_xr" }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetYangName() string { return "high" }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) SetParent(parent types.Entity) { high.parent = parent }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetParent() types.Entity { return high.parent }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetParentYangName() string { return "local-rib-update" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium
// Medium priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetFilter() yfilter.YFilter { return medium.YFilter }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) SetFilter(yf yfilter.YFilter) { medium.YFilter = yf }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetSegmentPath() string {
    return "medium"
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = medium.RealDuration
    leafs["cpu-duration"] = medium.CpuDuration
    return leafs
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetBundleName() string { return "cisco_ios_xr" }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetYangName() string { return "medium" }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) SetParent(parent types.Entity) { medium.parent = parent }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetParent() types.Entity { return medium.parent }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetParentYangName() string { return "local-rib-update" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low
// Low priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetFilter() yfilter.YFilter { return low.YFilter }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) SetFilter(yf yfilter.YFilter) { low.YFilter = yf }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetSegmentPath() string {
    return "low"
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = low.RealDuration
    leafs["cpu-duration"] = low.CpuDuration
    return leafs
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetBundleName() string { return "cisco_ios_xr" }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetYangName() string { return "low" }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) SetParent(parent types.Entity) { low.parent = parent }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetParent() types.Entity { return low.parent }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetParentYangName() string { return "local-rib-update" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild
// Time to build the update to send to the global
// RIB
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority.
    Critical Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical

    // High priority.
    High Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High

    // Medium priority.
    Medium Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium

    // Low priority.
    Low Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low
}

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetFilter() yfilter.YFilter { return globalRibBuild.YFilter }

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) SetFilter(yf yfilter.YFilter) { globalRibBuild.YFilter = yf }

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetSegmentPath() string {
    return "global-rib-build"
}

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "critical" {
        return &globalRibBuild.Critical
    }
    if childYangName == "high" {
        return &globalRibBuild.High
    }
    if childYangName == "medium" {
        return &globalRibBuild.Medium
    }
    if childYangName == "low" {
        return &globalRibBuild.Low
    }
    return nil
}

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["critical"] = &globalRibBuild.Critical
    children["high"] = &globalRibBuild.High
    children["medium"] = &globalRibBuild.Medium
    children["low"] = &globalRibBuild.Low
    return children
}

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetBundleName() string { return "cisco_ios_xr" }

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetYangName() string { return "global-rib-build" }

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) SetParent(parent types.Entity) { globalRibBuild.parent = parent }

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetParent() types.Entity { return globalRibBuild.parent }

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetParentYangName() string { return "duration-breakdown" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical
// Critical priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetFilter() yfilter.YFilter { return critical.YFilter }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) SetFilter(yf yfilter.YFilter) { critical.YFilter = yf }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetSegmentPath() string {
    return "critical"
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = critical.RealDuration
    leafs["cpu-duration"] = critical.CpuDuration
    return leafs
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetBundleName() string { return "cisco_ios_xr" }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetYangName() string { return "critical" }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) SetParent(parent types.Entity) { critical.parent = parent }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetParent() types.Entity { return critical.parent }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetParentYangName() string { return "global-rib-build" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High
// High priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetFilter() yfilter.YFilter { return high.YFilter }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) SetFilter(yf yfilter.YFilter) { high.YFilter = yf }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetSegmentPath() string {
    return "high"
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = high.RealDuration
    leafs["cpu-duration"] = high.CpuDuration
    return leafs
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetBundleName() string { return "cisco_ios_xr" }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetYangName() string { return "high" }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) SetParent(parent types.Entity) { high.parent = parent }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetParent() types.Entity { return high.parent }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetParentYangName() string { return "global-rib-build" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium
// Medium priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetFilter() yfilter.YFilter { return medium.YFilter }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) SetFilter(yf yfilter.YFilter) { medium.YFilter = yf }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetSegmentPath() string {
    return "medium"
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = medium.RealDuration
    leafs["cpu-duration"] = medium.CpuDuration
    return leafs
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetBundleName() string { return "cisco_ios_xr" }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetYangName() string { return "medium" }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) SetParent(parent types.Entity) { medium.parent = parent }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetParent() types.Entity { return medium.parent }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetParentYangName() string { return "global-rib-build" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low
// Low priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetFilter() yfilter.YFilter { return low.YFilter }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) SetFilter(yf yfilter.YFilter) { low.YFilter = yf }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetSegmentPath() string {
    return "low"
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = low.RealDuration
    leafs["cpu-duration"] = low.CpuDuration
    return leafs
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetBundleName() string { return "cisco_ios_xr" }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetYangName() string { return "low" }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) SetParent(parent types.Entity) { low.parent = parent }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetParent() types.Entity { return low.parent }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetParentYangName() string { return "global-rib-build" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend
// Time to send the update to the global RIB
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority.
    Critical Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical

    // High priority.
    High Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High

    // Medium priority.
    Medium Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium

    // Low priority.
    Low Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low
}

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetFilter() yfilter.YFilter { return globalRibSend.YFilter }

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) SetFilter(yf yfilter.YFilter) { globalRibSend.YFilter = yf }

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetSegmentPath() string {
    return "global-rib-send"
}

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "critical" {
        return &globalRibSend.Critical
    }
    if childYangName == "high" {
        return &globalRibSend.High
    }
    if childYangName == "medium" {
        return &globalRibSend.Medium
    }
    if childYangName == "low" {
        return &globalRibSend.Low
    }
    return nil
}

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["critical"] = &globalRibSend.Critical
    children["high"] = &globalRibSend.High
    children["medium"] = &globalRibSend.Medium
    children["low"] = &globalRibSend.Low
    return children
}

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetBundleName() string { return "cisco_ios_xr" }

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetYangName() string { return "global-rib-send" }

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) SetParent(parent types.Entity) { globalRibSend.parent = parent }

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetParent() types.Entity { return globalRibSend.parent }

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetParentYangName() string { return "duration-breakdown" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical
// Critical priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetFilter() yfilter.YFilter { return critical.YFilter }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) SetFilter(yf yfilter.YFilter) { critical.YFilter = yf }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetSegmentPath() string {
    return "critical"
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = critical.RealDuration
    leafs["cpu-duration"] = critical.CpuDuration
    return leafs
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetBundleName() string { return "cisco_ios_xr" }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetYangName() string { return "critical" }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) SetParent(parent types.Entity) { critical.parent = parent }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetParent() types.Entity { return critical.parent }

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetParentYangName() string { return "global-rib-send" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High
// High priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetFilter() yfilter.YFilter { return high.YFilter }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) SetFilter(yf yfilter.YFilter) { high.YFilter = yf }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetSegmentPath() string {
    return "high"
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = high.RealDuration
    leafs["cpu-duration"] = high.CpuDuration
    return leafs
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetBundleName() string { return "cisco_ios_xr" }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetYangName() string { return "high" }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) SetParent(parent types.Entity) { high.parent = parent }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetParent() types.Entity { return high.parent }

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetParentYangName() string { return "global-rib-send" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium
// Medium priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetFilter() yfilter.YFilter { return medium.YFilter }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) SetFilter(yf yfilter.YFilter) { medium.YFilter = yf }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetSegmentPath() string {
    return "medium"
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = medium.RealDuration
    leafs["cpu-duration"] = medium.CpuDuration
    return leafs
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetBundleName() string { return "cisco_ios_xr" }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetYangName() string { return "medium" }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) SetParent(parent types.Entity) { medium.parent = parent }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetParent() types.Entity { return medium.parent }

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetParentYangName() string { return "global-rib-send" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low
// Low priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetFilter() yfilter.YFilter { return low.YFilter }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) SetFilter(yf yfilter.YFilter) { low.YFilter = yf }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetGoName(yname string) string {
    if yname == "real-duration" { return "RealDuration" }
    if yname == "cpu-duration" { return "CpuDuration" }
    return ""
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetSegmentPath() string {
    return "low"
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["real-duration"] = low.RealDuration
    leafs["cpu-duration"] = low.CpuDuration
    return leafs
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetBundleName() string { return "cisco_ios_xr" }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetYangName() string { return "low" }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) SetParent(parent types.Entity) { low.parent = parent }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetParent() types.Entity { return low.parent }

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetParentYangName() string { return "global-rib-send" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts
// Node counts
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of nodes considered during route update. The type is
    // interface{} with range: 0..4294967295.
    TotalTouched interface{}

    // Per-priority count of nodes considered during route update.
    PerPriorityTouched Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetFilter() yfilter.YFilter { return nodeCounts.YFilter }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) SetFilter(yf yfilter.YFilter) { nodeCounts.YFilter = yf }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetGoName(yname string) string {
    if yname == "total-touched" { return "TotalTouched" }
    if yname == "per-priority-touched" { return "PerPriorityTouched" }
    return ""
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetSegmentPath() string {
    return "node-counts"
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-priority-touched" {
        return &nodeCounts.PerPriorityTouched
    }
    return nil
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-priority-touched"] = &nodeCounts.PerPriorityTouched
    return children
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-touched"] = nodeCounts.TotalTouched
    return leafs
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetBundleName() string { return "cisco_ios_xr" }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetYangName() string { return "node-counts" }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) SetParent(parent types.Entity) { nodeCounts.parent = parent }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetParent() types.Entity { return nodeCounts.parent }

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetParentYangName() string { return "route-update-statistics" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched
// Per-priority count of nodes considered during
// route update
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetFilter() yfilter.YFilter { return perPriorityTouched.YFilter }

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) SetFilter(yf yfilter.YFilter) { perPriorityTouched.YFilter = yf }

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetSegmentPath() string {
    return "per-priority-touched"
}

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = perPriorityTouched.Critical
    leafs["high"] = perPriorityTouched.High
    leafs["medium"] = perPriorityTouched.Medium
    leafs["low"] = perPriorityTouched.Low
    return leafs
}

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetBundleName() string { return "cisco_ios_xr" }

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetYangName() string { return "per-priority-touched" }

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) SetParent(parent types.Entity) { perPriorityTouched.parent = parent }

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetParent() types.Entity { return perPriorityTouched.parent }

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetParentYangName() string { return "node-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts
// Prefix item counts
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of unreachable prefixes in the database.
    Unreachable Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable

    // Number of reachable prefixes in the database.
    Reachable Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable

    // Number of prefixes added during calculation.
    Added Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added

    // Number of prefixes deleted during calculation.
    Deleted Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted

    // Number of prefixes modified, i.e. a first hop and/or metric change.
    Modified Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified

    // Number of prefixes considered whilst updating the routing table.
    Touched Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched
}

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetFilter() yfilter.YFilter { return itemCounts.YFilter }

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) SetFilter(yf yfilter.YFilter) { itemCounts.YFilter = yf }

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetGoName(yname string) string {
    if yname == "unreachable" { return "Unreachable" }
    if yname == "reachable" { return "Reachable" }
    if yname == "added" { return "Added" }
    if yname == "deleted" { return "Deleted" }
    if yname == "modified" { return "Modified" }
    if yname == "touched" { return "Touched" }
    return ""
}

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetSegmentPath() string {
    return "item-counts"
}

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unreachable" {
        return &itemCounts.Unreachable
    }
    if childYangName == "reachable" {
        return &itemCounts.Reachable
    }
    if childYangName == "added" {
        return &itemCounts.Added
    }
    if childYangName == "deleted" {
        return &itemCounts.Deleted
    }
    if childYangName == "modified" {
        return &itemCounts.Modified
    }
    if childYangName == "touched" {
        return &itemCounts.Touched
    }
    return nil
}

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["unreachable"] = &itemCounts.Unreachable
    children["reachable"] = &itemCounts.Reachable
    children["added"] = &itemCounts.Added
    children["deleted"] = &itemCounts.Deleted
    children["modified"] = &itemCounts.Modified
    children["touched"] = &itemCounts.Touched
    return children
}

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetBundleName() string { return "cisco_ios_xr" }

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetYangName() string { return "item-counts" }

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) SetParent(parent types.Entity) { itemCounts.parent = parent }

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetParent() types.Entity { return itemCounts.parent }

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetParentYangName() string { return "route-update-statistics" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable
// Number of unreachable prefixes in the database
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetFilter() yfilter.YFilter { return unreachable.YFilter }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) SetFilter(yf yfilter.YFilter) { unreachable.YFilter = yf }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetSegmentPath() string {
    return "unreachable"
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = unreachable.Critical
    leafs["high"] = unreachable.High
    leafs["medium"] = unreachable.Medium
    leafs["low"] = unreachable.Low
    return leafs
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetBundleName() string { return "cisco_ios_xr" }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetYangName() string { return "unreachable" }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) SetParent(parent types.Entity) { unreachable.parent = parent }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetParent() types.Entity { return unreachable.parent }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetParentYangName() string { return "item-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable
// Number of reachable prefixes in the database
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetFilter() yfilter.YFilter { return reachable.YFilter }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) SetFilter(yf yfilter.YFilter) { reachable.YFilter = yf }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetSegmentPath() string {
    return "reachable"
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = reachable.Critical
    leafs["high"] = reachable.High
    leafs["medium"] = reachable.Medium
    leafs["low"] = reachable.Low
    return leafs
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetBundleName() string { return "cisco_ios_xr" }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetYangName() string { return "reachable" }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) SetParent(parent types.Entity) { reachable.parent = parent }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetParent() types.Entity { return reachable.parent }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetParentYangName() string { return "item-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added
// Number of prefixes added during calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetFilter() yfilter.YFilter { return added.YFilter }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) SetFilter(yf yfilter.YFilter) { added.YFilter = yf }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetSegmentPath() string {
    return "added"
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = added.Critical
    leafs["high"] = added.High
    leafs["medium"] = added.Medium
    leafs["low"] = added.Low
    return leafs
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetBundleName() string { return "cisco_ios_xr" }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetYangName() string { return "added" }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) SetParent(parent types.Entity) { added.parent = parent }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetParent() types.Entity { return added.parent }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetParentYangName() string { return "item-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted
// Number of prefixes deleted during calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetFilter() yfilter.YFilter { return deleted.YFilter }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) SetFilter(yf yfilter.YFilter) { deleted.YFilter = yf }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetSegmentPath() string {
    return "deleted"
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = deleted.Critical
    leafs["high"] = deleted.High
    leafs["medium"] = deleted.Medium
    leafs["low"] = deleted.Low
    return leafs
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetBundleName() string { return "cisco_ios_xr" }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetYangName() string { return "deleted" }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) SetParent(parent types.Entity) { deleted.parent = parent }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetParent() types.Entity { return deleted.parent }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetParentYangName() string { return "item-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified
// Number of prefixes modified, i.e. a first hop
// and/or metric change
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetFilter() yfilter.YFilter { return modified.YFilter }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) SetFilter(yf yfilter.YFilter) { modified.YFilter = yf }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetSegmentPath() string {
    return "modified"
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = modified.Critical
    leafs["high"] = modified.High
    leafs["medium"] = modified.Medium
    leafs["low"] = modified.Low
    return leafs
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetBundleName() string { return "cisco_ios_xr" }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetYangName() string { return "modified" }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) SetParent(parent types.Entity) { modified.parent = parent }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetParent() types.Entity { return modified.parent }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetParentYangName() string { return "item-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched
// Number of prefixes considered whilst updating
// the routing table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetFilter() yfilter.YFilter { return touched.YFilter }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) SetFilter(yf yfilter.YFilter) { touched.YFilter = yf }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetSegmentPath() string {
    return "touched"
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = touched.Critical
    leafs["high"] = touched.High
    leafs["medium"] = touched.Medium
    leafs["low"] = touched.Low
    return leafs
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetBundleName() string { return "cisco_ios_xr" }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetYangName() string { return "touched" }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) SetParent(parent types.Entity) { touched.parent = parent }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetParent() types.Entity { return touched.parent }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetParentYangName() string { return "item-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts
// Distinct prefix counts
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of unreachable prefixes in the database.
    Unreachable Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable

    // Number of reachable prefixes in the database.
    Reachable Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable

    // Number of prefixes added during calculation.
    Added Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added

    // Number of prefixes deleted during calculation.
    Deleted Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted

    // Number of prefixes modified, i.e. a first hop and/or metric change.
    Modified Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified

    // Number of prefixes considered whilst updating the routing table.
    Touched Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched
}

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetFilter() yfilter.YFilter { return routeCounts.YFilter }

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) SetFilter(yf yfilter.YFilter) { routeCounts.YFilter = yf }

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetGoName(yname string) string {
    if yname == "unreachable" { return "Unreachable" }
    if yname == "reachable" { return "Reachable" }
    if yname == "added" { return "Added" }
    if yname == "deleted" { return "Deleted" }
    if yname == "modified" { return "Modified" }
    if yname == "touched" { return "Touched" }
    return ""
}

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetSegmentPath() string {
    return "route-counts"
}

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unreachable" {
        return &routeCounts.Unreachable
    }
    if childYangName == "reachable" {
        return &routeCounts.Reachable
    }
    if childYangName == "added" {
        return &routeCounts.Added
    }
    if childYangName == "deleted" {
        return &routeCounts.Deleted
    }
    if childYangName == "modified" {
        return &routeCounts.Modified
    }
    if childYangName == "touched" {
        return &routeCounts.Touched
    }
    return nil
}

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["unreachable"] = &routeCounts.Unreachable
    children["reachable"] = &routeCounts.Reachable
    children["added"] = &routeCounts.Added
    children["deleted"] = &routeCounts.Deleted
    children["modified"] = &routeCounts.Modified
    children["touched"] = &routeCounts.Touched
    return children
}

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetBundleName() string { return "cisco_ios_xr" }

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetYangName() string { return "route-counts" }

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) SetParent(parent types.Entity) { routeCounts.parent = parent }

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetParent() types.Entity { return routeCounts.parent }

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetParentYangName() string { return "route-update-statistics" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable
// Number of unreachable prefixes in the database
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetFilter() yfilter.YFilter { return unreachable.YFilter }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) SetFilter(yf yfilter.YFilter) { unreachable.YFilter = yf }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetSegmentPath() string {
    return "unreachable"
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = unreachable.Critical
    leafs["high"] = unreachable.High
    leafs["medium"] = unreachable.Medium
    leafs["low"] = unreachable.Low
    return leafs
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetBundleName() string { return "cisco_ios_xr" }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetYangName() string { return "unreachable" }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) SetParent(parent types.Entity) { unreachable.parent = parent }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetParent() types.Entity { return unreachable.parent }

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetParentYangName() string { return "route-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable
// Number of reachable prefixes in the database
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetFilter() yfilter.YFilter { return reachable.YFilter }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) SetFilter(yf yfilter.YFilter) { reachable.YFilter = yf }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetSegmentPath() string {
    return "reachable"
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = reachable.Critical
    leafs["high"] = reachable.High
    leafs["medium"] = reachable.Medium
    leafs["low"] = reachable.Low
    return leafs
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetBundleName() string { return "cisco_ios_xr" }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetYangName() string { return "reachable" }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) SetParent(parent types.Entity) { reachable.parent = parent }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetParent() types.Entity { return reachable.parent }

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetParentYangName() string { return "route-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added
// Number of prefixes added during calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetFilter() yfilter.YFilter { return added.YFilter }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) SetFilter(yf yfilter.YFilter) { added.YFilter = yf }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetSegmentPath() string {
    return "added"
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = added.Critical
    leafs["high"] = added.High
    leafs["medium"] = added.Medium
    leafs["low"] = added.Low
    return leafs
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetBundleName() string { return "cisco_ios_xr" }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetYangName() string { return "added" }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) SetParent(parent types.Entity) { added.parent = parent }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetParent() types.Entity { return added.parent }

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetParentYangName() string { return "route-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted
// Number of prefixes deleted during calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetFilter() yfilter.YFilter { return deleted.YFilter }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) SetFilter(yf yfilter.YFilter) { deleted.YFilter = yf }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetSegmentPath() string {
    return "deleted"
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = deleted.Critical
    leafs["high"] = deleted.High
    leafs["medium"] = deleted.Medium
    leafs["low"] = deleted.Low
    return leafs
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetBundleName() string { return "cisco_ios_xr" }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetYangName() string { return "deleted" }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) SetParent(parent types.Entity) { deleted.parent = parent }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetParent() types.Entity { return deleted.parent }

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetParentYangName() string { return "route-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified
// Number of prefixes modified, i.e. a first hop
// and/or metric change
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetFilter() yfilter.YFilter { return modified.YFilter }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) SetFilter(yf yfilter.YFilter) { modified.YFilter = yf }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetSegmentPath() string {
    return "modified"
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = modified.Critical
    leafs["high"] = modified.High
    leafs["medium"] = modified.Medium
    leafs["low"] = modified.Low
    return leafs
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetBundleName() string { return "cisco_ios_xr" }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetYangName() string { return "modified" }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) SetParent(parent types.Entity) { modified.parent = parent }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetParent() types.Entity { return modified.parent }

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetParentYangName() string { return "route-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched
// Number of prefixes considered whilst updating
// the routing table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetFilter() yfilter.YFilter { return touched.YFilter }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) SetFilter(yf yfilter.YFilter) { touched.YFilter = yf }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetSegmentPath() string {
    return "touched"
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = touched.Critical
    leafs["high"] = touched.High
    leafs["medium"] = touched.Medium
    leafs["low"] = touched.Low
    return leafs
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetBundleName() string { return "cisco_ios_xr" }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetYangName() string { return "touched" }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) SetParent(parent types.Entity) { touched.parent = parent }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetParent() types.Entity { return touched.parent }

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetParentYangName() string { return "route-counts" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts
// Number of RIB batches sent
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetFilter() yfilter.YFilter { return ribBatchCounts.YFilter }

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) SetFilter(yf yfilter.YFilter) { ribBatchCounts.YFilter = yf }

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetSegmentPath() string {
    return "rib-batch-counts"
}

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = ribBatchCounts.Critical
    leafs["high"] = ribBatchCounts.High
    leafs["medium"] = ribBatchCounts.Medium
    leafs["low"] = ribBatchCounts.Low
    return leafs
}

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetBundleName() string { return "cisco_ios_xr" }

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetYangName() string { return "rib-batch-counts" }

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) SetParent(parent types.Entity) { ribBatchCounts.parent = parent }

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetParent() types.Entity { return ribBatchCounts.parent }

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetParentYangName() string { return "route-update-statistics" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels
// TE tunnels table. Only available within
// the IPv4 Unicast topology.
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A single TE tunnel advertized by IS-IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel.
    TeTunnel []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel
}

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetFilter() yfilter.YFilter { return teTunnels.YFilter }

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) SetFilter(yf yfilter.YFilter) { teTunnels.YFilter = yf }

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetGoName(yname string) string {
    if yname == "te-tunnel" { return "TeTunnel" }
    return ""
}

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetSegmentPath() string {
    return "te-tunnels"
}

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "te-tunnel" {
        for _, c := range teTunnels.TeTunnel {
            if teTunnels.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel{}
        teTunnels.TeTunnel = append(teTunnels.TeTunnel, child)
        return &teTunnels.TeTunnel[len(teTunnels.TeTunnel)-1]
    }
    return nil
}

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range teTunnels.TeTunnel {
        children[teTunnels.TeTunnel[i].GetSegmentPath()] = &teTunnels.TeTunnel[i]
    }
    return children
}

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetBundleName() string { return "cisco_ios_xr" }

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetYangName() string { return "te-tunnels" }

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) SetParent(parent types.Entity) { teTunnels.parent = parent }

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetParent() types.Entity { return teTunnels.parent }

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetParentYangName() string { return "topology-level" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel
// A single TE tunnel advertized by IS-IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Destination system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    TeSystemId interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TeInterface interface{}

    // Tunnel bandwidth. The type is interface{} with range: 0..4294967295.
    TeBandwidth interface{}

    // Tunnel metric. The type is interface{} with range: -2147483648..2147483647.
    TeigpMetric interface{}

    // Tunnel next-hop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TeNextHopIpAddress interface{}

    // Tunnel metric mode. The type is IsisMetricMode.
    TeModeType interface{}

    // Indicates whether MPLS TE IPv4 forwarding adjacency is enabled. The type is
    // bool.
    Teipv4FaEnabled interface{}

    // Indicates whether MPLS TE IPv6 forwarding adjacency is enabled. The type is
    // bool.
    Teipv6FaEnabled interface{}

    // Indicates whether MPLS TE IPv4 autoroute announce is enabled. The type is
    // bool.
    Teipv4AaEnabled interface{}

    // Indicates whether MPLS TE IPv6 autoroute announce is enabled. The type is
    // bool.
    Teipv6AaEnabled interface{}

    // Tunnel checkpoint object ID. The type is interface{} with range:
    // 0..4294967295.
    TeCheckpointObjectId interface{}

    // Indicates whether MPLS TE segment routing is enabled. The type is bool.
    TeSegmentRoutingEnabled interface{}

    // Indicates whether MPLS TE segment routing strict SPF is enabled. The type
    // is bool.
    TeSegmentRoutingStrictSpf interface{}

    // Indicates whether Segment routing labeled traffic exclusion is enabled. The
    // type is bool.
    TeSegmentRoutingExclude interface{}
}

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetFilter() yfilter.YFilter { return teTunnel.YFilter }

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) SetFilter(yf yfilter.YFilter) { teTunnel.YFilter = yf }

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetGoName(yname string) string {
    if yname == "system-id" { return "SystemId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "te-system-id" { return "TeSystemId" }
    if yname == "te-interface" { return "TeInterface" }
    if yname == "te-bandwidth" { return "TeBandwidth" }
    if yname == "teigp-metric" { return "TeigpMetric" }
    if yname == "te-next-hop-ip-address" { return "TeNextHopIpAddress" }
    if yname == "te-mode-type" { return "TeModeType" }
    if yname == "teipv4fa-enabled" { return "Teipv4FaEnabled" }
    if yname == "teipv6fa-enabled" { return "Teipv6FaEnabled" }
    if yname == "teipv4aa-enabled" { return "Teipv4AaEnabled" }
    if yname == "teipv6aa-enabled" { return "Teipv6AaEnabled" }
    if yname == "te-checkpoint-object-id" { return "TeCheckpointObjectId" }
    if yname == "te-segment-routing-enabled" { return "TeSegmentRoutingEnabled" }
    if yname == "te-segment-routing-strict-spf" { return "TeSegmentRoutingStrictSpf" }
    if yname == "te-segment-routing-exclude" { return "TeSegmentRoutingExclude" }
    return ""
}

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetSegmentPath() string {
    return "te-tunnel"
}

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-id"] = teTunnel.SystemId
    leafs["interface-name"] = teTunnel.InterfaceName
    leafs["te-system-id"] = teTunnel.TeSystemId
    leafs["te-interface"] = teTunnel.TeInterface
    leafs["te-bandwidth"] = teTunnel.TeBandwidth
    leafs["teigp-metric"] = teTunnel.TeigpMetric
    leafs["te-next-hop-ip-address"] = teTunnel.TeNextHopIpAddress
    leafs["te-mode-type"] = teTunnel.TeModeType
    leafs["teipv4fa-enabled"] = teTunnel.Teipv4FaEnabled
    leafs["teipv6fa-enabled"] = teTunnel.Teipv6FaEnabled
    leafs["teipv4aa-enabled"] = teTunnel.Teipv4AaEnabled
    leafs["teipv6aa-enabled"] = teTunnel.Teipv6AaEnabled
    leafs["te-checkpoint-object-id"] = teTunnel.TeCheckpointObjectId
    leafs["te-segment-routing-enabled"] = teTunnel.TeSegmentRoutingEnabled
    leafs["te-segment-routing-strict-spf"] = teTunnel.TeSegmentRoutingStrictSpf
    leafs["te-segment-routing-exclude"] = teTunnel.TeSegmentRoutingExclude
    return leafs
}

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetBundleName() string { return "cisco_ios_xr" }

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetYangName() string { return "te-tunnel" }

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) SetParent(parent types.Entity) { teTunnel.parent = parent }

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetParent() types.Entity { return teTunnel.parent }

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetParentYangName() string { return "te-tunnels" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies
// IPv4 IS Topology table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An IS in an IPv4 Link Topology. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology.
    Ipv4LinkTopology []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology
}

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetFilter() yfilter.YFilter { return ipv4LinkTopologies.YFilter }

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) SetFilter(yf yfilter.YFilter) { ipv4LinkTopologies.YFilter = yf }

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetGoName(yname string) string {
    if yname == "ipv4-link-topology" { return "Ipv4LinkTopology" }
    return ""
}

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetSegmentPath() string {
    return "ipv4-link-topologies"
}

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-link-topology" {
        for _, c := range ipv4LinkTopologies.Ipv4LinkTopology {
            if ipv4LinkTopologies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology{}
        ipv4LinkTopologies.Ipv4LinkTopology = append(ipv4LinkTopologies.Ipv4LinkTopology, child)
        return &ipv4LinkTopologies.Ipv4LinkTopology[len(ipv4LinkTopologies.Ipv4LinkTopology)-1]
    }
    return nil
}

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4LinkTopologies.Ipv4LinkTopology {
        children[ipv4LinkTopologies.Ipv4LinkTopology[i].GetSegmentPath()] = &ipv4LinkTopologies.Ipv4LinkTopology[i]
    }
    return children
}

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetYangName() string { return "ipv4-link-topologies" }

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) SetParent(parent types.Entity) { ipv4LinkTopologies.parent = parent }

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetParent() types.Entity { return ipv4LinkTopologies.parent }

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetParentYangName() string { return "topology-level" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology
// An IS in an IPv4 Link Topology
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Does the IS participate in the topology?. The type is bool.
    IsParticipant interface{}

    // Is the IS overloaded?. The type is bool.
    IsOverloaded interface{}

    // Is the IS attached?. The type is bool.
    IsAttached interface{}

    // Is the IS reachable, and, if so, its status within the SPT.
    ReachabilityStatus Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus

    // Per-priority counts of prefix items advertised by the IS.
    AdvertisedPrefixItemCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts
}

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetFilter() yfilter.YFilter { return ipv4LinkTopology.YFilter }

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) SetFilter(yf yfilter.YFilter) { ipv4LinkTopology.YFilter = yf }

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetGoName(yname string) string {
    if yname == "system-id" { return "SystemId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "is-participant" { return "IsParticipant" }
    if yname == "is-overloaded" { return "IsOverloaded" }
    if yname == "is-attached" { return "IsAttached" }
    if yname == "reachability-status" { return "ReachabilityStatus" }
    if yname == "advertised-prefix-item-counts" { return "AdvertisedPrefixItemCounts" }
    return ""
}

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetSegmentPath() string {
    return "ipv4-link-topology" + "[system-id='" + fmt.Sprintf("%v", ipv4LinkTopology.SystemId) + "']"
}

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "reachability-status" {
        return &ipv4LinkTopology.ReachabilityStatus
    }
    if childYangName == "advertised-prefix-item-counts" {
        return &ipv4LinkTopology.AdvertisedPrefixItemCounts
    }
    return nil
}

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["reachability-status"] = &ipv4LinkTopology.ReachabilityStatus
    children["advertised-prefix-item-counts"] = &ipv4LinkTopology.AdvertisedPrefixItemCounts
    return children
}

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-id"] = ipv4LinkTopology.SystemId
    leafs["source-address"] = ipv4LinkTopology.SourceAddress
    leafs["is-participant"] = ipv4LinkTopology.IsParticipant
    leafs["is-overloaded"] = ipv4LinkTopology.IsOverloaded
    leafs["is-attached"] = ipv4LinkTopology.IsAttached
    return leafs
}

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetYangName() string { return "ipv4-link-topology" }

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) SetParent(parent types.Entity) { ipv4LinkTopology.parent = parent }

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetParent() types.Entity { return ipv4LinkTopology.parent }

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetParentYangName() string { return "ipv4-link-topologies" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus
// Is the IS reachable, and, if so, its status
// within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ReachableStatus. The type is IsisReachable.
    ReachableStatus interface{}

    // Status of the IS within the SPT.
    ReachableDetails Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetFilter() yfilter.YFilter { return reachabilityStatus.YFilter }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) SetFilter(yf yfilter.YFilter) { reachabilityStatus.YFilter = yf }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetGoName(yname string) string {
    if yname == "reachable-status" { return "ReachableStatus" }
    if yname == "reachable-details" { return "ReachableDetails" }
    return ""
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetSegmentPath() string {
    return "reachability-status"
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "reachable-details" {
        return &reachabilityStatus.ReachableDetails
    }
    return nil
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["reachable-details"] = &reachabilityStatus.ReachableDetails
    return children
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reachable-status"] = reachabilityStatus.ReachableStatus
    return leafs
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetBundleName() string { return "cisco_ios_xr" }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetYangName() string { return "reachability-status" }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) SetParent(parent types.Entity) { reachabilityStatus.parent = parent }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetParent() types.Entity { return reachabilityStatus.parent }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetParentYangName() string { return "ipv4-link-topology" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails
// Status of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Distance to the IS. The type is interface{} with range: 0..4294967295.
    RootDistance interface{}

    // Distance to the IS. The type is interface{} with range: 0..4294967295.
    MulticastRootDistance interface{}

    // First hops towards the IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths

    // Multicast intact first hops towards the IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath

    // Parents of the IS within the SPT. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent.
    Parent []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent

    // Children of the IS within the SPT. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children.
    Children []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetFilter() yfilter.YFilter { return reachableDetails.YFilter }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) SetFilter(yf yfilter.YFilter) { reachableDetails.YFilter = yf }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetGoName(yname string) string {
    if yname == "root-distance" { return "RootDistance" }
    if yname == "multicast-root-distance" { return "MulticastRootDistance" }
    if yname == "paths" { return "Paths" }
    if yname == "multicast-path" { return "MulticastPath" }
    if yname == "parent" { return "Parent" }
    if yname == "children" { return "Children" }
    return ""
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetSegmentPath() string {
    return "reachable-details"
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "paths" {
        for _, c := range reachableDetails.Paths {
            if reachableDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths{}
        reachableDetails.Paths = append(reachableDetails.Paths, child)
        return &reachableDetails.Paths[len(reachableDetails.Paths)-1]
    }
    if childYangName == "multicast-path" {
        for _, c := range reachableDetails.MulticastPath {
            if reachableDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath{}
        reachableDetails.MulticastPath = append(reachableDetails.MulticastPath, child)
        return &reachableDetails.MulticastPath[len(reachableDetails.MulticastPath)-1]
    }
    if childYangName == "parent" {
        for _, c := range reachableDetails.Parent {
            if reachableDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent{}
        reachableDetails.Parent = append(reachableDetails.Parent, child)
        return &reachableDetails.Parent[len(reachableDetails.Parent)-1]
    }
    if childYangName == "children" {
        for _, c := range reachableDetails.Children {
            if reachableDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children{}
        reachableDetails.Children = append(reachableDetails.Children, child)
        return &reachableDetails.Children[len(reachableDetails.Children)-1]
    }
    return nil
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range reachableDetails.Paths {
        children[reachableDetails.Paths[i].GetSegmentPath()] = &reachableDetails.Paths[i]
    }
    for i := range reachableDetails.MulticastPath {
        children[reachableDetails.MulticastPath[i].GetSegmentPath()] = &reachableDetails.MulticastPath[i]
    }
    for i := range reachableDetails.Parent {
        children[reachableDetails.Parent[i].GetSegmentPath()] = &reachableDetails.Parent[i]
    }
    for i := range reachableDetails.Children {
        children[reachableDetails.Children[i].GetSegmentPath()] = &reachableDetails.Children[i]
    }
    return children
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["root-distance"] = reachableDetails.RootDistance
    leafs["multicast-root-distance"] = reachableDetails.MulticastRootDistance
    return leafs
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetBundleName() string { return "cisco_ios_xr" }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetYangName() string { return "reachable-details" }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) SetParent(parent types.Entity) { reachableDetails.parent = parent }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetParent() types.Entity { return reachableDetails.parent }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetParentYangName() string { return "reachability-status" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths
// First hops towards the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetFilter() yfilter.YFilter { return paths.YFilter }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) SetFilter(yf yfilter.YFilter) { paths.YFilter = yf }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetSegmentPath() string {
    return "paths"
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &paths.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range paths.UloopExplicit {
            if paths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit{}
        paths.UloopExplicit = append(paths.UloopExplicit, child)
        return &paths.UloopExplicit[len(paths.UloopExplicit)-1]
    }
    return nil
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &paths.FrrBackup
    for i := range paths.UloopExplicit {
        children[paths.UloopExplicit[i].GetSegmentPath()] = &paths.UloopExplicit[i]
    }
    return children
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = paths.NeighborId
    leafs["egress-interface"] = paths.EgressInterface
    leafs["neighbor-address"] = paths.NeighborAddress
    leafs["neighbor-snpa"] = paths.NeighborSnpa
    leafs["tag"] = paths.Tag
    leafs["tunnel-interface"] = paths.TunnelInterface
    leafs["segment-routing-sid-value"] = paths.SegmentRoutingSidValue
    leafs["weight"] = paths.Weight
    leafs["is-te-tunnel-interface"] = paths.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = paths.IsSrExcludeTunnelInterface
    return leafs
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetBundleName() string { return "cisco_ios_xr" }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetYangName() string { return "paths" }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) SetParent(parent types.Entity) { paths.parent = parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetParent() types.Entity { return paths.parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetParentYangName() string { return "reachable-details" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath
// Multicast intact first hops towards the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetFilter() yfilter.YFilter { return multicastPath.YFilter }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) SetFilter(yf yfilter.YFilter) { multicastPath.YFilter = yf }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetSegmentPath() string {
    return "multicast-path"
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &multicastPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range multicastPath.UloopExplicit {
            if multicastPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit{}
        multicastPath.UloopExplicit = append(multicastPath.UloopExplicit, child)
        return &multicastPath.UloopExplicit[len(multicastPath.UloopExplicit)-1]
    }
    return nil
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &multicastPath.FrrBackup
    for i := range multicastPath.UloopExplicit {
        children[multicastPath.UloopExplicit[i].GetSegmentPath()] = &multicastPath.UloopExplicit[i]
    }
    return children
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = multicastPath.NeighborId
    leafs["egress-interface"] = multicastPath.EgressInterface
    leafs["neighbor-address"] = multicastPath.NeighborAddress
    leafs["neighbor-snpa"] = multicastPath.NeighborSnpa
    leafs["tag"] = multicastPath.Tag
    leafs["tunnel-interface"] = multicastPath.TunnelInterface
    leafs["segment-routing-sid-value"] = multicastPath.SegmentRoutingSidValue
    leafs["weight"] = multicastPath.Weight
    leafs["is-te-tunnel-interface"] = multicastPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = multicastPath.IsSrExcludeTunnelInterface
    return leafs
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetBundleName() string { return "cisco_ios_xr" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetYangName() string { return "multicast-path" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) SetParent(parent types.Entity) { multicastPath.parent = parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetParent() types.Entity { return multicastPath.parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetParentYangName() string { return "reachable-details" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent
// Parents of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Pseudonode between system and its neighbor. The type is string with
    // pattern: [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    IntermediatePseudonode interface{}
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetFilter() yfilter.YFilter { return parent.YFilter }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) SetFilter(yf yfilter.YFilter) { parent.YFilter = yf }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "intermediate-pseudonode" { return "IntermediatePseudonode" }
    return ""
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetSegmentPath() string {
    return "parent"
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = parent.NeighborId
    leafs["intermediate-pseudonode"] = parent.IntermediatePseudonode
    return leafs
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetBundleName() string { return "cisco_ios_xr" }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetYangName() string { return "parent" }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) SetParent(parent types.Entity) { parent.parent = parent }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetParent() types.Entity { return parent.parent }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetParentYangName() string { return "reachable-details" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children
// Children of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Pseudonode between system and its neighbor. The type is string with
    // pattern: [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    IntermediatePseudonode interface{}
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetFilter() yfilter.YFilter { return children.YFilter }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) SetFilter(yf yfilter.YFilter) { children.YFilter = yf }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "intermediate-pseudonode" { return "IntermediatePseudonode" }
    return ""
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetSegmentPath() string {
    return "children"
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = children.NeighborId
    leafs["intermediate-pseudonode"] = children.IntermediatePseudonode
    return leafs
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetBundleName() string { return "cisco_ios_xr" }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetYangName() string { return "children" }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) SetParent(parent types.Entity) { children.parent = parent }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetParent() types.Entity { return children.parent }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetParentYangName() string { return "reachable-details" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts
// Per-priority counts of prefix items advertised
// by the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetFilter() yfilter.YFilter { return advertisedPrefixItemCounts.YFilter }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) SetFilter(yf yfilter.YFilter) { advertisedPrefixItemCounts.YFilter = yf }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetSegmentPath() string {
    return "advertised-prefix-item-counts"
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = advertisedPrefixItemCounts.Critical
    leafs["high"] = advertisedPrefixItemCounts.High
    leafs["medium"] = advertisedPrefixItemCounts.Medium
    leafs["low"] = advertisedPrefixItemCounts.Low
    return leafs
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetBundleName() string { return "cisco_ios_xr" }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetYangName() string { return "advertised-prefix-item-counts" }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) SetParent(parent types.Entity) { advertisedPrefixItemCounts.parent = parent }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetParent() types.Entity { return advertisedPrefixItemCounts.parent }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetParentYangName() string { return "ipv4-link-topology" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary
// Summary information for a particular IS
// Topology
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Node Counts for System nodes.
    RouterNodeCount Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount

    // Node Counts for Pseudonode nodes.
    PseudonodeNodeCount Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount
}

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetFilter() yfilter.YFilter { return topologySummary.YFilter }

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) SetFilter(yf yfilter.YFilter) { topologySummary.YFilter = yf }

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetGoName(yname string) string {
    if yname == "router-node-count" { return "RouterNodeCount" }
    if yname == "pseudonode-node-count" { return "PseudonodeNodeCount" }
    return ""
}

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetSegmentPath() string {
    return "topology-summary"
}

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "router-node-count" {
        return &topologySummary.RouterNodeCount
    }
    if childYangName == "pseudonode-node-count" {
        return &topologySummary.PseudonodeNodeCount
    }
    return nil
}

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["router-node-count"] = &topologySummary.RouterNodeCount
    children["pseudonode-node-count"] = &topologySummary.PseudonodeNodeCount
    return children
}

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetBundleName() string { return "cisco_ios_xr" }

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetYangName() string { return "topology-summary" }

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) SetParent(parent types.Entity) { topologySummary.parent = parent }

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetParent() types.Entity { return topologySummary.parent }

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetParentYangName() string { return "topology-level" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount
// Node Counts for System nodes
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of nodes reachable in SPT. The type is interface{} with range:
    // 0..4294967295.
    ReachableNodeCount interface{}

    // Number of nodes unreachable in SPT. The type is interface{} with range:
    // 0..4294967295.
    UnreachableNodeCount interface{}

    // Number of participating nodes unreachable in SPT. The type is interface{}
    // with range: 0..4294967295.
    UnreachableParticipantNodeCount interface{}
}

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetFilter() yfilter.YFilter { return routerNodeCount.YFilter }

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) SetFilter(yf yfilter.YFilter) { routerNodeCount.YFilter = yf }

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetGoName(yname string) string {
    if yname == "reachable-node-count" { return "ReachableNodeCount" }
    if yname == "unreachable-node-count" { return "UnreachableNodeCount" }
    if yname == "unreachable-participant-node-count" { return "UnreachableParticipantNodeCount" }
    return ""
}

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetSegmentPath() string {
    return "router-node-count"
}

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reachable-node-count"] = routerNodeCount.ReachableNodeCount
    leafs["unreachable-node-count"] = routerNodeCount.UnreachableNodeCount
    leafs["unreachable-participant-node-count"] = routerNodeCount.UnreachableParticipantNodeCount
    return leafs
}

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetBundleName() string { return "cisco_ios_xr" }

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetYangName() string { return "router-node-count" }

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) SetParent(parent types.Entity) { routerNodeCount.parent = parent }

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetParent() types.Entity { return routerNodeCount.parent }

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetParentYangName() string { return "topology-summary" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount
// Node Counts for Pseudonode nodes
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of nodes reachable in SPT. The type is interface{} with range:
    // 0..4294967295.
    ReachableNodeCount interface{}

    // Number of nodes unreachable in SPT. The type is interface{} with range:
    // 0..4294967295.
    UnreachableNodeCount interface{}

    // Number of participating nodes unreachable in SPT. The type is interface{}
    // with range: 0..4294967295.
    UnreachableParticipantNodeCount interface{}
}

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetFilter() yfilter.YFilter { return pseudonodeNodeCount.YFilter }

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) SetFilter(yf yfilter.YFilter) { pseudonodeNodeCount.YFilter = yf }

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetGoName(yname string) string {
    if yname == "reachable-node-count" { return "ReachableNodeCount" }
    if yname == "unreachable-node-count" { return "UnreachableNodeCount" }
    if yname == "unreachable-participant-node-count" { return "UnreachableParticipantNodeCount" }
    return ""
}

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetSegmentPath() string {
    return "pseudonode-node-count"
}

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reachable-node-count"] = pseudonodeNodeCount.ReachableNodeCount
    leafs["unreachable-node-count"] = pseudonodeNodeCount.UnreachableNodeCount
    leafs["unreachable-participant-node-count"] = pseudonodeNodeCount.UnreachableParticipantNodeCount
    return leafs
}

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetBundleName() string { return "cisco_ios_xr" }

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetYangName() string { return "pseudonode-node-count" }

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) SetParent(parent types.Entity) { pseudonodeNodeCount.parent = parent }

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetParent() types.Entity { return pseudonodeNodeCount.parent }

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetParentYangName() string { return "topology-summary" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies
// IPv6 IS Topology table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An IS in an IPv6 Link Topology. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology.
    Ipv6LinkTopology []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology
}

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetFilter() yfilter.YFilter { return ipv6LinkTopologies.YFilter }

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) SetFilter(yf yfilter.YFilter) { ipv6LinkTopologies.YFilter = yf }

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetGoName(yname string) string {
    if yname == "ipv6-link-topology" { return "Ipv6LinkTopology" }
    return ""
}

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetSegmentPath() string {
    return "ipv6-link-topologies"
}

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-link-topology" {
        for _, c := range ipv6LinkTopologies.Ipv6LinkTopology {
            if ipv6LinkTopologies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology{}
        ipv6LinkTopologies.Ipv6LinkTopology = append(ipv6LinkTopologies.Ipv6LinkTopology, child)
        return &ipv6LinkTopologies.Ipv6LinkTopology[len(ipv6LinkTopologies.Ipv6LinkTopology)-1]
    }
    return nil
}

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6LinkTopologies.Ipv6LinkTopology {
        children[ipv6LinkTopologies.Ipv6LinkTopology[i].GetSegmentPath()] = &ipv6LinkTopologies.Ipv6LinkTopology[i]
    }
    return children
}

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetYangName() string { return "ipv6-link-topologies" }

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) SetParent(parent types.Entity) { ipv6LinkTopologies.parent = parent }

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetParent() types.Entity { return ipv6LinkTopologies.parent }

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetParentYangName() string { return "topology-level" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology
// An IS in an IPv6 Link Topology
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // Source Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Does the IS participate in the topology?. The type is bool.
    IsParticipant interface{}

    // Is the IS overloaded?. The type is bool.
    IsOverloaded interface{}

    // Is the IS attached?. The type is bool.
    IsAttached interface{}

    // Is the IS reachable, and, if so, its status within the SPT.
    ReachabilityStatus Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus

    // Per-priority counts of prefix items advertised by the IS.
    AdvertisedPrefixItemCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts
}

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetFilter() yfilter.YFilter { return ipv6LinkTopology.YFilter }

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) SetFilter(yf yfilter.YFilter) { ipv6LinkTopology.YFilter = yf }

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetGoName(yname string) string {
    if yname == "system-id" { return "SystemId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "is-participant" { return "IsParticipant" }
    if yname == "is-overloaded" { return "IsOverloaded" }
    if yname == "is-attached" { return "IsAttached" }
    if yname == "reachability-status" { return "ReachabilityStatus" }
    if yname == "advertised-prefix-item-counts" { return "AdvertisedPrefixItemCounts" }
    return ""
}

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetSegmentPath() string {
    return "ipv6-link-topology" + "[system-id='" + fmt.Sprintf("%v", ipv6LinkTopology.SystemId) + "']"
}

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "reachability-status" {
        return &ipv6LinkTopology.ReachabilityStatus
    }
    if childYangName == "advertised-prefix-item-counts" {
        return &ipv6LinkTopology.AdvertisedPrefixItemCounts
    }
    return nil
}

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["reachability-status"] = &ipv6LinkTopology.ReachabilityStatus
    children["advertised-prefix-item-counts"] = &ipv6LinkTopology.AdvertisedPrefixItemCounts
    return children
}

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-id"] = ipv6LinkTopology.SystemId
    leafs["source-address"] = ipv6LinkTopology.SourceAddress
    leafs["is-participant"] = ipv6LinkTopology.IsParticipant
    leafs["is-overloaded"] = ipv6LinkTopology.IsOverloaded
    leafs["is-attached"] = ipv6LinkTopology.IsAttached
    return leafs
}

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetYangName() string { return "ipv6-link-topology" }

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) SetParent(parent types.Entity) { ipv6LinkTopology.parent = parent }

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetParent() types.Entity { return ipv6LinkTopology.parent }

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetParentYangName() string { return "ipv6-link-topologies" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus
// Is the IS reachable, and, if so, its status
// within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ReachableStatus. The type is IsisReachable.
    ReachableStatus interface{}

    // Status of the IS within the SPT.
    ReachableDetails Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetFilter() yfilter.YFilter { return reachabilityStatus.YFilter }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) SetFilter(yf yfilter.YFilter) { reachabilityStatus.YFilter = yf }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetGoName(yname string) string {
    if yname == "reachable-status" { return "ReachableStatus" }
    if yname == "reachable-details" { return "ReachableDetails" }
    return ""
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetSegmentPath() string {
    return "reachability-status"
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "reachable-details" {
        return &reachabilityStatus.ReachableDetails
    }
    return nil
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["reachable-details"] = &reachabilityStatus.ReachableDetails
    return children
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reachable-status"] = reachabilityStatus.ReachableStatus
    return leafs
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetBundleName() string { return "cisco_ios_xr" }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetYangName() string { return "reachability-status" }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) SetParent(parent types.Entity) { reachabilityStatus.parent = parent }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetParent() types.Entity { return reachabilityStatus.parent }

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetParentYangName() string { return "ipv6-link-topology" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails
// Status of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Distance to the IS. The type is interface{} with range: 0..4294967295.
    RootDistance interface{}

    // Distance to the IS. The type is interface{} with range: 0..4294967295.
    MulticastRootDistance interface{}

    // First hops towards the IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths

    // Multicast intact first hops towards the IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath

    // Parents of the IS within the SPT. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent.
    Parent []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent

    // Children of the IS within the SPT. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children.
    Children []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetFilter() yfilter.YFilter { return reachableDetails.YFilter }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) SetFilter(yf yfilter.YFilter) { reachableDetails.YFilter = yf }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetGoName(yname string) string {
    if yname == "root-distance" { return "RootDistance" }
    if yname == "multicast-root-distance" { return "MulticastRootDistance" }
    if yname == "paths" { return "Paths" }
    if yname == "multicast-path" { return "MulticastPath" }
    if yname == "parent" { return "Parent" }
    if yname == "children" { return "Children" }
    return ""
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetSegmentPath() string {
    return "reachable-details"
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "paths" {
        for _, c := range reachableDetails.Paths {
            if reachableDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths{}
        reachableDetails.Paths = append(reachableDetails.Paths, child)
        return &reachableDetails.Paths[len(reachableDetails.Paths)-1]
    }
    if childYangName == "multicast-path" {
        for _, c := range reachableDetails.MulticastPath {
            if reachableDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath{}
        reachableDetails.MulticastPath = append(reachableDetails.MulticastPath, child)
        return &reachableDetails.MulticastPath[len(reachableDetails.MulticastPath)-1]
    }
    if childYangName == "parent" {
        for _, c := range reachableDetails.Parent {
            if reachableDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent{}
        reachableDetails.Parent = append(reachableDetails.Parent, child)
        return &reachableDetails.Parent[len(reachableDetails.Parent)-1]
    }
    if childYangName == "children" {
        for _, c := range reachableDetails.Children {
            if reachableDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children{}
        reachableDetails.Children = append(reachableDetails.Children, child)
        return &reachableDetails.Children[len(reachableDetails.Children)-1]
    }
    return nil
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range reachableDetails.Paths {
        children[reachableDetails.Paths[i].GetSegmentPath()] = &reachableDetails.Paths[i]
    }
    for i := range reachableDetails.MulticastPath {
        children[reachableDetails.MulticastPath[i].GetSegmentPath()] = &reachableDetails.MulticastPath[i]
    }
    for i := range reachableDetails.Parent {
        children[reachableDetails.Parent[i].GetSegmentPath()] = &reachableDetails.Parent[i]
    }
    for i := range reachableDetails.Children {
        children[reachableDetails.Children[i].GetSegmentPath()] = &reachableDetails.Children[i]
    }
    return children
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["root-distance"] = reachableDetails.RootDistance
    leafs["multicast-root-distance"] = reachableDetails.MulticastRootDistance
    return leafs
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetBundleName() string { return "cisco_ios_xr" }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetYangName() string { return "reachable-details" }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) SetParent(parent types.Entity) { reachableDetails.parent = parent }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetParent() types.Entity { return reachableDetails.parent }

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetParentYangName() string { return "reachability-status" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths
// First hops towards the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetFilter() yfilter.YFilter { return paths.YFilter }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) SetFilter(yf yfilter.YFilter) { paths.YFilter = yf }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetSegmentPath() string {
    return "paths"
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &paths.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range paths.UloopExplicit {
            if paths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit{}
        paths.UloopExplicit = append(paths.UloopExplicit, child)
        return &paths.UloopExplicit[len(paths.UloopExplicit)-1]
    }
    return nil
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &paths.FrrBackup
    for i := range paths.UloopExplicit {
        children[paths.UloopExplicit[i].GetSegmentPath()] = &paths.UloopExplicit[i]
    }
    return children
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = paths.NeighborId
    leafs["egress-interface"] = paths.EgressInterface
    leafs["neighbor-address"] = paths.NeighborAddress
    leafs["neighbor-snpa"] = paths.NeighborSnpa
    leafs["tag"] = paths.Tag
    leafs["tunnel-interface"] = paths.TunnelInterface
    leafs["segment-routing-sid-value"] = paths.SegmentRoutingSidValue
    leafs["weight"] = paths.Weight
    leafs["is-te-tunnel-interface"] = paths.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = paths.IsSrExcludeTunnelInterface
    return leafs
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetBundleName() string { return "cisco_ios_xr" }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetYangName() string { return "paths" }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) SetParent(parent types.Entity) { paths.parent = parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetParent() types.Entity { return paths.parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetParentYangName() string { return "reachable-details" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath
// Multicast intact first hops towards the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetFilter() yfilter.YFilter { return multicastPath.YFilter }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) SetFilter(yf yfilter.YFilter) { multicastPath.YFilter = yf }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetSegmentPath() string {
    return "multicast-path"
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &multicastPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range multicastPath.UloopExplicit {
            if multicastPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit{}
        multicastPath.UloopExplicit = append(multicastPath.UloopExplicit, child)
        return &multicastPath.UloopExplicit[len(multicastPath.UloopExplicit)-1]
    }
    return nil
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &multicastPath.FrrBackup
    for i := range multicastPath.UloopExplicit {
        children[multicastPath.UloopExplicit[i].GetSegmentPath()] = &multicastPath.UloopExplicit[i]
    }
    return children
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = multicastPath.NeighborId
    leafs["egress-interface"] = multicastPath.EgressInterface
    leafs["neighbor-address"] = multicastPath.NeighborAddress
    leafs["neighbor-snpa"] = multicastPath.NeighborSnpa
    leafs["tag"] = multicastPath.Tag
    leafs["tunnel-interface"] = multicastPath.TunnelInterface
    leafs["segment-routing-sid-value"] = multicastPath.SegmentRoutingSidValue
    leafs["weight"] = multicastPath.Weight
    leafs["is-te-tunnel-interface"] = multicastPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = multicastPath.IsSrExcludeTunnelInterface
    return leafs
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetBundleName() string { return "cisco_ios_xr" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetYangName() string { return "multicast-path" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) SetParent(parent types.Entity) { multicastPath.parent = parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetParent() types.Entity { return multicastPath.parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetParentYangName() string { return "reachable-details" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent
// Parents of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Pseudonode between system and its neighbor. The type is string with
    // pattern: [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    IntermediatePseudonode interface{}
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetFilter() yfilter.YFilter { return parent.YFilter }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) SetFilter(yf yfilter.YFilter) { parent.YFilter = yf }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "intermediate-pseudonode" { return "IntermediatePseudonode" }
    return ""
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetSegmentPath() string {
    return "parent"
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = parent.NeighborId
    leafs["intermediate-pseudonode"] = parent.IntermediatePseudonode
    return leafs
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetBundleName() string { return "cisco_ios_xr" }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetYangName() string { return "parent" }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) SetParent(parent types.Entity) { parent.parent = parent }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetParent() types.Entity { return parent.parent }

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetParentYangName() string { return "reachable-details" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children
// Children of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Pseudonode between system and its neighbor. The type is string with
    // pattern: [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    IntermediatePseudonode interface{}
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetFilter() yfilter.YFilter { return children.YFilter }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) SetFilter(yf yfilter.YFilter) { children.YFilter = yf }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "intermediate-pseudonode" { return "IntermediatePseudonode" }
    return ""
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetSegmentPath() string {
    return "children"
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = children.NeighborId
    leafs["intermediate-pseudonode"] = children.IntermediatePseudonode
    return leafs
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetBundleName() string { return "cisco_ios_xr" }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetYangName() string { return "children" }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) SetParent(parent types.Entity) { children.parent = parent }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetParent() types.Entity { return children.parent }

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetParentYangName() string { return "reachable-details" }

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts
// Per-priority counts of prefix items advertised
// by the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetFilter() yfilter.YFilter { return advertisedPrefixItemCounts.YFilter }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) SetFilter(yf yfilter.YFilter) { advertisedPrefixItemCounts.YFilter = yf }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetSegmentPath() string {
    return "advertised-prefix-item-counts"
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = advertisedPrefixItemCounts.Critical
    leafs["high"] = advertisedPrefixItemCounts.High
    leafs["medium"] = advertisedPrefixItemCounts.Medium
    leafs["low"] = advertisedPrefixItemCounts.Low
    return leafs
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetBundleName() string { return "cisco_ios_xr" }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetYangName() string { return "advertised-prefix-item-counts" }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) SetParent(parent types.Entity) { advertisedPrefixItemCounts.parent = parent }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetParent() types.Entity { return advertisedPrefixItemCounts.parent }

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetParentYangName() string { return "ipv6-link-topology" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes
// IPv6 local route
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An IPv6 route known to IS-IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route.
    Ipv6Route []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route
}

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetFilter() yfilter.YFilter { return ipv6Routes.YFilter }

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) SetFilter(yf yfilter.YFilter) { ipv6Routes.YFilter = yf }

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetGoName(yname string) string {
    if yname == "ipv6-route" { return "Ipv6Route" }
    return ""
}

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetSegmentPath() string {
    return "ipv6-routes"
}

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-route" {
        for _, c := range ipv6Routes.Ipv6Route {
            if ipv6Routes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route{}
        ipv6Routes.Ipv6Route = append(ipv6Routes.Ipv6Route, child)
        return &ipv6Routes.Ipv6Route[len(ipv6Routes.Ipv6Route)-1]
    }
    return nil
}

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6Routes.Ipv6Route {
        children[ipv6Routes.Ipv6Route[i].GetSegmentPath()] = &ipv6Routes.Ipv6Route[i]
    }
    return children
}

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetYangName() string { return "ipv6-routes" }

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) SetParent(parent types.Entity) { ipv6Routes.parent = parent }

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetParent() types.Entity { return ipv6Routes.parent }

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetParentYangName() string { return "topology" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route
// An IPv6 route known to IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail
}

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetFilter() yfilter.YFilter { return ipv6Route.YFilter }

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) SetFilter(yf yfilter.YFilter) { ipv6Route.YFilter = yf }

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "connected-status" { return "ConnectedStatus" }
    if yname == "redistributed-status" { return "RedistributedStatus" }
    if yname == "native-status" { return "NativeStatus" }
    if yname == "per-level-advertising-detail" { return "PerLevelAdvertisingDetail" }
    return ""
}

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetSegmentPath() string {
    return "ipv6-route"
}

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-status" {
        return &ipv6Route.ConnectedStatus
    }
    if childYangName == "redistributed-status" {
        return &ipv6Route.RedistributedStatus
    }
    if childYangName == "native-status" {
        return &ipv6Route.NativeStatus
    }
    if childYangName == "per-level-advertising-detail" {
        for _, c := range ipv6Route.PerLevelAdvertisingDetail {
            if ipv6Route.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail{}
        ipv6Route.PerLevelAdvertisingDetail = append(ipv6Route.PerLevelAdvertisingDetail, child)
        return &ipv6Route.PerLevelAdvertisingDetail[len(ipv6Route.PerLevelAdvertisingDetail)-1]
    }
    return nil
}

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected-status"] = &ipv6Route.ConnectedStatus
    children["redistributed-status"] = &ipv6Route.RedistributedStatus
    children["native-status"] = &ipv6Route.NativeStatus
    for i := range ipv6Route.PerLevelAdvertisingDetail {
        children[ipv6Route.PerLevelAdvertisingDetail[i].GetSegmentPath()] = &ipv6Route.PerLevelAdvertisingDetail[i]
    }
    return children
}

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6Route.Prefix
    leafs["prefix-length"] = ipv6Route.PrefixLength
    return leafs
}

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetYangName() string { return "ipv6-route" }

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) SetParent(parent types.Entity) { ipv6Route.parent = parent }

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetParent() types.Entity { return ipv6Route.parent }

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetParentYangName() string { return "ipv6-routes" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetFilter() yfilter.YFilter { return connectedStatus.YFilter }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) SetFilter(yf yfilter.YFilter) { connectedStatus.YFilter = yf }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "connected-details" { return "ConnectedDetails" }
    return ""
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetSegmentPath() string {
    return "connected-status"
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-details" {
        return &connectedStatus.ConnectedDetails
    }
    return nil
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected-details"] = &connectedStatus.ConnectedDetails
    return children
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = connectedStatus.IsValid
    return leafs
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetBundleName() string { return "cisco_ios_xr" }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetYangName() string { return "connected-status" }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) SetParent(parent types.Entity) { connectedStatus.parent = parent }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetParent() types.Entity { return connectedStatus.parent }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetParentYangName() string { return "ipv6-route" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface.
    Interface []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetFilter() yfilter.YFilter { return connectedDetails.YFilter }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) SetFilter(yf yfilter.YFilter) { connectedDetails.YFilter = yf }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetSegmentPath() string {
    return "connected-details"
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range connectedDetails.Interface {
            if connectedDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface{}
        connectedDetails.Interface = append(connectedDetails.Interface, child)
        return &connectedDetails.Interface[len(connectedDetails.Interface)-1]
    }
    return nil
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range connectedDetails.Interface {
        children[connectedDetails.Interface[i].GetSegmentPath()] = &connectedDetails.Interface[i]
    }
    return children
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetBundleName() string { return "cisco_ios_xr" }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetYangName() string { return "connected-details" }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) SetParent(parent types.Entity) { connectedDetails.parent = parent }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetParent() types.Entity { return connectedDetails.parent }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetParentYangName() string { return "connected-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetSegmentPath() string {
    return "interface"
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = self.Entry
    return leafs
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetYangName() string { return "interface" }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetParent() types.Entity { return self.parent }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetParentYangName() string { return "connected-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetFilter() yfilter.YFilter { return redistributedStatus.YFilter }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) SetFilter(yf yfilter.YFilter) { redistributedStatus.YFilter = yf }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "redistribution-details" { return "RedistributionDetails" }
    return ""
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetSegmentPath() string {
    return "redistributed-status"
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistribution-details" {
        return &redistributedStatus.RedistributionDetails
    }
    return nil
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["redistribution-details"] = &redistributedStatus.RedistributionDetails
    return children
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = redistributedStatus.IsValid
    return leafs
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetBundleName() string { return "cisco_ios_xr" }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetYangName() string { return "redistributed-status" }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) SetParent(parent types.Entity) { redistributedStatus.parent = parent }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetParent() types.Entity { return redistributedStatus.parent }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetParentYangName() string { return "ipv6-route" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetFilter() yfilter.YFilter { return redistributionDetails.YFilter }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) SetFilter(yf yfilter.YFilter) { redistributionDetails.YFilter = yf }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetGoName(yname string) string {
    if yname == "isis-sh-route-redist-detail" { return "IsisShRouteRedistDetail" }
    return ""
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetSegmentPath() string {
    return "redistribution-details"
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "isis-sh-route-redist-detail" {
        for _, c := range redistributionDetails.IsisShRouteRedistDetail {
            if redistributionDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail{}
        redistributionDetails.IsisShRouteRedistDetail = append(redistributionDetails.IsisShRouteRedistDetail, child)
        return &redistributionDetails.IsisShRouteRedistDetail[len(redistributionDetails.IsisShRouteRedistDetail)-1]
    }
    return nil
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        children[redistributionDetails.IsisShRouteRedistDetail[i].GetSegmentPath()] = &redistributionDetails.IsisShRouteRedistDetail[i]
    }
    return children
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetBundleName() string { return "cisco_ios_xr" }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetYangName() string { return "redistribution-details" }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) SetParent(parent types.Entity) { redistributionDetails.parent = parent }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetParent() types.Entity { return redistributionDetails.parent }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetParentYangName() string { return "redistributed-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetFilter() yfilter.YFilter { return isisShRouteRedistDetail.YFilter }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) SetFilter(yf yfilter.YFilter) { isisShRouteRedistDetail.YFilter = yf }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "owner" { return "Owner" }
    return ""
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetSegmentPath() string {
    return "isis-sh-route-redist-detail"
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "owner" {
        return &isisShRouteRedistDetail.Owner
    }
    return nil
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["owner"] = &isisShRouteRedistDetail.Owner
    return children
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = isisShRouteRedistDetail.Level
    return leafs
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetBundleName() string { return "cisco_ios_xr" }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetYangName() string { return "isis-sh-route-redist-detail" }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) SetParent(parent types.Entity) { isisShRouteRedistDetail.parent = parent }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetParent() types.Entity { return isisShRouteRedistDetail.parent }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetParentYangName() string { return "redistribution-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetFilter() yfilter.YFilter { return owner.YFilter }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) SetFilter(yf yfilter.YFilter) { owner.YFilter = yf }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetGoName(yname string) string {
    if yname == "protocol" { return "Protocol" }
    if yname == "isis-instance-id" { return "IsisInstanceId" }
    if yname == "ospf-process-id" { return "OspfProcessId" }
    if yname == "ospfv3-process-id" { return "Ospfv3ProcessId" }
    if yname == "bgp-as-number" { return "BgpAsNumber" }
    if yname == "eigrp-as-number" { return "EigrpAsNumber" }
    if yname == "application-name" { return "ApplicationName" }
    return ""
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetSegmentPath() string {
    return "owner"
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol"] = owner.Protocol
    leafs["isis-instance-id"] = owner.IsisInstanceId
    leafs["ospf-process-id"] = owner.OspfProcessId
    leafs["ospfv3-process-id"] = owner.Ospfv3ProcessId
    leafs["bgp-as-number"] = owner.BgpAsNumber
    leafs["eigrp-as-number"] = owner.EigrpAsNumber
    leafs["application-name"] = owner.ApplicationName
    return leafs
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetBundleName() string { return "cisco_ios_xr" }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetYangName() string { return "owner" }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) SetParent(parent types.Entity) { owner.parent = parent }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetParent() types.Entity { return owner.parent }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetParentYangName() string { return "isis-sh-route-redist-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetFilter() yfilter.YFilter { return nativeStatus.YFilter }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) SetFilter(yf yfilter.YFilter) { nativeStatus.YFilter = yf }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "native-details" { return "NativeDetails" }
    return ""
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetSegmentPath() string {
    return "native-status"
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "native-details" {
        return &nativeStatus.NativeDetails
    }
    return nil
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["native-details"] = &nativeStatus.NativeDetails
    return children
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = nativeStatus.IsValid
    return leafs
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetBundleName() string { return "cisco_ios_xr" }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetYangName() string { return "native-status" }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) SetParent(parent types.Entity) { nativeStatus.parent = parent }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetParent() types.Entity { return nativeStatus.parent }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetParentYangName() string { return "ipv6-route" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup.
    Backup []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetFilter() yfilter.YFilter { return nativeDetails.YFilter }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) SetFilter(yf yfilter.YFilter) { nativeDetails.YFilter = yf }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    if yname == "primary" { return "Primary" }
    if yname == "backup" { return "Backup" }
    return ""
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetSegmentPath() string {
    return "native-details"
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "primary" {
        return &nativeDetails.Primary
    }
    if childYangName == "backup" {
        for _, c := range nativeDetails.Backup {
            if nativeDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup{}
        nativeDetails.Backup = append(nativeDetails.Backup, child)
        return &nativeDetails.Backup[len(nativeDetails.Backup)-1]
    }
    return nil
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["primary"] = &nativeDetails.Primary
    for i := range nativeDetails.Backup {
        children[nativeDetails.Backup[i].GetSegmentPath()] = &nativeDetails.Backup[i]
    }
    return children
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority"] = nativeDetails.Priority
    return leafs
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetBundleName() string { return "cisco_ios_xr" }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetYangName() string { return "native-details" }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) SetParent(parent types.Entity) { nativeDetails.parent = parent }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetParent() types.Entity { return nativeDetails.parent }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetParentYangName() string { return "native-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetFilter() yfilter.YFilter { return primary.YFilter }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) SetFilter(yf yfilter.YFilter) { primary.YFilter = yf }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetGoName(yname string) string {
    if yname == "origin" { return "Origin" }
    if yname == "metric" { return "Metric" }
    if yname == "multicast-metric" { return "MulticastMetric" }
    if yname == "is-external-metric" { return "IsExternalMetric" }
    if yname == "administrative-distance" { return "AdministrativeDistance" }
    if yname == "paths" { return "Paths" }
    if yname == "ucmp-next-hop" { return "UcmpNextHop" }
    if yname == "multicast-path" { return "MulticastPath" }
    if yname == "srte-path" { return "SrtePath" }
    if yname == "explicit-path" { return "ExplicitPath" }
    if yname == "source" { return "Source" }
    if yname == "multicast-source" { return "MulticastSource" }
    return ""
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetSegmentPath() string {
    return "primary"
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "paths" {
        for _, c := range primary.Paths {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths{}
        primary.Paths = append(primary.Paths, child)
        return &primary.Paths[len(primary.Paths)-1]
    }
    if childYangName == "ucmp-next-hop" {
        for _, c := range primary.UcmpNextHop {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop{}
        primary.UcmpNextHop = append(primary.UcmpNextHop, child)
        return &primary.UcmpNextHop[len(primary.UcmpNextHop)-1]
    }
    if childYangName == "multicast-path" {
        for _, c := range primary.MulticastPath {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath{}
        primary.MulticastPath = append(primary.MulticastPath, child)
        return &primary.MulticastPath[len(primary.MulticastPath)-1]
    }
    if childYangName == "srte-path" {
        for _, c := range primary.SrtePath {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath{}
        primary.SrtePath = append(primary.SrtePath, child)
        return &primary.SrtePath[len(primary.SrtePath)-1]
    }
    if childYangName == "explicit-path" {
        for _, c := range primary.ExplicitPath {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath{}
        primary.ExplicitPath = append(primary.ExplicitPath, child)
        return &primary.ExplicitPath[len(primary.ExplicitPath)-1]
    }
    if childYangName == "source" {
        for _, c := range primary.Source {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source{}
        primary.Source = append(primary.Source, child)
        return &primary.Source[len(primary.Source)-1]
    }
    if childYangName == "multicast-source" {
        for _, c := range primary.MulticastSource {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource{}
        primary.MulticastSource = append(primary.MulticastSource, child)
        return &primary.MulticastSource[len(primary.MulticastSource)-1]
    }
    return nil
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range primary.Paths {
        children[primary.Paths[i].GetSegmentPath()] = &primary.Paths[i]
    }
    for i := range primary.UcmpNextHop {
        children[primary.UcmpNextHop[i].GetSegmentPath()] = &primary.UcmpNextHop[i]
    }
    for i := range primary.MulticastPath {
        children[primary.MulticastPath[i].GetSegmentPath()] = &primary.MulticastPath[i]
    }
    for i := range primary.SrtePath {
        children[primary.SrtePath[i].GetSegmentPath()] = &primary.SrtePath[i]
    }
    for i := range primary.ExplicitPath {
        children[primary.ExplicitPath[i].GetSegmentPath()] = &primary.ExplicitPath[i]
    }
    for i := range primary.Source {
        children[primary.Source[i].GetSegmentPath()] = &primary.Source[i]
    }
    for i := range primary.MulticastSource {
        children[primary.MulticastSource[i].GetSegmentPath()] = &primary.MulticastSource[i]
    }
    return children
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["origin"] = primary.Origin
    leafs["metric"] = primary.Metric
    leafs["multicast-metric"] = primary.MulticastMetric
    leafs["is-external-metric"] = primary.IsExternalMetric
    leafs["administrative-distance"] = primary.AdministrativeDistance
    return leafs
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetBundleName() string { return "cisco_ios_xr" }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetYangName() string { return "primary" }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) SetParent(parent types.Entity) { primary.parent = parent }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetParent() types.Entity { return primary.parent }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetParentYangName() string { return "native-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetFilter() yfilter.YFilter { return paths.YFilter }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) SetFilter(yf yfilter.YFilter) { paths.YFilter = yf }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetSegmentPath() string {
    return "paths"
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &paths.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range paths.UloopExplicit {
            if paths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit{}
        paths.UloopExplicit = append(paths.UloopExplicit, child)
        return &paths.UloopExplicit[len(paths.UloopExplicit)-1]
    }
    return nil
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &paths.FrrBackup
    for i := range paths.UloopExplicit {
        children[paths.UloopExplicit[i].GetSegmentPath()] = &paths.UloopExplicit[i]
    }
    return children
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = paths.NeighborId
    leafs["egress-interface"] = paths.EgressInterface
    leafs["neighbor-address"] = paths.NeighborAddress
    leafs["neighbor-snpa"] = paths.NeighborSnpa
    leafs["tag"] = paths.Tag
    leafs["tunnel-interface"] = paths.TunnelInterface
    leafs["segment-routing-sid-value"] = paths.SegmentRoutingSidValue
    leafs["weight"] = paths.Weight
    leafs["is-te-tunnel-interface"] = paths.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = paths.IsSrExcludeTunnelInterface
    return leafs
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetBundleName() string { return "cisco_ios_xr" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetYangName() string { return "paths" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) SetParent(parent types.Entity) { paths.parent = parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetParent() types.Entity { return paths.parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetFilter() yfilter.YFilter { return ucmpNextHop.YFilter }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) SetFilter(yf yfilter.YFilter) { ucmpNextHop.YFilter = yf }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "total-ucmp-distance" { return "TotalUcmpDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    return ""
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetSegmentPath() string {
    return "ucmp-next-hop"
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &ucmpNextHop.FrrBackup
    }
    return nil
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &ucmpNextHop.FrrBackup
    return children
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = ucmpNextHop.NeighborId
    leafs["egress-interface"] = ucmpNextHop.EgressInterface
    leafs["neighbor-address"] = ucmpNextHop.NeighborAddress
    leafs["neighbor-snpa"] = ucmpNextHop.NeighborSnpa
    leafs["tag"] = ucmpNextHop.Tag
    leafs["total-ucmp-distance"] = ucmpNextHop.TotalUcmpDistance
    leafs["segment-routing-sid-value"] = ucmpNextHop.SegmentRoutingSidValue
    leafs["weight"] = ucmpNextHop.Weight
    leafs["is-te-tunnel-interface"] = ucmpNextHop.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = ucmpNextHop.IsSrExcludeTunnelInterface
    return leafs
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetBundleName() string { return "cisco_ios_xr" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetYangName() string { return "ucmp-next-hop" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) SetParent(parent types.Entity) { ucmpNextHop.parent = parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetParent() types.Entity { return ucmpNextHop.parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetParentYangName() string { return "ucmp-next-hop" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetFilter() yfilter.YFilter { return multicastPath.YFilter }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) SetFilter(yf yfilter.YFilter) { multicastPath.YFilter = yf }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetSegmentPath() string {
    return "multicast-path"
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &multicastPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range multicastPath.UloopExplicit {
            if multicastPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit{}
        multicastPath.UloopExplicit = append(multicastPath.UloopExplicit, child)
        return &multicastPath.UloopExplicit[len(multicastPath.UloopExplicit)-1]
    }
    return nil
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &multicastPath.FrrBackup
    for i := range multicastPath.UloopExplicit {
        children[multicastPath.UloopExplicit[i].GetSegmentPath()] = &multicastPath.UloopExplicit[i]
    }
    return children
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = multicastPath.NeighborId
    leafs["egress-interface"] = multicastPath.EgressInterface
    leafs["neighbor-address"] = multicastPath.NeighborAddress
    leafs["neighbor-snpa"] = multicastPath.NeighborSnpa
    leafs["tag"] = multicastPath.Tag
    leafs["tunnel-interface"] = multicastPath.TunnelInterface
    leafs["segment-routing-sid-value"] = multicastPath.SegmentRoutingSidValue
    leafs["weight"] = multicastPath.Weight
    leafs["is-te-tunnel-interface"] = multicastPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = multicastPath.IsSrExcludeTunnelInterface
    return leafs
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetBundleName() string { return "cisco_ios_xr" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetYangName() string { return "multicast-path" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) SetParent(parent types.Entity) { multicastPath.parent = parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetParent() types.Entity { return multicastPath.parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetFilter() yfilter.YFilter { return srtePath.YFilter }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) SetFilter(yf yfilter.YFilter) { srtePath.YFilter = yf }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetSegmentPath() string {
    return "srte-path"
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &srtePath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range srtePath.UloopExplicit {
            if srtePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit{}
        srtePath.UloopExplicit = append(srtePath.UloopExplicit, child)
        return &srtePath.UloopExplicit[len(srtePath.UloopExplicit)-1]
    }
    return nil
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &srtePath.FrrBackup
    for i := range srtePath.UloopExplicit {
        children[srtePath.UloopExplicit[i].GetSegmentPath()] = &srtePath.UloopExplicit[i]
    }
    return children
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = srtePath.NeighborId
    leafs["egress-interface"] = srtePath.EgressInterface
    leafs["neighbor-address"] = srtePath.NeighborAddress
    leafs["neighbor-snpa"] = srtePath.NeighborSnpa
    leafs["tag"] = srtePath.Tag
    leafs["tunnel-interface"] = srtePath.TunnelInterface
    leafs["segment-routing-sid-value"] = srtePath.SegmentRoutingSidValue
    leafs["weight"] = srtePath.Weight
    leafs["is-te-tunnel-interface"] = srtePath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = srtePath.IsSrExcludeTunnelInterface
    return leafs
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetBundleName() string { return "cisco_ios_xr" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetYangName() string { return "srte-path" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) SetParent(parent types.Entity) { srtePath.parent = parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetParent() types.Entity { return srtePath.parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetFilter() yfilter.YFilter { return explicitPath.YFilter }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) SetFilter(yf yfilter.YFilter) { explicitPath.YFilter = yf }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetSegmentPath() string {
    return "explicit-path"
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &explicitPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range explicitPath.UloopExplicit {
            if explicitPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit{}
        explicitPath.UloopExplicit = append(explicitPath.UloopExplicit, child)
        return &explicitPath.UloopExplicit[len(explicitPath.UloopExplicit)-1]
    }
    return nil
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &explicitPath.FrrBackup
    for i := range explicitPath.UloopExplicit {
        children[explicitPath.UloopExplicit[i].GetSegmentPath()] = &explicitPath.UloopExplicit[i]
    }
    return children
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = explicitPath.NeighborId
    leafs["egress-interface"] = explicitPath.EgressInterface
    leafs["neighbor-address"] = explicitPath.NeighborAddress
    leafs["neighbor-snpa"] = explicitPath.NeighborSnpa
    leafs["tag"] = explicitPath.Tag
    leafs["tunnel-interface"] = explicitPath.TunnelInterface
    leafs["segment-routing-sid-value"] = explicitPath.SegmentRoutingSidValue
    leafs["weight"] = explicitPath.Weight
    leafs["is-te-tunnel-interface"] = explicitPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = explicitPath.IsSrExcludeTunnelInterface
    return leafs
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetBundleName() string { return "cisco_ios_xr" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetYangName() string { return "explicit-path" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) SetParent(parent types.Entity) { explicitPath.parent = parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetParent() types.Entity { return explicitPath.parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetSegmentPath() string {
    return "source"
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range source.Tags {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags{}
        source.Tags = append(source.Tags, child)
        return &source.Tags[len(source.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range source.NodalSid {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid{}
        source.NodalSid = append(source.NodalSid, child)
        return &source.NodalSid[len(source.NodalSid)-1]
    }
    return nil
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range source.Tags {
        children[source.Tags[i].GetSegmentPath()] = &source.Tags[i]
    }
    for i := range source.NodalSid {
        children[source.NodalSid[i].GetSegmentPath()] = &source.NodalSid[i]
    }
    return children
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = source.SourceLspId
    leafs["source-address"] = source.SourceAddress
    return leafs
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetYangName() string { return "source" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetParent() types.Entity { return source.parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetFilter() yfilter.YFilter { return multicastSource.YFilter }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) SetFilter(yf yfilter.YFilter) { multicastSource.YFilter = yf }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetSegmentPath() string {
    return "multicast-source"
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range multicastSource.Tags {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags{}
        multicastSource.Tags = append(multicastSource.Tags, child)
        return &multicastSource.Tags[len(multicastSource.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range multicastSource.NodalSid {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid{}
        multicastSource.NodalSid = append(multicastSource.NodalSid, child)
        return &multicastSource.NodalSid[len(multicastSource.NodalSid)-1]
    }
    return nil
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range multicastSource.Tags {
        children[multicastSource.Tags[i].GetSegmentPath()] = &multicastSource.Tags[i]
    }
    for i := range multicastSource.NodalSid {
        children[multicastSource.NodalSid[i].GetSegmentPath()] = &multicastSource.NodalSid[i]
    }
    return children
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = multicastSource.SourceLspId
    leafs["source-address"] = multicastSource.SourceAddress
    return leafs
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetBundleName() string { return "cisco_ios_xr" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetYangName() string { return "multicast-source" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) SetParent(parent types.Entity) { multicastSource.parent = parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetParent() types.Entity { return multicastSource.parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetFilter() yfilter.YFilter { return backup.YFilter }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) SetFilter(yf yfilter.YFilter) { backup.YFilter = yf }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetGoName(yname string) string {
    if yname == "origin" { return "Origin" }
    if yname == "metric" { return "Metric" }
    if yname == "multicast-metric" { return "MulticastMetric" }
    if yname == "is-external-metric" { return "IsExternalMetric" }
    if yname == "administrative-distance" { return "AdministrativeDistance" }
    if yname == "paths" { return "Paths" }
    if yname == "ucmp-next-hop" { return "UcmpNextHop" }
    if yname == "multicast-path" { return "MulticastPath" }
    if yname == "srte-path" { return "SrtePath" }
    if yname == "explicit-path" { return "ExplicitPath" }
    if yname == "source" { return "Source" }
    if yname == "multicast-source" { return "MulticastSource" }
    return ""
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetSegmentPath() string {
    return "backup"
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "paths" {
        for _, c := range backup.Paths {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths{}
        backup.Paths = append(backup.Paths, child)
        return &backup.Paths[len(backup.Paths)-1]
    }
    if childYangName == "ucmp-next-hop" {
        for _, c := range backup.UcmpNextHop {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop{}
        backup.UcmpNextHop = append(backup.UcmpNextHop, child)
        return &backup.UcmpNextHop[len(backup.UcmpNextHop)-1]
    }
    if childYangName == "multicast-path" {
        for _, c := range backup.MulticastPath {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath{}
        backup.MulticastPath = append(backup.MulticastPath, child)
        return &backup.MulticastPath[len(backup.MulticastPath)-1]
    }
    if childYangName == "srte-path" {
        for _, c := range backup.SrtePath {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath{}
        backup.SrtePath = append(backup.SrtePath, child)
        return &backup.SrtePath[len(backup.SrtePath)-1]
    }
    if childYangName == "explicit-path" {
        for _, c := range backup.ExplicitPath {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath{}
        backup.ExplicitPath = append(backup.ExplicitPath, child)
        return &backup.ExplicitPath[len(backup.ExplicitPath)-1]
    }
    if childYangName == "source" {
        for _, c := range backup.Source {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source{}
        backup.Source = append(backup.Source, child)
        return &backup.Source[len(backup.Source)-1]
    }
    if childYangName == "multicast-source" {
        for _, c := range backup.MulticastSource {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource{}
        backup.MulticastSource = append(backup.MulticastSource, child)
        return &backup.MulticastSource[len(backup.MulticastSource)-1]
    }
    return nil
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range backup.Paths {
        children[backup.Paths[i].GetSegmentPath()] = &backup.Paths[i]
    }
    for i := range backup.UcmpNextHop {
        children[backup.UcmpNextHop[i].GetSegmentPath()] = &backup.UcmpNextHop[i]
    }
    for i := range backup.MulticastPath {
        children[backup.MulticastPath[i].GetSegmentPath()] = &backup.MulticastPath[i]
    }
    for i := range backup.SrtePath {
        children[backup.SrtePath[i].GetSegmentPath()] = &backup.SrtePath[i]
    }
    for i := range backup.ExplicitPath {
        children[backup.ExplicitPath[i].GetSegmentPath()] = &backup.ExplicitPath[i]
    }
    for i := range backup.Source {
        children[backup.Source[i].GetSegmentPath()] = &backup.Source[i]
    }
    for i := range backup.MulticastSource {
        children[backup.MulticastSource[i].GetSegmentPath()] = &backup.MulticastSource[i]
    }
    return children
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["origin"] = backup.Origin
    leafs["metric"] = backup.Metric
    leafs["multicast-metric"] = backup.MulticastMetric
    leafs["is-external-metric"] = backup.IsExternalMetric
    leafs["administrative-distance"] = backup.AdministrativeDistance
    return leafs
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetBundleName() string { return "cisco_ios_xr" }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetYangName() string { return "backup" }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) SetParent(parent types.Entity) { backup.parent = parent }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetParent() types.Entity { return backup.parent }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetParentYangName() string { return "native-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetFilter() yfilter.YFilter { return paths.YFilter }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) SetFilter(yf yfilter.YFilter) { paths.YFilter = yf }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetSegmentPath() string {
    return "paths"
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &paths.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range paths.UloopExplicit {
            if paths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit{}
        paths.UloopExplicit = append(paths.UloopExplicit, child)
        return &paths.UloopExplicit[len(paths.UloopExplicit)-1]
    }
    return nil
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &paths.FrrBackup
    for i := range paths.UloopExplicit {
        children[paths.UloopExplicit[i].GetSegmentPath()] = &paths.UloopExplicit[i]
    }
    return children
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = paths.NeighborId
    leafs["egress-interface"] = paths.EgressInterface
    leafs["neighbor-address"] = paths.NeighborAddress
    leafs["neighbor-snpa"] = paths.NeighborSnpa
    leafs["tag"] = paths.Tag
    leafs["tunnel-interface"] = paths.TunnelInterface
    leafs["segment-routing-sid-value"] = paths.SegmentRoutingSidValue
    leafs["weight"] = paths.Weight
    leafs["is-te-tunnel-interface"] = paths.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = paths.IsSrExcludeTunnelInterface
    return leafs
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetBundleName() string { return "cisco_ios_xr" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetYangName() string { return "paths" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) SetParent(parent types.Entity) { paths.parent = parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetParent() types.Entity { return paths.parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetFilter() yfilter.YFilter { return ucmpNextHop.YFilter }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) SetFilter(yf yfilter.YFilter) { ucmpNextHop.YFilter = yf }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "total-ucmp-distance" { return "TotalUcmpDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    return ""
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetSegmentPath() string {
    return "ucmp-next-hop"
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &ucmpNextHop.FrrBackup
    }
    return nil
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &ucmpNextHop.FrrBackup
    return children
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = ucmpNextHop.NeighborId
    leafs["egress-interface"] = ucmpNextHop.EgressInterface
    leafs["neighbor-address"] = ucmpNextHop.NeighborAddress
    leafs["neighbor-snpa"] = ucmpNextHop.NeighborSnpa
    leafs["tag"] = ucmpNextHop.Tag
    leafs["total-ucmp-distance"] = ucmpNextHop.TotalUcmpDistance
    leafs["segment-routing-sid-value"] = ucmpNextHop.SegmentRoutingSidValue
    leafs["weight"] = ucmpNextHop.Weight
    leafs["is-te-tunnel-interface"] = ucmpNextHop.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = ucmpNextHop.IsSrExcludeTunnelInterface
    return leafs
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetBundleName() string { return "cisco_ios_xr" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetYangName() string { return "ucmp-next-hop" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) SetParent(parent types.Entity) { ucmpNextHop.parent = parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetParent() types.Entity { return ucmpNextHop.parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetParentYangName() string { return "ucmp-next-hop" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetFilter() yfilter.YFilter { return multicastPath.YFilter }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) SetFilter(yf yfilter.YFilter) { multicastPath.YFilter = yf }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetSegmentPath() string {
    return "multicast-path"
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &multicastPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range multicastPath.UloopExplicit {
            if multicastPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit{}
        multicastPath.UloopExplicit = append(multicastPath.UloopExplicit, child)
        return &multicastPath.UloopExplicit[len(multicastPath.UloopExplicit)-1]
    }
    return nil
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &multicastPath.FrrBackup
    for i := range multicastPath.UloopExplicit {
        children[multicastPath.UloopExplicit[i].GetSegmentPath()] = &multicastPath.UloopExplicit[i]
    }
    return children
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = multicastPath.NeighborId
    leafs["egress-interface"] = multicastPath.EgressInterface
    leafs["neighbor-address"] = multicastPath.NeighborAddress
    leafs["neighbor-snpa"] = multicastPath.NeighborSnpa
    leafs["tag"] = multicastPath.Tag
    leafs["tunnel-interface"] = multicastPath.TunnelInterface
    leafs["segment-routing-sid-value"] = multicastPath.SegmentRoutingSidValue
    leafs["weight"] = multicastPath.Weight
    leafs["is-te-tunnel-interface"] = multicastPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = multicastPath.IsSrExcludeTunnelInterface
    return leafs
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetBundleName() string { return "cisco_ios_xr" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetYangName() string { return "multicast-path" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) SetParent(parent types.Entity) { multicastPath.parent = parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetParent() types.Entity { return multicastPath.parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetFilter() yfilter.YFilter { return srtePath.YFilter }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) SetFilter(yf yfilter.YFilter) { srtePath.YFilter = yf }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetSegmentPath() string {
    return "srte-path"
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &srtePath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range srtePath.UloopExplicit {
            if srtePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit{}
        srtePath.UloopExplicit = append(srtePath.UloopExplicit, child)
        return &srtePath.UloopExplicit[len(srtePath.UloopExplicit)-1]
    }
    return nil
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &srtePath.FrrBackup
    for i := range srtePath.UloopExplicit {
        children[srtePath.UloopExplicit[i].GetSegmentPath()] = &srtePath.UloopExplicit[i]
    }
    return children
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = srtePath.NeighborId
    leafs["egress-interface"] = srtePath.EgressInterface
    leafs["neighbor-address"] = srtePath.NeighborAddress
    leafs["neighbor-snpa"] = srtePath.NeighborSnpa
    leafs["tag"] = srtePath.Tag
    leafs["tunnel-interface"] = srtePath.TunnelInterface
    leafs["segment-routing-sid-value"] = srtePath.SegmentRoutingSidValue
    leafs["weight"] = srtePath.Weight
    leafs["is-te-tunnel-interface"] = srtePath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = srtePath.IsSrExcludeTunnelInterface
    return leafs
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetBundleName() string { return "cisco_ios_xr" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetYangName() string { return "srte-path" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) SetParent(parent types.Entity) { srtePath.parent = parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetParent() types.Entity { return srtePath.parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetFilter() yfilter.YFilter { return explicitPath.YFilter }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) SetFilter(yf yfilter.YFilter) { explicitPath.YFilter = yf }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetSegmentPath() string {
    return "explicit-path"
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &explicitPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range explicitPath.UloopExplicit {
            if explicitPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit{}
        explicitPath.UloopExplicit = append(explicitPath.UloopExplicit, child)
        return &explicitPath.UloopExplicit[len(explicitPath.UloopExplicit)-1]
    }
    return nil
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &explicitPath.FrrBackup
    for i := range explicitPath.UloopExplicit {
        children[explicitPath.UloopExplicit[i].GetSegmentPath()] = &explicitPath.UloopExplicit[i]
    }
    return children
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = explicitPath.NeighborId
    leafs["egress-interface"] = explicitPath.EgressInterface
    leafs["neighbor-address"] = explicitPath.NeighborAddress
    leafs["neighbor-snpa"] = explicitPath.NeighborSnpa
    leafs["tag"] = explicitPath.Tag
    leafs["tunnel-interface"] = explicitPath.TunnelInterface
    leafs["segment-routing-sid-value"] = explicitPath.SegmentRoutingSidValue
    leafs["weight"] = explicitPath.Weight
    leafs["is-te-tunnel-interface"] = explicitPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = explicitPath.IsSrExcludeTunnelInterface
    return leafs
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetBundleName() string { return "cisco_ios_xr" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetYangName() string { return "explicit-path" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) SetParent(parent types.Entity) { explicitPath.parent = parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetParent() types.Entity { return explicitPath.parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetSegmentPath() string {
    return "source"
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range source.Tags {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags{}
        source.Tags = append(source.Tags, child)
        return &source.Tags[len(source.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range source.NodalSid {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid{}
        source.NodalSid = append(source.NodalSid, child)
        return &source.NodalSid[len(source.NodalSid)-1]
    }
    return nil
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range source.Tags {
        children[source.Tags[i].GetSegmentPath()] = &source.Tags[i]
    }
    for i := range source.NodalSid {
        children[source.NodalSid[i].GetSegmentPath()] = &source.NodalSid[i]
    }
    return children
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = source.SourceLspId
    leafs["source-address"] = source.SourceAddress
    return leafs
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetYangName() string { return "source" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetParent() types.Entity { return source.parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetFilter() yfilter.YFilter { return multicastSource.YFilter }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) SetFilter(yf yfilter.YFilter) { multicastSource.YFilter = yf }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetSegmentPath() string {
    return "multicast-source"
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range multicastSource.Tags {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags{}
        multicastSource.Tags = append(multicastSource.Tags, child)
        return &multicastSource.Tags[len(multicastSource.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range multicastSource.NodalSid {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid{}
        multicastSource.NodalSid = append(multicastSource.NodalSid, child)
        return &multicastSource.NodalSid[len(multicastSource.NodalSid)-1]
    }
    return nil
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range multicastSource.Tags {
        children[multicastSource.Tags[i].GetSegmentPath()] = &multicastSource.Tags[i]
    }
    for i := range multicastSource.NodalSid {
        children[multicastSource.NodalSid[i].GetSegmentPath()] = &multicastSource.NodalSid[i]
    }
    return children
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = multicastSource.SourceLspId
    leafs["source-address"] = multicastSource.SourceAddress
    return leafs
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetBundleName() string { return "cisco_ios_xr" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetYangName() string { return "multicast-source" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) SetParent(parent types.Entity) { multicastSource.parent = parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetParent() types.Entity { return multicastSource.parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetFilter() yfilter.YFilter { return perLevelAdvertisingDetail.YFilter }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) SetFilter(yf yfilter.YFilter) { perLevelAdvertisingDetail.YFilter = yf }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "advertising-origin" { return "AdvertisingOrigin" }
    if yname == "metric" { return "Metric" }
    if yname == "is-propagated" { return "IsPropagated" }
    if yname == "is-external-metric" { return "IsExternalMetric" }
    if yname == "is-external-reachability" { return "IsExternalReachability" }
    if yname == "is-interarea" { return "IsInterarea" }
    if yname == "summarization-status" { return "SummarizationStatus" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetSegmentPath() string {
    return "per-level-advertising-detail"
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summarization-status" {
        return &perLevelAdvertisingDetail.SummarizationStatus
    }
    if childYangName == "tags" {
        for _, c := range perLevelAdvertisingDetail.Tags {
            if perLevelAdvertisingDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags{}
        perLevelAdvertisingDetail.Tags = append(perLevelAdvertisingDetail.Tags, child)
        return &perLevelAdvertisingDetail.Tags[len(perLevelAdvertisingDetail.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range perLevelAdvertisingDetail.NodalSid {
            if perLevelAdvertisingDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid{}
        perLevelAdvertisingDetail.NodalSid = append(perLevelAdvertisingDetail.NodalSid, child)
        return &perLevelAdvertisingDetail.NodalSid[len(perLevelAdvertisingDetail.NodalSid)-1]
    }
    return nil
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summarization-status"] = &perLevelAdvertisingDetail.SummarizationStatus
    for i := range perLevelAdvertisingDetail.Tags {
        children[perLevelAdvertisingDetail.Tags[i].GetSegmentPath()] = &perLevelAdvertisingDetail.Tags[i]
    }
    for i := range perLevelAdvertisingDetail.NodalSid {
        children[perLevelAdvertisingDetail.NodalSid[i].GetSegmentPath()] = &perLevelAdvertisingDetail.NodalSid[i]
    }
    return children
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = perLevelAdvertisingDetail.Level
    leafs["advertising-origin"] = perLevelAdvertisingDetail.AdvertisingOrigin
    leafs["metric"] = perLevelAdvertisingDetail.Metric
    leafs["is-propagated"] = perLevelAdvertisingDetail.IsPropagated
    leafs["is-external-metric"] = perLevelAdvertisingDetail.IsExternalMetric
    leafs["is-external-reachability"] = perLevelAdvertisingDetail.IsExternalReachability
    leafs["is-interarea"] = perLevelAdvertisingDetail.IsInterarea
    return leafs
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetBundleName() string { return "cisco_ios_xr" }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetYangName() string { return "per-level-advertising-detail" }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) SetParent(parent types.Entity) { perLevelAdvertisingDetail.parent = parent }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetParent() types.Entity { return perLevelAdvertisingDetail.parent }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetParentYangName() string { return "ipv6-route" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetFilter() yfilter.YFilter { return summarizationStatus.YFilter }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) SetFilter(yf yfilter.YFilter) { summarizationStatus.YFilter = yf }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "summary-prefix" { return "SummaryPrefix" }
    return ""
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetSegmentPath() string {
    return "summarization-status"
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-prefix" {
        return &summarizationStatus.SummaryPrefix
    }
    return nil
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary-prefix"] = &summarizationStatus.SummaryPrefix
    return children
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = summarizationStatus.IsValid
    return leafs
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetBundleName() string { return "cisco_ios_xr" }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetYangName() string { return "summarization-status" }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) SetParent(parent types.Entity) { summarizationStatus.parent = parent }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetParent() types.Entity { return summarizationStatus.parent }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetParentYangName() string { return "per-level-advertising-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetFilter() yfilter.YFilter { return summaryPrefix.YFilter }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) SetFilter(yf yfilter.YFilter) { summaryPrefix.YFilter = yf }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetSegmentPath() string {
    return "summary-prefix"
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = summaryPrefix.Prefix
    leafs["prefix-length"] = summaryPrefix.PrefixLength
    return leafs
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetYangName() string { return "summary-prefix" }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) SetParent(parent types.Entity) { summaryPrefix.parent = parent }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetParent() types.Entity { return summaryPrefix.parent }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetParentYangName() string { return "summarization-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetParentYangName() string { return "per-level-advertising-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetParentYangName() string { return "per-level-advertising-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups
// IPv6 FRR table
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FRR backup for an IPv6 network. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup.
    Ipv6FrrBackup []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup
}

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetFilter() yfilter.YFilter { return ipv6FrrBackups.YFilter }

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) SetFilter(yf yfilter.YFilter) { ipv6FrrBackups.YFilter = yf }

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetGoName(yname string) string {
    if yname == "ipv6frr-backup" { return "Ipv6FrrBackup" }
    return ""
}

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetSegmentPath() string {
    return "ipv6frr-backups"
}

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6frr-backup" {
        for _, c := range ipv6FrrBackups.Ipv6FrrBackup {
            if ipv6FrrBackups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup{}
        ipv6FrrBackups.Ipv6FrrBackup = append(ipv6FrrBackups.Ipv6FrrBackup, child)
        return &ipv6FrrBackups.Ipv6FrrBackup[len(ipv6FrrBackups.Ipv6FrrBackup)-1]
    }
    return nil
}

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6FrrBackups.Ipv6FrrBackup {
        children[ipv6FrrBackups.Ipv6FrrBackup[i].GetSegmentPath()] = &ipv6FrrBackups.Ipv6FrrBackup[i]
    }
    return children
}

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetYangName() string { return "ipv6frr-backups" }

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) SetParent(parent types.Entity) { ipv6FrrBackups.parent = parent }

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetParent() types.Entity { return ipv6FrrBackups.parent }

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetParentYangName() string { return "topology" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup
// FRR backup for an IPv6 network
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail
}

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetFilter() yfilter.YFilter { return ipv6FrrBackup.YFilter }

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) SetFilter(yf yfilter.YFilter) { ipv6FrrBackup.YFilter = yf }

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "connected-status" { return "ConnectedStatus" }
    if yname == "redistributed-status" { return "RedistributedStatus" }
    if yname == "native-status" { return "NativeStatus" }
    if yname == "per-level-advertising-detail" { return "PerLevelAdvertisingDetail" }
    return ""
}

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetSegmentPath() string {
    return "ipv6frr-backup"
}

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-status" {
        return &ipv6FrrBackup.ConnectedStatus
    }
    if childYangName == "redistributed-status" {
        return &ipv6FrrBackup.RedistributedStatus
    }
    if childYangName == "native-status" {
        return &ipv6FrrBackup.NativeStatus
    }
    if childYangName == "per-level-advertising-detail" {
        for _, c := range ipv6FrrBackup.PerLevelAdvertisingDetail {
            if ipv6FrrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail{}
        ipv6FrrBackup.PerLevelAdvertisingDetail = append(ipv6FrrBackup.PerLevelAdvertisingDetail, child)
        return &ipv6FrrBackup.PerLevelAdvertisingDetail[len(ipv6FrrBackup.PerLevelAdvertisingDetail)-1]
    }
    return nil
}

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected-status"] = &ipv6FrrBackup.ConnectedStatus
    children["redistributed-status"] = &ipv6FrrBackup.RedistributedStatus
    children["native-status"] = &ipv6FrrBackup.NativeStatus
    for i := range ipv6FrrBackup.PerLevelAdvertisingDetail {
        children[ipv6FrrBackup.PerLevelAdvertisingDetail[i].GetSegmentPath()] = &ipv6FrrBackup.PerLevelAdvertisingDetail[i]
    }
    return children
}

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6FrrBackup.Prefix
    leafs["prefix-length"] = ipv6FrrBackup.PrefixLength
    return leafs
}

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetYangName() string { return "ipv6frr-backup" }

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) SetParent(parent types.Entity) { ipv6FrrBackup.parent = parent }

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetParent() types.Entity { return ipv6FrrBackup.parent }

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetParentYangName() string { return "ipv6frr-backups" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetFilter() yfilter.YFilter { return connectedStatus.YFilter }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) SetFilter(yf yfilter.YFilter) { connectedStatus.YFilter = yf }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "connected-details" { return "ConnectedDetails" }
    return ""
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetSegmentPath() string {
    return "connected-status"
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-details" {
        return &connectedStatus.ConnectedDetails
    }
    return nil
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected-details"] = &connectedStatus.ConnectedDetails
    return children
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = connectedStatus.IsValid
    return leafs
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetBundleName() string { return "cisco_ios_xr" }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetYangName() string { return "connected-status" }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) SetParent(parent types.Entity) { connectedStatus.parent = parent }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetParent() types.Entity { return connectedStatus.parent }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetParentYangName() string { return "ipv6frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface.
    Interface []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetFilter() yfilter.YFilter { return connectedDetails.YFilter }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) SetFilter(yf yfilter.YFilter) { connectedDetails.YFilter = yf }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetSegmentPath() string {
    return "connected-details"
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range connectedDetails.Interface {
            if connectedDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface{}
        connectedDetails.Interface = append(connectedDetails.Interface, child)
        return &connectedDetails.Interface[len(connectedDetails.Interface)-1]
    }
    return nil
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range connectedDetails.Interface {
        children[connectedDetails.Interface[i].GetSegmentPath()] = &connectedDetails.Interface[i]
    }
    return children
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetBundleName() string { return "cisco_ios_xr" }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetYangName() string { return "connected-details" }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) SetParent(parent types.Entity) { connectedDetails.parent = parent }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetParent() types.Entity { return connectedDetails.parent }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetParentYangName() string { return "connected-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetSegmentPath() string {
    return "interface"
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = self.Entry
    return leafs
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetYangName() string { return "interface" }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetParent() types.Entity { return self.parent }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetParentYangName() string { return "connected-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetFilter() yfilter.YFilter { return redistributedStatus.YFilter }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) SetFilter(yf yfilter.YFilter) { redistributedStatus.YFilter = yf }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "redistribution-details" { return "RedistributionDetails" }
    return ""
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetSegmentPath() string {
    return "redistributed-status"
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistribution-details" {
        return &redistributedStatus.RedistributionDetails
    }
    return nil
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["redistribution-details"] = &redistributedStatus.RedistributionDetails
    return children
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = redistributedStatus.IsValid
    return leafs
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetBundleName() string { return "cisco_ios_xr" }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetYangName() string { return "redistributed-status" }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) SetParent(parent types.Entity) { redistributedStatus.parent = parent }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetParent() types.Entity { return redistributedStatus.parent }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetParentYangName() string { return "ipv6frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetFilter() yfilter.YFilter { return redistributionDetails.YFilter }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) SetFilter(yf yfilter.YFilter) { redistributionDetails.YFilter = yf }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetGoName(yname string) string {
    if yname == "isis-sh-route-redist-detail" { return "IsisShRouteRedistDetail" }
    return ""
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetSegmentPath() string {
    return "redistribution-details"
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "isis-sh-route-redist-detail" {
        for _, c := range redistributionDetails.IsisShRouteRedistDetail {
            if redistributionDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail{}
        redistributionDetails.IsisShRouteRedistDetail = append(redistributionDetails.IsisShRouteRedistDetail, child)
        return &redistributionDetails.IsisShRouteRedistDetail[len(redistributionDetails.IsisShRouteRedistDetail)-1]
    }
    return nil
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        children[redistributionDetails.IsisShRouteRedistDetail[i].GetSegmentPath()] = &redistributionDetails.IsisShRouteRedistDetail[i]
    }
    return children
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetBundleName() string { return "cisco_ios_xr" }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetYangName() string { return "redistribution-details" }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) SetParent(parent types.Entity) { redistributionDetails.parent = parent }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetParent() types.Entity { return redistributionDetails.parent }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetParentYangName() string { return "redistributed-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetFilter() yfilter.YFilter { return isisShRouteRedistDetail.YFilter }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) SetFilter(yf yfilter.YFilter) { isisShRouteRedistDetail.YFilter = yf }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "owner" { return "Owner" }
    return ""
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetSegmentPath() string {
    return "isis-sh-route-redist-detail"
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "owner" {
        return &isisShRouteRedistDetail.Owner
    }
    return nil
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["owner"] = &isisShRouteRedistDetail.Owner
    return children
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = isisShRouteRedistDetail.Level
    return leafs
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetBundleName() string { return "cisco_ios_xr" }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetYangName() string { return "isis-sh-route-redist-detail" }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) SetParent(parent types.Entity) { isisShRouteRedistDetail.parent = parent }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetParent() types.Entity { return isisShRouteRedistDetail.parent }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetParentYangName() string { return "redistribution-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetFilter() yfilter.YFilter { return owner.YFilter }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) SetFilter(yf yfilter.YFilter) { owner.YFilter = yf }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetGoName(yname string) string {
    if yname == "protocol" { return "Protocol" }
    if yname == "isis-instance-id" { return "IsisInstanceId" }
    if yname == "ospf-process-id" { return "OspfProcessId" }
    if yname == "ospfv3-process-id" { return "Ospfv3ProcessId" }
    if yname == "bgp-as-number" { return "BgpAsNumber" }
    if yname == "eigrp-as-number" { return "EigrpAsNumber" }
    if yname == "application-name" { return "ApplicationName" }
    return ""
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetSegmentPath() string {
    return "owner"
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol"] = owner.Protocol
    leafs["isis-instance-id"] = owner.IsisInstanceId
    leafs["ospf-process-id"] = owner.OspfProcessId
    leafs["ospfv3-process-id"] = owner.Ospfv3ProcessId
    leafs["bgp-as-number"] = owner.BgpAsNumber
    leafs["eigrp-as-number"] = owner.EigrpAsNumber
    leafs["application-name"] = owner.ApplicationName
    return leafs
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetBundleName() string { return "cisco_ios_xr" }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetYangName() string { return "owner" }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) SetParent(parent types.Entity) { owner.parent = parent }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetParent() types.Entity { return owner.parent }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetParentYangName() string { return "isis-sh-route-redist-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetFilter() yfilter.YFilter { return nativeStatus.YFilter }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) SetFilter(yf yfilter.YFilter) { nativeStatus.YFilter = yf }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "native-details" { return "NativeDetails" }
    return ""
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetSegmentPath() string {
    return "native-status"
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "native-details" {
        return &nativeStatus.NativeDetails
    }
    return nil
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["native-details"] = &nativeStatus.NativeDetails
    return children
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = nativeStatus.IsValid
    return leafs
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetBundleName() string { return "cisco_ios_xr" }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetYangName() string { return "native-status" }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) SetParent(parent types.Entity) { nativeStatus.parent = parent }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetParent() types.Entity { return nativeStatus.parent }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetParentYangName() string { return "ipv6frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup.
    Backup []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetFilter() yfilter.YFilter { return nativeDetails.YFilter }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) SetFilter(yf yfilter.YFilter) { nativeDetails.YFilter = yf }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    if yname == "primary" { return "Primary" }
    if yname == "backup" { return "Backup" }
    return ""
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetSegmentPath() string {
    return "native-details"
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "primary" {
        return &nativeDetails.Primary
    }
    if childYangName == "backup" {
        for _, c := range nativeDetails.Backup {
            if nativeDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup{}
        nativeDetails.Backup = append(nativeDetails.Backup, child)
        return &nativeDetails.Backup[len(nativeDetails.Backup)-1]
    }
    return nil
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["primary"] = &nativeDetails.Primary
    for i := range nativeDetails.Backup {
        children[nativeDetails.Backup[i].GetSegmentPath()] = &nativeDetails.Backup[i]
    }
    return children
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority"] = nativeDetails.Priority
    return leafs
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetBundleName() string { return "cisco_ios_xr" }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetYangName() string { return "native-details" }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) SetParent(parent types.Entity) { nativeDetails.parent = parent }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetParent() types.Entity { return nativeDetails.parent }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetParentYangName() string { return "native-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetFilter() yfilter.YFilter { return primary.YFilter }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) SetFilter(yf yfilter.YFilter) { primary.YFilter = yf }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetGoName(yname string) string {
    if yname == "origin" { return "Origin" }
    if yname == "metric" { return "Metric" }
    if yname == "multicast-metric" { return "MulticastMetric" }
    if yname == "is-external-metric" { return "IsExternalMetric" }
    if yname == "administrative-distance" { return "AdministrativeDistance" }
    if yname == "paths" { return "Paths" }
    if yname == "ucmp-next-hop" { return "UcmpNextHop" }
    if yname == "multicast-path" { return "MulticastPath" }
    if yname == "srte-path" { return "SrtePath" }
    if yname == "explicit-path" { return "ExplicitPath" }
    if yname == "source" { return "Source" }
    if yname == "multicast-source" { return "MulticastSource" }
    return ""
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetSegmentPath() string {
    return "primary"
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "paths" {
        for _, c := range primary.Paths {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths{}
        primary.Paths = append(primary.Paths, child)
        return &primary.Paths[len(primary.Paths)-1]
    }
    if childYangName == "ucmp-next-hop" {
        for _, c := range primary.UcmpNextHop {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop{}
        primary.UcmpNextHop = append(primary.UcmpNextHop, child)
        return &primary.UcmpNextHop[len(primary.UcmpNextHop)-1]
    }
    if childYangName == "multicast-path" {
        for _, c := range primary.MulticastPath {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath{}
        primary.MulticastPath = append(primary.MulticastPath, child)
        return &primary.MulticastPath[len(primary.MulticastPath)-1]
    }
    if childYangName == "srte-path" {
        for _, c := range primary.SrtePath {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath{}
        primary.SrtePath = append(primary.SrtePath, child)
        return &primary.SrtePath[len(primary.SrtePath)-1]
    }
    if childYangName == "explicit-path" {
        for _, c := range primary.ExplicitPath {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath{}
        primary.ExplicitPath = append(primary.ExplicitPath, child)
        return &primary.ExplicitPath[len(primary.ExplicitPath)-1]
    }
    if childYangName == "source" {
        for _, c := range primary.Source {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source{}
        primary.Source = append(primary.Source, child)
        return &primary.Source[len(primary.Source)-1]
    }
    if childYangName == "multicast-source" {
        for _, c := range primary.MulticastSource {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource{}
        primary.MulticastSource = append(primary.MulticastSource, child)
        return &primary.MulticastSource[len(primary.MulticastSource)-1]
    }
    return nil
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range primary.Paths {
        children[primary.Paths[i].GetSegmentPath()] = &primary.Paths[i]
    }
    for i := range primary.UcmpNextHop {
        children[primary.UcmpNextHop[i].GetSegmentPath()] = &primary.UcmpNextHop[i]
    }
    for i := range primary.MulticastPath {
        children[primary.MulticastPath[i].GetSegmentPath()] = &primary.MulticastPath[i]
    }
    for i := range primary.SrtePath {
        children[primary.SrtePath[i].GetSegmentPath()] = &primary.SrtePath[i]
    }
    for i := range primary.ExplicitPath {
        children[primary.ExplicitPath[i].GetSegmentPath()] = &primary.ExplicitPath[i]
    }
    for i := range primary.Source {
        children[primary.Source[i].GetSegmentPath()] = &primary.Source[i]
    }
    for i := range primary.MulticastSource {
        children[primary.MulticastSource[i].GetSegmentPath()] = &primary.MulticastSource[i]
    }
    return children
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["origin"] = primary.Origin
    leafs["metric"] = primary.Metric
    leafs["multicast-metric"] = primary.MulticastMetric
    leafs["is-external-metric"] = primary.IsExternalMetric
    leafs["administrative-distance"] = primary.AdministrativeDistance
    return leafs
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetBundleName() string { return "cisco_ios_xr" }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetYangName() string { return "primary" }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) SetParent(parent types.Entity) { primary.parent = parent }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetParent() types.Entity { return primary.parent }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetParentYangName() string { return "native-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetFilter() yfilter.YFilter { return paths.YFilter }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) SetFilter(yf yfilter.YFilter) { paths.YFilter = yf }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetSegmentPath() string {
    return "paths"
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &paths.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range paths.UloopExplicit {
            if paths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit{}
        paths.UloopExplicit = append(paths.UloopExplicit, child)
        return &paths.UloopExplicit[len(paths.UloopExplicit)-1]
    }
    return nil
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &paths.FrrBackup
    for i := range paths.UloopExplicit {
        children[paths.UloopExplicit[i].GetSegmentPath()] = &paths.UloopExplicit[i]
    }
    return children
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = paths.NeighborId
    leafs["egress-interface"] = paths.EgressInterface
    leafs["neighbor-address"] = paths.NeighborAddress
    leafs["neighbor-snpa"] = paths.NeighborSnpa
    leafs["tag"] = paths.Tag
    leafs["tunnel-interface"] = paths.TunnelInterface
    leafs["segment-routing-sid-value"] = paths.SegmentRoutingSidValue
    leafs["weight"] = paths.Weight
    leafs["is-te-tunnel-interface"] = paths.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = paths.IsSrExcludeTunnelInterface
    return leafs
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetBundleName() string { return "cisco_ios_xr" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetYangName() string { return "paths" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) SetParent(parent types.Entity) { paths.parent = parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetParent() types.Entity { return paths.parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetFilter() yfilter.YFilter { return ucmpNextHop.YFilter }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) SetFilter(yf yfilter.YFilter) { ucmpNextHop.YFilter = yf }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "total-ucmp-distance" { return "TotalUcmpDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    return ""
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetSegmentPath() string {
    return "ucmp-next-hop"
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &ucmpNextHop.FrrBackup
    }
    return nil
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &ucmpNextHop.FrrBackup
    return children
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = ucmpNextHop.NeighborId
    leafs["egress-interface"] = ucmpNextHop.EgressInterface
    leafs["neighbor-address"] = ucmpNextHop.NeighborAddress
    leafs["neighbor-snpa"] = ucmpNextHop.NeighborSnpa
    leafs["tag"] = ucmpNextHop.Tag
    leafs["total-ucmp-distance"] = ucmpNextHop.TotalUcmpDistance
    leafs["segment-routing-sid-value"] = ucmpNextHop.SegmentRoutingSidValue
    leafs["weight"] = ucmpNextHop.Weight
    leafs["is-te-tunnel-interface"] = ucmpNextHop.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = ucmpNextHop.IsSrExcludeTunnelInterface
    return leafs
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetBundleName() string { return "cisco_ios_xr" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetYangName() string { return "ucmp-next-hop" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) SetParent(parent types.Entity) { ucmpNextHop.parent = parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetParent() types.Entity { return ucmpNextHop.parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetParentYangName() string { return "ucmp-next-hop" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetFilter() yfilter.YFilter { return multicastPath.YFilter }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) SetFilter(yf yfilter.YFilter) { multicastPath.YFilter = yf }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetSegmentPath() string {
    return "multicast-path"
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &multicastPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range multicastPath.UloopExplicit {
            if multicastPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit{}
        multicastPath.UloopExplicit = append(multicastPath.UloopExplicit, child)
        return &multicastPath.UloopExplicit[len(multicastPath.UloopExplicit)-1]
    }
    return nil
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &multicastPath.FrrBackup
    for i := range multicastPath.UloopExplicit {
        children[multicastPath.UloopExplicit[i].GetSegmentPath()] = &multicastPath.UloopExplicit[i]
    }
    return children
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = multicastPath.NeighborId
    leafs["egress-interface"] = multicastPath.EgressInterface
    leafs["neighbor-address"] = multicastPath.NeighborAddress
    leafs["neighbor-snpa"] = multicastPath.NeighborSnpa
    leafs["tag"] = multicastPath.Tag
    leafs["tunnel-interface"] = multicastPath.TunnelInterface
    leafs["segment-routing-sid-value"] = multicastPath.SegmentRoutingSidValue
    leafs["weight"] = multicastPath.Weight
    leafs["is-te-tunnel-interface"] = multicastPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = multicastPath.IsSrExcludeTunnelInterface
    return leafs
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetBundleName() string { return "cisco_ios_xr" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetYangName() string { return "multicast-path" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) SetParent(parent types.Entity) { multicastPath.parent = parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetParent() types.Entity { return multicastPath.parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetFilter() yfilter.YFilter { return srtePath.YFilter }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) SetFilter(yf yfilter.YFilter) { srtePath.YFilter = yf }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetSegmentPath() string {
    return "srte-path"
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &srtePath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range srtePath.UloopExplicit {
            if srtePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit{}
        srtePath.UloopExplicit = append(srtePath.UloopExplicit, child)
        return &srtePath.UloopExplicit[len(srtePath.UloopExplicit)-1]
    }
    return nil
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &srtePath.FrrBackup
    for i := range srtePath.UloopExplicit {
        children[srtePath.UloopExplicit[i].GetSegmentPath()] = &srtePath.UloopExplicit[i]
    }
    return children
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = srtePath.NeighborId
    leafs["egress-interface"] = srtePath.EgressInterface
    leafs["neighbor-address"] = srtePath.NeighborAddress
    leafs["neighbor-snpa"] = srtePath.NeighborSnpa
    leafs["tag"] = srtePath.Tag
    leafs["tunnel-interface"] = srtePath.TunnelInterface
    leafs["segment-routing-sid-value"] = srtePath.SegmentRoutingSidValue
    leafs["weight"] = srtePath.Weight
    leafs["is-te-tunnel-interface"] = srtePath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = srtePath.IsSrExcludeTunnelInterface
    return leafs
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetBundleName() string { return "cisco_ios_xr" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetYangName() string { return "srte-path" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) SetParent(parent types.Entity) { srtePath.parent = parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetParent() types.Entity { return srtePath.parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetFilter() yfilter.YFilter { return explicitPath.YFilter }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) SetFilter(yf yfilter.YFilter) { explicitPath.YFilter = yf }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetSegmentPath() string {
    return "explicit-path"
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &explicitPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range explicitPath.UloopExplicit {
            if explicitPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit{}
        explicitPath.UloopExplicit = append(explicitPath.UloopExplicit, child)
        return &explicitPath.UloopExplicit[len(explicitPath.UloopExplicit)-1]
    }
    return nil
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &explicitPath.FrrBackup
    for i := range explicitPath.UloopExplicit {
        children[explicitPath.UloopExplicit[i].GetSegmentPath()] = &explicitPath.UloopExplicit[i]
    }
    return children
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = explicitPath.NeighborId
    leafs["egress-interface"] = explicitPath.EgressInterface
    leafs["neighbor-address"] = explicitPath.NeighborAddress
    leafs["neighbor-snpa"] = explicitPath.NeighborSnpa
    leafs["tag"] = explicitPath.Tag
    leafs["tunnel-interface"] = explicitPath.TunnelInterface
    leafs["segment-routing-sid-value"] = explicitPath.SegmentRoutingSidValue
    leafs["weight"] = explicitPath.Weight
    leafs["is-te-tunnel-interface"] = explicitPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = explicitPath.IsSrExcludeTunnelInterface
    return leafs
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetBundleName() string { return "cisco_ios_xr" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetYangName() string { return "explicit-path" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) SetParent(parent types.Entity) { explicitPath.parent = parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetParent() types.Entity { return explicitPath.parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetSegmentPath() string {
    return "source"
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range source.Tags {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags{}
        source.Tags = append(source.Tags, child)
        return &source.Tags[len(source.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range source.NodalSid {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid{}
        source.NodalSid = append(source.NodalSid, child)
        return &source.NodalSid[len(source.NodalSid)-1]
    }
    return nil
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range source.Tags {
        children[source.Tags[i].GetSegmentPath()] = &source.Tags[i]
    }
    for i := range source.NodalSid {
        children[source.NodalSid[i].GetSegmentPath()] = &source.NodalSid[i]
    }
    return children
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = source.SourceLspId
    leafs["source-address"] = source.SourceAddress
    return leafs
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetYangName() string { return "source" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetParent() types.Entity { return source.parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetFilter() yfilter.YFilter { return multicastSource.YFilter }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) SetFilter(yf yfilter.YFilter) { multicastSource.YFilter = yf }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetSegmentPath() string {
    return "multicast-source"
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range multicastSource.Tags {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags{}
        multicastSource.Tags = append(multicastSource.Tags, child)
        return &multicastSource.Tags[len(multicastSource.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range multicastSource.NodalSid {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid{}
        multicastSource.NodalSid = append(multicastSource.NodalSid, child)
        return &multicastSource.NodalSid[len(multicastSource.NodalSid)-1]
    }
    return nil
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range multicastSource.Tags {
        children[multicastSource.Tags[i].GetSegmentPath()] = &multicastSource.Tags[i]
    }
    for i := range multicastSource.NodalSid {
        children[multicastSource.NodalSid[i].GetSegmentPath()] = &multicastSource.NodalSid[i]
    }
    return children
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = multicastSource.SourceLspId
    leafs["source-address"] = multicastSource.SourceAddress
    return leafs
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetBundleName() string { return "cisco_ios_xr" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetYangName() string { return "multicast-source" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) SetParent(parent types.Entity) { multicastSource.parent = parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetParent() types.Entity { return multicastSource.parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetFilter() yfilter.YFilter { return backup.YFilter }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) SetFilter(yf yfilter.YFilter) { backup.YFilter = yf }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetGoName(yname string) string {
    if yname == "origin" { return "Origin" }
    if yname == "metric" { return "Metric" }
    if yname == "multicast-metric" { return "MulticastMetric" }
    if yname == "is-external-metric" { return "IsExternalMetric" }
    if yname == "administrative-distance" { return "AdministrativeDistance" }
    if yname == "paths" { return "Paths" }
    if yname == "ucmp-next-hop" { return "UcmpNextHop" }
    if yname == "multicast-path" { return "MulticastPath" }
    if yname == "srte-path" { return "SrtePath" }
    if yname == "explicit-path" { return "ExplicitPath" }
    if yname == "source" { return "Source" }
    if yname == "multicast-source" { return "MulticastSource" }
    return ""
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetSegmentPath() string {
    return "backup"
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "paths" {
        for _, c := range backup.Paths {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths{}
        backup.Paths = append(backup.Paths, child)
        return &backup.Paths[len(backup.Paths)-1]
    }
    if childYangName == "ucmp-next-hop" {
        for _, c := range backup.UcmpNextHop {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop{}
        backup.UcmpNextHop = append(backup.UcmpNextHop, child)
        return &backup.UcmpNextHop[len(backup.UcmpNextHop)-1]
    }
    if childYangName == "multicast-path" {
        for _, c := range backup.MulticastPath {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath{}
        backup.MulticastPath = append(backup.MulticastPath, child)
        return &backup.MulticastPath[len(backup.MulticastPath)-1]
    }
    if childYangName == "srte-path" {
        for _, c := range backup.SrtePath {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath{}
        backup.SrtePath = append(backup.SrtePath, child)
        return &backup.SrtePath[len(backup.SrtePath)-1]
    }
    if childYangName == "explicit-path" {
        for _, c := range backup.ExplicitPath {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath{}
        backup.ExplicitPath = append(backup.ExplicitPath, child)
        return &backup.ExplicitPath[len(backup.ExplicitPath)-1]
    }
    if childYangName == "source" {
        for _, c := range backup.Source {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source{}
        backup.Source = append(backup.Source, child)
        return &backup.Source[len(backup.Source)-1]
    }
    if childYangName == "multicast-source" {
        for _, c := range backup.MulticastSource {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource{}
        backup.MulticastSource = append(backup.MulticastSource, child)
        return &backup.MulticastSource[len(backup.MulticastSource)-1]
    }
    return nil
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range backup.Paths {
        children[backup.Paths[i].GetSegmentPath()] = &backup.Paths[i]
    }
    for i := range backup.UcmpNextHop {
        children[backup.UcmpNextHop[i].GetSegmentPath()] = &backup.UcmpNextHop[i]
    }
    for i := range backup.MulticastPath {
        children[backup.MulticastPath[i].GetSegmentPath()] = &backup.MulticastPath[i]
    }
    for i := range backup.SrtePath {
        children[backup.SrtePath[i].GetSegmentPath()] = &backup.SrtePath[i]
    }
    for i := range backup.ExplicitPath {
        children[backup.ExplicitPath[i].GetSegmentPath()] = &backup.ExplicitPath[i]
    }
    for i := range backup.Source {
        children[backup.Source[i].GetSegmentPath()] = &backup.Source[i]
    }
    for i := range backup.MulticastSource {
        children[backup.MulticastSource[i].GetSegmentPath()] = &backup.MulticastSource[i]
    }
    return children
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["origin"] = backup.Origin
    leafs["metric"] = backup.Metric
    leafs["multicast-metric"] = backup.MulticastMetric
    leafs["is-external-metric"] = backup.IsExternalMetric
    leafs["administrative-distance"] = backup.AdministrativeDistance
    return leafs
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetBundleName() string { return "cisco_ios_xr" }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetYangName() string { return "backup" }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) SetParent(parent types.Entity) { backup.parent = parent }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetParent() types.Entity { return backup.parent }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetParentYangName() string { return "native-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetFilter() yfilter.YFilter { return paths.YFilter }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) SetFilter(yf yfilter.YFilter) { paths.YFilter = yf }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetSegmentPath() string {
    return "paths"
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &paths.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range paths.UloopExplicit {
            if paths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit{}
        paths.UloopExplicit = append(paths.UloopExplicit, child)
        return &paths.UloopExplicit[len(paths.UloopExplicit)-1]
    }
    return nil
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &paths.FrrBackup
    for i := range paths.UloopExplicit {
        children[paths.UloopExplicit[i].GetSegmentPath()] = &paths.UloopExplicit[i]
    }
    return children
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = paths.NeighborId
    leafs["egress-interface"] = paths.EgressInterface
    leafs["neighbor-address"] = paths.NeighborAddress
    leafs["neighbor-snpa"] = paths.NeighborSnpa
    leafs["tag"] = paths.Tag
    leafs["tunnel-interface"] = paths.TunnelInterface
    leafs["segment-routing-sid-value"] = paths.SegmentRoutingSidValue
    leafs["weight"] = paths.Weight
    leafs["is-te-tunnel-interface"] = paths.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = paths.IsSrExcludeTunnelInterface
    return leafs
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetBundleName() string { return "cisco_ios_xr" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetYangName() string { return "paths" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) SetParent(parent types.Entity) { paths.parent = parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetParent() types.Entity { return paths.parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetFilter() yfilter.YFilter { return ucmpNextHop.YFilter }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) SetFilter(yf yfilter.YFilter) { ucmpNextHop.YFilter = yf }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "total-ucmp-distance" { return "TotalUcmpDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    return ""
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetSegmentPath() string {
    return "ucmp-next-hop"
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &ucmpNextHop.FrrBackup
    }
    return nil
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &ucmpNextHop.FrrBackup
    return children
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = ucmpNextHop.NeighborId
    leafs["egress-interface"] = ucmpNextHop.EgressInterface
    leafs["neighbor-address"] = ucmpNextHop.NeighborAddress
    leafs["neighbor-snpa"] = ucmpNextHop.NeighborSnpa
    leafs["tag"] = ucmpNextHop.Tag
    leafs["total-ucmp-distance"] = ucmpNextHop.TotalUcmpDistance
    leafs["segment-routing-sid-value"] = ucmpNextHop.SegmentRoutingSidValue
    leafs["weight"] = ucmpNextHop.Weight
    leafs["is-te-tunnel-interface"] = ucmpNextHop.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = ucmpNextHop.IsSrExcludeTunnelInterface
    return leafs
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetBundleName() string { return "cisco_ios_xr" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetYangName() string { return "ucmp-next-hop" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) SetParent(parent types.Entity) { ucmpNextHop.parent = parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetParent() types.Entity { return ucmpNextHop.parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetParentYangName() string { return "ucmp-next-hop" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetFilter() yfilter.YFilter { return multicastPath.YFilter }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) SetFilter(yf yfilter.YFilter) { multicastPath.YFilter = yf }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetSegmentPath() string {
    return "multicast-path"
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &multicastPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range multicastPath.UloopExplicit {
            if multicastPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit{}
        multicastPath.UloopExplicit = append(multicastPath.UloopExplicit, child)
        return &multicastPath.UloopExplicit[len(multicastPath.UloopExplicit)-1]
    }
    return nil
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &multicastPath.FrrBackup
    for i := range multicastPath.UloopExplicit {
        children[multicastPath.UloopExplicit[i].GetSegmentPath()] = &multicastPath.UloopExplicit[i]
    }
    return children
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = multicastPath.NeighborId
    leafs["egress-interface"] = multicastPath.EgressInterface
    leafs["neighbor-address"] = multicastPath.NeighborAddress
    leafs["neighbor-snpa"] = multicastPath.NeighborSnpa
    leafs["tag"] = multicastPath.Tag
    leafs["tunnel-interface"] = multicastPath.TunnelInterface
    leafs["segment-routing-sid-value"] = multicastPath.SegmentRoutingSidValue
    leafs["weight"] = multicastPath.Weight
    leafs["is-te-tunnel-interface"] = multicastPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = multicastPath.IsSrExcludeTunnelInterface
    return leafs
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetBundleName() string { return "cisco_ios_xr" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetYangName() string { return "multicast-path" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) SetParent(parent types.Entity) { multicastPath.parent = parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetParent() types.Entity { return multicastPath.parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetFilter() yfilter.YFilter { return srtePath.YFilter }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) SetFilter(yf yfilter.YFilter) { srtePath.YFilter = yf }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetSegmentPath() string {
    return "srte-path"
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &srtePath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range srtePath.UloopExplicit {
            if srtePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit{}
        srtePath.UloopExplicit = append(srtePath.UloopExplicit, child)
        return &srtePath.UloopExplicit[len(srtePath.UloopExplicit)-1]
    }
    return nil
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &srtePath.FrrBackup
    for i := range srtePath.UloopExplicit {
        children[srtePath.UloopExplicit[i].GetSegmentPath()] = &srtePath.UloopExplicit[i]
    }
    return children
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = srtePath.NeighborId
    leafs["egress-interface"] = srtePath.EgressInterface
    leafs["neighbor-address"] = srtePath.NeighborAddress
    leafs["neighbor-snpa"] = srtePath.NeighborSnpa
    leafs["tag"] = srtePath.Tag
    leafs["tunnel-interface"] = srtePath.TunnelInterface
    leafs["segment-routing-sid-value"] = srtePath.SegmentRoutingSidValue
    leafs["weight"] = srtePath.Weight
    leafs["is-te-tunnel-interface"] = srtePath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = srtePath.IsSrExcludeTunnelInterface
    return leafs
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetBundleName() string { return "cisco_ios_xr" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetYangName() string { return "srte-path" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) SetParent(parent types.Entity) { srtePath.parent = parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetParent() types.Entity { return srtePath.parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetFilter() yfilter.YFilter { return explicitPath.YFilter }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) SetFilter(yf yfilter.YFilter) { explicitPath.YFilter = yf }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetSegmentPath() string {
    return "explicit-path"
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &explicitPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range explicitPath.UloopExplicit {
            if explicitPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit{}
        explicitPath.UloopExplicit = append(explicitPath.UloopExplicit, child)
        return &explicitPath.UloopExplicit[len(explicitPath.UloopExplicit)-1]
    }
    return nil
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &explicitPath.FrrBackup
    for i := range explicitPath.UloopExplicit {
        children[explicitPath.UloopExplicit[i].GetSegmentPath()] = &explicitPath.UloopExplicit[i]
    }
    return children
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = explicitPath.NeighborId
    leafs["egress-interface"] = explicitPath.EgressInterface
    leafs["neighbor-address"] = explicitPath.NeighborAddress
    leafs["neighbor-snpa"] = explicitPath.NeighborSnpa
    leafs["tag"] = explicitPath.Tag
    leafs["tunnel-interface"] = explicitPath.TunnelInterface
    leafs["segment-routing-sid-value"] = explicitPath.SegmentRoutingSidValue
    leafs["weight"] = explicitPath.Weight
    leafs["is-te-tunnel-interface"] = explicitPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = explicitPath.IsSrExcludeTunnelInterface
    return leafs
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetBundleName() string { return "cisco_ios_xr" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetYangName() string { return "explicit-path" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) SetParent(parent types.Entity) { explicitPath.parent = parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetParent() types.Entity { return explicitPath.parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetSegmentPath() string {
    return "source"
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range source.Tags {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags{}
        source.Tags = append(source.Tags, child)
        return &source.Tags[len(source.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range source.NodalSid {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid{}
        source.NodalSid = append(source.NodalSid, child)
        return &source.NodalSid[len(source.NodalSid)-1]
    }
    return nil
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range source.Tags {
        children[source.Tags[i].GetSegmentPath()] = &source.Tags[i]
    }
    for i := range source.NodalSid {
        children[source.NodalSid[i].GetSegmentPath()] = &source.NodalSid[i]
    }
    return children
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = source.SourceLspId
    leafs["source-address"] = source.SourceAddress
    return leafs
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetYangName() string { return "source" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetParent() types.Entity { return source.parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetFilter() yfilter.YFilter { return multicastSource.YFilter }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) SetFilter(yf yfilter.YFilter) { multicastSource.YFilter = yf }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetSegmentPath() string {
    return "multicast-source"
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range multicastSource.Tags {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags{}
        multicastSource.Tags = append(multicastSource.Tags, child)
        return &multicastSource.Tags[len(multicastSource.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range multicastSource.NodalSid {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid{}
        multicastSource.NodalSid = append(multicastSource.NodalSid, child)
        return &multicastSource.NodalSid[len(multicastSource.NodalSid)-1]
    }
    return nil
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range multicastSource.Tags {
        children[multicastSource.Tags[i].GetSegmentPath()] = &multicastSource.Tags[i]
    }
    for i := range multicastSource.NodalSid {
        children[multicastSource.NodalSid[i].GetSegmentPath()] = &multicastSource.NodalSid[i]
    }
    return children
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = multicastSource.SourceLspId
    leafs["source-address"] = multicastSource.SourceAddress
    return leafs
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetBundleName() string { return "cisco_ios_xr" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetYangName() string { return "multicast-source" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) SetParent(parent types.Entity) { multicastSource.parent = parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetParent() types.Entity { return multicastSource.parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetFilter() yfilter.YFilter { return perLevelAdvertisingDetail.YFilter }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) SetFilter(yf yfilter.YFilter) { perLevelAdvertisingDetail.YFilter = yf }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "advertising-origin" { return "AdvertisingOrigin" }
    if yname == "metric" { return "Metric" }
    if yname == "is-propagated" { return "IsPropagated" }
    if yname == "is-external-metric" { return "IsExternalMetric" }
    if yname == "is-external-reachability" { return "IsExternalReachability" }
    if yname == "is-interarea" { return "IsInterarea" }
    if yname == "summarization-status" { return "SummarizationStatus" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetSegmentPath() string {
    return "per-level-advertising-detail"
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summarization-status" {
        return &perLevelAdvertisingDetail.SummarizationStatus
    }
    if childYangName == "tags" {
        for _, c := range perLevelAdvertisingDetail.Tags {
            if perLevelAdvertisingDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags{}
        perLevelAdvertisingDetail.Tags = append(perLevelAdvertisingDetail.Tags, child)
        return &perLevelAdvertisingDetail.Tags[len(perLevelAdvertisingDetail.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range perLevelAdvertisingDetail.NodalSid {
            if perLevelAdvertisingDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid{}
        perLevelAdvertisingDetail.NodalSid = append(perLevelAdvertisingDetail.NodalSid, child)
        return &perLevelAdvertisingDetail.NodalSid[len(perLevelAdvertisingDetail.NodalSid)-1]
    }
    return nil
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summarization-status"] = &perLevelAdvertisingDetail.SummarizationStatus
    for i := range perLevelAdvertisingDetail.Tags {
        children[perLevelAdvertisingDetail.Tags[i].GetSegmentPath()] = &perLevelAdvertisingDetail.Tags[i]
    }
    for i := range perLevelAdvertisingDetail.NodalSid {
        children[perLevelAdvertisingDetail.NodalSid[i].GetSegmentPath()] = &perLevelAdvertisingDetail.NodalSid[i]
    }
    return children
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = perLevelAdvertisingDetail.Level
    leafs["advertising-origin"] = perLevelAdvertisingDetail.AdvertisingOrigin
    leafs["metric"] = perLevelAdvertisingDetail.Metric
    leafs["is-propagated"] = perLevelAdvertisingDetail.IsPropagated
    leafs["is-external-metric"] = perLevelAdvertisingDetail.IsExternalMetric
    leafs["is-external-reachability"] = perLevelAdvertisingDetail.IsExternalReachability
    leafs["is-interarea"] = perLevelAdvertisingDetail.IsInterarea
    return leafs
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetBundleName() string { return "cisco_ios_xr" }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetYangName() string { return "per-level-advertising-detail" }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) SetParent(parent types.Entity) { perLevelAdvertisingDetail.parent = parent }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetParent() types.Entity { return perLevelAdvertisingDetail.parent }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetParentYangName() string { return "ipv6frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetFilter() yfilter.YFilter { return summarizationStatus.YFilter }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) SetFilter(yf yfilter.YFilter) { summarizationStatus.YFilter = yf }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "summary-prefix" { return "SummaryPrefix" }
    return ""
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetSegmentPath() string {
    return "summarization-status"
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-prefix" {
        return &summarizationStatus.SummaryPrefix
    }
    return nil
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary-prefix"] = &summarizationStatus.SummaryPrefix
    return children
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = summarizationStatus.IsValid
    return leafs
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetBundleName() string { return "cisco_ios_xr" }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetYangName() string { return "summarization-status" }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) SetParent(parent types.Entity) { summarizationStatus.parent = parent }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetParent() types.Entity { return summarizationStatus.parent }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetParentYangName() string { return "per-level-advertising-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetFilter() yfilter.YFilter { return summaryPrefix.YFilter }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) SetFilter(yf yfilter.YFilter) { summaryPrefix.YFilter = yf }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetSegmentPath() string {
    return "summary-prefix"
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = summaryPrefix.Prefix
    leafs["prefix-length"] = summaryPrefix.PrefixLength
    return leafs
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetYangName() string { return "summary-prefix" }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) SetParent(parent types.Entity) { summaryPrefix.parent = parent }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetParent() types.Entity { return summaryPrefix.parent }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetParentYangName() string { return "summarization-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetParentYangName() string { return "per-level-advertising-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetParentYangName() string { return "per-level-advertising-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups
// IPv4 FRR table
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FRR backup for an IPv4 network. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup.
    Ipv4FrrBackup []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup
}

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetFilter() yfilter.YFilter { return ipv4FrrBackups.YFilter }

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) SetFilter(yf yfilter.YFilter) { ipv4FrrBackups.YFilter = yf }

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetGoName(yname string) string {
    if yname == "ipv4frr-backup" { return "Ipv4FrrBackup" }
    return ""
}

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetSegmentPath() string {
    return "ipv4frr-backups"
}

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4frr-backup" {
        for _, c := range ipv4FrrBackups.Ipv4FrrBackup {
            if ipv4FrrBackups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup{}
        ipv4FrrBackups.Ipv4FrrBackup = append(ipv4FrrBackups.Ipv4FrrBackup, child)
        return &ipv4FrrBackups.Ipv4FrrBackup[len(ipv4FrrBackups.Ipv4FrrBackup)-1]
    }
    return nil
}

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4FrrBackups.Ipv4FrrBackup {
        children[ipv4FrrBackups.Ipv4FrrBackup[i].GetSegmentPath()] = &ipv4FrrBackups.Ipv4FrrBackup[i]
    }
    return children
}

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetYangName() string { return "ipv4frr-backups" }

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) SetParent(parent types.Entity) { ipv4FrrBackups.parent = parent }

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetParent() types.Entity { return ipv4FrrBackups.parent }

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetParentYangName() string { return "topology" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup
// FRR backup for an IPv4 network
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail
}

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetFilter() yfilter.YFilter { return ipv4FrrBackup.YFilter }

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) SetFilter(yf yfilter.YFilter) { ipv4FrrBackup.YFilter = yf }

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "connected-status" { return "ConnectedStatus" }
    if yname == "redistributed-status" { return "RedistributedStatus" }
    if yname == "native-status" { return "NativeStatus" }
    if yname == "per-level-advertising-detail" { return "PerLevelAdvertisingDetail" }
    return ""
}

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetSegmentPath() string {
    return "ipv4frr-backup"
}

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-status" {
        return &ipv4FrrBackup.ConnectedStatus
    }
    if childYangName == "redistributed-status" {
        return &ipv4FrrBackup.RedistributedStatus
    }
    if childYangName == "native-status" {
        return &ipv4FrrBackup.NativeStatus
    }
    if childYangName == "per-level-advertising-detail" {
        for _, c := range ipv4FrrBackup.PerLevelAdvertisingDetail {
            if ipv4FrrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail{}
        ipv4FrrBackup.PerLevelAdvertisingDetail = append(ipv4FrrBackup.PerLevelAdvertisingDetail, child)
        return &ipv4FrrBackup.PerLevelAdvertisingDetail[len(ipv4FrrBackup.PerLevelAdvertisingDetail)-1]
    }
    return nil
}

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected-status"] = &ipv4FrrBackup.ConnectedStatus
    children["redistributed-status"] = &ipv4FrrBackup.RedistributedStatus
    children["native-status"] = &ipv4FrrBackup.NativeStatus
    for i := range ipv4FrrBackup.PerLevelAdvertisingDetail {
        children[ipv4FrrBackup.PerLevelAdvertisingDetail[i].GetSegmentPath()] = &ipv4FrrBackup.PerLevelAdvertisingDetail[i]
    }
    return children
}

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4FrrBackup.Prefix
    leafs["prefix-length"] = ipv4FrrBackup.PrefixLength
    return leafs
}

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetYangName() string { return "ipv4frr-backup" }

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) SetParent(parent types.Entity) { ipv4FrrBackup.parent = parent }

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetParent() types.Entity { return ipv4FrrBackup.parent }

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetParentYangName() string { return "ipv4frr-backups" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetFilter() yfilter.YFilter { return connectedStatus.YFilter }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) SetFilter(yf yfilter.YFilter) { connectedStatus.YFilter = yf }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "connected-details" { return "ConnectedDetails" }
    return ""
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetSegmentPath() string {
    return "connected-status"
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-details" {
        return &connectedStatus.ConnectedDetails
    }
    return nil
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected-details"] = &connectedStatus.ConnectedDetails
    return children
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = connectedStatus.IsValid
    return leafs
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetBundleName() string { return "cisco_ios_xr" }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetYangName() string { return "connected-status" }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) SetParent(parent types.Entity) { connectedStatus.parent = parent }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetParent() types.Entity { return connectedStatus.parent }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetParentYangName() string { return "ipv4frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface.
    Interface []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetFilter() yfilter.YFilter { return connectedDetails.YFilter }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) SetFilter(yf yfilter.YFilter) { connectedDetails.YFilter = yf }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetSegmentPath() string {
    return "connected-details"
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range connectedDetails.Interface {
            if connectedDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface{}
        connectedDetails.Interface = append(connectedDetails.Interface, child)
        return &connectedDetails.Interface[len(connectedDetails.Interface)-1]
    }
    return nil
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range connectedDetails.Interface {
        children[connectedDetails.Interface[i].GetSegmentPath()] = &connectedDetails.Interface[i]
    }
    return children
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetBundleName() string { return "cisco_ios_xr" }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetYangName() string { return "connected-details" }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) SetParent(parent types.Entity) { connectedDetails.parent = parent }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetParent() types.Entity { return connectedDetails.parent }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetParentYangName() string { return "connected-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetSegmentPath() string {
    return "interface"
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = self.Entry
    return leafs
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetYangName() string { return "interface" }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetParent() types.Entity { return self.parent }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetParentYangName() string { return "connected-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetFilter() yfilter.YFilter { return redistributedStatus.YFilter }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) SetFilter(yf yfilter.YFilter) { redistributedStatus.YFilter = yf }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "redistribution-details" { return "RedistributionDetails" }
    return ""
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetSegmentPath() string {
    return "redistributed-status"
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistribution-details" {
        return &redistributedStatus.RedistributionDetails
    }
    return nil
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["redistribution-details"] = &redistributedStatus.RedistributionDetails
    return children
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = redistributedStatus.IsValid
    return leafs
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetBundleName() string { return "cisco_ios_xr" }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetYangName() string { return "redistributed-status" }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) SetParent(parent types.Entity) { redistributedStatus.parent = parent }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetParent() types.Entity { return redistributedStatus.parent }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetParentYangName() string { return "ipv4frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetFilter() yfilter.YFilter { return redistributionDetails.YFilter }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) SetFilter(yf yfilter.YFilter) { redistributionDetails.YFilter = yf }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetGoName(yname string) string {
    if yname == "isis-sh-route-redist-detail" { return "IsisShRouteRedistDetail" }
    return ""
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetSegmentPath() string {
    return "redistribution-details"
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "isis-sh-route-redist-detail" {
        for _, c := range redistributionDetails.IsisShRouteRedistDetail {
            if redistributionDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail{}
        redistributionDetails.IsisShRouteRedistDetail = append(redistributionDetails.IsisShRouteRedistDetail, child)
        return &redistributionDetails.IsisShRouteRedistDetail[len(redistributionDetails.IsisShRouteRedistDetail)-1]
    }
    return nil
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        children[redistributionDetails.IsisShRouteRedistDetail[i].GetSegmentPath()] = &redistributionDetails.IsisShRouteRedistDetail[i]
    }
    return children
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetBundleName() string { return "cisco_ios_xr" }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetYangName() string { return "redistribution-details" }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) SetParent(parent types.Entity) { redistributionDetails.parent = parent }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetParent() types.Entity { return redistributionDetails.parent }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetParentYangName() string { return "redistributed-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetFilter() yfilter.YFilter { return isisShRouteRedistDetail.YFilter }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) SetFilter(yf yfilter.YFilter) { isisShRouteRedistDetail.YFilter = yf }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "owner" { return "Owner" }
    return ""
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetSegmentPath() string {
    return "isis-sh-route-redist-detail"
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "owner" {
        return &isisShRouteRedistDetail.Owner
    }
    return nil
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["owner"] = &isisShRouteRedistDetail.Owner
    return children
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = isisShRouteRedistDetail.Level
    return leafs
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetBundleName() string { return "cisco_ios_xr" }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetYangName() string { return "isis-sh-route-redist-detail" }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) SetParent(parent types.Entity) { isisShRouteRedistDetail.parent = parent }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetParent() types.Entity { return isisShRouteRedistDetail.parent }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetParentYangName() string { return "redistribution-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetFilter() yfilter.YFilter { return owner.YFilter }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) SetFilter(yf yfilter.YFilter) { owner.YFilter = yf }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetGoName(yname string) string {
    if yname == "protocol" { return "Protocol" }
    if yname == "isis-instance-id" { return "IsisInstanceId" }
    if yname == "ospf-process-id" { return "OspfProcessId" }
    if yname == "ospfv3-process-id" { return "Ospfv3ProcessId" }
    if yname == "bgp-as-number" { return "BgpAsNumber" }
    if yname == "eigrp-as-number" { return "EigrpAsNumber" }
    if yname == "application-name" { return "ApplicationName" }
    return ""
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetSegmentPath() string {
    return "owner"
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol"] = owner.Protocol
    leafs["isis-instance-id"] = owner.IsisInstanceId
    leafs["ospf-process-id"] = owner.OspfProcessId
    leafs["ospfv3-process-id"] = owner.Ospfv3ProcessId
    leafs["bgp-as-number"] = owner.BgpAsNumber
    leafs["eigrp-as-number"] = owner.EigrpAsNumber
    leafs["application-name"] = owner.ApplicationName
    return leafs
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetBundleName() string { return "cisco_ios_xr" }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetYangName() string { return "owner" }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) SetParent(parent types.Entity) { owner.parent = parent }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetParent() types.Entity { return owner.parent }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetParentYangName() string { return "isis-sh-route-redist-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetFilter() yfilter.YFilter { return nativeStatus.YFilter }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) SetFilter(yf yfilter.YFilter) { nativeStatus.YFilter = yf }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "native-details" { return "NativeDetails" }
    return ""
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetSegmentPath() string {
    return "native-status"
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "native-details" {
        return &nativeStatus.NativeDetails
    }
    return nil
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["native-details"] = &nativeStatus.NativeDetails
    return children
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = nativeStatus.IsValid
    return leafs
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetBundleName() string { return "cisco_ios_xr" }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetYangName() string { return "native-status" }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) SetParent(parent types.Entity) { nativeStatus.parent = parent }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetParent() types.Entity { return nativeStatus.parent }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetParentYangName() string { return "ipv4frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup.
    Backup []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetFilter() yfilter.YFilter { return nativeDetails.YFilter }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) SetFilter(yf yfilter.YFilter) { nativeDetails.YFilter = yf }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    if yname == "primary" { return "Primary" }
    if yname == "backup" { return "Backup" }
    return ""
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetSegmentPath() string {
    return "native-details"
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "primary" {
        return &nativeDetails.Primary
    }
    if childYangName == "backup" {
        for _, c := range nativeDetails.Backup {
            if nativeDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup{}
        nativeDetails.Backup = append(nativeDetails.Backup, child)
        return &nativeDetails.Backup[len(nativeDetails.Backup)-1]
    }
    return nil
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["primary"] = &nativeDetails.Primary
    for i := range nativeDetails.Backup {
        children[nativeDetails.Backup[i].GetSegmentPath()] = &nativeDetails.Backup[i]
    }
    return children
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority"] = nativeDetails.Priority
    return leafs
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetBundleName() string { return "cisco_ios_xr" }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetYangName() string { return "native-details" }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) SetParent(parent types.Entity) { nativeDetails.parent = parent }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetParent() types.Entity { return nativeDetails.parent }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetParentYangName() string { return "native-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetFilter() yfilter.YFilter { return primary.YFilter }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) SetFilter(yf yfilter.YFilter) { primary.YFilter = yf }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetGoName(yname string) string {
    if yname == "origin" { return "Origin" }
    if yname == "metric" { return "Metric" }
    if yname == "multicast-metric" { return "MulticastMetric" }
    if yname == "is-external-metric" { return "IsExternalMetric" }
    if yname == "administrative-distance" { return "AdministrativeDistance" }
    if yname == "paths" { return "Paths" }
    if yname == "ucmp-next-hop" { return "UcmpNextHop" }
    if yname == "multicast-path" { return "MulticastPath" }
    if yname == "srte-path" { return "SrtePath" }
    if yname == "explicit-path" { return "ExplicitPath" }
    if yname == "source" { return "Source" }
    if yname == "multicast-source" { return "MulticastSource" }
    return ""
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetSegmentPath() string {
    return "primary"
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "paths" {
        for _, c := range primary.Paths {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths{}
        primary.Paths = append(primary.Paths, child)
        return &primary.Paths[len(primary.Paths)-1]
    }
    if childYangName == "ucmp-next-hop" {
        for _, c := range primary.UcmpNextHop {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop{}
        primary.UcmpNextHop = append(primary.UcmpNextHop, child)
        return &primary.UcmpNextHop[len(primary.UcmpNextHop)-1]
    }
    if childYangName == "multicast-path" {
        for _, c := range primary.MulticastPath {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath{}
        primary.MulticastPath = append(primary.MulticastPath, child)
        return &primary.MulticastPath[len(primary.MulticastPath)-1]
    }
    if childYangName == "srte-path" {
        for _, c := range primary.SrtePath {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath{}
        primary.SrtePath = append(primary.SrtePath, child)
        return &primary.SrtePath[len(primary.SrtePath)-1]
    }
    if childYangName == "explicit-path" {
        for _, c := range primary.ExplicitPath {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath{}
        primary.ExplicitPath = append(primary.ExplicitPath, child)
        return &primary.ExplicitPath[len(primary.ExplicitPath)-1]
    }
    if childYangName == "source" {
        for _, c := range primary.Source {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source{}
        primary.Source = append(primary.Source, child)
        return &primary.Source[len(primary.Source)-1]
    }
    if childYangName == "multicast-source" {
        for _, c := range primary.MulticastSource {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource{}
        primary.MulticastSource = append(primary.MulticastSource, child)
        return &primary.MulticastSource[len(primary.MulticastSource)-1]
    }
    return nil
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range primary.Paths {
        children[primary.Paths[i].GetSegmentPath()] = &primary.Paths[i]
    }
    for i := range primary.UcmpNextHop {
        children[primary.UcmpNextHop[i].GetSegmentPath()] = &primary.UcmpNextHop[i]
    }
    for i := range primary.MulticastPath {
        children[primary.MulticastPath[i].GetSegmentPath()] = &primary.MulticastPath[i]
    }
    for i := range primary.SrtePath {
        children[primary.SrtePath[i].GetSegmentPath()] = &primary.SrtePath[i]
    }
    for i := range primary.ExplicitPath {
        children[primary.ExplicitPath[i].GetSegmentPath()] = &primary.ExplicitPath[i]
    }
    for i := range primary.Source {
        children[primary.Source[i].GetSegmentPath()] = &primary.Source[i]
    }
    for i := range primary.MulticastSource {
        children[primary.MulticastSource[i].GetSegmentPath()] = &primary.MulticastSource[i]
    }
    return children
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["origin"] = primary.Origin
    leafs["metric"] = primary.Metric
    leafs["multicast-metric"] = primary.MulticastMetric
    leafs["is-external-metric"] = primary.IsExternalMetric
    leafs["administrative-distance"] = primary.AdministrativeDistance
    return leafs
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetBundleName() string { return "cisco_ios_xr" }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetYangName() string { return "primary" }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) SetParent(parent types.Entity) { primary.parent = parent }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetParent() types.Entity { return primary.parent }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetParentYangName() string { return "native-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetFilter() yfilter.YFilter { return paths.YFilter }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) SetFilter(yf yfilter.YFilter) { paths.YFilter = yf }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetSegmentPath() string {
    return "paths"
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &paths.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range paths.UloopExplicit {
            if paths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit{}
        paths.UloopExplicit = append(paths.UloopExplicit, child)
        return &paths.UloopExplicit[len(paths.UloopExplicit)-1]
    }
    return nil
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &paths.FrrBackup
    for i := range paths.UloopExplicit {
        children[paths.UloopExplicit[i].GetSegmentPath()] = &paths.UloopExplicit[i]
    }
    return children
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = paths.NeighborId
    leafs["egress-interface"] = paths.EgressInterface
    leafs["neighbor-address"] = paths.NeighborAddress
    leafs["neighbor-snpa"] = paths.NeighborSnpa
    leafs["tag"] = paths.Tag
    leafs["tunnel-interface"] = paths.TunnelInterface
    leafs["segment-routing-sid-value"] = paths.SegmentRoutingSidValue
    leafs["weight"] = paths.Weight
    leafs["is-te-tunnel-interface"] = paths.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = paths.IsSrExcludeTunnelInterface
    return leafs
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetBundleName() string { return "cisco_ios_xr" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetYangName() string { return "paths" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) SetParent(parent types.Entity) { paths.parent = parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetParent() types.Entity { return paths.parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetFilter() yfilter.YFilter { return ucmpNextHop.YFilter }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) SetFilter(yf yfilter.YFilter) { ucmpNextHop.YFilter = yf }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "total-ucmp-distance" { return "TotalUcmpDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    return ""
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetSegmentPath() string {
    return "ucmp-next-hop"
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &ucmpNextHop.FrrBackup
    }
    return nil
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &ucmpNextHop.FrrBackup
    return children
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = ucmpNextHop.NeighborId
    leafs["egress-interface"] = ucmpNextHop.EgressInterface
    leafs["neighbor-address"] = ucmpNextHop.NeighborAddress
    leafs["neighbor-snpa"] = ucmpNextHop.NeighborSnpa
    leafs["tag"] = ucmpNextHop.Tag
    leafs["total-ucmp-distance"] = ucmpNextHop.TotalUcmpDistance
    leafs["segment-routing-sid-value"] = ucmpNextHop.SegmentRoutingSidValue
    leafs["weight"] = ucmpNextHop.Weight
    leafs["is-te-tunnel-interface"] = ucmpNextHop.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = ucmpNextHop.IsSrExcludeTunnelInterface
    return leafs
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetBundleName() string { return "cisco_ios_xr" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetYangName() string { return "ucmp-next-hop" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) SetParent(parent types.Entity) { ucmpNextHop.parent = parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetParent() types.Entity { return ucmpNextHop.parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetParentYangName() string { return "ucmp-next-hop" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetFilter() yfilter.YFilter { return multicastPath.YFilter }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) SetFilter(yf yfilter.YFilter) { multicastPath.YFilter = yf }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetSegmentPath() string {
    return "multicast-path"
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &multicastPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range multicastPath.UloopExplicit {
            if multicastPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit{}
        multicastPath.UloopExplicit = append(multicastPath.UloopExplicit, child)
        return &multicastPath.UloopExplicit[len(multicastPath.UloopExplicit)-1]
    }
    return nil
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &multicastPath.FrrBackup
    for i := range multicastPath.UloopExplicit {
        children[multicastPath.UloopExplicit[i].GetSegmentPath()] = &multicastPath.UloopExplicit[i]
    }
    return children
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = multicastPath.NeighborId
    leafs["egress-interface"] = multicastPath.EgressInterface
    leafs["neighbor-address"] = multicastPath.NeighborAddress
    leafs["neighbor-snpa"] = multicastPath.NeighborSnpa
    leafs["tag"] = multicastPath.Tag
    leafs["tunnel-interface"] = multicastPath.TunnelInterface
    leafs["segment-routing-sid-value"] = multicastPath.SegmentRoutingSidValue
    leafs["weight"] = multicastPath.Weight
    leafs["is-te-tunnel-interface"] = multicastPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = multicastPath.IsSrExcludeTunnelInterface
    return leafs
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetBundleName() string { return "cisco_ios_xr" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetYangName() string { return "multicast-path" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) SetParent(parent types.Entity) { multicastPath.parent = parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetParent() types.Entity { return multicastPath.parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetFilter() yfilter.YFilter { return srtePath.YFilter }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) SetFilter(yf yfilter.YFilter) { srtePath.YFilter = yf }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetSegmentPath() string {
    return "srte-path"
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &srtePath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range srtePath.UloopExplicit {
            if srtePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit{}
        srtePath.UloopExplicit = append(srtePath.UloopExplicit, child)
        return &srtePath.UloopExplicit[len(srtePath.UloopExplicit)-1]
    }
    return nil
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &srtePath.FrrBackup
    for i := range srtePath.UloopExplicit {
        children[srtePath.UloopExplicit[i].GetSegmentPath()] = &srtePath.UloopExplicit[i]
    }
    return children
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = srtePath.NeighborId
    leafs["egress-interface"] = srtePath.EgressInterface
    leafs["neighbor-address"] = srtePath.NeighborAddress
    leafs["neighbor-snpa"] = srtePath.NeighborSnpa
    leafs["tag"] = srtePath.Tag
    leafs["tunnel-interface"] = srtePath.TunnelInterface
    leafs["segment-routing-sid-value"] = srtePath.SegmentRoutingSidValue
    leafs["weight"] = srtePath.Weight
    leafs["is-te-tunnel-interface"] = srtePath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = srtePath.IsSrExcludeTunnelInterface
    return leafs
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetBundleName() string { return "cisco_ios_xr" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetYangName() string { return "srte-path" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) SetParent(parent types.Entity) { srtePath.parent = parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetParent() types.Entity { return srtePath.parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetFilter() yfilter.YFilter { return explicitPath.YFilter }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) SetFilter(yf yfilter.YFilter) { explicitPath.YFilter = yf }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetSegmentPath() string {
    return "explicit-path"
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &explicitPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range explicitPath.UloopExplicit {
            if explicitPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit{}
        explicitPath.UloopExplicit = append(explicitPath.UloopExplicit, child)
        return &explicitPath.UloopExplicit[len(explicitPath.UloopExplicit)-1]
    }
    return nil
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &explicitPath.FrrBackup
    for i := range explicitPath.UloopExplicit {
        children[explicitPath.UloopExplicit[i].GetSegmentPath()] = &explicitPath.UloopExplicit[i]
    }
    return children
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = explicitPath.NeighborId
    leafs["egress-interface"] = explicitPath.EgressInterface
    leafs["neighbor-address"] = explicitPath.NeighborAddress
    leafs["neighbor-snpa"] = explicitPath.NeighborSnpa
    leafs["tag"] = explicitPath.Tag
    leafs["tunnel-interface"] = explicitPath.TunnelInterface
    leafs["segment-routing-sid-value"] = explicitPath.SegmentRoutingSidValue
    leafs["weight"] = explicitPath.Weight
    leafs["is-te-tunnel-interface"] = explicitPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = explicitPath.IsSrExcludeTunnelInterface
    return leafs
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetBundleName() string { return "cisco_ios_xr" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetYangName() string { return "explicit-path" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) SetParent(parent types.Entity) { explicitPath.parent = parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetParent() types.Entity { return explicitPath.parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetSegmentPath() string {
    return "source"
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range source.Tags {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags{}
        source.Tags = append(source.Tags, child)
        return &source.Tags[len(source.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range source.NodalSid {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid{}
        source.NodalSid = append(source.NodalSid, child)
        return &source.NodalSid[len(source.NodalSid)-1]
    }
    return nil
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range source.Tags {
        children[source.Tags[i].GetSegmentPath()] = &source.Tags[i]
    }
    for i := range source.NodalSid {
        children[source.NodalSid[i].GetSegmentPath()] = &source.NodalSid[i]
    }
    return children
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = source.SourceLspId
    leafs["source-address"] = source.SourceAddress
    return leafs
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetYangName() string { return "source" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetParent() types.Entity { return source.parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetFilter() yfilter.YFilter { return multicastSource.YFilter }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) SetFilter(yf yfilter.YFilter) { multicastSource.YFilter = yf }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetSegmentPath() string {
    return "multicast-source"
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range multicastSource.Tags {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags{}
        multicastSource.Tags = append(multicastSource.Tags, child)
        return &multicastSource.Tags[len(multicastSource.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range multicastSource.NodalSid {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid{}
        multicastSource.NodalSid = append(multicastSource.NodalSid, child)
        return &multicastSource.NodalSid[len(multicastSource.NodalSid)-1]
    }
    return nil
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range multicastSource.Tags {
        children[multicastSource.Tags[i].GetSegmentPath()] = &multicastSource.Tags[i]
    }
    for i := range multicastSource.NodalSid {
        children[multicastSource.NodalSid[i].GetSegmentPath()] = &multicastSource.NodalSid[i]
    }
    return children
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = multicastSource.SourceLspId
    leafs["source-address"] = multicastSource.SourceAddress
    return leafs
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetBundleName() string { return "cisco_ios_xr" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetYangName() string { return "multicast-source" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) SetParent(parent types.Entity) { multicastSource.parent = parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetParent() types.Entity { return multicastSource.parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetFilter() yfilter.YFilter { return backup.YFilter }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) SetFilter(yf yfilter.YFilter) { backup.YFilter = yf }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetGoName(yname string) string {
    if yname == "origin" { return "Origin" }
    if yname == "metric" { return "Metric" }
    if yname == "multicast-metric" { return "MulticastMetric" }
    if yname == "is-external-metric" { return "IsExternalMetric" }
    if yname == "administrative-distance" { return "AdministrativeDistance" }
    if yname == "paths" { return "Paths" }
    if yname == "ucmp-next-hop" { return "UcmpNextHop" }
    if yname == "multicast-path" { return "MulticastPath" }
    if yname == "srte-path" { return "SrtePath" }
    if yname == "explicit-path" { return "ExplicitPath" }
    if yname == "source" { return "Source" }
    if yname == "multicast-source" { return "MulticastSource" }
    return ""
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetSegmentPath() string {
    return "backup"
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "paths" {
        for _, c := range backup.Paths {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths{}
        backup.Paths = append(backup.Paths, child)
        return &backup.Paths[len(backup.Paths)-1]
    }
    if childYangName == "ucmp-next-hop" {
        for _, c := range backup.UcmpNextHop {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop{}
        backup.UcmpNextHop = append(backup.UcmpNextHop, child)
        return &backup.UcmpNextHop[len(backup.UcmpNextHop)-1]
    }
    if childYangName == "multicast-path" {
        for _, c := range backup.MulticastPath {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath{}
        backup.MulticastPath = append(backup.MulticastPath, child)
        return &backup.MulticastPath[len(backup.MulticastPath)-1]
    }
    if childYangName == "srte-path" {
        for _, c := range backup.SrtePath {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath{}
        backup.SrtePath = append(backup.SrtePath, child)
        return &backup.SrtePath[len(backup.SrtePath)-1]
    }
    if childYangName == "explicit-path" {
        for _, c := range backup.ExplicitPath {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath{}
        backup.ExplicitPath = append(backup.ExplicitPath, child)
        return &backup.ExplicitPath[len(backup.ExplicitPath)-1]
    }
    if childYangName == "source" {
        for _, c := range backup.Source {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source{}
        backup.Source = append(backup.Source, child)
        return &backup.Source[len(backup.Source)-1]
    }
    if childYangName == "multicast-source" {
        for _, c := range backup.MulticastSource {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource{}
        backup.MulticastSource = append(backup.MulticastSource, child)
        return &backup.MulticastSource[len(backup.MulticastSource)-1]
    }
    return nil
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range backup.Paths {
        children[backup.Paths[i].GetSegmentPath()] = &backup.Paths[i]
    }
    for i := range backup.UcmpNextHop {
        children[backup.UcmpNextHop[i].GetSegmentPath()] = &backup.UcmpNextHop[i]
    }
    for i := range backup.MulticastPath {
        children[backup.MulticastPath[i].GetSegmentPath()] = &backup.MulticastPath[i]
    }
    for i := range backup.SrtePath {
        children[backup.SrtePath[i].GetSegmentPath()] = &backup.SrtePath[i]
    }
    for i := range backup.ExplicitPath {
        children[backup.ExplicitPath[i].GetSegmentPath()] = &backup.ExplicitPath[i]
    }
    for i := range backup.Source {
        children[backup.Source[i].GetSegmentPath()] = &backup.Source[i]
    }
    for i := range backup.MulticastSource {
        children[backup.MulticastSource[i].GetSegmentPath()] = &backup.MulticastSource[i]
    }
    return children
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["origin"] = backup.Origin
    leafs["metric"] = backup.Metric
    leafs["multicast-metric"] = backup.MulticastMetric
    leafs["is-external-metric"] = backup.IsExternalMetric
    leafs["administrative-distance"] = backup.AdministrativeDistance
    return leafs
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetBundleName() string { return "cisco_ios_xr" }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetYangName() string { return "backup" }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) SetParent(parent types.Entity) { backup.parent = parent }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetParent() types.Entity { return backup.parent }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetParentYangName() string { return "native-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetFilter() yfilter.YFilter { return paths.YFilter }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) SetFilter(yf yfilter.YFilter) { paths.YFilter = yf }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetSegmentPath() string {
    return "paths"
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &paths.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range paths.UloopExplicit {
            if paths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit{}
        paths.UloopExplicit = append(paths.UloopExplicit, child)
        return &paths.UloopExplicit[len(paths.UloopExplicit)-1]
    }
    return nil
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &paths.FrrBackup
    for i := range paths.UloopExplicit {
        children[paths.UloopExplicit[i].GetSegmentPath()] = &paths.UloopExplicit[i]
    }
    return children
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = paths.NeighborId
    leafs["egress-interface"] = paths.EgressInterface
    leafs["neighbor-address"] = paths.NeighborAddress
    leafs["neighbor-snpa"] = paths.NeighborSnpa
    leafs["tag"] = paths.Tag
    leafs["tunnel-interface"] = paths.TunnelInterface
    leafs["segment-routing-sid-value"] = paths.SegmentRoutingSidValue
    leafs["weight"] = paths.Weight
    leafs["is-te-tunnel-interface"] = paths.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = paths.IsSrExcludeTunnelInterface
    return leafs
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetBundleName() string { return "cisco_ios_xr" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetYangName() string { return "paths" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) SetParent(parent types.Entity) { paths.parent = parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetParent() types.Entity { return paths.parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetFilter() yfilter.YFilter { return ucmpNextHop.YFilter }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) SetFilter(yf yfilter.YFilter) { ucmpNextHop.YFilter = yf }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "total-ucmp-distance" { return "TotalUcmpDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    return ""
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetSegmentPath() string {
    return "ucmp-next-hop"
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &ucmpNextHop.FrrBackup
    }
    return nil
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &ucmpNextHop.FrrBackup
    return children
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = ucmpNextHop.NeighborId
    leafs["egress-interface"] = ucmpNextHop.EgressInterface
    leafs["neighbor-address"] = ucmpNextHop.NeighborAddress
    leafs["neighbor-snpa"] = ucmpNextHop.NeighborSnpa
    leafs["tag"] = ucmpNextHop.Tag
    leafs["total-ucmp-distance"] = ucmpNextHop.TotalUcmpDistance
    leafs["segment-routing-sid-value"] = ucmpNextHop.SegmentRoutingSidValue
    leafs["weight"] = ucmpNextHop.Weight
    leafs["is-te-tunnel-interface"] = ucmpNextHop.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = ucmpNextHop.IsSrExcludeTunnelInterface
    return leafs
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetBundleName() string { return "cisco_ios_xr" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetYangName() string { return "ucmp-next-hop" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) SetParent(parent types.Entity) { ucmpNextHop.parent = parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetParent() types.Entity { return ucmpNextHop.parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetParentYangName() string { return "ucmp-next-hop" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetFilter() yfilter.YFilter { return multicastPath.YFilter }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) SetFilter(yf yfilter.YFilter) { multicastPath.YFilter = yf }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetSegmentPath() string {
    return "multicast-path"
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &multicastPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range multicastPath.UloopExplicit {
            if multicastPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit{}
        multicastPath.UloopExplicit = append(multicastPath.UloopExplicit, child)
        return &multicastPath.UloopExplicit[len(multicastPath.UloopExplicit)-1]
    }
    return nil
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &multicastPath.FrrBackup
    for i := range multicastPath.UloopExplicit {
        children[multicastPath.UloopExplicit[i].GetSegmentPath()] = &multicastPath.UloopExplicit[i]
    }
    return children
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = multicastPath.NeighborId
    leafs["egress-interface"] = multicastPath.EgressInterface
    leafs["neighbor-address"] = multicastPath.NeighborAddress
    leafs["neighbor-snpa"] = multicastPath.NeighborSnpa
    leafs["tag"] = multicastPath.Tag
    leafs["tunnel-interface"] = multicastPath.TunnelInterface
    leafs["segment-routing-sid-value"] = multicastPath.SegmentRoutingSidValue
    leafs["weight"] = multicastPath.Weight
    leafs["is-te-tunnel-interface"] = multicastPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = multicastPath.IsSrExcludeTunnelInterface
    return leafs
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetBundleName() string { return "cisco_ios_xr" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetYangName() string { return "multicast-path" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) SetParent(parent types.Entity) { multicastPath.parent = parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetParent() types.Entity { return multicastPath.parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetFilter() yfilter.YFilter { return srtePath.YFilter }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) SetFilter(yf yfilter.YFilter) { srtePath.YFilter = yf }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetSegmentPath() string {
    return "srte-path"
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &srtePath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range srtePath.UloopExplicit {
            if srtePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit{}
        srtePath.UloopExplicit = append(srtePath.UloopExplicit, child)
        return &srtePath.UloopExplicit[len(srtePath.UloopExplicit)-1]
    }
    return nil
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &srtePath.FrrBackup
    for i := range srtePath.UloopExplicit {
        children[srtePath.UloopExplicit[i].GetSegmentPath()] = &srtePath.UloopExplicit[i]
    }
    return children
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = srtePath.NeighborId
    leafs["egress-interface"] = srtePath.EgressInterface
    leafs["neighbor-address"] = srtePath.NeighborAddress
    leafs["neighbor-snpa"] = srtePath.NeighborSnpa
    leafs["tag"] = srtePath.Tag
    leafs["tunnel-interface"] = srtePath.TunnelInterface
    leafs["segment-routing-sid-value"] = srtePath.SegmentRoutingSidValue
    leafs["weight"] = srtePath.Weight
    leafs["is-te-tunnel-interface"] = srtePath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = srtePath.IsSrExcludeTunnelInterface
    return leafs
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetBundleName() string { return "cisco_ios_xr" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetYangName() string { return "srte-path" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) SetParent(parent types.Entity) { srtePath.parent = parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetParent() types.Entity { return srtePath.parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetFilter() yfilter.YFilter { return explicitPath.YFilter }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) SetFilter(yf yfilter.YFilter) { explicitPath.YFilter = yf }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetSegmentPath() string {
    return "explicit-path"
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &explicitPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range explicitPath.UloopExplicit {
            if explicitPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit{}
        explicitPath.UloopExplicit = append(explicitPath.UloopExplicit, child)
        return &explicitPath.UloopExplicit[len(explicitPath.UloopExplicit)-1]
    }
    return nil
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &explicitPath.FrrBackup
    for i := range explicitPath.UloopExplicit {
        children[explicitPath.UloopExplicit[i].GetSegmentPath()] = &explicitPath.UloopExplicit[i]
    }
    return children
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = explicitPath.NeighborId
    leafs["egress-interface"] = explicitPath.EgressInterface
    leafs["neighbor-address"] = explicitPath.NeighborAddress
    leafs["neighbor-snpa"] = explicitPath.NeighborSnpa
    leafs["tag"] = explicitPath.Tag
    leafs["tunnel-interface"] = explicitPath.TunnelInterface
    leafs["segment-routing-sid-value"] = explicitPath.SegmentRoutingSidValue
    leafs["weight"] = explicitPath.Weight
    leafs["is-te-tunnel-interface"] = explicitPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = explicitPath.IsSrExcludeTunnelInterface
    return leafs
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetBundleName() string { return "cisco_ios_xr" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetYangName() string { return "explicit-path" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) SetParent(parent types.Entity) { explicitPath.parent = parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetParent() types.Entity { return explicitPath.parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetSegmentPath() string {
    return "source"
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range source.Tags {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags{}
        source.Tags = append(source.Tags, child)
        return &source.Tags[len(source.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range source.NodalSid {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid{}
        source.NodalSid = append(source.NodalSid, child)
        return &source.NodalSid[len(source.NodalSid)-1]
    }
    return nil
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range source.Tags {
        children[source.Tags[i].GetSegmentPath()] = &source.Tags[i]
    }
    for i := range source.NodalSid {
        children[source.NodalSid[i].GetSegmentPath()] = &source.NodalSid[i]
    }
    return children
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = source.SourceLspId
    leafs["source-address"] = source.SourceAddress
    return leafs
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetYangName() string { return "source" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetParent() types.Entity { return source.parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetFilter() yfilter.YFilter { return multicastSource.YFilter }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) SetFilter(yf yfilter.YFilter) { multicastSource.YFilter = yf }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetSegmentPath() string {
    return "multicast-source"
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range multicastSource.Tags {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags{}
        multicastSource.Tags = append(multicastSource.Tags, child)
        return &multicastSource.Tags[len(multicastSource.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range multicastSource.NodalSid {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid{}
        multicastSource.NodalSid = append(multicastSource.NodalSid, child)
        return &multicastSource.NodalSid[len(multicastSource.NodalSid)-1]
    }
    return nil
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range multicastSource.Tags {
        children[multicastSource.Tags[i].GetSegmentPath()] = &multicastSource.Tags[i]
    }
    for i := range multicastSource.NodalSid {
        children[multicastSource.NodalSid[i].GetSegmentPath()] = &multicastSource.NodalSid[i]
    }
    return children
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = multicastSource.SourceLspId
    leafs["source-address"] = multicastSource.SourceAddress
    return leafs
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetBundleName() string { return "cisco_ios_xr" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetYangName() string { return "multicast-source" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) SetParent(parent types.Entity) { multicastSource.parent = parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetParent() types.Entity { return multicastSource.parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetFilter() yfilter.YFilter { return perLevelAdvertisingDetail.YFilter }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) SetFilter(yf yfilter.YFilter) { perLevelAdvertisingDetail.YFilter = yf }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "advertising-origin" { return "AdvertisingOrigin" }
    if yname == "metric" { return "Metric" }
    if yname == "is-propagated" { return "IsPropagated" }
    if yname == "is-external-metric" { return "IsExternalMetric" }
    if yname == "is-external-reachability" { return "IsExternalReachability" }
    if yname == "is-interarea" { return "IsInterarea" }
    if yname == "summarization-status" { return "SummarizationStatus" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetSegmentPath() string {
    return "per-level-advertising-detail"
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summarization-status" {
        return &perLevelAdvertisingDetail.SummarizationStatus
    }
    if childYangName == "tags" {
        for _, c := range perLevelAdvertisingDetail.Tags {
            if perLevelAdvertisingDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags{}
        perLevelAdvertisingDetail.Tags = append(perLevelAdvertisingDetail.Tags, child)
        return &perLevelAdvertisingDetail.Tags[len(perLevelAdvertisingDetail.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range perLevelAdvertisingDetail.NodalSid {
            if perLevelAdvertisingDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid{}
        perLevelAdvertisingDetail.NodalSid = append(perLevelAdvertisingDetail.NodalSid, child)
        return &perLevelAdvertisingDetail.NodalSid[len(perLevelAdvertisingDetail.NodalSid)-1]
    }
    return nil
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summarization-status"] = &perLevelAdvertisingDetail.SummarizationStatus
    for i := range perLevelAdvertisingDetail.Tags {
        children[perLevelAdvertisingDetail.Tags[i].GetSegmentPath()] = &perLevelAdvertisingDetail.Tags[i]
    }
    for i := range perLevelAdvertisingDetail.NodalSid {
        children[perLevelAdvertisingDetail.NodalSid[i].GetSegmentPath()] = &perLevelAdvertisingDetail.NodalSid[i]
    }
    return children
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = perLevelAdvertisingDetail.Level
    leafs["advertising-origin"] = perLevelAdvertisingDetail.AdvertisingOrigin
    leafs["metric"] = perLevelAdvertisingDetail.Metric
    leafs["is-propagated"] = perLevelAdvertisingDetail.IsPropagated
    leafs["is-external-metric"] = perLevelAdvertisingDetail.IsExternalMetric
    leafs["is-external-reachability"] = perLevelAdvertisingDetail.IsExternalReachability
    leafs["is-interarea"] = perLevelAdvertisingDetail.IsInterarea
    return leafs
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetBundleName() string { return "cisco_ios_xr" }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetYangName() string { return "per-level-advertising-detail" }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) SetParent(parent types.Entity) { perLevelAdvertisingDetail.parent = parent }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetParent() types.Entity { return perLevelAdvertisingDetail.parent }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetParentYangName() string { return "ipv4frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetFilter() yfilter.YFilter { return summarizationStatus.YFilter }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) SetFilter(yf yfilter.YFilter) { summarizationStatus.YFilter = yf }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "summary-prefix" { return "SummaryPrefix" }
    return ""
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetSegmentPath() string {
    return "summarization-status"
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-prefix" {
        return &summarizationStatus.SummaryPrefix
    }
    return nil
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary-prefix"] = &summarizationStatus.SummaryPrefix
    return children
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = summarizationStatus.IsValid
    return leafs
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetBundleName() string { return "cisco_ios_xr" }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetYangName() string { return "summarization-status" }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) SetParent(parent types.Entity) { summarizationStatus.parent = parent }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetParent() types.Entity { return summarizationStatus.parent }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetParentYangName() string { return "per-level-advertising-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetFilter() yfilter.YFilter { return summaryPrefix.YFilter }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) SetFilter(yf yfilter.YFilter) { summaryPrefix.YFilter = yf }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetSegmentPath() string {
    return "summary-prefix"
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = summaryPrefix.Prefix
    leafs["prefix-length"] = summaryPrefix.PrefixLength
    return leafs
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetYangName() string { return "summary-prefix" }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) SetParent(parent types.Entity) { summaryPrefix.parent = parent }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetParent() types.Entity { return summaryPrefix.parent }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetParentYangName() string { return "summarization-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetParentYangName() string { return "per-level-advertising-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetParentYangName() string { return "per-level-advertising-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes
// IPv4 local route table
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An IPv4 route known to IS-IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route.
    Ipv4Route []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route
}

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetFilter() yfilter.YFilter { return ipv4Routes.YFilter }

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) SetFilter(yf yfilter.YFilter) { ipv4Routes.YFilter = yf }

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetGoName(yname string) string {
    if yname == "ipv4-route" { return "Ipv4Route" }
    return ""
}

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetSegmentPath() string {
    return "ipv4-routes"
}

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-route" {
        for _, c := range ipv4Routes.Ipv4Route {
            if ipv4Routes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route{}
        ipv4Routes.Ipv4Route = append(ipv4Routes.Ipv4Route, child)
        return &ipv4Routes.Ipv4Route[len(ipv4Routes.Ipv4Route)-1]
    }
    return nil
}

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4Routes.Ipv4Route {
        children[ipv4Routes.Ipv4Route[i].GetSegmentPath()] = &ipv4Routes.Ipv4Route[i]
    }
    return children
}

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetYangName() string { return "ipv4-routes" }

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) SetParent(parent types.Entity) { ipv4Routes.parent = parent }

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetParent() types.Entity { return ipv4Routes.parent }

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetParentYangName() string { return "topology" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route
// An IPv4 route known to IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail
}

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetFilter() yfilter.YFilter { return ipv4Route.YFilter }

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) SetFilter(yf yfilter.YFilter) { ipv4Route.YFilter = yf }

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "connected-status" { return "ConnectedStatus" }
    if yname == "redistributed-status" { return "RedistributedStatus" }
    if yname == "native-status" { return "NativeStatus" }
    if yname == "per-level-advertising-detail" { return "PerLevelAdvertisingDetail" }
    return ""
}

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetSegmentPath() string {
    return "ipv4-route"
}

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-status" {
        return &ipv4Route.ConnectedStatus
    }
    if childYangName == "redistributed-status" {
        return &ipv4Route.RedistributedStatus
    }
    if childYangName == "native-status" {
        return &ipv4Route.NativeStatus
    }
    if childYangName == "per-level-advertising-detail" {
        for _, c := range ipv4Route.PerLevelAdvertisingDetail {
            if ipv4Route.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail{}
        ipv4Route.PerLevelAdvertisingDetail = append(ipv4Route.PerLevelAdvertisingDetail, child)
        return &ipv4Route.PerLevelAdvertisingDetail[len(ipv4Route.PerLevelAdvertisingDetail)-1]
    }
    return nil
}

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected-status"] = &ipv4Route.ConnectedStatus
    children["redistributed-status"] = &ipv4Route.RedistributedStatus
    children["native-status"] = &ipv4Route.NativeStatus
    for i := range ipv4Route.PerLevelAdvertisingDetail {
        children[ipv4Route.PerLevelAdvertisingDetail[i].GetSegmentPath()] = &ipv4Route.PerLevelAdvertisingDetail[i]
    }
    return children
}

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4Route.Prefix
    leafs["prefix-length"] = ipv4Route.PrefixLength
    return leafs
}

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetYangName() string { return "ipv4-route" }

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) SetParent(parent types.Entity) { ipv4Route.parent = parent }

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetParent() types.Entity { return ipv4Route.parent }

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetParentYangName() string { return "ipv4-routes" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetFilter() yfilter.YFilter { return connectedStatus.YFilter }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) SetFilter(yf yfilter.YFilter) { connectedStatus.YFilter = yf }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "connected-details" { return "ConnectedDetails" }
    return ""
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetSegmentPath() string {
    return "connected-status"
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-details" {
        return &connectedStatus.ConnectedDetails
    }
    return nil
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected-details"] = &connectedStatus.ConnectedDetails
    return children
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = connectedStatus.IsValid
    return leafs
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetBundleName() string { return "cisco_ios_xr" }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetYangName() string { return "connected-status" }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) SetParent(parent types.Entity) { connectedStatus.parent = parent }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetParent() types.Entity { return connectedStatus.parent }

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetParentYangName() string { return "ipv4-route" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface.
    Interface []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetFilter() yfilter.YFilter { return connectedDetails.YFilter }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) SetFilter(yf yfilter.YFilter) { connectedDetails.YFilter = yf }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetSegmentPath() string {
    return "connected-details"
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range connectedDetails.Interface {
            if connectedDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface{}
        connectedDetails.Interface = append(connectedDetails.Interface, child)
        return &connectedDetails.Interface[len(connectedDetails.Interface)-1]
    }
    return nil
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range connectedDetails.Interface {
        children[connectedDetails.Interface[i].GetSegmentPath()] = &connectedDetails.Interface[i]
    }
    return children
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetBundleName() string { return "cisco_ios_xr" }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetYangName() string { return "connected-details" }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) SetParent(parent types.Entity) { connectedDetails.parent = parent }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetParent() types.Entity { return connectedDetails.parent }

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetParentYangName() string { return "connected-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetSegmentPath() string {
    return "interface"
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = self.Entry
    return leafs
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetYangName() string { return "interface" }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetParent() types.Entity { return self.parent }

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetParentYangName() string { return "connected-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetFilter() yfilter.YFilter { return redistributedStatus.YFilter }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) SetFilter(yf yfilter.YFilter) { redistributedStatus.YFilter = yf }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "redistribution-details" { return "RedistributionDetails" }
    return ""
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetSegmentPath() string {
    return "redistributed-status"
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistribution-details" {
        return &redistributedStatus.RedistributionDetails
    }
    return nil
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["redistribution-details"] = &redistributedStatus.RedistributionDetails
    return children
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = redistributedStatus.IsValid
    return leafs
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetBundleName() string { return "cisco_ios_xr" }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetYangName() string { return "redistributed-status" }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) SetParent(parent types.Entity) { redistributedStatus.parent = parent }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetParent() types.Entity { return redistributedStatus.parent }

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetParentYangName() string { return "ipv4-route" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetFilter() yfilter.YFilter { return redistributionDetails.YFilter }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) SetFilter(yf yfilter.YFilter) { redistributionDetails.YFilter = yf }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetGoName(yname string) string {
    if yname == "isis-sh-route-redist-detail" { return "IsisShRouteRedistDetail" }
    return ""
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetSegmentPath() string {
    return "redistribution-details"
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "isis-sh-route-redist-detail" {
        for _, c := range redistributionDetails.IsisShRouteRedistDetail {
            if redistributionDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail{}
        redistributionDetails.IsisShRouteRedistDetail = append(redistributionDetails.IsisShRouteRedistDetail, child)
        return &redistributionDetails.IsisShRouteRedistDetail[len(redistributionDetails.IsisShRouteRedistDetail)-1]
    }
    return nil
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        children[redistributionDetails.IsisShRouteRedistDetail[i].GetSegmentPath()] = &redistributionDetails.IsisShRouteRedistDetail[i]
    }
    return children
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetBundleName() string { return "cisco_ios_xr" }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetYangName() string { return "redistribution-details" }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) SetParent(parent types.Entity) { redistributionDetails.parent = parent }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetParent() types.Entity { return redistributionDetails.parent }

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetParentYangName() string { return "redistributed-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetFilter() yfilter.YFilter { return isisShRouteRedistDetail.YFilter }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) SetFilter(yf yfilter.YFilter) { isisShRouteRedistDetail.YFilter = yf }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "owner" { return "Owner" }
    return ""
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetSegmentPath() string {
    return "isis-sh-route-redist-detail"
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "owner" {
        return &isisShRouteRedistDetail.Owner
    }
    return nil
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["owner"] = &isisShRouteRedistDetail.Owner
    return children
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = isisShRouteRedistDetail.Level
    return leafs
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetBundleName() string { return "cisco_ios_xr" }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetYangName() string { return "isis-sh-route-redist-detail" }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) SetParent(parent types.Entity) { isisShRouteRedistDetail.parent = parent }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetParent() types.Entity { return isisShRouteRedistDetail.parent }

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetParentYangName() string { return "redistribution-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetFilter() yfilter.YFilter { return owner.YFilter }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) SetFilter(yf yfilter.YFilter) { owner.YFilter = yf }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetGoName(yname string) string {
    if yname == "protocol" { return "Protocol" }
    if yname == "isis-instance-id" { return "IsisInstanceId" }
    if yname == "ospf-process-id" { return "OspfProcessId" }
    if yname == "ospfv3-process-id" { return "Ospfv3ProcessId" }
    if yname == "bgp-as-number" { return "BgpAsNumber" }
    if yname == "eigrp-as-number" { return "EigrpAsNumber" }
    if yname == "application-name" { return "ApplicationName" }
    return ""
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetSegmentPath() string {
    return "owner"
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol"] = owner.Protocol
    leafs["isis-instance-id"] = owner.IsisInstanceId
    leafs["ospf-process-id"] = owner.OspfProcessId
    leafs["ospfv3-process-id"] = owner.Ospfv3ProcessId
    leafs["bgp-as-number"] = owner.BgpAsNumber
    leafs["eigrp-as-number"] = owner.EigrpAsNumber
    leafs["application-name"] = owner.ApplicationName
    return leafs
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetBundleName() string { return "cisco_ios_xr" }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetYangName() string { return "owner" }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) SetParent(parent types.Entity) { owner.parent = parent }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetParent() types.Entity { return owner.parent }

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetParentYangName() string { return "isis-sh-route-redist-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetFilter() yfilter.YFilter { return nativeStatus.YFilter }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) SetFilter(yf yfilter.YFilter) { nativeStatus.YFilter = yf }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "native-details" { return "NativeDetails" }
    return ""
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetSegmentPath() string {
    return "native-status"
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "native-details" {
        return &nativeStatus.NativeDetails
    }
    return nil
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["native-details"] = &nativeStatus.NativeDetails
    return children
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = nativeStatus.IsValid
    return leafs
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetBundleName() string { return "cisco_ios_xr" }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetYangName() string { return "native-status" }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) SetParent(parent types.Entity) { nativeStatus.parent = parent }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetParent() types.Entity { return nativeStatus.parent }

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetParentYangName() string { return "ipv4-route" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup.
    Backup []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetFilter() yfilter.YFilter { return nativeDetails.YFilter }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) SetFilter(yf yfilter.YFilter) { nativeDetails.YFilter = yf }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    if yname == "primary" { return "Primary" }
    if yname == "backup" { return "Backup" }
    return ""
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetSegmentPath() string {
    return "native-details"
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "primary" {
        return &nativeDetails.Primary
    }
    if childYangName == "backup" {
        for _, c := range nativeDetails.Backup {
            if nativeDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup{}
        nativeDetails.Backup = append(nativeDetails.Backup, child)
        return &nativeDetails.Backup[len(nativeDetails.Backup)-1]
    }
    return nil
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["primary"] = &nativeDetails.Primary
    for i := range nativeDetails.Backup {
        children[nativeDetails.Backup[i].GetSegmentPath()] = &nativeDetails.Backup[i]
    }
    return children
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority"] = nativeDetails.Priority
    return leafs
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetBundleName() string { return "cisco_ios_xr" }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetYangName() string { return "native-details" }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) SetParent(parent types.Entity) { nativeDetails.parent = parent }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetParent() types.Entity { return nativeDetails.parent }

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetParentYangName() string { return "native-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetFilter() yfilter.YFilter { return primary.YFilter }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) SetFilter(yf yfilter.YFilter) { primary.YFilter = yf }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetGoName(yname string) string {
    if yname == "origin" { return "Origin" }
    if yname == "metric" { return "Metric" }
    if yname == "multicast-metric" { return "MulticastMetric" }
    if yname == "is-external-metric" { return "IsExternalMetric" }
    if yname == "administrative-distance" { return "AdministrativeDistance" }
    if yname == "paths" { return "Paths" }
    if yname == "ucmp-next-hop" { return "UcmpNextHop" }
    if yname == "multicast-path" { return "MulticastPath" }
    if yname == "srte-path" { return "SrtePath" }
    if yname == "explicit-path" { return "ExplicitPath" }
    if yname == "source" { return "Source" }
    if yname == "multicast-source" { return "MulticastSource" }
    return ""
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetSegmentPath() string {
    return "primary"
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "paths" {
        for _, c := range primary.Paths {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths{}
        primary.Paths = append(primary.Paths, child)
        return &primary.Paths[len(primary.Paths)-1]
    }
    if childYangName == "ucmp-next-hop" {
        for _, c := range primary.UcmpNextHop {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop{}
        primary.UcmpNextHop = append(primary.UcmpNextHop, child)
        return &primary.UcmpNextHop[len(primary.UcmpNextHop)-1]
    }
    if childYangName == "multicast-path" {
        for _, c := range primary.MulticastPath {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath{}
        primary.MulticastPath = append(primary.MulticastPath, child)
        return &primary.MulticastPath[len(primary.MulticastPath)-1]
    }
    if childYangName == "srte-path" {
        for _, c := range primary.SrtePath {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath{}
        primary.SrtePath = append(primary.SrtePath, child)
        return &primary.SrtePath[len(primary.SrtePath)-1]
    }
    if childYangName == "explicit-path" {
        for _, c := range primary.ExplicitPath {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath{}
        primary.ExplicitPath = append(primary.ExplicitPath, child)
        return &primary.ExplicitPath[len(primary.ExplicitPath)-1]
    }
    if childYangName == "source" {
        for _, c := range primary.Source {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source{}
        primary.Source = append(primary.Source, child)
        return &primary.Source[len(primary.Source)-1]
    }
    if childYangName == "multicast-source" {
        for _, c := range primary.MulticastSource {
            if primary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource{}
        primary.MulticastSource = append(primary.MulticastSource, child)
        return &primary.MulticastSource[len(primary.MulticastSource)-1]
    }
    return nil
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range primary.Paths {
        children[primary.Paths[i].GetSegmentPath()] = &primary.Paths[i]
    }
    for i := range primary.UcmpNextHop {
        children[primary.UcmpNextHop[i].GetSegmentPath()] = &primary.UcmpNextHop[i]
    }
    for i := range primary.MulticastPath {
        children[primary.MulticastPath[i].GetSegmentPath()] = &primary.MulticastPath[i]
    }
    for i := range primary.SrtePath {
        children[primary.SrtePath[i].GetSegmentPath()] = &primary.SrtePath[i]
    }
    for i := range primary.ExplicitPath {
        children[primary.ExplicitPath[i].GetSegmentPath()] = &primary.ExplicitPath[i]
    }
    for i := range primary.Source {
        children[primary.Source[i].GetSegmentPath()] = &primary.Source[i]
    }
    for i := range primary.MulticastSource {
        children[primary.MulticastSource[i].GetSegmentPath()] = &primary.MulticastSource[i]
    }
    return children
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["origin"] = primary.Origin
    leafs["metric"] = primary.Metric
    leafs["multicast-metric"] = primary.MulticastMetric
    leafs["is-external-metric"] = primary.IsExternalMetric
    leafs["administrative-distance"] = primary.AdministrativeDistance
    return leafs
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetBundleName() string { return "cisco_ios_xr" }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetYangName() string { return "primary" }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) SetParent(parent types.Entity) { primary.parent = parent }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetParent() types.Entity { return primary.parent }

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetParentYangName() string { return "native-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetFilter() yfilter.YFilter { return paths.YFilter }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) SetFilter(yf yfilter.YFilter) { paths.YFilter = yf }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetSegmentPath() string {
    return "paths"
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &paths.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range paths.UloopExplicit {
            if paths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit{}
        paths.UloopExplicit = append(paths.UloopExplicit, child)
        return &paths.UloopExplicit[len(paths.UloopExplicit)-1]
    }
    return nil
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &paths.FrrBackup
    for i := range paths.UloopExplicit {
        children[paths.UloopExplicit[i].GetSegmentPath()] = &paths.UloopExplicit[i]
    }
    return children
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = paths.NeighborId
    leafs["egress-interface"] = paths.EgressInterface
    leafs["neighbor-address"] = paths.NeighborAddress
    leafs["neighbor-snpa"] = paths.NeighborSnpa
    leafs["tag"] = paths.Tag
    leafs["tunnel-interface"] = paths.TunnelInterface
    leafs["segment-routing-sid-value"] = paths.SegmentRoutingSidValue
    leafs["weight"] = paths.Weight
    leafs["is-te-tunnel-interface"] = paths.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = paths.IsSrExcludeTunnelInterface
    return leafs
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetBundleName() string { return "cisco_ios_xr" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetYangName() string { return "paths" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) SetParent(parent types.Entity) { paths.parent = parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetParent() types.Entity { return paths.parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetFilter() yfilter.YFilter { return ucmpNextHop.YFilter }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) SetFilter(yf yfilter.YFilter) { ucmpNextHop.YFilter = yf }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "total-ucmp-distance" { return "TotalUcmpDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    return ""
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetSegmentPath() string {
    return "ucmp-next-hop"
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &ucmpNextHop.FrrBackup
    }
    return nil
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &ucmpNextHop.FrrBackup
    return children
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = ucmpNextHop.NeighborId
    leafs["egress-interface"] = ucmpNextHop.EgressInterface
    leafs["neighbor-address"] = ucmpNextHop.NeighborAddress
    leafs["neighbor-snpa"] = ucmpNextHop.NeighborSnpa
    leafs["tag"] = ucmpNextHop.Tag
    leafs["total-ucmp-distance"] = ucmpNextHop.TotalUcmpDistance
    leafs["segment-routing-sid-value"] = ucmpNextHop.SegmentRoutingSidValue
    leafs["weight"] = ucmpNextHop.Weight
    leafs["is-te-tunnel-interface"] = ucmpNextHop.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = ucmpNextHop.IsSrExcludeTunnelInterface
    return leafs
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetBundleName() string { return "cisco_ios_xr" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetYangName() string { return "ucmp-next-hop" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) SetParent(parent types.Entity) { ucmpNextHop.parent = parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetParent() types.Entity { return ucmpNextHop.parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetParentYangName() string { return "ucmp-next-hop" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetFilter() yfilter.YFilter { return multicastPath.YFilter }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) SetFilter(yf yfilter.YFilter) { multicastPath.YFilter = yf }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetSegmentPath() string {
    return "multicast-path"
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &multicastPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range multicastPath.UloopExplicit {
            if multicastPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit{}
        multicastPath.UloopExplicit = append(multicastPath.UloopExplicit, child)
        return &multicastPath.UloopExplicit[len(multicastPath.UloopExplicit)-1]
    }
    return nil
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &multicastPath.FrrBackup
    for i := range multicastPath.UloopExplicit {
        children[multicastPath.UloopExplicit[i].GetSegmentPath()] = &multicastPath.UloopExplicit[i]
    }
    return children
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = multicastPath.NeighborId
    leafs["egress-interface"] = multicastPath.EgressInterface
    leafs["neighbor-address"] = multicastPath.NeighborAddress
    leafs["neighbor-snpa"] = multicastPath.NeighborSnpa
    leafs["tag"] = multicastPath.Tag
    leafs["tunnel-interface"] = multicastPath.TunnelInterface
    leafs["segment-routing-sid-value"] = multicastPath.SegmentRoutingSidValue
    leafs["weight"] = multicastPath.Weight
    leafs["is-te-tunnel-interface"] = multicastPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = multicastPath.IsSrExcludeTunnelInterface
    return leafs
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetBundleName() string { return "cisco_ios_xr" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetYangName() string { return "multicast-path" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) SetParent(parent types.Entity) { multicastPath.parent = parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetParent() types.Entity { return multicastPath.parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetFilter() yfilter.YFilter { return srtePath.YFilter }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) SetFilter(yf yfilter.YFilter) { srtePath.YFilter = yf }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetSegmentPath() string {
    return "srte-path"
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &srtePath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range srtePath.UloopExplicit {
            if srtePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit{}
        srtePath.UloopExplicit = append(srtePath.UloopExplicit, child)
        return &srtePath.UloopExplicit[len(srtePath.UloopExplicit)-1]
    }
    return nil
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &srtePath.FrrBackup
    for i := range srtePath.UloopExplicit {
        children[srtePath.UloopExplicit[i].GetSegmentPath()] = &srtePath.UloopExplicit[i]
    }
    return children
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = srtePath.NeighborId
    leafs["egress-interface"] = srtePath.EgressInterface
    leafs["neighbor-address"] = srtePath.NeighborAddress
    leafs["neighbor-snpa"] = srtePath.NeighborSnpa
    leafs["tag"] = srtePath.Tag
    leafs["tunnel-interface"] = srtePath.TunnelInterface
    leafs["segment-routing-sid-value"] = srtePath.SegmentRoutingSidValue
    leafs["weight"] = srtePath.Weight
    leafs["is-te-tunnel-interface"] = srtePath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = srtePath.IsSrExcludeTunnelInterface
    return leafs
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetBundleName() string { return "cisco_ios_xr" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetYangName() string { return "srte-path" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) SetParent(parent types.Entity) { srtePath.parent = parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetParent() types.Entity { return srtePath.parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetFilter() yfilter.YFilter { return explicitPath.YFilter }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) SetFilter(yf yfilter.YFilter) { explicitPath.YFilter = yf }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetSegmentPath() string {
    return "explicit-path"
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &explicitPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range explicitPath.UloopExplicit {
            if explicitPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit{}
        explicitPath.UloopExplicit = append(explicitPath.UloopExplicit, child)
        return &explicitPath.UloopExplicit[len(explicitPath.UloopExplicit)-1]
    }
    return nil
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &explicitPath.FrrBackup
    for i := range explicitPath.UloopExplicit {
        children[explicitPath.UloopExplicit[i].GetSegmentPath()] = &explicitPath.UloopExplicit[i]
    }
    return children
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = explicitPath.NeighborId
    leafs["egress-interface"] = explicitPath.EgressInterface
    leafs["neighbor-address"] = explicitPath.NeighborAddress
    leafs["neighbor-snpa"] = explicitPath.NeighborSnpa
    leafs["tag"] = explicitPath.Tag
    leafs["tunnel-interface"] = explicitPath.TunnelInterface
    leafs["segment-routing-sid-value"] = explicitPath.SegmentRoutingSidValue
    leafs["weight"] = explicitPath.Weight
    leafs["is-te-tunnel-interface"] = explicitPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = explicitPath.IsSrExcludeTunnelInterface
    return leafs
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetBundleName() string { return "cisco_ios_xr" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetYangName() string { return "explicit-path" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) SetParent(parent types.Entity) { explicitPath.parent = parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetParent() types.Entity { return explicitPath.parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetSegmentPath() string {
    return "source"
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range source.Tags {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags{}
        source.Tags = append(source.Tags, child)
        return &source.Tags[len(source.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range source.NodalSid {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid{}
        source.NodalSid = append(source.NodalSid, child)
        return &source.NodalSid[len(source.NodalSid)-1]
    }
    return nil
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range source.Tags {
        children[source.Tags[i].GetSegmentPath()] = &source.Tags[i]
    }
    for i := range source.NodalSid {
        children[source.NodalSid[i].GetSegmentPath()] = &source.NodalSid[i]
    }
    return children
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = source.SourceLspId
    leafs["source-address"] = source.SourceAddress
    return leafs
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetYangName() string { return "source" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetParent() types.Entity { return source.parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetFilter() yfilter.YFilter { return multicastSource.YFilter }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) SetFilter(yf yfilter.YFilter) { multicastSource.YFilter = yf }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetSegmentPath() string {
    return "multicast-source"
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range multicastSource.Tags {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags{}
        multicastSource.Tags = append(multicastSource.Tags, child)
        return &multicastSource.Tags[len(multicastSource.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range multicastSource.NodalSid {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid{}
        multicastSource.NodalSid = append(multicastSource.NodalSid, child)
        return &multicastSource.NodalSid[len(multicastSource.NodalSid)-1]
    }
    return nil
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range multicastSource.Tags {
        children[multicastSource.Tags[i].GetSegmentPath()] = &multicastSource.Tags[i]
    }
    for i := range multicastSource.NodalSid {
        children[multicastSource.NodalSid[i].GetSegmentPath()] = &multicastSource.NodalSid[i]
    }
    return children
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = multicastSource.SourceLspId
    leafs["source-address"] = multicastSource.SourceAddress
    return leafs
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetBundleName() string { return "cisco_ios_xr" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetYangName() string { return "multicast-source" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) SetParent(parent types.Entity) { multicastSource.parent = parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetParent() types.Entity { return multicastSource.parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetParentYangName() string { return "primary" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetFilter() yfilter.YFilter { return backup.YFilter }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) SetFilter(yf yfilter.YFilter) { backup.YFilter = yf }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetGoName(yname string) string {
    if yname == "origin" { return "Origin" }
    if yname == "metric" { return "Metric" }
    if yname == "multicast-metric" { return "MulticastMetric" }
    if yname == "is-external-metric" { return "IsExternalMetric" }
    if yname == "administrative-distance" { return "AdministrativeDistance" }
    if yname == "paths" { return "Paths" }
    if yname == "ucmp-next-hop" { return "UcmpNextHop" }
    if yname == "multicast-path" { return "MulticastPath" }
    if yname == "srte-path" { return "SrtePath" }
    if yname == "explicit-path" { return "ExplicitPath" }
    if yname == "source" { return "Source" }
    if yname == "multicast-source" { return "MulticastSource" }
    return ""
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetSegmentPath() string {
    return "backup"
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "paths" {
        for _, c := range backup.Paths {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths{}
        backup.Paths = append(backup.Paths, child)
        return &backup.Paths[len(backup.Paths)-1]
    }
    if childYangName == "ucmp-next-hop" {
        for _, c := range backup.UcmpNextHop {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop{}
        backup.UcmpNextHop = append(backup.UcmpNextHop, child)
        return &backup.UcmpNextHop[len(backup.UcmpNextHop)-1]
    }
    if childYangName == "multicast-path" {
        for _, c := range backup.MulticastPath {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath{}
        backup.MulticastPath = append(backup.MulticastPath, child)
        return &backup.MulticastPath[len(backup.MulticastPath)-1]
    }
    if childYangName == "srte-path" {
        for _, c := range backup.SrtePath {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath{}
        backup.SrtePath = append(backup.SrtePath, child)
        return &backup.SrtePath[len(backup.SrtePath)-1]
    }
    if childYangName == "explicit-path" {
        for _, c := range backup.ExplicitPath {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath{}
        backup.ExplicitPath = append(backup.ExplicitPath, child)
        return &backup.ExplicitPath[len(backup.ExplicitPath)-1]
    }
    if childYangName == "source" {
        for _, c := range backup.Source {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source{}
        backup.Source = append(backup.Source, child)
        return &backup.Source[len(backup.Source)-1]
    }
    if childYangName == "multicast-source" {
        for _, c := range backup.MulticastSource {
            if backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource{}
        backup.MulticastSource = append(backup.MulticastSource, child)
        return &backup.MulticastSource[len(backup.MulticastSource)-1]
    }
    return nil
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range backup.Paths {
        children[backup.Paths[i].GetSegmentPath()] = &backup.Paths[i]
    }
    for i := range backup.UcmpNextHop {
        children[backup.UcmpNextHop[i].GetSegmentPath()] = &backup.UcmpNextHop[i]
    }
    for i := range backup.MulticastPath {
        children[backup.MulticastPath[i].GetSegmentPath()] = &backup.MulticastPath[i]
    }
    for i := range backup.SrtePath {
        children[backup.SrtePath[i].GetSegmentPath()] = &backup.SrtePath[i]
    }
    for i := range backup.ExplicitPath {
        children[backup.ExplicitPath[i].GetSegmentPath()] = &backup.ExplicitPath[i]
    }
    for i := range backup.Source {
        children[backup.Source[i].GetSegmentPath()] = &backup.Source[i]
    }
    for i := range backup.MulticastSource {
        children[backup.MulticastSource[i].GetSegmentPath()] = &backup.MulticastSource[i]
    }
    return children
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["origin"] = backup.Origin
    leafs["metric"] = backup.Metric
    leafs["multicast-metric"] = backup.MulticastMetric
    leafs["is-external-metric"] = backup.IsExternalMetric
    leafs["administrative-distance"] = backup.AdministrativeDistance
    return leafs
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetBundleName() string { return "cisco_ios_xr" }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetYangName() string { return "backup" }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) SetParent(parent types.Entity) { backup.parent = parent }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetParent() types.Entity { return backup.parent }

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetParentYangName() string { return "native-details" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetFilter() yfilter.YFilter { return paths.YFilter }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) SetFilter(yf yfilter.YFilter) { paths.YFilter = yf }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetSegmentPath() string {
    return "paths"
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &paths.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range paths.UloopExplicit {
            if paths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit{}
        paths.UloopExplicit = append(paths.UloopExplicit, child)
        return &paths.UloopExplicit[len(paths.UloopExplicit)-1]
    }
    return nil
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &paths.FrrBackup
    for i := range paths.UloopExplicit {
        children[paths.UloopExplicit[i].GetSegmentPath()] = &paths.UloopExplicit[i]
    }
    return children
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = paths.NeighborId
    leafs["egress-interface"] = paths.EgressInterface
    leafs["neighbor-address"] = paths.NeighborAddress
    leafs["neighbor-snpa"] = paths.NeighborSnpa
    leafs["tag"] = paths.Tag
    leafs["tunnel-interface"] = paths.TunnelInterface
    leafs["segment-routing-sid-value"] = paths.SegmentRoutingSidValue
    leafs["weight"] = paths.Weight
    leafs["is-te-tunnel-interface"] = paths.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = paths.IsSrExcludeTunnelInterface
    return leafs
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetBundleName() string { return "cisco_ios_xr" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetYangName() string { return "paths" }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) SetParent(parent types.Entity) { paths.parent = parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetParent() types.Entity { return paths.parent }

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetParentYangName() string { return "paths" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetFilter() yfilter.YFilter { return ucmpNextHop.YFilter }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) SetFilter(yf yfilter.YFilter) { ucmpNextHop.YFilter = yf }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "total-ucmp-distance" { return "TotalUcmpDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    return ""
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetSegmentPath() string {
    return "ucmp-next-hop"
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &ucmpNextHop.FrrBackup
    }
    return nil
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &ucmpNextHop.FrrBackup
    return children
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = ucmpNextHop.NeighborId
    leafs["egress-interface"] = ucmpNextHop.EgressInterface
    leafs["neighbor-address"] = ucmpNextHop.NeighborAddress
    leafs["neighbor-snpa"] = ucmpNextHop.NeighborSnpa
    leafs["tag"] = ucmpNextHop.Tag
    leafs["total-ucmp-distance"] = ucmpNextHop.TotalUcmpDistance
    leafs["segment-routing-sid-value"] = ucmpNextHop.SegmentRoutingSidValue
    leafs["weight"] = ucmpNextHop.Weight
    leafs["is-te-tunnel-interface"] = ucmpNextHop.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = ucmpNextHop.IsSrExcludeTunnelInterface
    return leafs
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetBundleName() string { return "cisco_ios_xr" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetYangName() string { return "ucmp-next-hop" }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) SetParent(parent types.Entity) { ucmpNextHop.parent = parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetParent() types.Entity { return ucmpNextHop.parent }

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetParentYangName() string { return "ucmp-next-hop" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetFilter() yfilter.YFilter { return multicastPath.YFilter }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) SetFilter(yf yfilter.YFilter) { multicastPath.YFilter = yf }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetSegmentPath() string {
    return "multicast-path"
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &multicastPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range multicastPath.UloopExplicit {
            if multicastPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit{}
        multicastPath.UloopExplicit = append(multicastPath.UloopExplicit, child)
        return &multicastPath.UloopExplicit[len(multicastPath.UloopExplicit)-1]
    }
    return nil
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &multicastPath.FrrBackup
    for i := range multicastPath.UloopExplicit {
        children[multicastPath.UloopExplicit[i].GetSegmentPath()] = &multicastPath.UloopExplicit[i]
    }
    return children
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = multicastPath.NeighborId
    leafs["egress-interface"] = multicastPath.EgressInterface
    leafs["neighbor-address"] = multicastPath.NeighborAddress
    leafs["neighbor-snpa"] = multicastPath.NeighborSnpa
    leafs["tag"] = multicastPath.Tag
    leafs["tunnel-interface"] = multicastPath.TunnelInterface
    leafs["segment-routing-sid-value"] = multicastPath.SegmentRoutingSidValue
    leafs["weight"] = multicastPath.Weight
    leafs["is-te-tunnel-interface"] = multicastPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = multicastPath.IsSrExcludeTunnelInterface
    return leafs
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetBundleName() string { return "cisco_ios_xr" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetYangName() string { return "multicast-path" }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) SetParent(parent types.Entity) { multicastPath.parent = parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetParent() types.Entity { return multicastPath.parent }

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetParentYangName() string { return "multicast-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetFilter() yfilter.YFilter { return srtePath.YFilter }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) SetFilter(yf yfilter.YFilter) { srtePath.YFilter = yf }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetSegmentPath() string {
    return "srte-path"
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &srtePath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range srtePath.UloopExplicit {
            if srtePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit{}
        srtePath.UloopExplicit = append(srtePath.UloopExplicit, child)
        return &srtePath.UloopExplicit[len(srtePath.UloopExplicit)-1]
    }
    return nil
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &srtePath.FrrBackup
    for i := range srtePath.UloopExplicit {
        children[srtePath.UloopExplicit[i].GetSegmentPath()] = &srtePath.UloopExplicit[i]
    }
    return children
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = srtePath.NeighborId
    leafs["egress-interface"] = srtePath.EgressInterface
    leafs["neighbor-address"] = srtePath.NeighborAddress
    leafs["neighbor-snpa"] = srtePath.NeighborSnpa
    leafs["tag"] = srtePath.Tag
    leafs["tunnel-interface"] = srtePath.TunnelInterface
    leafs["segment-routing-sid-value"] = srtePath.SegmentRoutingSidValue
    leafs["weight"] = srtePath.Weight
    leafs["is-te-tunnel-interface"] = srtePath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = srtePath.IsSrExcludeTunnelInterface
    return leafs
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetBundleName() string { return "cisco_ios_xr" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetYangName() string { return "srte-path" }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) SetParent(parent types.Entity) { srtePath.parent = parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetParent() types.Entity { return srtePath.parent }

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetParentYangName() string { return "srte-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetFilter() yfilter.YFilter { return explicitPath.YFilter }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) SetFilter(yf yfilter.YFilter) { explicitPath.YFilter = yf }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "tag" { return "Tag" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "weight" { return "Weight" }
    if yname == "is-te-tunnel-interface" { return "IsTeTunnelInterface" }
    if yname == "is-sr-exclude-tunnel-interface" { return "IsSrExcludeTunnelInterface" }
    if yname == "frr-backup" { return "FrrBackup" }
    if yname == "uloop-explicit" { return "UloopExplicit" }
    return ""
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetSegmentPath() string {
    return "explicit-path"
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-backup" {
        return &explicitPath.FrrBackup
    }
    if childYangName == "uloop-explicit" {
        for _, c := range explicitPath.UloopExplicit {
            if explicitPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit{}
        explicitPath.UloopExplicit = append(explicitPath.UloopExplicit, child)
        return &explicitPath.UloopExplicit[len(explicitPath.UloopExplicit)-1]
    }
    return nil
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-backup"] = &explicitPath.FrrBackup
    for i := range explicitPath.UloopExplicit {
        children[explicitPath.UloopExplicit[i].GetSegmentPath()] = &explicitPath.UloopExplicit[i]
    }
    return children
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = explicitPath.NeighborId
    leafs["egress-interface"] = explicitPath.EgressInterface
    leafs["neighbor-address"] = explicitPath.NeighborAddress
    leafs["neighbor-snpa"] = explicitPath.NeighborSnpa
    leafs["tag"] = explicitPath.Tag
    leafs["tunnel-interface"] = explicitPath.TunnelInterface
    leafs["segment-routing-sid-value"] = explicitPath.SegmentRoutingSidValue
    leafs["weight"] = explicitPath.Weight
    leafs["is-te-tunnel-interface"] = explicitPath.IsTeTunnelInterface
    leafs["is-sr-exclude-tunnel-interface"] = explicitPath.IsSrExcludeTunnelInterface
    return leafs
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetBundleName() string { return "cisco_ios_xr" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetYangName() string { return "explicit-path" }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) SetParent(parent types.Entity) { explicitPath.parent = parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetParent() types.Entity { return explicitPath.parent }

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetFilter() yfilter.YFilter { return frrBackup.YFilter }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) SetFilter(yf yfilter.YFilter) { frrBackup.YFilter = yf }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetGoName(yname string) string {
    if yname == "neighbor-id" { return "NeighborId" }
    if yname == "egress-interface" { return "EgressInterface" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "tunnel-egress-interface" { return "TunnelEgressInterface" }
    if yname == "neighbor-snpa" { return "NeighborSnpa" }
    if yname == "remote-lfa-system-id" { return "RemoteLfaSystemId" }
    if yname == "remote-lfa-router-id" { return "RemoteLfaRouterId" }
    if yname == "remote-lfa-system-pid" { return "RemoteLfaSystemPid" }
    if yname == "remote-lfa-router-pid" { return "RemoteLfaRouterPid" }
    if yname == "total-backup-distance" { return "TotalBackupDistance" }
    if yname == "segment-routing-sid-value" { return "SegmentRoutingSidValue" }
    if yname == "num-sid" { return "NumSid" }
    if yname == "backup-repair-list-size" { return "BackupRepairListSize" }
    if yname == "tilfa-computation" { return "TilfaComputation" }
    if yname == "prefix-source-node-id" { return "PrefixSourceNodeId" }
    if yname == "is-downstream" { return "IsDownstream" }
    if yname == "is-lc-disjoint" { return "IsLcDisjoint" }
    if yname == "is-node-protecting" { return "IsNodeProtecting" }
    if yname == "is-primary-path" { return "IsPrimaryPath" }
    if yname == "is-srlg-disjoint" { return "IsSrlgDisjoint" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-epcfrr-lfa" { return "IsEpcfrrLfa" }
    if yname == "is-strict-spflfa" { return "IsStrictSpflfa" }
    if yname == "is-tunnel-requested" { return "IsTunnelRequested" }
    if yname == "weight" { return "Weight" }
    if yname == "segment-routing-sid-value-entry" { return "SegmentRoutingSidValueEntry" }
    if yname == "backup-repair" { return "BackupRepair" }
    return ""
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetSegmentPath() string {
    return "frr-backup"
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-sid-value-entry" {
        for _, c := range frrBackup.SegmentRoutingSidValueEntry {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry{}
        frrBackup.SegmentRoutingSidValueEntry = append(frrBackup.SegmentRoutingSidValueEntry, child)
        return &frrBackup.SegmentRoutingSidValueEntry[len(frrBackup.SegmentRoutingSidValueEntry)-1]
    }
    if childYangName == "backup-repair" {
        for _, c := range frrBackup.BackupRepair {
            if frrBackup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair{}
        frrBackup.BackupRepair = append(frrBackup.BackupRepair, child)
        return &frrBackup.BackupRepair[len(frrBackup.BackupRepair)-1]
    }
    return nil
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        children[frrBackup.SegmentRoutingSidValueEntry[i].GetSegmentPath()] = &frrBackup.SegmentRoutingSidValueEntry[i]
    }
    for i := range frrBackup.BackupRepair {
        children[frrBackup.BackupRepair[i].GetSegmentPath()] = &frrBackup.BackupRepair[i]
    }
    return children
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-id"] = frrBackup.NeighborId
    leafs["egress-interface"] = frrBackup.EgressInterface
    leafs["neighbor-address"] = frrBackup.NeighborAddress
    leafs["tunnel-egress-interface"] = frrBackup.TunnelEgressInterface
    leafs["neighbor-snpa"] = frrBackup.NeighborSnpa
    leafs["remote-lfa-system-id"] = frrBackup.RemoteLfaSystemId
    leafs["remote-lfa-router-id"] = frrBackup.RemoteLfaRouterId
    leafs["remote-lfa-system-pid"] = frrBackup.RemoteLfaSystemPid
    leafs["remote-lfa-router-pid"] = frrBackup.RemoteLfaRouterPid
    leafs["total-backup-distance"] = frrBackup.TotalBackupDistance
    leafs["segment-routing-sid-value"] = frrBackup.SegmentRoutingSidValue
    leafs["num-sid"] = frrBackup.NumSid
    leafs["backup-repair-list-size"] = frrBackup.BackupRepairListSize
    leafs["tilfa-computation"] = frrBackup.TilfaComputation
    leafs["prefix-source-node-id"] = frrBackup.PrefixSourceNodeId
    leafs["is-downstream"] = frrBackup.IsDownstream
    leafs["is-lc-disjoint"] = frrBackup.IsLcDisjoint
    leafs["is-node-protecting"] = frrBackup.IsNodeProtecting
    leafs["is-primary-path"] = frrBackup.IsPrimaryPath
    leafs["is-srlg-disjoint"] = frrBackup.IsSrlgDisjoint
    leafs["is-remote-lfa"] = frrBackup.IsRemoteLfa
    leafs["is-epcfrr-lfa"] = frrBackup.IsEpcfrrLfa
    leafs["is-strict-spflfa"] = frrBackup.IsStrictSpflfa
    leafs["is-tunnel-requested"] = frrBackup.IsTunnelRequested
    leafs["weight"] = frrBackup.Weight
    return leafs
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetBundleName() string { return "cisco_ios_xr" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetYangName() string { return "frr-backup" }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) SetParent(parent types.Entity) { frrBackup.parent = parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetParent() types.Entity { return frrBackup.parent }

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetFilter() yfilter.YFilter { return segmentRoutingSidValueEntry.YFilter }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetFilter(yf yfilter.YFilter) { segmentRoutingSidValueEntry.YFilter = yf }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetSegmentPath() string {
    return "segment-routing-sid-value-entry"
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = segmentRoutingSidValueEntry.Entry
    return leafs
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetYangName() string { return "segment-routing-sid-value-entry" }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) SetParent(parent types.Entity) { segmentRoutingSidValueEntry.parent = parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParent() types.Entity { return segmentRoutingSidValueEntry.parent }

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetFilter() yfilter.YFilter { return backupRepair.YFilter }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) SetFilter(yf yfilter.YFilter) { backupRepair.YFilter = yf }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetSegmentPath() string {
    return "backup-repair"
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = backupRepair.RepairElementNodeId
    leafs["repair-ipv4-addr"] = backupRepair.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = backupRepair.RepairIpv6Addr
    leafs["repair-label"] = backupRepair.RepairLabel
    leafs["repair-element-type"] = backupRepair.RepairElementType
    leafs["repair-strict-spf-label"] = backupRepair.RepairStrictSpfLabel
    return leafs
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetBundleName() string { return "cisco_ios_xr" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetYangName() string { return "backup-repair" }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) SetParent(parent types.Entity) { backupRepair.parent = parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetParent() types.Entity { return backupRepair.parent }

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetParentYangName() string { return "frr-backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetFilter() yfilter.YFilter { return uloopExplicit.YFilter }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) SetFilter(yf yfilter.YFilter) { uloopExplicit.YFilter = yf }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetGoName(yname string) string {
    if yname == "repair-element-node-id" { return "RepairElementNodeId" }
    if yname == "repair-ipv4-addr" { return "RepairIpv4Addr" }
    if yname == "repair-ipv6-addr" { return "RepairIpv6Addr" }
    if yname == "repair-label" { return "RepairLabel" }
    if yname == "repair-element-type" { return "RepairElementType" }
    if yname == "repair-strict-spf-label" { return "RepairStrictSpfLabel" }
    return ""
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetSegmentPath() string {
    return "uloop-explicit"
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["repair-element-node-id"] = uloopExplicit.RepairElementNodeId
    leafs["repair-ipv4-addr"] = uloopExplicit.RepairIpv4Addr
    leafs["repair-ipv6-addr"] = uloopExplicit.RepairIpv6Addr
    leafs["repair-label"] = uloopExplicit.RepairLabel
    leafs["repair-element-type"] = uloopExplicit.RepairElementType
    leafs["repair-strict-spf-label"] = uloopExplicit.RepairStrictSpfLabel
    return leafs
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetBundleName() string { return "cisco_ios_xr" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetYangName() string { return "uloop-explicit" }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) SetParent(parent types.Entity) { uloopExplicit.parent = parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetParent() types.Entity { return uloopExplicit.parent }

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetParentYangName() string { return "explicit-path" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetSegmentPath() string {
    return "source"
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range source.Tags {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags{}
        source.Tags = append(source.Tags, child)
        return &source.Tags[len(source.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range source.NodalSid {
            if source.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid{}
        source.NodalSid = append(source.NodalSid, child)
        return &source.NodalSid[len(source.NodalSid)-1]
    }
    return nil
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range source.Tags {
        children[source.Tags[i].GetSegmentPath()] = &source.Tags[i]
    }
    for i := range source.NodalSid {
        children[source.NodalSid[i].GetSegmentPath()] = &source.NodalSid[i]
    }
    return children
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = source.SourceLspId
    leafs["source-address"] = source.SourceAddress
    return leafs
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetYangName() string { return "source" }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetParent() types.Entity { return source.parent }

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetParentYangName() string { return "source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetFilter() yfilter.YFilter { return multicastSource.YFilter }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) SetFilter(yf yfilter.YFilter) { multicastSource.YFilter = yf }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetGoName(yname string) string {
    if yname == "source-lsp-id" { return "SourceLspId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetSegmentPath() string {
    return "multicast-source"
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tags" {
        for _, c := range multicastSource.Tags {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags{}
        multicastSource.Tags = append(multicastSource.Tags, child)
        return &multicastSource.Tags[len(multicastSource.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range multicastSource.NodalSid {
            if multicastSource.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid{}
        multicastSource.NodalSid = append(multicastSource.NodalSid, child)
        return &multicastSource.NodalSid[len(multicastSource.NodalSid)-1]
    }
    return nil
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range multicastSource.Tags {
        children[multicastSource.Tags[i].GetSegmentPath()] = &multicastSource.Tags[i]
    }
    for i := range multicastSource.NodalSid {
        children[multicastSource.NodalSid[i].GetSegmentPath()] = &multicastSource.NodalSid[i]
    }
    return children
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-lsp-id"] = multicastSource.SourceLspId
    leafs["source-address"] = multicastSource.SourceAddress
    return leafs
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetBundleName() string { return "cisco_ios_xr" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetYangName() string { return "multicast-source" }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) SetParent(parent types.Entity) { multicastSource.parent = parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetParent() types.Entity { return multicastSource.parent }

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetParentYangName() string { return "backup" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetParentYangName() string { return "multicast-source" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetFilter() yfilter.YFilter { return perLevelAdvertisingDetail.YFilter }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) SetFilter(yf yfilter.YFilter) { perLevelAdvertisingDetail.YFilter = yf }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "advertising-origin" { return "AdvertisingOrigin" }
    if yname == "metric" { return "Metric" }
    if yname == "is-propagated" { return "IsPropagated" }
    if yname == "is-external-metric" { return "IsExternalMetric" }
    if yname == "is-external-reachability" { return "IsExternalReachability" }
    if yname == "is-interarea" { return "IsInterarea" }
    if yname == "summarization-status" { return "SummarizationStatus" }
    if yname == "tags" { return "Tags" }
    if yname == "nodal-sid" { return "NodalSid" }
    return ""
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetSegmentPath() string {
    return "per-level-advertising-detail"
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summarization-status" {
        return &perLevelAdvertisingDetail.SummarizationStatus
    }
    if childYangName == "tags" {
        for _, c := range perLevelAdvertisingDetail.Tags {
            if perLevelAdvertisingDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags{}
        perLevelAdvertisingDetail.Tags = append(perLevelAdvertisingDetail.Tags, child)
        return &perLevelAdvertisingDetail.Tags[len(perLevelAdvertisingDetail.Tags)-1]
    }
    if childYangName == "nodal-sid" {
        for _, c := range perLevelAdvertisingDetail.NodalSid {
            if perLevelAdvertisingDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid{}
        perLevelAdvertisingDetail.NodalSid = append(perLevelAdvertisingDetail.NodalSid, child)
        return &perLevelAdvertisingDetail.NodalSid[len(perLevelAdvertisingDetail.NodalSid)-1]
    }
    return nil
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summarization-status"] = &perLevelAdvertisingDetail.SummarizationStatus
    for i := range perLevelAdvertisingDetail.Tags {
        children[perLevelAdvertisingDetail.Tags[i].GetSegmentPath()] = &perLevelAdvertisingDetail.Tags[i]
    }
    for i := range perLevelAdvertisingDetail.NodalSid {
        children[perLevelAdvertisingDetail.NodalSid[i].GetSegmentPath()] = &perLevelAdvertisingDetail.NodalSid[i]
    }
    return children
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = perLevelAdvertisingDetail.Level
    leafs["advertising-origin"] = perLevelAdvertisingDetail.AdvertisingOrigin
    leafs["metric"] = perLevelAdvertisingDetail.Metric
    leafs["is-propagated"] = perLevelAdvertisingDetail.IsPropagated
    leafs["is-external-metric"] = perLevelAdvertisingDetail.IsExternalMetric
    leafs["is-external-reachability"] = perLevelAdvertisingDetail.IsExternalReachability
    leafs["is-interarea"] = perLevelAdvertisingDetail.IsInterarea
    return leafs
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetBundleName() string { return "cisco_ios_xr" }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetYangName() string { return "per-level-advertising-detail" }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) SetParent(parent types.Entity) { perLevelAdvertisingDetail.parent = parent }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetParent() types.Entity { return perLevelAdvertisingDetail.parent }

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetParentYangName() string { return "ipv4-route" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetFilter() yfilter.YFilter { return summarizationStatus.YFilter }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) SetFilter(yf yfilter.YFilter) { summarizationStatus.YFilter = yf }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "summary-prefix" { return "SummaryPrefix" }
    return ""
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetSegmentPath() string {
    return "summarization-status"
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-prefix" {
        return &summarizationStatus.SummaryPrefix
    }
    return nil
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary-prefix"] = &summarizationStatus.SummaryPrefix
    return children
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = summarizationStatus.IsValid
    return leafs
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetBundleName() string { return "cisco_ios_xr" }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetYangName() string { return "summarization-status" }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) SetParent(parent types.Entity) { summarizationStatus.parent = parent }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetParent() types.Entity { return summarizationStatus.parent }

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetParentYangName() string { return "per-level-advertising-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetFilter() yfilter.YFilter { return summaryPrefix.YFilter }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) SetFilter(yf yfilter.YFilter) { summaryPrefix.YFilter = yf }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetSegmentPath() string {
    return "summary-prefix"
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = summaryPrefix.Prefix
    leafs["prefix-length"] = summaryPrefix.PrefixLength
    return leafs
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetYangName() string { return "summary-prefix" }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) SetParent(parent types.Entity) { summaryPrefix.parent = parent }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetParent() types.Entity { return summaryPrefix.parent }

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetParentYangName() string { return "summarization-status" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetFilter() yfilter.YFilter { return tags.YFilter }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) SetFilter(yf yfilter.YFilter) { tags.YFilter = yf }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetSegmentPath() string {
    return "tags"
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = tags.Entry
    return leafs
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetBundleName() string { return "cisco_ios_xr" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetYangName() string { return "tags" }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) SetParent(parent types.Entity) { tags.parent = parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetParent() types.Entity { return tags.parent }

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetParentYangName() string { return "per-level-advertising-detail" }

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetFilter() yfilter.YFilter { return nodalSid.YFilter }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) SetFilter(yf yfilter.YFilter) { nodalSid.YFilter = yf }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "rflag" { return "Rflag" }
    if yname == "nflag" { return "Nflag" }
    if yname == "pflag" { return "Pflag" }
    if yname == "eflag" { return "Eflag" }
    if yname == "vflag" { return "Vflag" }
    if yname == "lflag" { return "Lflag" }
    if yname == "algorithm" { return "Algorithm" }
    return ""
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetSegmentPath() string {
    return "nodal-sid"
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = nodalSid.SidValue
    leafs["rflag"] = nodalSid.Rflag
    leafs["nflag"] = nodalSid.Nflag
    leafs["pflag"] = nodalSid.Pflag
    leafs["eflag"] = nodalSid.Eflag
    leafs["vflag"] = nodalSid.Vflag
    leafs["lflag"] = nodalSid.Lflag
    leafs["algorithm"] = nodalSid.Algorithm
    return leafs
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetBundleName() string { return "cisco_ios_xr" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetYangName() string { return "nodal-sid" }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) SetParent(parent types.Entity) { nodalSid.parent = parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetParent() types.Entity { return nodalSid.parent }

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetParentYangName() string { return "per-level-advertising-detail" }

// Isis_Instances_Instance_NsrStatus
// NSR Status information
type Isis_Instances_Instance_NsrStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ISIS VM STATE. The type is interface{} with range: 0..65535.
    IsisVmState interface{}

    // ISIS NSR PEER STATUS.
    IsisNsrPeer Isis_Instances_Instance_NsrStatus_IsisNsrPeer

    // ISIS NSR Infra.
    IsisNsrInfra Isis_Instances_Instance_NsrStatus_IsisNsrInfra
}

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetFilter() yfilter.YFilter { return nsrStatus.YFilter }

func (nsrStatus *Isis_Instances_Instance_NsrStatus) SetFilter(yf yfilter.YFilter) { nsrStatus.YFilter = yf }

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetGoName(yname string) string {
    if yname == "isis-vm-state" { return "IsisVmState" }
    if yname == "isis-nsr-peer" { return "IsisNsrPeer" }
    if yname == "isis-nsr-infra" { return "IsisNsrInfra" }
    return ""
}

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetSegmentPath() string {
    return "nsr-status"
}

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "isis-nsr-peer" {
        return &nsrStatus.IsisNsrPeer
    }
    if childYangName == "isis-nsr-infra" {
        return &nsrStatus.IsisNsrInfra
    }
    return nil
}

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["isis-nsr-peer"] = &nsrStatus.IsisNsrPeer
    children["isis-nsr-infra"] = &nsrStatus.IsisNsrInfra
    return children
}

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["isis-vm-state"] = nsrStatus.IsisVmState
    return leafs
}

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetBundleName() string { return "cisco_ios_xr" }

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetYangName() string { return "nsr-status" }

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrStatus *Isis_Instances_Instance_NsrStatus) SetParent(parent types.Entity) { nsrStatus.parent = parent }

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetParent() types.Entity { return nsrStatus.parent }

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer
// ISIS NSR PEER STATUS
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // full sync achieved. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved.
    FullSyncAchieved []Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved

    // man sync count. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount.
    ManSyncCount []Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount

    // nsr chg count. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount.
    NsrChgCount []Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount

    // uptime. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime.
    Uptime []Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime

    // uptime valid. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid.
    UptimeValid []Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid
}

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetFilter() yfilter.YFilter { return isisNsrPeer.YFilter }

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) SetFilter(yf yfilter.YFilter) { isisNsrPeer.YFilter = yf }

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetGoName(yname string) string {
    if yname == "full-sync-achieved" { return "FullSyncAchieved" }
    if yname == "man-sync-count" { return "ManSyncCount" }
    if yname == "nsr-chg-count" { return "NsrChgCount" }
    if yname == "uptime" { return "Uptime" }
    if yname == "uptime-valid" { return "UptimeValid" }
    return ""
}

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetSegmentPath() string {
    return "isis-nsr-peer"
}

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "full-sync-achieved" {
        for _, c := range isisNsrPeer.FullSyncAchieved {
            if isisNsrPeer.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved{}
        isisNsrPeer.FullSyncAchieved = append(isisNsrPeer.FullSyncAchieved, child)
        return &isisNsrPeer.FullSyncAchieved[len(isisNsrPeer.FullSyncAchieved)-1]
    }
    if childYangName == "man-sync-count" {
        for _, c := range isisNsrPeer.ManSyncCount {
            if isisNsrPeer.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount{}
        isisNsrPeer.ManSyncCount = append(isisNsrPeer.ManSyncCount, child)
        return &isisNsrPeer.ManSyncCount[len(isisNsrPeer.ManSyncCount)-1]
    }
    if childYangName == "nsr-chg-count" {
        for _, c := range isisNsrPeer.NsrChgCount {
            if isisNsrPeer.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount{}
        isisNsrPeer.NsrChgCount = append(isisNsrPeer.NsrChgCount, child)
        return &isisNsrPeer.NsrChgCount[len(isisNsrPeer.NsrChgCount)-1]
    }
    if childYangName == "uptime" {
        for _, c := range isisNsrPeer.Uptime {
            if isisNsrPeer.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime{}
        isisNsrPeer.Uptime = append(isisNsrPeer.Uptime, child)
        return &isisNsrPeer.Uptime[len(isisNsrPeer.Uptime)-1]
    }
    if childYangName == "uptime-valid" {
        for _, c := range isisNsrPeer.UptimeValid {
            if isisNsrPeer.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid{}
        isisNsrPeer.UptimeValid = append(isisNsrPeer.UptimeValid, child)
        return &isisNsrPeer.UptimeValid[len(isisNsrPeer.UptimeValid)-1]
    }
    return nil
}

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range isisNsrPeer.FullSyncAchieved {
        children[isisNsrPeer.FullSyncAchieved[i].GetSegmentPath()] = &isisNsrPeer.FullSyncAchieved[i]
    }
    for i := range isisNsrPeer.ManSyncCount {
        children[isisNsrPeer.ManSyncCount[i].GetSegmentPath()] = &isisNsrPeer.ManSyncCount[i]
    }
    for i := range isisNsrPeer.NsrChgCount {
        children[isisNsrPeer.NsrChgCount[i].GetSegmentPath()] = &isisNsrPeer.NsrChgCount[i]
    }
    for i := range isisNsrPeer.Uptime {
        children[isisNsrPeer.Uptime[i].GetSegmentPath()] = &isisNsrPeer.Uptime[i]
    }
    for i := range isisNsrPeer.UptimeValid {
        children[isisNsrPeer.UptimeValid[i].GetSegmentPath()] = &isisNsrPeer.UptimeValid[i]
    }
    return children
}

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetBundleName() string { return "cisco_ios_xr" }

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetYangName() string { return "isis-nsr-peer" }

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) SetParent(parent types.Entity) { isisNsrPeer.parent = parent }

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetParent() types.Entity { return isisNsrPeer.parent }

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetParentYangName() string { return "nsr-status" }

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved
// full sync achieved
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetFilter() yfilter.YFilter { return fullSyncAchieved.YFilter }

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) SetFilter(yf yfilter.YFilter) { fullSyncAchieved.YFilter = yf }

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetSegmentPath() string {
    return "full-sync-achieved"
}

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = fullSyncAchieved.Entry
    return leafs
}

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetBundleName() string { return "cisco_ios_xr" }

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetYangName() string { return "full-sync-achieved" }

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) SetParent(parent types.Entity) { fullSyncAchieved.parent = parent }

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetParent() types.Entity { return fullSyncAchieved.parent }

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetParentYangName() string { return "isis-nsr-peer" }

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount
// man sync count
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetFilter() yfilter.YFilter { return manSyncCount.YFilter }

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) SetFilter(yf yfilter.YFilter) { manSyncCount.YFilter = yf }

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetSegmentPath() string {
    return "man-sync-count"
}

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = manSyncCount.Entry
    return leafs
}

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetBundleName() string { return "cisco_ios_xr" }

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetYangName() string { return "man-sync-count" }

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) SetParent(parent types.Entity) { manSyncCount.parent = parent }

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetParent() types.Entity { return manSyncCount.parent }

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetParentYangName() string { return "isis-nsr-peer" }

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount
// nsr chg count
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetFilter() yfilter.YFilter { return nsrChgCount.YFilter }

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) SetFilter(yf yfilter.YFilter) { nsrChgCount.YFilter = yf }

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetSegmentPath() string {
    return "nsr-chg-count"
}

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = nsrChgCount.Entry
    return leafs
}

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetBundleName() string { return "cisco_ios_xr" }

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetYangName() string { return "nsr-chg-count" }

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) SetParent(parent types.Entity) { nsrChgCount.parent = parent }

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetParent() types.Entity { return nsrChgCount.parent }

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetParentYangName() string { return "isis-nsr-peer" }

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime
// uptime
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetFilter() yfilter.YFilter { return uptime.YFilter }

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) SetFilter(yf yfilter.YFilter) { uptime.YFilter = yf }

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetSegmentPath() string {
    return "uptime"
}

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = uptime.Entry
    return leafs
}

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetBundleName() string { return "cisco_ios_xr" }

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetYangName() string { return "uptime" }

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) SetParent(parent types.Entity) { uptime.parent = parent }

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetParent() types.Entity { return uptime.parent }

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetParentYangName() string { return "isis-nsr-peer" }

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid
// uptime valid
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetFilter() yfilter.YFilter { return uptimeValid.YFilter }

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) SetFilter(yf yfilter.YFilter) { uptimeValid.YFilter = yf }

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetSegmentPath() string {
    return "uptime-valid"
}

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = uptimeValid.Entry
    return leafs
}

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetBundleName() string { return "cisco_ios_xr" }

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetYangName() string { return "uptime-valid" }

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) SetParent(parent types.Entity) { uptimeValid.parent = parent }

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetParent() types.Entity { return uptimeValid.parent }

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetParentYangName() string { return "isis-nsr-peer" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra
// ISIS NSR Infra
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // gen.
    Gen Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen

    // pm.
    Pm Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm

    // ds.
    Ds Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds

    // te.
    Te Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te

    // ncd. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd.
    Ncd []Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd

    // nii idb. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb.
    NiiIdb []Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb
}

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetFilter() yfilter.YFilter { return isisNsrInfra.YFilter }

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) SetFilter(yf yfilter.YFilter) { isisNsrInfra.YFilter = yf }

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetGoName(yname string) string {
    if yname == "gen" { return "Gen" }
    if yname == "pm" { return "Pm" }
    if yname == "ds" { return "Ds" }
    if yname == "te" { return "Te" }
    if yname == "ncd" { return "Ncd" }
    if yname == "nii-idb" { return "NiiIdb" }
    return ""
}

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetSegmentPath() string {
    return "isis-nsr-infra"
}

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "gen" {
        return &isisNsrInfra.Gen
    }
    if childYangName == "pm" {
        return &isisNsrInfra.Pm
    }
    if childYangName == "ds" {
        return &isisNsrInfra.Ds
    }
    if childYangName == "te" {
        return &isisNsrInfra.Te
    }
    if childYangName == "ncd" {
        for _, c := range isisNsrInfra.Ncd {
            if isisNsrInfra.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd{}
        isisNsrInfra.Ncd = append(isisNsrInfra.Ncd, child)
        return &isisNsrInfra.Ncd[len(isisNsrInfra.Ncd)-1]
    }
    if childYangName == "nii-idb" {
        for _, c := range isisNsrInfra.NiiIdb {
            if isisNsrInfra.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb{}
        isisNsrInfra.NiiIdb = append(isisNsrInfra.NiiIdb, child)
        return &isisNsrInfra.NiiIdb[len(isisNsrInfra.NiiIdb)-1]
    }
    return nil
}

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["gen"] = &isisNsrInfra.Gen
    children["pm"] = &isisNsrInfra.Pm
    children["ds"] = &isisNsrInfra.Ds
    children["te"] = &isisNsrInfra.Te
    for i := range isisNsrInfra.Ncd {
        children[isisNsrInfra.Ncd[i].GetSegmentPath()] = &isisNsrInfra.Ncd[i]
    }
    for i := range isisNsrInfra.NiiIdb {
        children[isisNsrInfra.NiiIdb[i].GetSegmentPath()] = &isisNsrInfra.NiiIdb[i]
    }
    return children
}

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetBundleName() string { return "cisco_ios_xr" }

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetYangName() string { return "isis-nsr-infra" }

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) SetParent(parent types.Entity) { isisNsrInfra.parent = parent }

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetParent() types.Entity { return isisNsrInfra.parent }

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetParentYangName() string { return "nsr-status" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen
// gen
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // my nodeid. The type is interface{} with range: 0..4294967295.
    MyNodeid interface{}

    // my process id. The type is interface{} with range: 0..4294967295.
    MyProcessId interface{}

    // pm issu role. The type is interface{} with range: 0..255.
    PmIssuRole interface{}

    // pm ha role. The type is interface{} with range: 0..255.
    PmHaRole interface{}

    // sysmgr ha role. The type is interface{} with range: 0..255.
    SysmgrHaRole interface{}

    // nsr send ready. The type is interface{} with range: 0..255.
    NsrSendReady interface{}

    // nsr send unready. The type is interface{} with range: 0..255.
    NsrSendUnready interface{}

    // nsr send err. The type is interface{} with range: 0..4294967295.
    NsrSendErr interface{}

    // nsr recv err. The type is interface{} with range: 0..4294967295.
    NsrRecvErr interface{}

    // retry flag. The type is interface{} with range: 0..4294967295.
    RetryFlag interface{}

    // nsr enabled. The type is bool.
    NsrEnabled interface{}

    // nsr configured. The type is bool.
    NsrConfigured interface{}

    // nsf configured. The type is bool.
    NsfConfigured interface{}

    // failover. The type is bool.
    Failover interface{}

    // lanid req needed. The type is bool.
    LanidReqNeeded interface{}
}

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetFilter() yfilter.YFilter { return gen.YFilter }

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) SetFilter(yf yfilter.YFilter) { gen.YFilter = yf }

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetGoName(yname string) string {
    if yname == "my-nodeid" { return "MyNodeid" }
    if yname == "my-process-id" { return "MyProcessId" }
    if yname == "pm-issu-role" { return "PmIssuRole" }
    if yname == "pm-ha-role" { return "PmHaRole" }
    if yname == "sysmgr-ha-role" { return "SysmgrHaRole" }
    if yname == "nsr-send-ready" { return "NsrSendReady" }
    if yname == "nsr-send-unready" { return "NsrSendUnready" }
    if yname == "nsr-send-err" { return "NsrSendErr" }
    if yname == "nsr-recv-err" { return "NsrRecvErr" }
    if yname == "retry-flag" { return "RetryFlag" }
    if yname == "nsr-enabled" { return "NsrEnabled" }
    if yname == "nsr-configured" { return "NsrConfigured" }
    if yname == "nsf-configured" { return "NsfConfigured" }
    if yname == "failover" { return "Failover" }
    if yname == "lanid-req-needed" { return "LanidReqNeeded" }
    return ""
}

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetSegmentPath() string {
    return "gen"
}

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["my-nodeid"] = gen.MyNodeid
    leafs["my-process-id"] = gen.MyProcessId
    leafs["pm-issu-role"] = gen.PmIssuRole
    leafs["pm-ha-role"] = gen.PmHaRole
    leafs["sysmgr-ha-role"] = gen.SysmgrHaRole
    leafs["nsr-send-ready"] = gen.NsrSendReady
    leafs["nsr-send-unready"] = gen.NsrSendUnready
    leafs["nsr-send-err"] = gen.NsrSendErr
    leafs["nsr-recv-err"] = gen.NsrRecvErr
    leafs["retry-flag"] = gen.RetryFlag
    leafs["nsr-enabled"] = gen.NsrEnabled
    leafs["nsr-configured"] = gen.NsrConfigured
    leafs["nsf-configured"] = gen.NsfConfigured
    leafs["failover"] = gen.Failover
    leafs["lanid-req-needed"] = gen.LanidReqNeeded
    return leafs
}

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetBundleName() string { return "cisco_ios_xr" }

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetYangName() string { return "gen" }

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) SetParent(parent types.Entity) { gen.parent = parent }

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetParent() types.Entity { return gen.parent }

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetParentYangName() string { return "isis-nsr-infra" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm
// pm
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // reg. The type is interface{} with range: 0..255.
    Reg interface{}

    // conn cb. The type is interface{} with range: 0..255.
    ConnCb interface{}

    // disconn cb. The type is interface{} with range: 0..255.
    DisconnCb interface{}

    // conn status. The type is bool.
    ConnStatus interface{}
}

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetFilter() yfilter.YFilter { return pm.YFilter }

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) SetFilter(yf yfilter.YFilter) { pm.YFilter = yf }

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetGoName(yname string) string {
    if yname == "reg" { return "Reg" }
    if yname == "conn-cb" { return "ConnCb" }
    if yname == "disconn-cb" { return "DisconnCb" }
    if yname == "conn-status" { return "ConnStatus" }
    return ""
}

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetSegmentPath() string {
    return "pm"
}

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reg"] = pm.Reg
    leafs["conn-cb"] = pm.ConnCb
    leafs["disconn-cb"] = pm.DisconnCb
    leafs["conn-status"] = pm.ConnStatus
    return leafs
}

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetBundleName() string { return "cisco_ios_xr" }

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetYangName() string { return "pm" }

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) SetParent(parent types.Entity) { pm.parent = parent }

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetParent() types.Entity { return pm.parent }

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetParentYangName() string { return "isis-nsr-infra" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds
// ds
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // conn. The type is interface{} with range: 0..255.
    Conn interface{}

    // conn cb. The type is interface{} with range: 0..255.
    ConnCb interface{}

    // pub. The type is interface{} with range: 0..255.
    Pub interface{}

    // pub cb. The type is interface{} with range: 0..255.
    PubCb interface{}

    // reg. The type is interface{} with range: 0..255.
    Reg interface{}

    // reg cb. The type is interface{} with range: 0..255.
    RegCb interface{}

    // unreg. The type is interface{} with range: 0..255.
    Unreg interface{}

    // unreg cb. The type is interface{} with range: 0..255.
    UnregCb interface{}

    // disconn cb. The type is interface{} with range: 0..255.
    DisconnCb interface{}

    // notify cb. The type is interface{} with range: 0..255.
    NotifyCb interface{}

    // notify peer xr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NotifyPeerXr interface{}

    // del cb. The type is interface{} with range: 0..255.
    DelCb interface{}

    // remove srv. The type is interface{} with range: 0..255.
    RemoveSrv interface{}

    // conn status. The type is bool.
    ConnStatus interface{}

    // conn ts.
    ConnTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs

    // conn cb ts.
    ConnCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs

    // pub ts.
    PubTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs

    // pub cb ts.
    PubCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs

    // reg ts.
    RegTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs

    // reg cb ts.
    RegCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs

    // unreg ts.
    UnregTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs

    // unreg cb ts.
    UnregCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs

    // disconn cb ts.
    DisconnCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs

    // notify cb ts.
    NotifyCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs

    // del cb ts.
    DelCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs

    // remove srv ts.
    RemoveSrvTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs

    // conn status ts.
    ConnStatusTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs

    // notify peer. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer.
    NotifyPeer []Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer
}

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetFilter() yfilter.YFilter { return ds.YFilter }

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) SetFilter(yf yfilter.YFilter) { ds.YFilter = yf }

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetGoName(yname string) string {
    if yname == "conn" { return "Conn" }
    if yname == "conn-cb" { return "ConnCb" }
    if yname == "pub" { return "Pub" }
    if yname == "pub-cb" { return "PubCb" }
    if yname == "reg" { return "Reg" }
    if yname == "reg-cb" { return "RegCb" }
    if yname == "unreg" { return "Unreg" }
    if yname == "unreg-cb" { return "UnregCb" }
    if yname == "disconn-cb" { return "DisconnCb" }
    if yname == "notify-cb" { return "NotifyCb" }
    if yname == "notify-peer-xr" { return "NotifyPeerXr" }
    if yname == "del-cb" { return "DelCb" }
    if yname == "remove-srv" { return "RemoveSrv" }
    if yname == "conn-status" { return "ConnStatus" }
    if yname == "conn-ts" { return "ConnTs" }
    if yname == "conn-cb-ts" { return "ConnCbTs" }
    if yname == "pub-ts" { return "PubTs" }
    if yname == "pub-cb-ts" { return "PubCbTs" }
    if yname == "reg-ts" { return "RegTs" }
    if yname == "reg-cb-ts" { return "RegCbTs" }
    if yname == "unreg-ts" { return "UnregTs" }
    if yname == "unreg-cb-ts" { return "UnregCbTs" }
    if yname == "disconn-cb-ts" { return "DisconnCbTs" }
    if yname == "notify-cb-ts" { return "NotifyCbTs" }
    if yname == "del-cb-ts" { return "DelCbTs" }
    if yname == "remove-srv-ts" { return "RemoveSrvTs" }
    if yname == "conn-status-ts" { return "ConnStatusTs" }
    if yname == "notify-peer" { return "NotifyPeer" }
    return ""
}

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetSegmentPath() string {
    return "ds"
}

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "conn-ts" {
        return &ds.ConnTs
    }
    if childYangName == "conn-cb-ts" {
        return &ds.ConnCbTs
    }
    if childYangName == "pub-ts" {
        return &ds.PubTs
    }
    if childYangName == "pub-cb-ts" {
        return &ds.PubCbTs
    }
    if childYangName == "reg-ts" {
        return &ds.RegTs
    }
    if childYangName == "reg-cb-ts" {
        return &ds.RegCbTs
    }
    if childYangName == "unreg-ts" {
        return &ds.UnregTs
    }
    if childYangName == "unreg-cb-ts" {
        return &ds.UnregCbTs
    }
    if childYangName == "disconn-cb-ts" {
        return &ds.DisconnCbTs
    }
    if childYangName == "notify-cb-ts" {
        return &ds.NotifyCbTs
    }
    if childYangName == "del-cb-ts" {
        return &ds.DelCbTs
    }
    if childYangName == "remove-srv-ts" {
        return &ds.RemoveSrvTs
    }
    if childYangName == "conn-status-ts" {
        return &ds.ConnStatusTs
    }
    if childYangName == "notify-peer" {
        for _, c := range ds.NotifyPeer {
            if ds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer{}
        ds.NotifyPeer = append(ds.NotifyPeer, child)
        return &ds.NotifyPeer[len(ds.NotifyPeer)-1]
    }
    return nil
}

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["conn-ts"] = &ds.ConnTs
    children["conn-cb-ts"] = &ds.ConnCbTs
    children["pub-ts"] = &ds.PubTs
    children["pub-cb-ts"] = &ds.PubCbTs
    children["reg-ts"] = &ds.RegTs
    children["reg-cb-ts"] = &ds.RegCbTs
    children["unreg-ts"] = &ds.UnregTs
    children["unreg-cb-ts"] = &ds.UnregCbTs
    children["disconn-cb-ts"] = &ds.DisconnCbTs
    children["notify-cb-ts"] = &ds.NotifyCbTs
    children["del-cb-ts"] = &ds.DelCbTs
    children["remove-srv-ts"] = &ds.RemoveSrvTs
    children["conn-status-ts"] = &ds.ConnStatusTs
    for i := range ds.NotifyPeer {
        children[ds.NotifyPeer[i].GetSegmentPath()] = &ds.NotifyPeer[i]
    }
    return children
}

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["conn"] = ds.Conn
    leafs["conn-cb"] = ds.ConnCb
    leafs["pub"] = ds.Pub
    leafs["pub-cb"] = ds.PubCb
    leafs["reg"] = ds.Reg
    leafs["reg-cb"] = ds.RegCb
    leafs["unreg"] = ds.Unreg
    leafs["unreg-cb"] = ds.UnregCb
    leafs["disconn-cb"] = ds.DisconnCb
    leafs["notify-cb"] = ds.NotifyCb
    leafs["notify-peer-xr"] = ds.NotifyPeerXr
    leafs["del-cb"] = ds.DelCb
    leafs["remove-srv"] = ds.RemoveSrv
    leafs["conn-status"] = ds.ConnStatus
    return leafs
}

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetBundleName() string { return "cisco_ios_xr" }

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetYangName() string { return "ds" }

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) SetParent(parent types.Entity) { ds.parent = parent }

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetParent() types.Entity { return ds.parent }

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetParentYangName() string { return "isis-nsr-infra" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs
// conn ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetFilter() yfilter.YFilter { return connTs.YFilter }

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) SetFilter(yf yfilter.YFilter) { connTs.YFilter = yf }

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetSegmentPath() string {
    return "conn-ts"
}

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = connTs.Seconds
    leafs["nano-seconds"] = connTs.NanoSeconds
    return leafs
}

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetBundleName() string { return "cisco_ios_xr" }

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetYangName() string { return "conn-ts" }

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) SetParent(parent types.Entity) { connTs.parent = parent }

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetParent() types.Entity { return connTs.parent }

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs
// conn cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetFilter() yfilter.YFilter { return connCbTs.YFilter }

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) SetFilter(yf yfilter.YFilter) { connCbTs.YFilter = yf }

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetSegmentPath() string {
    return "conn-cb-ts"
}

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = connCbTs.Seconds
    leafs["nano-seconds"] = connCbTs.NanoSeconds
    return leafs
}

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetBundleName() string { return "cisco_ios_xr" }

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetYangName() string { return "conn-cb-ts" }

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) SetParent(parent types.Entity) { connCbTs.parent = parent }

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetParent() types.Entity { return connCbTs.parent }

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs
// pub ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetFilter() yfilter.YFilter { return pubTs.YFilter }

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) SetFilter(yf yfilter.YFilter) { pubTs.YFilter = yf }

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetSegmentPath() string {
    return "pub-ts"
}

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = pubTs.Seconds
    leafs["nano-seconds"] = pubTs.NanoSeconds
    return leafs
}

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetBundleName() string { return "cisco_ios_xr" }

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetYangName() string { return "pub-ts" }

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) SetParent(parent types.Entity) { pubTs.parent = parent }

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetParent() types.Entity { return pubTs.parent }

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs
// pub cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetFilter() yfilter.YFilter { return pubCbTs.YFilter }

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) SetFilter(yf yfilter.YFilter) { pubCbTs.YFilter = yf }

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetSegmentPath() string {
    return "pub-cb-ts"
}

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = pubCbTs.Seconds
    leafs["nano-seconds"] = pubCbTs.NanoSeconds
    return leafs
}

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetBundleName() string { return "cisco_ios_xr" }

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetYangName() string { return "pub-cb-ts" }

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) SetParent(parent types.Entity) { pubCbTs.parent = parent }

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetParent() types.Entity { return pubCbTs.parent }

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs
// reg ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetFilter() yfilter.YFilter { return regTs.YFilter }

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) SetFilter(yf yfilter.YFilter) { regTs.YFilter = yf }

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetSegmentPath() string {
    return "reg-ts"
}

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = regTs.Seconds
    leafs["nano-seconds"] = regTs.NanoSeconds
    return leafs
}

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetBundleName() string { return "cisco_ios_xr" }

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetYangName() string { return "reg-ts" }

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) SetParent(parent types.Entity) { regTs.parent = parent }

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetParent() types.Entity { return regTs.parent }

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs
// reg cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetFilter() yfilter.YFilter { return regCbTs.YFilter }

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) SetFilter(yf yfilter.YFilter) { regCbTs.YFilter = yf }

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetSegmentPath() string {
    return "reg-cb-ts"
}

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = regCbTs.Seconds
    leafs["nano-seconds"] = regCbTs.NanoSeconds
    return leafs
}

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetBundleName() string { return "cisco_ios_xr" }

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetYangName() string { return "reg-cb-ts" }

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) SetParent(parent types.Entity) { regCbTs.parent = parent }

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetParent() types.Entity { return regCbTs.parent }

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs
// unreg ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetFilter() yfilter.YFilter { return unregTs.YFilter }

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) SetFilter(yf yfilter.YFilter) { unregTs.YFilter = yf }

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetSegmentPath() string {
    return "unreg-ts"
}

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = unregTs.Seconds
    leafs["nano-seconds"] = unregTs.NanoSeconds
    return leafs
}

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetBundleName() string { return "cisco_ios_xr" }

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetYangName() string { return "unreg-ts" }

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) SetParent(parent types.Entity) { unregTs.parent = parent }

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetParent() types.Entity { return unregTs.parent }

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs
// unreg cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetFilter() yfilter.YFilter { return unregCbTs.YFilter }

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) SetFilter(yf yfilter.YFilter) { unregCbTs.YFilter = yf }

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetSegmentPath() string {
    return "unreg-cb-ts"
}

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = unregCbTs.Seconds
    leafs["nano-seconds"] = unregCbTs.NanoSeconds
    return leafs
}

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetBundleName() string { return "cisco_ios_xr" }

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetYangName() string { return "unreg-cb-ts" }

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) SetParent(parent types.Entity) { unregCbTs.parent = parent }

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetParent() types.Entity { return unregCbTs.parent }

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs
// disconn cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetFilter() yfilter.YFilter { return disconnCbTs.YFilter }

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) SetFilter(yf yfilter.YFilter) { disconnCbTs.YFilter = yf }

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetSegmentPath() string {
    return "disconn-cb-ts"
}

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = disconnCbTs.Seconds
    leafs["nano-seconds"] = disconnCbTs.NanoSeconds
    return leafs
}

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetBundleName() string { return "cisco_ios_xr" }

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetYangName() string { return "disconn-cb-ts" }

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) SetParent(parent types.Entity) { disconnCbTs.parent = parent }

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetParent() types.Entity { return disconnCbTs.parent }

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs
// notify cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetFilter() yfilter.YFilter { return notifyCbTs.YFilter }

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) SetFilter(yf yfilter.YFilter) { notifyCbTs.YFilter = yf }

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetSegmentPath() string {
    return "notify-cb-ts"
}

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = notifyCbTs.Seconds
    leafs["nano-seconds"] = notifyCbTs.NanoSeconds
    return leafs
}

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetBundleName() string { return "cisco_ios_xr" }

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetYangName() string { return "notify-cb-ts" }

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) SetParent(parent types.Entity) { notifyCbTs.parent = parent }

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetParent() types.Entity { return notifyCbTs.parent }

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs
// del cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetFilter() yfilter.YFilter { return delCbTs.YFilter }

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) SetFilter(yf yfilter.YFilter) { delCbTs.YFilter = yf }

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetSegmentPath() string {
    return "del-cb-ts"
}

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = delCbTs.Seconds
    leafs["nano-seconds"] = delCbTs.NanoSeconds
    return leafs
}

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetBundleName() string { return "cisco_ios_xr" }

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetYangName() string { return "del-cb-ts" }

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) SetParent(parent types.Entity) { delCbTs.parent = parent }

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetParent() types.Entity { return delCbTs.parent }

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs
// remove srv ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetFilter() yfilter.YFilter { return removeSrvTs.YFilter }

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) SetFilter(yf yfilter.YFilter) { removeSrvTs.YFilter = yf }

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetSegmentPath() string {
    return "remove-srv-ts"
}

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = removeSrvTs.Seconds
    leafs["nano-seconds"] = removeSrvTs.NanoSeconds
    return leafs
}

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetBundleName() string { return "cisco_ios_xr" }

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetYangName() string { return "remove-srv-ts" }

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) SetParent(parent types.Entity) { removeSrvTs.parent = parent }

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetParent() types.Entity { return removeSrvTs.parent }

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs
// conn status ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetFilter() yfilter.YFilter { return connStatusTs.YFilter }

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) SetFilter(yf yfilter.YFilter) { connStatusTs.YFilter = yf }

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetSegmentPath() string {
    return "conn-status-ts"
}

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = connStatusTs.Seconds
    leafs["nano-seconds"] = connStatusTs.NanoSeconds
    return leafs
}

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetBundleName() string { return "cisco_ios_xr" }

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetYangName() string { return "conn-status-ts" }

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) SetParent(parent types.Entity) { connStatusTs.parent = parent }

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetParent() types.Entity { return connStatusTs.parent }

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer
// notify peer
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetFilter() yfilter.YFilter { return notifyPeer.YFilter }

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) SetFilter(yf yfilter.YFilter) { notifyPeer.YFilter = yf }

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetSegmentPath() string {
    return "notify-peer"
}

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = notifyPeer.Seconds
    leafs["nano-seconds"] = notifyPeer.NanoSeconds
    return leafs
}

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetBundleName() string { return "cisco_ios_xr" }

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetYangName() string { return "notify-peer" }

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) SetParent(parent types.Entity) { notifyPeer.parent = parent }

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetParent() types.Entity { return notifyPeer.parent }

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetParentYangName() string { return "ds" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te
// te
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // enabled. The type is interface{} with range: 0..255.
    Enabled interface{}

    // conn up. The type is interface{} with range: 0..255.
    ConnUp interface{}

    // te link cb. The type is interface{} with range: 0..255.
    TeLinkCb interface{}

    // te tunnel cb. The type is interface{} with range: 0..255.
    TeTunnelCb interface{}

    // adv sync data. The type is interface{} with range: 0..255.
    AdvSyncData interface{}

    // link purge time on. The type is interface{} with range: 0..255.
    LinkPurgeTimeOn interface{}

    // tunnel purge time on. The type is interface{} with range: 0..255.
    TunnelPurgeTimeOn interface{}

    // has info from te. The type is interface{} with range: 0..255.
    HasInfoFromTe interface{}
}

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetFilter() yfilter.YFilter { return te.YFilter }

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) SetFilter(yf yfilter.YFilter) { te.YFilter = yf }

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetGoName(yname string) string {
    if yname == "enabled" { return "Enabled" }
    if yname == "conn-up" { return "ConnUp" }
    if yname == "te-link-cb" { return "TeLinkCb" }
    if yname == "te-tunnel-cb" { return "TeTunnelCb" }
    if yname == "adv-sync-data" { return "AdvSyncData" }
    if yname == "link-purge-time-on" { return "LinkPurgeTimeOn" }
    if yname == "tunnel-purge-time-on" { return "TunnelPurgeTimeOn" }
    if yname == "has-info-from-te" { return "HasInfoFromTe" }
    return ""
}

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetSegmentPath() string {
    return "te"
}

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enabled"] = te.Enabled
    leafs["conn-up"] = te.ConnUp
    leafs["te-link-cb"] = te.TeLinkCb
    leafs["te-tunnel-cb"] = te.TeTunnelCb
    leafs["adv-sync-data"] = te.AdvSyncData
    leafs["link-purge-time-on"] = te.LinkPurgeTimeOn
    leafs["tunnel-purge-time-on"] = te.TunnelPurgeTimeOn
    leafs["has-info-from-te"] = te.HasInfoFromTe
    return leafs
}

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetBundleName() string { return "cisco_ios_xr" }

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetYangName() string { return "te" }

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) SetParent(parent types.Entity) { te.parent = parent }

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetParent() types.Entity { return te.parent }

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetParentYangName() string { return "isis-nsr-infra" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd
// ncd
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // vm idx. The type is interface{} with range: 0..255.
    VmIdx interface{}

    // conn up. The type is bool.
    ConnUp interface{}

    // endp hdl. The type is interface{} with range: 0..255.
    EndpHdl interface{}

    // chksum. The type is interface{} with range: 0..65535.
    Chksum interface{}

    // send seqnum. The type is interface{} with range: 0..4294967295.
    SendSeqnum interface{}

    // recv cnt. The type is interface{} with range: 0..4294967295.
    RecvCnt interface{}
}

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetFilter() yfilter.YFilter { return ncd.YFilter }

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) SetFilter(yf yfilter.YFilter) { ncd.YFilter = yf }

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetGoName(yname string) string {
    if yname == "vm-idx" { return "VmIdx" }
    if yname == "conn-up" { return "ConnUp" }
    if yname == "endp-hdl" { return "EndpHdl" }
    if yname == "chksum" { return "Chksum" }
    if yname == "send-seqnum" { return "SendSeqnum" }
    if yname == "recv-cnt" { return "RecvCnt" }
    return ""
}

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetSegmentPath() string {
    return "ncd"
}

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vm-idx"] = ncd.VmIdx
    leafs["conn-up"] = ncd.ConnUp
    leafs["endp-hdl"] = ncd.EndpHdl
    leafs["chksum"] = ncd.Chksum
    leafs["send-seqnum"] = ncd.SendSeqnum
    leafs["recv-cnt"] = ncd.RecvCnt
    return leafs
}

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetBundleName() string { return "cisco_ios_xr" }

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetYangName() string { return "ncd" }

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) SetParent(parent types.Entity) { ncd.parent = parent }

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetParent() types.Entity { return ncd.parent }

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetParentYangName() string { return "isis-nsr-infra" }

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb
// nii idb
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // exist. The type is bool.
    Exist interface{}

    // brought up. The type is bool.
    BroughtUp interface{}

    // retry timer. The type is bool.
    RetryTimer interface{}

    // running. The type is bool.
    Running interface{}

    // has adj. The type is bool.
    HasAdj interface{}
}

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetFilter() yfilter.YFilter { return niiIdb.YFilter }

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) SetFilter(yf yfilter.YFilter) { niiIdb.YFilter = yf }

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetGoName(yname string) string {
    if yname == "exist" { return "Exist" }
    if yname == "brought-up" { return "BroughtUp" }
    if yname == "retry-timer" { return "RetryTimer" }
    if yname == "running" { return "Running" }
    if yname == "has-adj" { return "HasAdj" }
    return ""
}

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetSegmentPath() string {
    return "nii-idb"
}

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["exist"] = niiIdb.Exist
    leafs["brought-up"] = niiIdb.BroughtUp
    leafs["retry-timer"] = niiIdb.RetryTimer
    leafs["running"] = niiIdb.Running
    leafs["has-adj"] = niiIdb.HasAdj
    return leafs
}

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetBundleName() string { return "cisco_ios_xr" }

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetYangName() string { return "nii-idb" }

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) SetParent(parent types.Entity) { niiIdb.parent = parent }

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetParent() types.Entity { return niiIdb.parent }

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetParentYangName() string { return "isis-nsr-infra" }

// Isis_Instances_Instance_Interfaces
// Interface table
type Isis_Instances_Instance_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Information about one IS-IS interface. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface.
    Interface []Isis_Instances_Instance_Interfaces_Interface
}

func (interfaces *Isis_Instances_Instance_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *Isis_Instances_Instance_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *Isis_Instances_Instance_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *Isis_Instances_Instance_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *Isis_Instances_Instance_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *Isis_Instances_Instance_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *Isis_Instances_Instance_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *Isis_Instances_Instance_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *Isis_Instances_Instance_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *Isis_Instances_Instance_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *Isis_Instances_Instance_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *Isis_Instances_Instance_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *Isis_Instances_Instance_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *Isis_Instances_Instance_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *Isis_Instances_Instance_Interfaces) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_Interfaces_Interface
// Information about one IS-IS interface
type Isis_Instances_Instance_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Configured circuit type for the interface. The type is IsisLevels.
    ConfiguredCircuitType interface{}

    // Interface mesh group. The type is interface{} with range: 0..4294967295.
    MeshGroup interface{}

    // IS-type of the router. The type is IsisLevels.
    IsType interface{}

    // ISIS NSR Interface. The type is bool.
    NsrIntf interface{}

    // Configured interface status.
    ConfiguredStatus Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus

    // Information about the interface status and its data.
    InterfaceStatusAndData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData
}

func (self *Isis_Instances_Instance_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Isis_Instances_Instance_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Isis_Instances_Instance_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "configured-circuit-type" { return "ConfiguredCircuitType" }
    if yname == "mesh-group" { return "MeshGroup" }
    if yname == "is-type" { return "IsType" }
    if yname == "nsr-intf" { return "NsrIntf" }
    if yname == "configured-status" { return "ConfiguredStatus" }
    if yname == "interface-status-and-data" { return "InterfaceStatusAndData" }
    return ""
}

func (self *Isis_Instances_Instance_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Isis_Instances_Instance_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "configured-status" {
        return &self.ConfiguredStatus
    }
    if childYangName == "interface-status-and-data" {
        return &self.InterfaceStatusAndData
    }
    return nil
}

func (self *Isis_Instances_Instance_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["configured-status"] = &self.ConfiguredStatus
    children["interface-status-and-data"] = &self.InterfaceStatusAndData
    return children
}

func (self *Isis_Instances_Instance_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["configured-circuit-type"] = self.ConfiguredCircuitType
    leafs["mesh-group"] = self.MeshGroup
    leafs["is-type"] = self.IsType
    leafs["nsr-intf"] = self.NsrIntf
    return leafs
}

func (self *Isis_Instances_Instance_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Isis_Instances_Instance_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *Isis_Instances_Instance_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Isis_Instances_Instance_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Isis_Instances_Instance_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Isis_Instances_Instance_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Isis_Instances_Instance_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *Isis_Instances_Instance_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus
// Configured interface status
type Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configured adjacency formation status. The type is bool.
    AdjacencyFormStatus interface{}

    // Configured prefix advertisement status. The type is bool.
    AdvPrefixStatus interface{}
}

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetFilter() yfilter.YFilter { return configuredStatus.YFilter }

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) SetFilter(yf yfilter.YFilter) { configuredStatus.YFilter = yf }

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetGoName(yname string) string {
    if yname == "adjacency-form-status" { return "AdjacencyFormStatus" }
    if yname == "adv-prefix-status" { return "AdvPrefixStatus" }
    return ""
}

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetSegmentPath() string {
    return "configured-status"
}

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adjacency-form-status"] = configuredStatus.AdjacencyFormStatus
    leafs["adv-prefix-status"] = configuredStatus.AdvPrefixStatus
    return leafs
}

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetBundleName() string { return "cisco_ios_xr" }

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetYangName() string { return "configured-status" }

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) SetParent(parent types.Entity) { configuredStatus.parent = parent }

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetParent() types.Entity { return configuredStatus.parent }

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetParentYangName() string { return "interface" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData
// Information about the interface status and its
// data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // The interface state if disabled.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled

    // The interface state if enabled.
    Enabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled
}

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetFilter() yfilter.YFilter { return interfaceStatusAndData.YFilter }

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) SetFilter(yf yfilter.YFilter) { interfaceStatusAndData.YFilter = yf }

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "disabled" { return "Disabled" }
    if yname == "enabled" { return "Enabled" }
    return ""
}

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetSegmentPath() string {
    return "interface-status-and-data"
}

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "disabled" {
        return &interfaceStatusAndData.Disabled
    }
    if childYangName == "enabled" {
        return &interfaceStatusAndData.Enabled
    }
    return nil
}

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["disabled"] = &interfaceStatusAndData.Disabled
    children["enabled"] = &interfaceStatusAndData.Enabled
    return children
}

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = interfaceStatusAndData.Status
    return leafs
}

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetYangName() string { return "interface-status-and-data" }

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) SetParent(parent types.Entity) { interfaceStatusAndData.parent = parent }

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetParent() types.Entity { return interfaceStatusAndData.parent }

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetParentYangName() string { return "interface" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled
// The interface state if disabled
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the interface is disabled. The type is IsisIfDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetFilter() yfilter.YFilter { return disabled.YFilter }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) SetFilter(yf yfilter.YFilter) { disabled.YFilter = yf }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetSegmentPath() string {
    return "disabled"
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = disabled.ReasonCode
    return leafs
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetBundleName() string { return "cisco_ios_xr" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetYangName() string { return "disabled" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) SetParent(parent types.Entity) { disabled.parent = parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetParent() types.Entity { return disabled.parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetParentYangName() string { return "interface-status-and-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled
// The interface state if enabled
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Media type of the interface. The type is IsisMediaClass.
    InterfaceMediaType interface{}

    // Enabled Circuit type of the interface. The type is IsisLevels.
    EnabledCircuitType interface{}

    // Local Circuit Number of the interface. The type is interface{} with range:
    // 0..255.
    LocalCircuitNumber interface{}

    // Rsi Srlg Registered. The type is bool.
    RsiSrlgRegistered interface{}

    // Bandwidth of the interface. The type is interface{} with range:
    // 0..4294967295.
    Bandwidth interface{}

    // Interface's Adjacency Formation status.
    AdjacencyFormStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus

    // Interface's Prefix Advertisement status.
    AdvPrefixStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus

    // Data for an active P2P interface, NULL if not active or P2P.
    P2PData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData

    // The BFD data for the given interface.
    BfdData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData

    // Interface data specific to CLNS I/O services.
    ClnsData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface.
    UnderlyingInterface []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface

    // Array of area information for an active interface. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData.
    PerAreaData []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData

    // Array of topology information. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData.
    PerTopologyData []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData

    // Array of address family information. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData.
    PerAddressFamilyData []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetFilter() yfilter.YFilter { return enabled.YFilter }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) SetFilter(yf yfilter.YFilter) { enabled.YFilter = yf }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetGoName(yname string) string {
    if yname == "interface-media-type" { return "InterfaceMediaType" }
    if yname == "enabled-circuit-type" { return "EnabledCircuitType" }
    if yname == "local-circuit-number" { return "LocalCircuitNumber" }
    if yname == "rsi-srlg-registered" { return "RsiSrlgRegistered" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "adjacency-form-status" { return "AdjacencyFormStatus" }
    if yname == "adv-prefix-status" { return "AdvPrefixStatus" }
    if yname == "p2p-data" { return "P2PData" }
    if yname == "bfd-data" { return "BfdData" }
    if yname == "clns-data" { return "ClnsData" }
    if yname == "underlying-interface" { return "UnderlyingInterface" }
    if yname == "per-area-data" { return "PerAreaData" }
    if yname == "per-topology-data" { return "PerTopologyData" }
    if yname == "per-address-family-data" { return "PerAddressFamilyData" }
    return ""
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetSegmentPath() string {
    return "enabled"
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-form-status" {
        return &enabled.AdjacencyFormStatus
    }
    if childYangName == "adv-prefix-status" {
        return &enabled.AdvPrefixStatus
    }
    if childYangName == "p2p-data" {
        return &enabled.P2PData
    }
    if childYangName == "bfd-data" {
        return &enabled.BfdData
    }
    if childYangName == "clns-data" {
        return &enabled.ClnsData
    }
    if childYangName == "underlying-interface" {
        for _, c := range enabled.UnderlyingInterface {
            if enabled.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface{}
        enabled.UnderlyingInterface = append(enabled.UnderlyingInterface, child)
        return &enabled.UnderlyingInterface[len(enabled.UnderlyingInterface)-1]
    }
    if childYangName == "per-area-data" {
        for _, c := range enabled.PerAreaData {
            if enabled.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData{}
        enabled.PerAreaData = append(enabled.PerAreaData, child)
        return &enabled.PerAreaData[len(enabled.PerAreaData)-1]
    }
    if childYangName == "per-topology-data" {
        for _, c := range enabled.PerTopologyData {
            if enabled.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData{}
        enabled.PerTopologyData = append(enabled.PerTopologyData, child)
        return &enabled.PerTopologyData[len(enabled.PerTopologyData)-1]
    }
    if childYangName == "per-address-family-data" {
        for _, c := range enabled.PerAddressFamilyData {
            if enabled.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData{}
        enabled.PerAddressFamilyData = append(enabled.PerAddressFamilyData, child)
        return &enabled.PerAddressFamilyData[len(enabled.PerAddressFamilyData)-1]
    }
    return nil
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-form-status"] = &enabled.AdjacencyFormStatus
    children["adv-prefix-status"] = &enabled.AdvPrefixStatus
    children["p2p-data"] = &enabled.P2PData
    children["bfd-data"] = &enabled.BfdData
    children["clns-data"] = &enabled.ClnsData
    for i := range enabled.UnderlyingInterface {
        children[enabled.UnderlyingInterface[i].GetSegmentPath()] = &enabled.UnderlyingInterface[i]
    }
    for i := range enabled.PerAreaData {
        children[enabled.PerAreaData[i].GetSegmentPath()] = &enabled.PerAreaData[i]
    }
    for i := range enabled.PerTopologyData {
        children[enabled.PerTopologyData[i].GetSegmentPath()] = &enabled.PerTopologyData[i]
    }
    for i := range enabled.PerAddressFamilyData {
        children[enabled.PerAddressFamilyData[i].GetSegmentPath()] = &enabled.PerAddressFamilyData[i]
    }
    return children
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-media-type"] = enabled.InterfaceMediaType
    leafs["enabled-circuit-type"] = enabled.EnabledCircuitType
    leafs["local-circuit-number"] = enabled.LocalCircuitNumber
    leafs["rsi-srlg-registered"] = enabled.RsiSrlgRegistered
    leafs["bandwidth"] = enabled.Bandwidth
    return leafs
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetBundleName() string { return "cisco_ios_xr" }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetYangName() string { return "enabled" }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) SetParent(parent types.Entity) { enabled.parent = parent }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetParent() types.Entity { return enabled.parent }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetParentYangName() string { return "interface-status-and-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus
// Interface's Adjacency Formation status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled info for the adjacency formation status.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetFilter() yfilter.YFilter { return adjacencyFormStatus.YFilter }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) SetFilter(yf yfilter.YFilter) { adjacencyFormStatus.YFilter = yf }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "disabled" { return "Disabled" }
    return ""
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetSegmentPath() string {
    return "adjacency-form-status"
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "disabled" {
        return &adjacencyFormStatus.Disabled
    }
    return nil
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["disabled"] = &adjacencyFormStatus.Disabled
    return children
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = adjacencyFormStatus.Status
    return leafs
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetYangName() string { return "adjacency-form-status" }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) SetParent(parent types.Entity) { adjacencyFormStatus.parent = parent }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetParent() types.Entity { return adjacencyFormStatus.parent }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled
// Disabled info for the adjacency formation status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the interface is not able to form adjacencies. The type is
    // IsisIfAdjFormDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetFilter() yfilter.YFilter { return disabled.YFilter }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) SetFilter(yf yfilter.YFilter) { disabled.YFilter = yf }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetSegmentPath() string {
    return "disabled"
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = disabled.ReasonCode
    return leafs
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetBundleName() string { return "cisco_ios_xr" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetYangName() string { return "disabled" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) SetParent(parent types.Entity) { disabled.parent = parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetParent() types.Entity { return disabled.parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetParentYangName() string { return "adjacency-form-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus
// Interface's Prefix Advertisement status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled info for the prefix advertisement status.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetFilter() yfilter.YFilter { return advPrefixStatus.YFilter }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) SetFilter(yf yfilter.YFilter) { advPrefixStatus.YFilter = yf }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "disabled" { return "Disabled" }
    return ""
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetSegmentPath() string {
    return "adv-prefix-status"
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "disabled" {
        return &advPrefixStatus.Disabled
    }
    return nil
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["disabled"] = &advPrefixStatus.Disabled
    return children
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = advPrefixStatus.Status
    return leafs
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetBundleName() string { return "cisco_ios_xr" }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetYangName() string { return "adv-prefix-status" }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) SetParent(parent types.Entity) { advPrefixStatus.parent = parent }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetParent() types.Entity { return advPrefixStatus.parent }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled
// Disabled info for the prefix advertisement
// status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the interface is not able to advertise prefixes. The type is
    // IsisIfAdvPrefixDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetFilter() yfilter.YFilter { return disabled.YFilter }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) SetFilter(yf yfilter.YFilter) { disabled.YFilter = yf }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetSegmentPath() string {
    return "disabled"
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = disabled.ReasonCode
    return leafs
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetBundleName() string { return "cisco_ios_xr" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetYangName() string { return "disabled" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) SetParent(parent types.Entity) { disabled.parent = parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetParent() types.Entity { return disabled.parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetParentYangName() string { return "adv-prefix-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData
// Data for an active P2P interface, NULL if not
// active or P2P
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in ms before the next IIH can be sent. The type is interface{} with
    // range: 0..4294967295.
    TimeUntilNextIih interface{}

    // No. of LSPs queued to be retransmitted. The type is interface{} with range:
    // 0..4294967295.
    RetransmitLspQueueSize interface{}

    // Time in ms until the next scheduled LSP is retransmitted. The type is
    // interface{} with range: 0..4294967295.
    RetransmitLspInterval interface{}

    // Extended Circuit Number valid for a P2P interface. The type is interface{}
    // with range: 0..4294967295.
    ExtendedCircuitNumber interface{}
}

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetFilter() yfilter.YFilter { return p2PData.YFilter }

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) SetFilter(yf yfilter.YFilter) { p2PData.YFilter = yf }

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetGoName(yname string) string {
    if yname == "time-until-next-iih" { return "TimeUntilNextIih" }
    if yname == "retransmit-lsp-queue-size" { return "RetransmitLspQueueSize" }
    if yname == "retransmit-lsp-interval" { return "RetransmitLspInterval" }
    if yname == "extended-circuit-number" { return "ExtendedCircuitNumber" }
    return ""
}

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetSegmentPath() string {
    return "p2p-data"
}

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["time-until-next-iih"] = p2PData.TimeUntilNextIih
    leafs["retransmit-lsp-queue-size"] = p2PData.RetransmitLspQueueSize
    leafs["retransmit-lsp-interval"] = p2PData.RetransmitLspInterval
    leafs["extended-circuit-number"] = p2PData.ExtendedCircuitNumber
    return leafs
}

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetBundleName() string { return "cisco_ios_xr" }

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetYangName() string { return "p2p-data" }

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) SetParent(parent types.Entity) { p2PData.parent = parent }

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetParent() types.Entity { return p2PData.parent }

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData
// The BFD data for the given interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 BFD enabled status. The type is bool.
    Enabled interface{}

    // IPv6 BFD enabled status. The type is bool.
    Ipv6Enabled interface{}

    // BFD hello minimum interval in milliseconds. The type is interface{} with
    // range: 0..4294967295. Units are millisecond.
    Interval interface{}

    // BFD hello multiplier. The type is interface{} with range: 0..4294967295.
    Multiplier interface{}
}

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetFilter() yfilter.YFilter { return bfdData.YFilter }

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) SetFilter(yf yfilter.YFilter) { bfdData.YFilter = yf }

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetGoName(yname string) string {
    if yname == "enabled" { return "Enabled" }
    if yname == "ipv6-enabled" { return "Ipv6Enabled" }
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetSegmentPath() string {
    return "bfd-data"
}

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enabled"] = bfdData.Enabled
    leafs["ipv6-enabled"] = bfdData.Ipv6Enabled
    leafs["interval"] = bfdData.Interval
    leafs["multiplier"] = bfdData.Multiplier
    return leafs
}

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetBundleName() string { return "cisco_ios_xr" }

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetYangName() string { return "bfd-data" }

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) SetParent(parent types.Entity) { bfdData.parent = parent }

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetParent() types.Entity { return bfdData.parent }

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData
// Interface data specific to CLNS I/O services
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time until next LSP may be sent (ms). The type is interface{} with range:
    // 0..4294967295.
    TimeUntilNextLsp interface{}

    // TRUE if an LSP transmission has been requested. The type is bool.
    LspTransmitRequestedFlag interface{}

    // TRUE if an LSP transmission has been sent, indicates
    // LastLSPLevelTransmitted and LastLSP_IDTransmitted valid. The type is bool.
    LspTransmittedFlag interface{}

    // Number of LSPs that can be sent back to back in the current window without
    // exceeding the pacing limit. The type is interface{} with range:
    // 0..4294967295.
    LspTxmitdB2BLimit interface{}

    // Time im msecs indicating the end of the window in which the 'back to back
    // lsps to be sent' counter applies. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    LspTxmtB2BMsecs interface{}

    // Level of the Last LSP Transmitted. The type is IsisLevel.
    LastLspLevelTransmitted interface{}

    // Last LSP ID Transmitted. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LastLspIdTransmitted interface{}

    // Is CLNS protcol up or if not, the reason why it is not up.
    ClnsStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus

    // A valid MTU or the reason for the MTU being invalid.
    MtuInfo Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo

    // SNPA state.
    SnpaState Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState

    // Media Specific CLNS state.
    MediaSpecificState Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState
}

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetFilter() yfilter.YFilter { return clnsData.YFilter }

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) SetFilter(yf yfilter.YFilter) { clnsData.YFilter = yf }

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetGoName(yname string) string {
    if yname == "time-until-next-lsp" { return "TimeUntilNextLsp" }
    if yname == "lsp-transmit-requested-flag" { return "LspTransmitRequestedFlag" }
    if yname == "lsp-transmitted-flag" { return "LspTransmittedFlag" }
    if yname == "lsp-txmitd-b2b-limit" { return "LspTxmitdB2BLimit" }
    if yname == "lsp-txmt-b2b-msecs" { return "LspTxmtB2BMsecs" }
    if yname == "last-lsp-level-transmitted" { return "LastLspLevelTransmitted" }
    if yname == "last-lsp-id-transmitted" { return "LastLspIdTransmitted" }
    if yname == "clns-status" { return "ClnsStatus" }
    if yname == "mtu-info" { return "MtuInfo" }
    if yname == "snpa-state" { return "SnpaState" }
    if yname == "media-specific-state" { return "MediaSpecificState" }
    return ""
}

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetSegmentPath() string {
    return "clns-data"
}

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "clns-status" {
        return &clnsData.ClnsStatus
    }
    if childYangName == "mtu-info" {
        return &clnsData.MtuInfo
    }
    if childYangName == "snpa-state" {
        return &clnsData.SnpaState
    }
    if childYangName == "media-specific-state" {
        return &clnsData.MediaSpecificState
    }
    return nil
}

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["clns-status"] = &clnsData.ClnsStatus
    children["mtu-info"] = &clnsData.MtuInfo
    children["snpa-state"] = &clnsData.SnpaState
    children["media-specific-state"] = &clnsData.MediaSpecificState
    return children
}

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["time-until-next-lsp"] = clnsData.TimeUntilNextLsp
    leafs["lsp-transmit-requested-flag"] = clnsData.LspTransmitRequestedFlag
    leafs["lsp-transmitted-flag"] = clnsData.LspTransmittedFlag
    leafs["lsp-txmitd-b2b-limit"] = clnsData.LspTxmitdB2BLimit
    leafs["lsp-txmt-b2b-msecs"] = clnsData.LspTxmtB2BMsecs
    leafs["last-lsp-level-transmitted"] = clnsData.LastLspLevelTransmitted
    leafs["last-lsp-id-transmitted"] = clnsData.LastLspIdTransmitted
    return leafs
}

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetBundleName() string { return "cisco_ios_xr" }

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetYangName() string { return "clns-data" }

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) SetParent(parent types.Entity) { clnsData.parent = parent }

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetParent() types.Entity { return clnsData.parent }

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus
// Is CLNS protcol up or if not, the reason why it
// is not up
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisUp.
    Status interface{}

    // State describing why CLNS is down.
    ClnsDownInfo Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo
}

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetFilter() yfilter.YFilter { return clnsStatus.YFilter }

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) SetFilter(yf yfilter.YFilter) { clnsStatus.YFilter = yf }

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "clns-down-info" { return "ClnsDownInfo" }
    return ""
}

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetSegmentPath() string {
    return "clns-status"
}

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "clns-down-info" {
        return &clnsStatus.ClnsDownInfo
    }
    return nil
}

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["clns-down-info"] = &clnsStatus.ClnsDownInfo
    return children
}

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = clnsStatus.Status
    return leafs
}

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetBundleName() string { return "cisco_ios_xr" }

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetYangName() string { return "clns-status" }

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) SetParent(parent types.Entity) { clnsStatus.parent = parent }

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetParent() types.Entity { return clnsStatus.parent }

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetParentYangName() string { return "clns-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo
// State describing why CLNS is down
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why CLNS is down. The type is IsisIfClnsProtoDownReason.
    ReasonCode interface{}
}

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetFilter() yfilter.YFilter { return clnsDownInfo.YFilter }

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) SetFilter(yf yfilter.YFilter) { clnsDownInfo.YFilter = yf }

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetSegmentPath() string {
    return "clns-down-info"
}

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = clnsDownInfo.ReasonCode
    return leafs
}

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetBundleName() string { return "cisco_ios_xr" }

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetYangName() string { return "clns-down-info" }

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) SetParent(parent types.Entity) { clnsDownInfo.parent = parent }

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetParent() types.Entity { return clnsDownInfo.parent }

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetParentYangName() string { return "clns-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo
// A valid MTU or the reason for the MTU being
// invalid
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisValid.
    Status interface{}

    // Valid MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Information pertaining to the invalid CLNS MTU.
    Invalid Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid
}

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetFilter() yfilter.YFilter { return mtuInfo.YFilter }

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) SetFilter(yf yfilter.YFilter) { mtuInfo.YFilter = yf }

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "mtu" { return "Mtu" }
    if yname == "invalid" { return "Invalid" }
    return ""
}

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetSegmentPath() string {
    return "mtu-info"
}

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "invalid" {
        return &mtuInfo.Invalid
    }
    return nil
}

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["invalid"] = &mtuInfo.Invalid
    return children
}

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = mtuInfo.Status
    leafs["mtu"] = mtuInfo.Mtu
    return leafs
}

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetBundleName() string { return "cisco_ios_xr" }

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetYangName() string { return "mtu-info" }

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) SetParent(parent types.Entity) { mtuInfo.parent = parent }

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetParent() types.Entity { return mtuInfo.parent }

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetParentYangName() string { return "clns-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid
// Information pertaining to the invalid CLNS MTU
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the MTU is invalid. The type is IsisIfClnsMtuInvalidReason.
    ReasonCode interface{}
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetFilter() yfilter.YFilter { return invalid.YFilter }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) SetFilter(yf yfilter.YFilter) { invalid.YFilter = yf }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetSegmentPath() string {
    return "invalid"
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = invalid.ReasonCode
    return leafs
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetBundleName() string { return "cisco_ios_xr" }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetYangName() string { return "invalid" }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) SetParent(parent types.Entity) { invalid.parent = parent }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetParent() types.Entity { return invalid.parent }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetParentYangName() string { return "mtu-info" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState
// SNPA state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisKnown.
    Status interface{}

    // Information pertaining to the unknown SNPA state.
    Unknown Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown

    // Information pertaining to the known SNPA state.
    Known Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known
}

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetFilter() yfilter.YFilter { return snpaState.YFilter }

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) SetFilter(yf yfilter.YFilter) { snpaState.YFilter = yf }

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "unknown" { return "Unknown" }
    if yname == "known" { return "Known" }
    return ""
}

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetSegmentPath() string {
    return "snpa-state"
}

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unknown" {
        return &snpaState.Unknown
    }
    if childYangName == "known" {
        return &snpaState.Known
    }
    return nil
}

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["unknown"] = &snpaState.Unknown
    children["known"] = &snpaState.Known
    return children
}

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = snpaState.Status
    return leafs
}

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetBundleName() string { return "cisco_ios_xr" }

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetYangName() string { return "snpa-state" }

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) SetParent(parent types.Entity) { snpaState.parent = parent }

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetParent() types.Entity { return snpaState.parent }

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetParentYangName() string { return "clns-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown
// Information pertaining to the unknown SNPA state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the SNPA is unknown. The type is IsisIfClnsSnpaUnknownReason.
    ReasonCode interface{}
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetFilter() yfilter.YFilter { return unknown.YFilter }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) SetFilter(yf yfilter.YFilter) { unknown.YFilter = yf }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetSegmentPath() string {
    return "unknown"
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = unknown.ReasonCode
    return leafs
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetBundleName() string { return "cisco_ios_xr" }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetYangName() string { return "unknown" }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) SetParent(parent types.Entity) { unknown.parent = parent }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetParent() types.Entity { return unknown.parent }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetParentYangName() string { return "snpa-state" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known
// Information pertaining to the known SNPA state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Valid SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    Snpa interface{}
}

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetFilter() yfilter.YFilter { return known.YFilter }

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) SetFilter(yf yfilter.YFilter) { known.YFilter = yf }

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetGoName(yname string) string {
    if yname == "snpa" { return "Snpa" }
    return ""
}

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetSegmentPath() string {
    return "known"
}

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["snpa"] = known.Snpa
    return leafs
}

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetBundleName() string { return "cisco_ios_xr" }

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetYangName() string { return "known" }

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) SetParent(parent types.Entity) { known.parent = parent }

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetParent() types.Entity { return known.parent }

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetParentYangName() string { return "snpa-state" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState
// Media Specific CLNS state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // CLNSMediaType. The type is IsisMediaClass.
    ClnsMediaType interface{}

    // LAN state.
    ClnsLanData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData

    // Point-to-point state.
    ClnsP2PData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData
}

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetFilter() yfilter.YFilter { return mediaSpecificState.YFilter }

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) SetFilter(yf yfilter.YFilter) { mediaSpecificState.YFilter = yf }

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetGoName(yname string) string {
    if yname == "clns-media-type" { return "ClnsMediaType" }
    if yname == "clns-lan-data" { return "ClnsLanData" }
    if yname == "clns-p2p-data" { return "ClnsP2PData" }
    return ""
}

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetSegmentPath() string {
    return "media-specific-state"
}

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "clns-lan-data" {
        return &mediaSpecificState.ClnsLanData
    }
    if childYangName == "clns-p2p-data" {
        return &mediaSpecificState.ClnsP2PData
    }
    return nil
}

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["clns-lan-data"] = &mediaSpecificState.ClnsLanData
    children["clns-p2p-data"] = &mediaSpecificState.ClnsP2PData
    return children
}

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["clns-media-type"] = mediaSpecificState.ClnsMediaType
    return leafs
}

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetBundleName() string { return "cisco_ios_xr" }

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetYangName() string { return "media-specific-state" }

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) SetParent(parent types.Entity) { mediaSpecificState.parent = parent }

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetParent() types.Entity { return mediaSpecificState.parent }

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetParentYangName() string { return "clns-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData
// LAN state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array of per area CLNS data. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData.
    PerAreaData []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData
}

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetFilter() yfilter.YFilter { return clnsLanData.YFilter }

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) SetFilter(yf yfilter.YFilter) { clnsLanData.YFilter = yf }

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetGoName(yname string) string {
    if yname == "per-area-data" { return "PerAreaData" }
    return ""
}

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetSegmentPath() string {
    return "clns-lan-data"
}

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-area-data" {
        for _, c := range clnsLanData.PerAreaData {
            if clnsLanData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData{}
        clnsLanData.PerAreaData = append(clnsLanData.PerAreaData, child)
        return &clnsLanData.PerAreaData[len(clnsLanData.PerAreaData)-1]
    }
    return nil
}

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range clnsLanData.PerAreaData {
        children[clnsLanData.PerAreaData[i].GetSegmentPath()] = &clnsLanData.PerAreaData[i]
    }
    return children
}

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetBundleName() string { return "cisco_ios_xr" }

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetYangName() string { return "clns-lan-data" }

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) SetParent(parent types.Entity) { clnsLanData.parent = parent }

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetParent() types.Entity { return clnsLanData.parent }

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetParentYangName() string { return "media-specific-state" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData
// Array of per area CLNS data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level of the area. The type is IsisLevel.
    Level interface{}

    // Multicast group membership status.
    MulticastStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetFilter() yfilter.YFilter { return perAreaData.YFilter }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) SetFilter(yf yfilter.YFilter) { perAreaData.YFilter = yf }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "multicast-status" { return "MulticastStatus" }
    return ""
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetSegmentPath() string {
    return "per-area-data"
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "multicast-status" {
        return &perAreaData.MulticastStatus
    }
    return nil
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["multicast-status"] = &perAreaData.MulticastStatus
    return children
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = perAreaData.Level
    return leafs
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetBundleName() string { return "cisco_ios_xr" }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetYangName() string { return "per-area-data" }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) SetParent(parent types.Entity) { perAreaData.parent = parent }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetParent() types.Entity { return perAreaData.parent }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetParentYangName() string { return "clns-lan-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus
// Multicast group membership status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisValid.
    Status interface{}

    // Information pertaining to the invalid multicast status.
    Invalid Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetFilter() yfilter.YFilter { return multicastStatus.YFilter }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) SetFilter(yf yfilter.YFilter) { multicastStatus.YFilter = yf }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "invalid" { return "Invalid" }
    return ""
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetSegmentPath() string {
    return "multicast-status"
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "invalid" {
        return &multicastStatus.Invalid
    }
    return nil
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["invalid"] = &multicastStatus.Invalid
    return children
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = multicastStatus.Status
    return leafs
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetBundleName() string { return "cisco_ios_xr" }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetYangName() string { return "multicast-status" }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) SetParent(parent types.Entity) { multicastStatus.parent = parent }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetParent() types.Entity { return multicastStatus.parent }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetParentYangName() string { return "per-area-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid
// Information pertaining to the invalid multicast
// status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the multicast status is invalid. The type is
    // IsisIfMcastInvalidReason.
    ReasonCode interface{}
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetFilter() yfilter.YFilter { return invalid.YFilter }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) SetFilter(yf yfilter.YFilter) { invalid.YFilter = yf }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetSegmentPath() string {
    return "invalid"
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = invalid.ReasonCode
    return leafs
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetBundleName() string { return "cisco_ios_xr" }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetYangName() string { return "invalid" }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) SetParent(parent types.Entity) { invalid.parent = parent }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetParent() types.Entity { return invalid.parent }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetParentYangName() string { return "multicast-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData
// Point-to-point state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Point-to-point over LAN data.
    P2POverLanData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData
}

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetFilter() yfilter.YFilter { return clnsP2PData.YFilter }

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) SetFilter(yf yfilter.YFilter) { clnsP2PData.YFilter = yf }

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetGoName(yname string) string {
    if yname == "p2p-over-lan-data" { return "P2POverLanData" }
    return ""
}

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetSegmentPath() string {
    return "clns-p2p-data"
}

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "p2p-over-lan-data" {
        return &clnsP2PData.P2POverLanData
    }
    return nil
}

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["p2p-over-lan-data"] = &clnsP2PData.P2POverLanData
    return children
}

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetBundleName() string { return "cisco_ios_xr" }

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetYangName() string { return "clns-p2p-data" }

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) SetParent(parent types.Entity) { clnsP2PData.parent = parent }

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetParent() types.Entity { return clnsP2PData.parent }

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetParentYangName() string { return "media-specific-state" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData
// Point-to-point over LAN data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Multicast group membership status.
    MulticastStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus
}

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetFilter() yfilter.YFilter { return p2POverLanData.YFilter }

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) SetFilter(yf yfilter.YFilter) { p2POverLanData.YFilter = yf }

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetGoName(yname string) string {
    if yname == "multicast-status" { return "MulticastStatus" }
    return ""
}

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetSegmentPath() string {
    return "p2p-over-lan-data"
}

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "multicast-status" {
        return &p2POverLanData.MulticastStatus
    }
    return nil
}

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["multicast-status"] = &p2POverLanData.MulticastStatus
    return children
}

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetBundleName() string { return "cisco_ios_xr" }

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetYangName() string { return "p2p-over-lan-data" }

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) SetParent(parent types.Entity) { p2POverLanData.parent = parent }

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetParent() types.Entity { return p2POverLanData.parent }

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetParentYangName() string { return "clns-p2p-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus
// Multicast group membership status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisValid.
    Status interface{}

    // Information pertaining to the invalid multicast status.
    Invalid Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetFilter() yfilter.YFilter { return multicastStatus.YFilter }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) SetFilter(yf yfilter.YFilter) { multicastStatus.YFilter = yf }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "invalid" { return "Invalid" }
    return ""
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetSegmentPath() string {
    return "multicast-status"
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "invalid" {
        return &multicastStatus.Invalid
    }
    return nil
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["invalid"] = &multicastStatus.Invalid
    return children
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = multicastStatus.Status
    return leafs
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetBundleName() string { return "cisco_ios_xr" }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetYangName() string { return "multicast-status" }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) SetParent(parent types.Entity) { multicastStatus.parent = parent }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetParent() types.Entity { return multicastStatus.parent }

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetParentYangName() string { return "p2p-over-lan-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid
// Information pertaining to the invalid multicast
// status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the multicast status is invalid. The type is
    // IsisIfMcastInvalidReason.
    ReasonCode interface{}
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetFilter() yfilter.YFilter { return invalid.YFilter }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) SetFilter(yf yfilter.YFilter) { invalid.YFilter = yf }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetSegmentPath() string {
    return "invalid"
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = invalid.ReasonCode
    return leafs
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetBundleName() string { return "cisco_ios_xr" }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetYangName() string { return "invalid" }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) SetParent(parent types.Entity) { invalid.parent = parent }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetParent() types.Entity { return invalid.parent }

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetParentYangName() string { return "multicast-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetFilter() yfilter.YFilter { return underlyingInterface.YFilter }

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) SetFilter(yf yfilter.YFilter) { underlyingInterface.YFilter = yf }

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetSegmentPath() string {
    return "underlying-interface"
}

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = underlyingInterface.InterfaceHandle
    leafs["interface-name"] = underlyingInterface.InterfaceName
    return leafs
}

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetBundleName() string { return "cisco_ios_xr" }

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetYangName() string { return "underlying-interface" }

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) SetParent(parent types.Entity) { underlyingInterface.parent = parent }

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetParent() types.Entity { return underlyingInterface.parent }

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData
// Array of area information for an active
// interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level of the area. The type is IsisLevel.
    Level interface{}

    // Number of adjacencies. The type is interface{} with range: 0..4294967295.
    AdjacencyCount interface{}

    // LSP pacing time period (ms). The type is interface{} with range:
    // 0..4294967295.
    LspPacingInterval interface{}

    // No. of SNP entries queued to be transmitted. The type is interface{} with
    // range: 0..4294967295.
    PsnpTransmitQueueSize interface{}

    // Hello interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Hello Multiplier. The type is interface{} with range: 0..4294967295.
    HelloMultiplier interface{}

    // LAN data, NULL iff interface has non-LAN media type.
    LanData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetFilter() yfilter.YFilter { return perAreaData.YFilter }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) SetFilter(yf yfilter.YFilter) { perAreaData.YFilter = yf }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "adjacency-count" { return "AdjacencyCount" }
    if yname == "lsp-pacing-interval" { return "LspPacingInterval" }
    if yname == "psnp-transmit-queue-size" { return "PsnpTransmitQueueSize" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "hello-multiplier" { return "HelloMultiplier" }
    if yname == "lan-data" { return "LanData" }
    return ""
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetSegmentPath() string {
    return "per-area-data"
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lan-data" {
        return &perAreaData.LanData
    }
    return nil
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lan-data"] = &perAreaData.LanData
    return children
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = perAreaData.Level
    leafs["adjacency-count"] = perAreaData.AdjacencyCount
    leafs["lsp-pacing-interval"] = perAreaData.LspPacingInterval
    leafs["psnp-transmit-queue-size"] = perAreaData.PsnpTransmitQueueSize
    leafs["hello-interval"] = perAreaData.HelloInterval
    leafs["hello-multiplier"] = perAreaData.HelloMultiplier
    return leafs
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetBundleName() string { return "cisco_ios_xr" }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetYangName() string { return "per-area-data" }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) SetParent(parent types.Entity) { perAreaData.parent = parent }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetParent() types.Entity { return perAreaData.parent }

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData
// LAN data, NULL iff interface has non-LAN media
// type
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Circuit LAN ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    CircuitLanId interface{}

    // Time (ms) until next IIH. The type is interface{} with range:
    // 0..4294967295.
    TimeUntilNextIih interface{}

    // Interface's DIS-election priority. The type is interface{} with range:
    // 0..255.
    InterfacePriority interface{}

    // Priority of current DIS on this LAN. The type is interface{} with range:
    // 0..255.
    Dispriority interface{}

    // Flag indicating if this LAN circuit is the DIS. The type is bool.
    AreWeDis interface{}
}

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetFilter() yfilter.YFilter { return lanData.YFilter }

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) SetFilter(yf yfilter.YFilter) { lanData.YFilter = yf }

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetGoName(yname string) string {
    if yname == "circuit-lan-id" { return "CircuitLanId" }
    if yname == "time-until-next-iih" { return "TimeUntilNextIih" }
    if yname == "interface-priority" { return "InterfacePriority" }
    if yname == "dispriority" { return "Dispriority" }
    if yname == "are-we-dis" { return "AreWeDis" }
    return ""
}

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetSegmentPath() string {
    return "lan-data"
}

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["circuit-lan-id"] = lanData.CircuitLanId
    leafs["time-until-next-iih"] = lanData.TimeUntilNextIih
    leafs["interface-priority"] = lanData.InterfacePriority
    leafs["dispriority"] = lanData.Dispriority
    leafs["are-we-dis"] = lanData.AreWeDis
    return leafs
}

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetBundleName() string { return "cisco_ios_xr" }

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetYangName() string { return "lan-data" }

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) SetParent(parent types.Entity) { lanData.parent = parent }

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetParent() types.Entity { return lanData.parent }

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetParentYangName() string { return "per-area-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData
// Array of topology information
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology identifier.
    TopologyId Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId

    // Status of the topology.
    Status Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status
}

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetFilter() yfilter.YFilter { return perTopologyData.YFilter }

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) SetFilter(yf yfilter.YFilter) { perTopologyData.YFilter = yf }

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetGoName(yname string) string {
    if yname == "topology-id" { return "TopologyId" }
    if yname == "status" { return "Status" }
    return ""
}

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetSegmentPath() string {
    return "per-topology-data"
}

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "topology-id" {
        return &perTopologyData.TopologyId
    }
    if childYangName == "status" {
        return &perTopologyData.Status
    }
    return nil
}

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["topology-id"] = &perTopologyData.TopologyId
    children["status"] = &perTopologyData.Status
    return children
}

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetBundleName() string { return "cisco_ios_xr" }

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetYangName() string { return "per-topology-data" }

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) SetParent(parent types.Entity) { perTopologyData.parent = parent }

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetParent() types.Entity { return perTopologyData.parent }

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId
// Topology identifier
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetFilter() yfilter.YFilter { return topologyId.YFilter }

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) SetFilter(yf yfilter.YFilter) { topologyId.YFilter = yf }

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "topology-name" { return "TopologyName" }
    return ""
}

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetSegmentPath() string {
    return "topology-id"
}

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = topologyId.AfName
    leafs["saf-name"] = topologyId.SafName
    leafs["vrf-name"] = topologyId.VrfName
    leafs["topology-name"] = topologyId.TopologyName
    return leafs
}

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetBundleName() string { return "cisco_ios_xr" }

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetYangName() string { return "topology-id" }

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) SetParent(parent types.Entity) { topologyId.parent = parent }

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetParent() types.Entity { return topologyId.parent }

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetParentYangName() string { return "per-topology-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status
// Status of the topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled information of a topology.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled

    // Enabled information of a topology.
    Enabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled
}

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetFilter() yfilter.YFilter { return status.YFilter }

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) SetFilter(yf yfilter.YFilter) { status.YFilter = yf }

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "disabled" { return "Disabled" }
    if yname == "enabled" { return "Enabled" }
    return ""
}

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetSegmentPath() string {
    return "status"
}

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "disabled" {
        return &status.Disabled
    }
    if childYangName == "enabled" {
        return &status.Enabled
    }
    return nil
}

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["disabled"] = &status.Disabled
    children["enabled"] = &status.Enabled
    return children
}

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = status.Status
    return leafs
}

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetBundleName() string { return "cisco_ios_xr" }

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetYangName() string { return "status" }

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) SetParent(parent types.Entity) { status.parent = parent }

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetParent() types.Entity { return status.parent }

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetParentYangName() string { return "per-topology-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled
// Disabled information of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the topology is disabled. The type is IsisIfTopoDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetFilter() yfilter.YFilter { return disabled.YFilter }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) SetFilter(yf yfilter.YFilter) { disabled.YFilter = yf }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetSegmentPath() string {
    return "disabled"
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = disabled.ReasonCode
    return leafs
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetBundleName() string { return "cisco_ios_xr" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetYangName() string { return "disabled" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) SetParent(parent types.Entity) { disabled.parent = parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetParent() types.Entity { return disabled.parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetParentYangName() string { return "status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled
// Enabled information of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L1 metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level1Metric interface{}

    // L2 metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level2Metric interface{}

    // L1 metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level1Weight interface{}

    // L2 metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level2Weight interface{}

    // MPLS maximum number of pri labels supported. The type is interface{} with
    // range: 0..255.
    MaxLabelSupported interface{}

    // MPLS maximum number of backup labels supported. The type is interface{}
    // with range: 0..255.
    MaxBkpLabelSupported interface{}

    // MPLS maximum number of srte labels supported. The type is interface{} with
    // range: 0..255.
    MaxSrteLabelSupported interface{}

    // MPLS LDP sync enabled status for L1. The type is bool.
    Level1LdpSyncEnabled interface{}

    // MPLS LDP sync enabled status for L2. The type is bool.
    Level2LdpSyncEnabled interface{}

    // Status of MPLS LDP synchronization. The type is bool.
    LdpSyncStatus interface{}

    // Status of MPLS LDPv6 synchronization. The type is bool.
    LdPv6SyncStatus interface{}

    // L1 metric-offset for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level1OffsetMetric interface{}

    // L2 metric-offset for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level2OffsetMetric interface{}

    // Link-Group configure status for L1. The type is bool.
    Level1LkgpConfigured interface{}

    // Link-Group configure status for L2. The type is bool.
    Level2LkgpConfigured interface{}

    // L1 PP-metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level1PpMetric interface{}

    // L2 PP-metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level2PpMetric interface{}

    // PP configure status for L1. The type is bool.
    Level1PpConfigured interface{}

    // PP configure status for L2. The type is bool.
    Level2PpConfigured interface{}

    // Adjacency formation status of a topology.
    AdjacencyFormStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus

    // Prefix advertisement status of a topology.
    AdvPrefixStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus

    // Level1 FRR information.
    Level1Frr Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr

    // Level2 FRR information.
    Level2Frr Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr

    // Array of Manual Adjacency SIDs. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid.
    ManualAdjSid []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetFilter() yfilter.YFilter { return enabled.YFilter }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) SetFilter(yf yfilter.YFilter) { enabled.YFilter = yf }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetGoName(yname string) string {
    if yname == "level1-metric" { return "Level1Metric" }
    if yname == "level2-metric" { return "Level2Metric" }
    if yname == "level1-weight" { return "Level1Weight" }
    if yname == "level2-weight" { return "Level2Weight" }
    if yname == "max-label-supported" { return "MaxLabelSupported" }
    if yname == "max-bkp-label-supported" { return "MaxBkpLabelSupported" }
    if yname == "max-srte-label-supported" { return "MaxSrteLabelSupported" }
    if yname == "level1ldp-sync-enabled" { return "Level1LdpSyncEnabled" }
    if yname == "level2ldp-sync-enabled" { return "Level2LdpSyncEnabled" }
    if yname == "ldp-sync-status" { return "LdpSyncStatus" }
    if yname == "ld-pv6-sync-status" { return "LdPv6SyncStatus" }
    if yname == "level1-offset-metric" { return "Level1OffsetMetric" }
    if yname == "level2-offset-metric" { return "Level2OffsetMetric" }
    if yname == "level1-lkgp-configured" { return "Level1LkgpConfigured" }
    if yname == "level2-lkgp-configured" { return "Level2LkgpConfigured" }
    if yname == "level1pp-metric" { return "Level1PpMetric" }
    if yname == "level2pp-metric" { return "Level2PpMetric" }
    if yname == "level1pp-configured" { return "Level1PpConfigured" }
    if yname == "level2pp-configured" { return "Level2PpConfigured" }
    if yname == "adjacency-form-status" { return "AdjacencyFormStatus" }
    if yname == "adv-prefix-status" { return "AdvPrefixStatus" }
    if yname == "level1-frr" { return "Level1Frr" }
    if yname == "level2-frr" { return "Level2Frr" }
    if yname == "manual-adj-sid" { return "ManualAdjSid" }
    return ""
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetSegmentPath() string {
    return "enabled"
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "adjacency-form-status" {
        return &enabled.AdjacencyFormStatus
    }
    if childYangName == "adv-prefix-status" {
        return &enabled.AdvPrefixStatus
    }
    if childYangName == "level1-frr" {
        return &enabled.Level1Frr
    }
    if childYangName == "level2-frr" {
        return &enabled.Level2Frr
    }
    if childYangName == "manual-adj-sid" {
        for _, c := range enabled.ManualAdjSid {
            if enabled.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid{}
        enabled.ManualAdjSid = append(enabled.ManualAdjSid, child)
        return &enabled.ManualAdjSid[len(enabled.ManualAdjSid)-1]
    }
    return nil
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["adjacency-form-status"] = &enabled.AdjacencyFormStatus
    children["adv-prefix-status"] = &enabled.AdvPrefixStatus
    children["level1-frr"] = &enabled.Level1Frr
    children["level2-frr"] = &enabled.Level2Frr
    for i := range enabled.ManualAdjSid {
        children[enabled.ManualAdjSid[i].GetSegmentPath()] = &enabled.ManualAdjSid[i]
    }
    return children
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level1-metric"] = enabled.Level1Metric
    leafs["level2-metric"] = enabled.Level2Metric
    leafs["level1-weight"] = enabled.Level1Weight
    leafs["level2-weight"] = enabled.Level2Weight
    leafs["max-label-supported"] = enabled.MaxLabelSupported
    leafs["max-bkp-label-supported"] = enabled.MaxBkpLabelSupported
    leafs["max-srte-label-supported"] = enabled.MaxSrteLabelSupported
    leafs["level1ldp-sync-enabled"] = enabled.Level1LdpSyncEnabled
    leafs["level2ldp-sync-enabled"] = enabled.Level2LdpSyncEnabled
    leafs["ldp-sync-status"] = enabled.LdpSyncStatus
    leafs["ld-pv6-sync-status"] = enabled.LdPv6SyncStatus
    leafs["level1-offset-metric"] = enabled.Level1OffsetMetric
    leafs["level2-offset-metric"] = enabled.Level2OffsetMetric
    leafs["level1-lkgp-configured"] = enabled.Level1LkgpConfigured
    leafs["level2-lkgp-configured"] = enabled.Level2LkgpConfigured
    leafs["level1pp-metric"] = enabled.Level1PpMetric
    leafs["level2pp-metric"] = enabled.Level2PpMetric
    leafs["level1pp-configured"] = enabled.Level1PpConfigured
    leafs["level2pp-configured"] = enabled.Level2PpConfigured
    return leafs
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetBundleName() string { return "cisco_ios_xr" }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetYangName() string { return "enabled" }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) SetParent(parent types.Entity) { enabled.parent = parent }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetParent() types.Entity { return enabled.parent }

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetParentYangName() string { return "status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus
// Adjacency formation status of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled state for the adjacency formation status of a topology.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetFilter() yfilter.YFilter { return adjacencyFormStatus.YFilter }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) SetFilter(yf yfilter.YFilter) { adjacencyFormStatus.YFilter = yf }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "disabled" { return "Disabled" }
    return ""
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetSegmentPath() string {
    return "adjacency-form-status"
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "disabled" {
        return &adjacencyFormStatus.Disabled
    }
    return nil
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["disabled"] = &adjacencyFormStatus.Disabled
    return children
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = adjacencyFormStatus.Status
    return leafs
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetYangName() string { return "adjacency-form-status" }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) SetParent(parent types.Entity) { adjacencyFormStatus.parent = parent }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetParent() types.Entity { return adjacencyFormStatus.parent }

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled
// Disabled state for the adjacency formation
// status of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the adjacency formation status of a topology is disabled. The
    // type is IsisIfTopoAdjFormDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetFilter() yfilter.YFilter { return disabled.YFilter }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) SetFilter(yf yfilter.YFilter) { disabled.YFilter = yf }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetSegmentPath() string {
    return "disabled"
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = disabled.ReasonCode
    return leafs
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetBundleName() string { return "cisco_ios_xr" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetYangName() string { return "disabled" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) SetParent(parent types.Entity) { disabled.parent = parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetParent() types.Entity { return disabled.parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetParentYangName() string { return "adjacency-form-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus
// Prefix advertisement status of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled state for the prefix advertisement status of a topology.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetFilter() yfilter.YFilter { return advPrefixStatus.YFilter }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) SetFilter(yf yfilter.YFilter) { advPrefixStatus.YFilter = yf }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "disabled" { return "Disabled" }
    return ""
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetSegmentPath() string {
    return "adv-prefix-status"
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "disabled" {
        return &advPrefixStatus.Disabled
    }
    return nil
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["disabled"] = &advPrefixStatus.Disabled
    return children
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = advPrefixStatus.Status
    return leafs
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetBundleName() string { return "cisco_ios_xr" }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetYangName() string { return "adv-prefix-status" }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) SetParent(parent types.Entity) { advPrefixStatus.parent = parent }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetParent() types.Entity { return advPrefixStatus.parent }

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled
// Disabled state for the prefix advertisement
// status of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the prefix advertisement status of a topology is disabled. The
    // type is IsisIfTopoAdvPrefixDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetFilter() yfilter.YFilter { return disabled.YFilter }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) SetFilter(yf yfilter.YFilter) { disabled.YFilter = yf }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetSegmentPath() string {
    return "disabled"
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = disabled.ReasonCode
    return leafs
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetBundleName() string { return "cisco_ios_xr" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetYangName() string { return "disabled" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) SetParent(parent types.Entity) { disabled.parent = parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetParent() types.Entity { return disabled.parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetParentYangName() string { return "adv-prefix-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr
// Level1 FRR information
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FRR type configured per level for this interface. The type is IsisFrr.
    FrrType interface{}

    // Is FRR enabled per level on this interface. The type is bool.
    IsFrr interface{}

    // Is FRR Remote LFA enabled per level for this interface. The type is bool.
    IsRemoteLfa interface{}

    // Is FRR TI LFA enabled per level for this interface. The type is bool.
    IsTiLfa interface{}

    // TI LFA node-protecting Tie breaker index. The type is interface{} with
    // range: 0..255.
    TiLfaNodeTieBreakerIndex interface{}

    // TI LFA srlg Tie breaker index. The type is interface{} with range: 0..255.
    TiLfaSrlgTieBreaker interface{}

    // Is Tiebreaker configured per level for this interface. The type is bool.
    IsTieBreakersConfigured interface{}

    // FRR TieBreakers array per level for this interface. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker.
    FrrTieBreaker []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker
}

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetFilter() yfilter.YFilter { return level1Frr.YFilter }

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) SetFilter(yf yfilter.YFilter) { level1Frr.YFilter = yf }

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetGoName(yname string) string {
    if yname == "frr-type" { return "FrrType" }
    if yname == "is-frr" { return "IsFrr" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-ti-lfa" { return "IsTiLfa" }
    if yname == "ti-lfa-node-tie-breaker-index" { return "TiLfaNodeTieBreakerIndex" }
    if yname == "ti-lfa-srlg-tie-breaker" { return "TiLfaSrlgTieBreaker" }
    if yname == "is-tie-breakers-configured" { return "IsTieBreakersConfigured" }
    if yname == "frr-tie-breaker" { return "FrrTieBreaker" }
    return ""
}

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetSegmentPath() string {
    return "level1-frr"
}

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-tie-breaker" {
        for _, c := range level1Frr.FrrTieBreaker {
            if level1Frr.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker{}
        level1Frr.FrrTieBreaker = append(level1Frr.FrrTieBreaker, child)
        return &level1Frr.FrrTieBreaker[len(level1Frr.FrrTieBreaker)-1]
    }
    return nil
}

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range level1Frr.FrrTieBreaker {
        children[level1Frr.FrrTieBreaker[i].GetSegmentPath()] = &level1Frr.FrrTieBreaker[i]
    }
    return children
}

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["frr-type"] = level1Frr.FrrType
    leafs["is-frr"] = level1Frr.IsFrr
    leafs["is-remote-lfa"] = level1Frr.IsRemoteLfa
    leafs["is-ti-lfa"] = level1Frr.IsTiLfa
    leafs["ti-lfa-node-tie-breaker-index"] = level1Frr.TiLfaNodeTieBreakerIndex
    leafs["ti-lfa-srlg-tie-breaker"] = level1Frr.TiLfaSrlgTieBreaker
    leafs["is-tie-breakers-configured"] = level1Frr.IsTieBreakersConfigured
    return leafs
}

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetBundleName() string { return "cisco_ios_xr" }

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetYangName() string { return "level1-frr" }

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) SetParent(parent types.Entity) { level1Frr.parent = parent }

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetParent() types.Entity { return level1Frr.parent }

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker
// FRR TieBreakers array per level for this
// interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tie Breaker Type. The type is IsisFrrTiebreaker.
    TieBreaker interface{}

    // Tie Breaker Index. The type is interface{} with range: 0..255.
    Index interface{}
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetFilter() yfilter.YFilter { return frrTieBreaker.YFilter }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) SetFilter(yf yfilter.YFilter) { frrTieBreaker.YFilter = yf }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetGoName(yname string) string {
    if yname == "tie-breaker" { return "TieBreaker" }
    if yname == "index" { return "Index" }
    return ""
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetSegmentPath() string {
    return "frr-tie-breaker"
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tie-breaker"] = frrTieBreaker.TieBreaker
    leafs["index"] = frrTieBreaker.Index
    return leafs
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetBundleName() string { return "cisco_ios_xr" }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetYangName() string { return "frr-tie-breaker" }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) SetParent(parent types.Entity) { frrTieBreaker.parent = parent }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetParent() types.Entity { return frrTieBreaker.parent }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetParentYangName() string { return "level1-frr" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr
// Level2 FRR information
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FRR type configured per level for this interface. The type is IsisFrr.
    FrrType interface{}

    // Is FRR enabled per level on this interface. The type is bool.
    IsFrr interface{}

    // Is FRR Remote LFA enabled per level for this interface. The type is bool.
    IsRemoteLfa interface{}

    // Is FRR TI LFA enabled per level for this interface. The type is bool.
    IsTiLfa interface{}

    // TI LFA node-protecting Tie breaker index. The type is interface{} with
    // range: 0..255.
    TiLfaNodeTieBreakerIndex interface{}

    // TI LFA srlg Tie breaker index. The type is interface{} with range: 0..255.
    TiLfaSrlgTieBreaker interface{}

    // Is Tiebreaker configured per level for this interface. The type is bool.
    IsTieBreakersConfigured interface{}

    // FRR TieBreakers array per level for this interface. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker.
    FrrTieBreaker []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker
}

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetFilter() yfilter.YFilter { return level2Frr.YFilter }

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) SetFilter(yf yfilter.YFilter) { level2Frr.YFilter = yf }

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetGoName(yname string) string {
    if yname == "frr-type" { return "FrrType" }
    if yname == "is-frr" { return "IsFrr" }
    if yname == "is-remote-lfa" { return "IsRemoteLfa" }
    if yname == "is-ti-lfa" { return "IsTiLfa" }
    if yname == "ti-lfa-node-tie-breaker-index" { return "TiLfaNodeTieBreakerIndex" }
    if yname == "ti-lfa-srlg-tie-breaker" { return "TiLfaSrlgTieBreaker" }
    if yname == "is-tie-breakers-configured" { return "IsTieBreakersConfigured" }
    if yname == "frr-tie-breaker" { return "FrrTieBreaker" }
    return ""
}

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetSegmentPath() string {
    return "level2-frr"
}

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-tie-breaker" {
        for _, c := range level2Frr.FrrTieBreaker {
            if level2Frr.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker{}
        level2Frr.FrrTieBreaker = append(level2Frr.FrrTieBreaker, child)
        return &level2Frr.FrrTieBreaker[len(level2Frr.FrrTieBreaker)-1]
    }
    return nil
}

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range level2Frr.FrrTieBreaker {
        children[level2Frr.FrrTieBreaker[i].GetSegmentPath()] = &level2Frr.FrrTieBreaker[i]
    }
    return children
}

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["frr-type"] = level2Frr.FrrType
    leafs["is-frr"] = level2Frr.IsFrr
    leafs["is-remote-lfa"] = level2Frr.IsRemoteLfa
    leafs["is-ti-lfa"] = level2Frr.IsTiLfa
    leafs["ti-lfa-node-tie-breaker-index"] = level2Frr.TiLfaNodeTieBreakerIndex
    leafs["ti-lfa-srlg-tie-breaker"] = level2Frr.TiLfaSrlgTieBreaker
    leafs["is-tie-breakers-configured"] = level2Frr.IsTieBreakersConfigured
    return leafs
}

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetBundleName() string { return "cisco_ios_xr" }

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetYangName() string { return "level2-frr" }

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) SetParent(parent types.Entity) { level2Frr.parent = parent }

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetParent() types.Entity { return level2Frr.parent }

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker
// FRR TieBreakers array per level for this
// interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tie Breaker Type. The type is IsisFrrTiebreaker.
    TieBreaker interface{}

    // Tie Breaker Index. The type is interface{} with range: 0..255.
    Index interface{}
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetFilter() yfilter.YFilter { return frrTieBreaker.YFilter }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) SetFilter(yf yfilter.YFilter) { frrTieBreaker.YFilter = yf }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetGoName(yname string) string {
    if yname == "tie-breaker" { return "TieBreaker" }
    if yname == "index" { return "Index" }
    return ""
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetSegmentPath() string {
    return "frr-tie-breaker"
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tie-breaker"] = frrTieBreaker.TieBreaker
    leafs["index"] = frrTieBreaker.Index
    return leafs
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetBundleName() string { return "cisco_ios_xr" }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetYangName() string { return "frr-tie-breaker" }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) SetParent(parent types.Entity) { frrTieBreaker.parent = parent }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetParent() types.Entity { return frrTieBreaker.parent }

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetParentYangName() string { return "level2-frr" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid
// Array of Manual Adjacency SIDs
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Manual Adjacency SID Label. The type is interface{} with range:
    // 0..4294967295.
    ManualAdjacencySidLabel interface{}

    // Manual Adjacency SID Index (if configured as index). The type is
    // interface{} with range: 0..4294967295.
    ManualAdjacencySidIndex interface{}

    // Manual Adjacency SID Type (Absolute or Index). The type is interface{} with
    // range: 0..255.
    ManualAdjacencySidType interface{}

    // SID configured as protected by backup path. The type is bool.
    SidProtected interface{}

    // SID is in use. The type is bool.
    SidActive interface{}
}

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetFilter() yfilter.YFilter { return manualAdjSid.YFilter }

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) SetFilter(yf yfilter.YFilter) { manualAdjSid.YFilter = yf }

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetGoName(yname string) string {
    if yname == "manual-adjacency-sid-label" { return "ManualAdjacencySidLabel" }
    if yname == "manual-adjacency-sid-index" { return "ManualAdjacencySidIndex" }
    if yname == "manual-adjacency-sid-type" { return "ManualAdjacencySidType" }
    if yname == "sid-protected" { return "SidProtected" }
    if yname == "sid-active" { return "SidActive" }
    return ""
}

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetSegmentPath() string {
    return "manual-adj-sid"
}

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["manual-adjacency-sid-label"] = manualAdjSid.ManualAdjacencySidLabel
    leafs["manual-adjacency-sid-index"] = manualAdjSid.ManualAdjacencySidIndex
    leafs["manual-adjacency-sid-type"] = manualAdjSid.ManualAdjacencySidType
    leafs["sid-protected"] = manualAdjSid.SidProtected
    leafs["sid-active"] = manualAdjSid.SidActive
    return leafs
}

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetBundleName() string { return "cisco_ios_xr" }

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetYangName() string { return "manual-adj-sid" }

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) SetParent(parent types.Entity) { manualAdjSid.parent = parent }

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetParent() types.Entity { return manualAdjSid.parent }

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData
// Array of address family information
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address Family Identifier of the interface. The type is IsisAfId.
    AfName interface{}

    // Address Family status of the interface.
    AfStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus
}

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetFilter() yfilter.YFilter { return perAddressFamilyData.YFilter }

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) SetFilter(yf yfilter.YFilter) { perAddressFamilyData.YFilter = yf }

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "af-status" { return "AfStatus" }
    return ""
}

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetSegmentPath() string {
    return "per-address-family-data"
}

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "af-status" {
        return &perAddressFamilyData.AfStatus
    }
    return nil
}

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["af-status"] = &perAddressFamilyData.AfStatus
    return children
}

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = perAddressFamilyData.AfName
    return leafs
}

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetBundleName() string { return "cisco_ios_xr" }

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetYangName() string { return "per-address-family-data" }

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) SetParent(parent types.Entity) { perAddressFamilyData.parent = parent }

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetParent() types.Entity { return perAddressFamilyData.parent }

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetParentYangName() string { return "enabled" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus
// Address Family status of the interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled info for the AF of an interface.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled

    // Enabled data for the AF of an interface.
    AfData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData
}

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetFilter() yfilter.YFilter { return afStatus.YFilter }

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) SetFilter(yf yfilter.YFilter) { afStatus.YFilter = yf }

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "disabled" { return "Disabled" }
    if yname == "af-data" { return "AfData" }
    return ""
}

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetSegmentPath() string {
    return "af-status"
}

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "disabled" {
        return &afStatus.Disabled
    }
    if childYangName == "af-data" {
        return &afStatus.AfData
    }
    return nil
}

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["disabled"] = &afStatus.Disabled
    children["af-data"] = &afStatus.AfData
    return children
}

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = afStatus.Status
    return leafs
}

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetBundleName() string { return "cisco_ios_xr" }

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetYangName() string { return "af-status" }

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) SetParent(parent types.Entity) { afStatus.parent = parent }

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetParent() types.Entity { return afStatus.parent }

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetParentYangName() string { return "per-address-family-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled
// Disabled info for the AF of an interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the Address Family is disabled. The type is
    // IsisIfAfDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetFilter() yfilter.YFilter { return disabled.YFilter }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) SetFilter(yf yfilter.YFilter) { disabled.YFilter = yf }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetSegmentPath() string {
    return "disabled"
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = disabled.ReasonCode
    return leafs
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetBundleName() string { return "cisco_ios_xr" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetYangName() string { return "disabled" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) SetParent(parent types.Entity) { disabled.parent = parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetParent() types.Entity { return disabled.parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetParentYangName() string { return "af-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData
// Enabled data for the AF of an interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol status of the AF.
    ProtocolStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus

    // Forwarding status of the AF.
    ForwardingAddressStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus

    // Prefix status of the AF.
    PrefixStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus
}

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetFilter() yfilter.YFilter { return afData.YFilter }

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) SetFilter(yf yfilter.YFilter) { afData.YFilter = yf }

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetGoName(yname string) string {
    if yname == "protocol-status" { return "ProtocolStatus" }
    if yname == "forwarding-address-status" { return "ForwardingAddressStatus" }
    if yname == "prefix-status" { return "PrefixStatus" }
    return ""
}

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetSegmentPath() string {
    return "af-data"
}

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-status" {
        return &afData.ProtocolStatus
    }
    if childYangName == "forwarding-address-status" {
        return &afData.ForwardingAddressStatus
    }
    if childYangName == "prefix-status" {
        return &afData.PrefixStatus
    }
    return nil
}

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-status"] = &afData.ProtocolStatus
    children["forwarding-address-status"] = &afData.ForwardingAddressStatus
    children["prefix-status"] = &afData.PrefixStatus
    return children
}

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetBundleName() string { return "cisco_ios_xr" }

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetYangName() string { return "af-data" }

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) SetParent(parent types.Entity) { afData.parent = parent }

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetParent() types.Entity { return afData.parent }

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetParentYangName() string { return "af-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus
// Protocol status of the AF
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisUp.
    Status interface{}

    // Disabled state of the Address Family protocol.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled
}

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetFilter() yfilter.YFilter { return protocolStatus.YFilter }

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) SetFilter(yf yfilter.YFilter) { protocolStatus.YFilter = yf }

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "disabled" { return "Disabled" }
    return ""
}

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetSegmentPath() string {
    return "protocol-status"
}

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "disabled" {
        return &protocolStatus.Disabled
    }
    return nil
}

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["disabled"] = &protocolStatus.Disabled
    return children
}

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = protocolStatus.Status
    return leafs
}

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetBundleName() string { return "cisco_ios_xr" }

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetYangName() string { return "protocol-status" }

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) SetParent(parent types.Entity) { protocolStatus.parent = parent }

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetParent() types.Entity { return protocolStatus.parent }

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetParentYangName() string { return "af-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled
// Disabled state of the Address Family protocol
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the Address Family protocol status is down. The type is
    // IsisIfAfProtoDownReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetFilter() yfilter.YFilter { return disabled.YFilter }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) SetFilter(yf yfilter.YFilter) { disabled.YFilter = yf }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetSegmentPath() string {
    return "disabled"
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = disabled.ReasonCode
    return leafs
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetBundleName() string { return "cisco_ios_xr" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetYangName() string { return "disabled" }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) SetParent(parent types.Entity) { disabled.parent = parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetParent() types.Entity { return disabled.parent }

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetParentYangName() string { return "protocol-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus
// Forwarding status of the AF
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisKnown.
    Status interface{}

    // Unknown forwarding address data.
    Unknown Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown

    // Known Forwarding address data.
    ForwardingAddressData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData
}

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetFilter() yfilter.YFilter { return forwardingAddressStatus.YFilter }

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) SetFilter(yf yfilter.YFilter) { forwardingAddressStatus.YFilter = yf }

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "unknown" { return "Unknown" }
    if yname == "forwarding-address-data" { return "ForwardingAddressData" }
    return ""
}

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetSegmentPath() string {
    return "forwarding-address-status"
}

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unknown" {
        return &forwardingAddressStatus.Unknown
    }
    if childYangName == "forwarding-address-data" {
        return &forwardingAddressStatus.ForwardingAddressData
    }
    return nil
}

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["unknown"] = &forwardingAddressStatus.Unknown
    children["forwarding-address-data"] = &forwardingAddressStatus.ForwardingAddressData
    return children
}

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = forwardingAddressStatus.Status
    return leafs
}

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetBundleName() string { return "cisco_ios_xr" }

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetYangName() string { return "forwarding-address-status" }

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) SetParent(parent types.Entity) { forwardingAddressStatus.parent = parent }

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetParent() types.Entity { return forwardingAddressStatus.parent }

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetParentYangName() string { return "af-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown
// Unknown forwarding address data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the forwarding address(es) of an AF is(are) unknown. The type is
    // IsisIfAfFwdAddrUnknownReason.
    ReasonCode interface{}
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetFilter() yfilter.YFilter { return unknown.YFilter }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) SetFilter(yf yfilter.YFilter) { unknown.YFilter = yf }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetSegmentPath() string {
    return "unknown"
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = unknown.ReasonCode
    return leafs
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetBundleName() string { return "cisco_ios_xr" }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetYangName() string { return "unknown" }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) SetParent(parent types.Entity) { unknown.parent = parent }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetParent() types.Entity { return unknown.parent }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetParentYangName() string { return "forwarding-address-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData
// Known Forwarding address data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // If the interface is unnumbered, then its name, else NULL. The type is
    // string.
    UnnumberedInterfaceName interface{}

    // Array of forwarding addresses. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress.
    ForwardingAddress []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress
}

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetFilter() yfilter.YFilter { return forwardingAddressData.YFilter }

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) SetFilter(yf yfilter.YFilter) { forwardingAddressData.YFilter = yf }

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetGoName(yname string) string {
    if yname == "unnumbered-interface-name" { return "UnnumberedInterfaceName" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    return ""
}

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetSegmentPath() string {
    return "forwarding-address-data"
}

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forwarding-address" {
        for _, c := range forwardingAddressData.ForwardingAddress {
            if forwardingAddressData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress{}
        forwardingAddressData.ForwardingAddress = append(forwardingAddressData.ForwardingAddress, child)
        return &forwardingAddressData.ForwardingAddress[len(forwardingAddressData.ForwardingAddress)-1]
    }
    return nil
}

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range forwardingAddressData.ForwardingAddress {
        children[forwardingAddressData.ForwardingAddress[i].GetSegmentPath()] = &forwardingAddressData.ForwardingAddress[i]
    }
    return children
}

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["unnumbered-interface-name"] = forwardingAddressData.UnnumberedInterfaceName
    return leafs
}

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetBundleName() string { return "cisco_ios_xr" }

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetYangName() string { return "forwarding-address-data" }

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) SetParent(parent types.Entity) { forwardingAddressData.parent = parent }

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetParent() types.Entity { return forwardingAddressData.parent }

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetParentYangName() string { return "forwarding-address-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress
// Array of forwarding addresses
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // IPV4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPV6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetFilter() yfilter.YFilter { return forwardingAddress.YFilter }

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) SetFilter(yf yfilter.YFilter) { forwardingAddress.YFilter = yf }

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetSegmentPath() string {
    return "forwarding-address"
}

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = forwardingAddress.AfName
    leafs["ipv4"] = forwardingAddress.Ipv4
    leafs["ipv6"] = forwardingAddress.Ipv6
    return leafs
}

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetBundleName() string { return "cisco_ios_xr" }

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetYangName() string { return "forwarding-address" }

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) SetParent(parent types.Entity) { forwardingAddress.parent = parent }

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetParent() types.Entity { return forwardingAddress.parent }

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetParentYangName() string { return "forwarding-address-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus
// Prefix status of the AF
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status. The type is IsisKnown.
    Status interface{}

    // Unknown state for the global prefixes.
    Unknown Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown

    // Global prefix data for the Address Family.
    PrefixData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData
}

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetFilter() yfilter.YFilter { return prefixStatus.YFilter }

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) SetFilter(yf yfilter.YFilter) { prefixStatus.YFilter = yf }

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "unknown" { return "Unknown" }
    if yname == "prefix-data" { return "PrefixData" }
    return ""
}

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetSegmentPath() string {
    return "prefix-status"
}

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unknown" {
        return &prefixStatus.Unknown
    }
    if childYangName == "prefix-data" {
        return &prefixStatus.PrefixData
    }
    return nil
}

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["unknown"] = &prefixStatus.Unknown
    children["prefix-data"] = &prefixStatus.PrefixData
    return children
}

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = prefixStatus.Status
    return leafs
}

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetBundleName() string { return "cisco_ios_xr" }

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetYangName() string { return "prefix-status" }

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) SetParent(parent types.Entity) { prefixStatus.parent = parent }

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetParent() types.Entity { return prefixStatus.parent }

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetParentYangName() string { return "af-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown
// Unknown state for the global prefixes
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reason why the global prefix(es) is(are) unknown. The type is
    // IsisIfAfPrefixUnknownReason.
    ReasonCode interface{}
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetFilter() yfilter.YFilter { return unknown.YFilter }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) SetFilter(yf yfilter.YFilter) { unknown.YFilter = yf }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetGoName(yname string) string {
    if yname == "reason-code" { return "ReasonCode" }
    return ""
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetSegmentPath() string {
    return "unknown"
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-code"] = unknown.ReasonCode
    return leafs
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetBundleName() string { return "cisco_ios_xr" }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetYangName() string { return "unknown" }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) SetParent(parent types.Entity) { unknown.parent = parent }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetParent() types.Entity { return unknown.parent }

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetParentYangName() string { return "prefix-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData
// Global prefix data for the Address Family
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is the interface unnumbered. The type is bool.
    IsUnnumbered interface{}

    // Array of global prefixes. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix.
    Prefix []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix
}

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetFilter() yfilter.YFilter { return prefixData.YFilter }

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) SetFilter(yf yfilter.YFilter) { prefixData.YFilter = yf }

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetGoName(yname string) string {
    if yname == "is-unnumbered" { return "IsUnnumbered" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetSegmentPath() string {
    return "prefix-data"
}

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "prefix" {
        for _, c := range prefixData.Prefix {
            if prefixData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix{}
        prefixData.Prefix = append(prefixData.Prefix, child)
        return &prefixData.Prefix[len(prefixData.Prefix)-1]
    }
    return nil
}

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range prefixData.Prefix {
        children[prefixData.Prefix[i].GetSegmentPath()] = &prefixData.Prefix[i]
    }
    return children
}

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-unnumbered"] = prefixData.IsUnnumbered
    return leafs
}

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetBundleName() string { return "cisco_ios_xr" }

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetYangName() string { return "prefix-data" }

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) SetParent(parent types.Entity) { prefixData.parent = parent }

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetParent() types.Entity { return prefixData.parent }

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetParentYangName() string { return "prefix-status" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix
// Array of global prefixes
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // ipv4.
    Ipv4 Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4

    // ipv6.
    Ipv6 Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6
}

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &prefix.Ipv4
    }
    if childYangName == "ipv6" {
        return &prefix.Ipv6
    }
    return nil
}

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &prefix.Ipv4
    children["ipv6"] = &prefix.Ipv6
    return children
}

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = prefix.AfName
    return leafs
}

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetYangName() string { return "prefix" }

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetParentYangName() string { return "prefix-data" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4
// ipv4
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4.Prefix
    leafs["prefix-length"] = ipv4.PrefixLength
    return leafs
}

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetParentYangName() string { return "prefix" }

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6
// ipv6
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetFilter() yfilter.YFilter { return ipv6.YFilter }

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) SetFilter(yf yfilter.YFilter) { ipv6.YFilter = yf }

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetSegmentPath() string {
    return "ipv6"
}

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6.Prefix
    leafs["prefix-length"] = ipv6.PrefixLength
    return leafs
}

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetYangName() string { return "ipv6" }

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) SetParent(parent types.Entity) { ipv6.parent = parent }

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetParent() types.Entity { return ipv6.parent }

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetParentYangName() string { return "prefix" }

// Isis_Instances_Instance_CheckpointAdjacencies
// Checkpointed adjacency table
type Isis_Instances_Instance_CheckpointAdjacencies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A checkpointed IS-IS adjacency. The type is slice of
    // Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency.
    CheckpointAdjacency []Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency
}

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetFilter() yfilter.YFilter { return checkpointAdjacencies.YFilter }

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) SetFilter(yf yfilter.YFilter) { checkpointAdjacencies.YFilter = yf }

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetGoName(yname string) string {
    if yname == "checkpoint-adjacency" { return "CheckpointAdjacency" }
    return ""
}

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetSegmentPath() string {
    return "checkpoint-adjacencies"
}

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "checkpoint-adjacency" {
        for _, c := range checkpointAdjacencies.CheckpointAdjacency {
            if checkpointAdjacencies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency{}
        checkpointAdjacencies.CheckpointAdjacency = append(checkpointAdjacencies.CheckpointAdjacency, child)
        return &checkpointAdjacencies.CheckpointAdjacency[len(checkpointAdjacencies.CheckpointAdjacency)-1]
    }
    return nil
}

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range checkpointAdjacencies.CheckpointAdjacency {
        children[checkpointAdjacencies.CheckpointAdjacency[i].GetSegmentPath()] = &checkpointAdjacencies.CheckpointAdjacency[i]
    }
    return children
}

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetBundleName() string { return "cisco_ios_xr" }

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetYangName() string { return "checkpoint-adjacencies" }

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) SetParent(parent types.Entity) { checkpointAdjacencies.parent = parent }

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetParent() types.Entity { return checkpointAdjacencies.parent }

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency
// A checkpointed IS-IS adjacency
type Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level. The type is IsisInternalLevel.
    Level interface{}

    // System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Checkpoint object ID. The type is interface{} with range: 0..4294967295.
    CheckpointAdjacencyObjectId interface{}

    // Neighbor system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    CheckpointAdjacencySystemId interface{}

    // Neighbor SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    CheckpointAdjacencySnpa interface{}

    // Local interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    CheckpointAdjacencyInterface interface{}

    // Adjacency level. The type is IsisLevel.
    CheckpointAdjacencyLevel interface{}

    // Adjacency holdtime (s). The type is interface{} with range: 0..65535.
    CheckpointAdjacencyHoldtime interface{}

    // Adjacency LAN priority. The type is interface{} with range: 0..255.
    CheckpointAdjacencyLanPriority interface{}

    // Neighbor circuit number. The type is interface{} with range: 0..255.
    CheckpointAdjacencyCircuitNumber interface{}

    // Per address family next hops. The type is slice of
    // Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop.
    CheckpointAdjacencyPerAddressFamilyNextHop []Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop
}

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetFilter() yfilter.YFilter { return checkpointAdjacency.YFilter }

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) SetFilter(yf yfilter.YFilter) { checkpointAdjacency.YFilter = yf }

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "system-id" { return "SystemId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "checkpoint-adjacency-object-id" { return "CheckpointAdjacencyObjectId" }
    if yname == "checkpoint-adjacency-system-id" { return "CheckpointAdjacencySystemId" }
    if yname == "checkpoint-adjacency-snpa" { return "CheckpointAdjacencySnpa" }
    if yname == "checkpoint-adjacency-interface" { return "CheckpointAdjacencyInterface" }
    if yname == "checkpoint-adjacency-level" { return "CheckpointAdjacencyLevel" }
    if yname == "checkpoint-adjacency-holdtime" { return "CheckpointAdjacencyHoldtime" }
    if yname == "checkpoint-adjacency-lan-priority" { return "CheckpointAdjacencyLanPriority" }
    if yname == "checkpoint-adjacency-circuit-number" { return "CheckpointAdjacencyCircuitNumber" }
    if yname == "checkpoint-adjacency-per-address-family-next-hop" { return "CheckpointAdjacencyPerAddressFamilyNextHop" }
    return ""
}

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetSegmentPath() string {
    return "checkpoint-adjacency"
}

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "checkpoint-adjacency-per-address-family-next-hop" {
        for _, c := range checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop {
            if checkpointAdjacency.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop{}
        checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop = append(checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop, child)
        return &checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop[len(checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop)-1]
    }
    return nil
}

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop {
        children[checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop[i].GetSegmentPath()] = &checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop[i]
    }
    return children
}

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = checkpointAdjacency.Level
    leafs["system-id"] = checkpointAdjacency.SystemId
    leafs["interface-name"] = checkpointAdjacency.InterfaceName
    leafs["checkpoint-adjacency-object-id"] = checkpointAdjacency.CheckpointAdjacencyObjectId
    leafs["checkpoint-adjacency-system-id"] = checkpointAdjacency.CheckpointAdjacencySystemId
    leafs["checkpoint-adjacency-snpa"] = checkpointAdjacency.CheckpointAdjacencySnpa
    leafs["checkpoint-adjacency-interface"] = checkpointAdjacency.CheckpointAdjacencyInterface
    leafs["checkpoint-adjacency-level"] = checkpointAdjacency.CheckpointAdjacencyLevel
    leafs["checkpoint-adjacency-holdtime"] = checkpointAdjacency.CheckpointAdjacencyHoldtime
    leafs["checkpoint-adjacency-lan-priority"] = checkpointAdjacency.CheckpointAdjacencyLanPriority
    leafs["checkpoint-adjacency-circuit-number"] = checkpointAdjacency.CheckpointAdjacencyCircuitNumber
    return leafs
}

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetBundleName() string { return "cisco_ios_xr" }

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetYangName() string { return "checkpoint-adjacency" }

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) SetParent(parent types.Entity) { checkpointAdjacency.parent = parent }

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetParent() types.Entity { return checkpointAdjacency.parent }

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetParentYangName() string { return "checkpoint-adjacencies" }

// Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop
// Per address family next hops
type Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // IPV4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPV6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetFilter() yfilter.YFilter { return checkpointAdjacencyPerAddressFamilyNextHop.YFilter }

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) SetFilter(yf yfilter.YFilter) { checkpointAdjacencyPerAddressFamilyNextHop.YFilter = yf }

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetSegmentPath() string {
    return "checkpoint-adjacency-per-address-family-next-hop"
}

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = checkpointAdjacencyPerAddressFamilyNextHop.AfName
    leafs["ipv4"] = checkpointAdjacencyPerAddressFamilyNextHop.Ipv4
    leafs["ipv6"] = checkpointAdjacencyPerAddressFamilyNextHop.Ipv6
    return leafs
}

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetBundleName() string { return "cisco_ios_xr" }

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetYangName() string { return "checkpoint-adjacency-per-address-family-next-hop" }

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) SetParent(parent types.Entity) { checkpointAdjacencyPerAddressFamilyNextHop.parent = parent }

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetParent() types.Entity { return checkpointAdjacencyPerAddressFamilyNextHop.parent }

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetParentYangName() string { return "checkpoint-adjacency" }

// Isis_Instances_Instance_Srms
// Segment Routing Mapping Server operational
// data
type Isis_Instances_Instance_Srms struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policy operational data.
    Policy Isis_Instances_Instance_Srms_Policy
}

func (srms *Isis_Instances_Instance_Srms) GetFilter() yfilter.YFilter { return srms.YFilter }

func (srms *Isis_Instances_Instance_Srms) SetFilter(yf yfilter.YFilter) { srms.YFilter = yf }

func (srms *Isis_Instances_Instance_Srms) GetGoName(yname string) string {
    if yname == "policy" { return "Policy" }
    return ""
}

func (srms *Isis_Instances_Instance_Srms) GetSegmentPath() string {
    return "srms"
}

func (srms *Isis_Instances_Instance_Srms) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "policy" {
        return &srms.Policy
    }
    return nil
}

func (srms *Isis_Instances_Instance_Srms) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["policy"] = &srms.Policy
    return children
}

func (srms *Isis_Instances_Instance_Srms) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (srms *Isis_Instances_Instance_Srms) GetBundleName() string { return "cisco_ios_xr" }

func (srms *Isis_Instances_Instance_Srms) GetYangName() string { return "srms" }

func (srms *Isis_Instances_Instance_Srms) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srms *Isis_Instances_Instance_Srms) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srms *Isis_Instances_Instance_Srms) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srms *Isis_Instances_Instance_Srms) SetParent(parent types.Entity) { srms.parent = parent }

func (srms *Isis_Instances_Instance_Srms) GetParent() types.Entity { return srms.parent }

func (srms *Isis_Instances_Instance_Srms) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_Srms_Policy
// Policy operational data
type Isis_Instances_Instance_Srms_Policy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 policy operational data.
    PolicyIpv4 Isis_Instances_Instance_Srms_Policy_PolicyIpv4

    // IPv6 policy operational data.
    PolicyIpv6 Isis_Instances_Instance_Srms_Policy_PolicyIpv6
}

func (policy *Isis_Instances_Instance_Srms_Policy) GetFilter() yfilter.YFilter { return policy.YFilter }

func (policy *Isis_Instances_Instance_Srms_Policy) SetFilter(yf yfilter.YFilter) { policy.YFilter = yf }

func (policy *Isis_Instances_Instance_Srms_Policy) GetGoName(yname string) string {
    if yname == "policy-ipv4" { return "PolicyIpv4" }
    if yname == "policy-ipv6" { return "PolicyIpv6" }
    return ""
}

func (policy *Isis_Instances_Instance_Srms_Policy) GetSegmentPath() string {
    return "policy"
}

func (policy *Isis_Instances_Instance_Srms_Policy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "policy-ipv4" {
        return &policy.PolicyIpv4
    }
    if childYangName == "policy-ipv6" {
        return &policy.PolicyIpv6
    }
    return nil
}

func (policy *Isis_Instances_Instance_Srms_Policy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["policy-ipv4"] = &policy.PolicyIpv4
    children["policy-ipv6"] = &policy.PolicyIpv6
    return children
}

func (policy *Isis_Instances_Instance_Srms_Policy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policy *Isis_Instances_Instance_Srms_Policy) GetBundleName() string { return "cisco_ios_xr" }

func (policy *Isis_Instances_Instance_Srms_Policy) GetYangName() string { return "policy" }

func (policy *Isis_Instances_Instance_Srms_Policy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policy *Isis_Instances_Instance_Srms_Policy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policy *Isis_Instances_Instance_Srms_Policy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policy *Isis_Instances_Instance_Srms_Policy) SetParent(parent types.Entity) { policy.parent = parent }

func (policy *Isis_Instances_Instance_Srms_Policy) GetParent() types.Entity { return policy.parent }

func (policy *Isis_Instances_Instance_Srms_Policy) GetParentYangName() string { return "srms" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4
// IPv4 policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 active policy operational data.
    PolicyIpv4Active Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active

    // IPv4 backup policy operational data.
    PolicyIpv4Backup Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup
}

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetFilter() yfilter.YFilter { return policyIpv4.YFilter }

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) SetFilter(yf yfilter.YFilter) { policyIpv4.YFilter = yf }

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetGoName(yname string) string {
    if yname == "policy-ipv4-active" { return "PolicyIpv4Active" }
    if yname == "policy-ipv4-backup" { return "PolicyIpv4Backup" }
    return ""
}

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetSegmentPath() string {
    return "policy-ipv4"
}

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "policy-ipv4-active" {
        return &policyIpv4.PolicyIpv4Active
    }
    if childYangName == "policy-ipv4-backup" {
        return &policyIpv4.PolicyIpv4Backup
    }
    return nil
}

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["policy-ipv4-active"] = &policyIpv4.PolicyIpv4Active
    children["policy-ipv4-backup"] = &policyIpv4.PolicyIpv4Backup
    return children
}

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetYangName() string { return "policy-ipv4" }

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) SetParent(parent types.Entity) { policyIpv4.parent = parent }

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetParent() types.Entity { return policyIpv4.parent }

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetParentYangName() string { return "policy" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active
// IPv4 active policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi.
    PolicyMi []Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi
}

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetFilter() yfilter.YFilter { return policyIpv4Active.YFilter }

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) SetFilter(yf yfilter.YFilter) { policyIpv4Active.YFilter = yf }

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetGoName(yname string) string {
    if yname == "policy-mi" { return "PolicyMi" }
    return ""
}

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetSegmentPath() string {
    return "policy-ipv4-active"
}

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "policy-mi" {
        for _, c := range policyIpv4Active.PolicyMi {
            if policyIpv4Active.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi{}
        policyIpv4Active.PolicyMi = append(policyIpv4Active.PolicyMi, child)
        return &policyIpv4Active.PolicyMi[len(policyIpv4Active.PolicyMi)-1]
    }
    return nil
}

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policyIpv4Active.PolicyMi {
        children[policyIpv4Active.PolicyMi[i].GetSegmentPath()] = &policyIpv4Active.PolicyMi[i]
    }
    return children
}

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetBundleName() string { return "cisco_ios_xr" }

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetYangName() string { return "policy-ipv4-active" }

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) SetParent(parent types.Entity) { policyIpv4Active.parent = parent }

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetParent() types.Entity { return policyIpv4Active.parent }

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetParentYangName() string { return "policy-ipv4" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi
// Mapping Item
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetFilter() yfilter.YFilter { return policyMi.YFilter }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) SetFilter(yf yfilter.YFilter) { policyMi.YFilter = yf }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetGoName(yname string) string {
    if yname == "mi-id" { return "MiId" }
    if yname == "src" { return "Src" }
    if yname == "router" { return "Router" }
    if yname == "area" { return "Area" }
    if yname == "prefix" { return "Prefix" }
    if yname == "sid-start" { return "SidStart" }
    if yname == "sid-count" { return "SidCount" }
    if yname == "last-prefix" { return "LastPrefix" }
    if yname == "last-sid-index" { return "LastSidIndex" }
    if yname == "flag-attached" { return "FlagAttached" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetSegmentPath() string {
    return "policy-mi" + "[mi-id='" + fmt.Sprintf("%v", policyMi.MiId) + "']"
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "addr" {
        return &policyMi.Addr
    }
    return nil
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["addr"] = &policyMi.Addr
    return children
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mi-id"] = policyMi.MiId
    leafs["src"] = policyMi.Src
    leafs["router"] = policyMi.Router
    leafs["area"] = policyMi.Area
    leafs["prefix"] = policyMi.Prefix
    leafs["sid-start"] = policyMi.SidStart
    leafs["sid-count"] = policyMi.SidCount
    leafs["last-prefix"] = policyMi.LastPrefix
    leafs["last-sid-index"] = policyMi.LastSidIndex
    leafs["flag-attached"] = policyMi.FlagAttached
    return leafs
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetBundleName() string { return "cisco_ios_xr" }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetYangName() string { return "policy-mi" }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) SetParent(parent types.Entity) { policyMi.parent = parent }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetParent() types.Entity { return policyMi.parent }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetParentYangName() string { return "policy-ipv4-active" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr
// addr
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetFilter() yfilter.YFilter { return addr.YFilter }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) SetFilter(yf yfilter.YFilter) { addr.YFilter = yf }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetSegmentPath() string {
    return "addr"
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = addr.Af
    leafs["ipv4"] = addr.Ipv4
    leafs["ipv6"] = addr.Ipv6
    return leafs
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetBundleName() string { return "cisco_ios_xr" }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetYangName() string { return "addr" }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) SetParent(parent types.Entity) { addr.parent = parent }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetParent() types.Entity { return addr.parent }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetParentYangName() string { return "policy-mi" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup
// IPv4 backup policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi.
    PolicyMi []Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi
}

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetFilter() yfilter.YFilter { return policyIpv4Backup.YFilter }

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) SetFilter(yf yfilter.YFilter) { policyIpv4Backup.YFilter = yf }

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetGoName(yname string) string {
    if yname == "policy-mi" { return "PolicyMi" }
    return ""
}

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetSegmentPath() string {
    return "policy-ipv4-backup"
}

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "policy-mi" {
        for _, c := range policyIpv4Backup.PolicyMi {
            if policyIpv4Backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi{}
        policyIpv4Backup.PolicyMi = append(policyIpv4Backup.PolicyMi, child)
        return &policyIpv4Backup.PolicyMi[len(policyIpv4Backup.PolicyMi)-1]
    }
    return nil
}

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policyIpv4Backup.PolicyMi {
        children[policyIpv4Backup.PolicyMi[i].GetSegmentPath()] = &policyIpv4Backup.PolicyMi[i]
    }
    return children
}

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetBundleName() string { return "cisco_ios_xr" }

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetYangName() string { return "policy-ipv4-backup" }

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) SetParent(parent types.Entity) { policyIpv4Backup.parent = parent }

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetParent() types.Entity { return policyIpv4Backup.parent }

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetParentYangName() string { return "policy-ipv4" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi
// Mapping Item
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetFilter() yfilter.YFilter { return policyMi.YFilter }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) SetFilter(yf yfilter.YFilter) { policyMi.YFilter = yf }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetGoName(yname string) string {
    if yname == "mi-id" { return "MiId" }
    if yname == "src" { return "Src" }
    if yname == "router" { return "Router" }
    if yname == "area" { return "Area" }
    if yname == "prefix" { return "Prefix" }
    if yname == "sid-start" { return "SidStart" }
    if yname == "sid-count" { return "SidCount" }
    if yname == "last-prefix" { return "LastPrefix" }
    if yname == "last-sid-index" { return "LastSidIndex" }
    if yname == "flag-attached" { return "FlagAttached" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetSegmentPath() string {
    return "policy-mi" + "[mi-id='" + fmt.Sprintf("%v", policyMi.MiId) + "']"
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "addr" {
        return &policyMi.Addr
    }
    return nil
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["addr"] = &policyMi.Addr
    return children
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mi-id"] = policyMi.MiId
    leafs["src"] = policyMi.Src
    leafs["router"] = policyMi.Router
    leafs["area"] = policyMi.Area
    leafs["prefix"] = policyMi.Prefix
    leafs["sid-start"] = policyMi.SidStart
    leafs["sid-count"] = policyMi.SidCount
    leafs["last-prefix"] = policyMi.LastPrefix
    leafs["last-sid-index"] = policyMi.LastSidIndex
    leafs["flag-attached"] = policyMi.FlagAttached
    return leafs
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetBundleName() string { return "cisco_ios_xr" }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetYangName() string { return "policy-mi" }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) SetParent(parent types.Entity) { policyMi.parent = parent }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetParent() types.Entity { return policyMi.parent }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetParentYangName() string { return "policy-ipv4-backup" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr
// addr
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetFilter() yfilter.YFilter { return addr.YFilter }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) SetFilter(yf yfilter.YFilter) { addr.YFilter = yf }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetSegmentPath() string {
    return "addr"
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = addr.Af
    leafs["ipv4"] = addr.Ipv4
    leafs["ipv6"] = addr.Ipv6
    return leafs
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetBundleName() string { return "cisco_ios_xr" }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetYangName() string { return "addr" }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) SetParent(parent types.Entity) { addr.parent = parent }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetParent() types.Entity { return addr.parent }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetParentYangName() string { return "policy-mi" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6
// IPv6 policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 backup policy operational data.
    PolicyIpv6Backup Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup

    // IPv6 active policy operational data.
    PolicyIpv6Active Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active
}

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetFilter() yfilter.YFilter { return policyIpv6.YFilter }

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) SetFilter(yf yfilter.YFilter) { policyIpv6.YFilter = yf }

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetGoName(yname string) string {
    if yname == "policy-ipv6-backup" { return "PolicyIpv6Backup" }
    if yname == "policy-ipv6-active" { return "PolicyIpv6Active" }
    return ""
}

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetSegmentPath() string {
    return "policy-ipv6"
}

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "policy-ipv6-backup" {
        return &policyIpv6.PolicyIpv6Backup
    }
    if childYangName == "policy-ipv6-active" {
        return &policyIpv6.PolicyIpv6Active
    }
    return nil
}

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["policy-ipv6-backup"] = &policyIpv6.PolicyIpv6Backup
    children["policy-ipv6-active"] = &policyIpv6.PolicyIpv6Active
    return children
}

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetYangName() string { return "policy-ipv6" }

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) SetParent(parent types.Entity) { policyIpv6.parent = parent }

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetParent() types.Entity { return policyIpv6.parent }

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetParentYangName() string { return "policy" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup
// IPv6 backup policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi.
    PolicyMi []Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi
}

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetFilter() yfilter.YFilter { return policyIpv6Backup.YFilter }

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) SetFilter(yf yfilter.YFilter) { policyIpv6Backup.YFilter = yf }

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetGoName(yname string) string {
    if yname == "policy-mi" { return "PolicyMi" }
    return ""
}

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetSegmentPath() string {
    return "policy-ipv6-backup"
}

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "policy-mi" {
        for _, c := range policyIpv6Backup.PolicyMi {
            if policyIpv6Backup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi{}
        policyIpv6Backup.PolicyMi = append(policyIpv6Backup.PolicyMi, child)
        return &policyIpv6Backup.PolicyMi[len(policyIpv6Backup.PolicyMi)-1]
    }
    return nil
}

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policyIpv6Backup.PolicyMi {
        children[policyIpv6Backup.PolicyMi[i].GetSegmentPath()] = &policyIpv6Backup.PolicyMi[i]
    }
    return children
}

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetBundleName() string { return "cisco_ios_xr" }

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetYangName() string { return "policy-ipv6-backup" }

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) SetParent(parent types.Entity) { policyIpv6Backup.parent = parent }

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetParent() types.Entity { return policyIpv6Backup.parent }

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetParentYangName() string { return "policy-ipv6" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi
// Mapping Item
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetFilter() yfilter.YFilter { return policyMi.YFilter }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) SetFilter(yf yfilter.YFilter) { policyMi.YFilter = yf }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetGoName(yname string) string {
    if yname == "mi-id" { return "MiId" }
    if yname == "src" { return "Src" }
    if yname == "router" { return "Router" }
    if yname == "area" { return "Area" }
    if yname == "prefix" { return "Prefix" }
    if yname == "sid-start" { return "SidStart" }
    if yname == "sid-count" { return "SidCount" }
    if yname == "last-prefix" { return "LastPrefix" }
    if yname == "last-sid-index" { return "LastSidIndex" }
    if yname == "flag-attached" { return "FlagAttached" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetSegmentPath() string {
    return "policy-mi" + "[mi-id='" + fmt.Sprintf("%v", policyMi.MiId) + "']"
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "addr" {
        return &policyMi.Addr
    }
    return nil
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["addr"] = &policyMi.Addr
    return children
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mi-id"] = policyMi.MiId
    leafs["src"] = policyMi.Src
    leafs["router"] = policyMi.Router
    leafs["area"] = policyMi.Area
    leafs["prefix"] = policyMi.Prefix
    leafs["sid-start"] = policyMi.SidStart
    leafs["sid-count"] = policyMi.SidCount
    leafs["last-prefix"] = policyMi.LastPrefix
    leafs["last-sid-index"] = policyMi.LastSidIndex
    leafs["flag-attached"] = policyMi.FlagAttached
    return leafs
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetBundleName() string { return "cisco_ios_xr" }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetYangName() string { return "policy-mi" }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) SetParent(parent types.Entity) { policyMi.parent = parent }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetParent() types.Entity { return policyMi.parent }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetParentYangName() string { return "policy-ipv6-backup" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr
// addr
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetFilter() yfilter.YFilter { return addr.YFilter }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) SetFilter(yf yfilter.YFilter) { addr.YFilter = yf }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetSegmentPath() string {
    return "addr"
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = addr.Af
    leafs["ipv4"] = addr.Ipv4
    leafs["ipv6"] = addr.Ipv6
    return leafs
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetBundleName() string { return "cisco_ios_xr" }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetYangName() string { return "addr" }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) SetParent(parent types.Entity) { addr.parent = parent }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetParent() types.Entity { return addr.parent }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetParentYangName() string { return "policy-mi" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active
// IPv6 active policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi.
    PolicyMi []Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi
}

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetFilter() yfilter.YFilter { return policyIpv6Active.YFilter }

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) SetFilter(yf yfilter.YFilter) { policyIpv6Active.YFilter = yf }

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetGoName(yname string) string {
    if yname == "policy-mi" { return "PolicyMi" }
    return ""
}

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetSegmentPath() string {
    return "policy-ipv6-active"
}

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "policy-mi" {
        for _, c := range policyIpv6Active.PolicyMi {
            if policyIpv6Active.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi{}
        policyIpv6Active.PolicyMi = append(policyIpv6Active.PolicyMi, child)
        return &policyIpv6Active.PolicyMi[len(policyIpv6Active.PolicyMi)-1]
    }
    return nil
}

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policyIpv6Active.PolicyMi {
        children[policyIpv6Active.PolicyMi[i].GetSegmentPath()] = &policyIpv6Active.PolicyMi[i]
    }
    return children
}

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetBundleName() string { return "cisco_ios_xr" }

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetYangName() string { return "policy-ipv6-active" }

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) SetParent(parent types.Entity) { policyIpv6Active.parent = parent }

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetParent() types.Entity { return policyIpv6Active.parent }

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetParentYangName() string { return "policy-ipv6" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi
// Mapping Item
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetFilter() yfilter.YFilter { return policyMi.YFilter }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) SetFilter(yf yfilter.YFilter) { policyMi.YFilter = yf }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetGoName(yname string) string {
    if yname == "mi-id" { return "MiId" }
    if yname == "src" { return "Src" }
    if yname == "router" { return "Router" }
    if yname == "area" { return "Area" }
    if yname == "prefix" { return "Prefix" }
    if yname == "sid-start" { return "SidStart" }
    if yname == "sid-count" { return "SidCount" }
    if yname == "last-prefix" { return "LastPrefix" }
    if yname == "last-sid-index" { return "LastSidIndex" }
    if yname == "flag-attached" { return "FlagAttached" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetSegmentPath() string {
    return "policy-mi" + "[mi-id='" + fmt.Sprintf("%v", policyMi.MiId) + "']"
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "addr" {
        return &policyMi.Addr
    }
    return nil
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["addr"] = &policyMi.Addr
    return children
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mi-id"] = policyMi.MiId
    leafs["src"] = policyMi.Src
    leafs["router"] = policyMi.Router
    leafs["area"] = policyMi.Area
    leafs["prefix"] = policyMi.Prefix
    leafs["sid-start"] = policyMi.SidStart
    leafs["sid-count"] = policyMi.SidCount
    leafs["last-prefix"] = policyMi.LastPrefix
    leafs["last-sid-index"] = policyMi.LastSidIndex
    leafs["flag-attached"] = policyMi.FlagAttached
    return leafs
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetBundleName() string { return "cisco_ios_xr" }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetYangName() string { return "policy-mi" }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) SetParent(parent types.Entity) { policyMi.parent = parent }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetParent() types.Entity { return policyMi.parent }

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetParentYangName() string { return "policy-ipv6-active" }

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr
// addr
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetFilter() yfilter.YFilter { return addr.YFilter }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) SetFilter(yf yfilter.YFilter) { addr.YFilter = yf }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetSegmentPath() string {
    return "addr"
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = addr.Af
    leafs["ipv4"] = addr.Ipv4
    leafs["ipv6"] = addr.Ipv6
    return leafs
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetBundleName() string { return "cisco_ios_xr" }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetYangName() string { return "addr" }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) SetParent(parent types.Entity) { addr.parent = parent }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetParent() types.Entity { return addr.parent }

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetParentYangName() string { return "policy-mi" }

// Isis_Instances_Instance_ErrorLog
// Log of errors and warnings
type Isis_Instances_Instance_ErrorLog struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Error Log entries. The type is slice of
    // Isis_Instances_Instance_ErrorLog_LogEntry.
    LogEntry []Isis_Instances_Instance_ErrorLog_LogEntry
}

func (errorLog *Isis_Instances_Instance_ErrorLog) GetFilter() yfilter.YFilter { return errorLog.YFilter }

func (errorLog *Isis_Instances_Instance_ErrorLog) SetFilter(yf yfilter.YFilter) { errorLog.YFilter = yf }

func (errorLog *Isis_Instances_Instance_ErrorLog) GetGoName(yname string) string {
    if yname == "log-entry" { return "LogEntry" }
    return ""
}

func (errorLog *Isis_Instances_Instance_ErrorLog) GetSegmentPath() string {
    return "error-log"
}

func (errorLog *Isis_Instances_Instance_ErrorLog) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "log-entry" {
        for _, c := range errorLog.LogEntry {
            if errorLog.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_ErrorLog_LogEntry{}
        errorLog.LogEntry = append(errorLog.LogEntry, child)
        return &errorLog.LogEntry[len(errorLog.LogEntry)-1]
    }
    return nil
}

func (errorLog *Isis_Instances_Instance_ErrorLog) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range errorLog.LogEntry {
        children[errorLog.LogEntry[i].GetSegmentPath()] = &errorLog.LogEntry[i]
    }
    return children
}

func (errorLog *Isis_Instances_Instance_ErrorLog) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (errorLog *Isis_Instances_Instance_ErrorLog) GetBundleName() string { return "cisco_ios_xr" }

func (errorLog *Isis_Instances_Instance_ErrorLog) GetYangName() string { return "error-log" }

func (errorLog *Isis_Instances_Instance_ErrorLog) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (errorLog *Isis_Instances_Instance_ErrorLog) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (errorLog *Isis_Instances_Instance_ErrorLog) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (errorLog *Isis_Instances_Instance_ErrorLog) SetParent(parent types.Entity) { errorLog.parent = parent }

func (errorLog *Isis_Instances_Instance_ErrorLog) GetParent() types.Entity { return errorLog.parent }

func (errorLog *Isis_Instances_Instance_ErrorLog) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_ErrorLog_LogEntry
// Error Log entries
type Isis_Instances_Instance_ErrorLog_LogEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Logging level. The type is IsisErrLogLevel.
    ErrorLogLevel interface{}

    // Error code. The type is interface{} with range: 0..4294967295.
    ErrorCode interface{}

    // Error details. The type is string.
    ErrorReason interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_ErrorLog_LogEntry_GenericData
}

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetFilter() yfilter.YFilter { return logEntry.YFilter }

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) SetFilter(yf yfilter.YFilter) { logEntry.YFilter = yf }

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetGoName(yname string) string {
    if yname == "error-log-level" { return "ErrorLogLevel" }
    if yname == "error-code" { return "ErrorCode" }
    if yname == "error-reason" { return "ErrorReason" }
    if yname == "generic-data" { return "GenericData" }
    return ""
}

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetSegmentPath() string {
    return "log-entry"
}

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-data" {
        return &logEntry.GenericData
    }
    return nil
}

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-data"] = &logEntry.GenericData
    return children
}

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["error-log-level"] = logEntry.ErrorLogLevel
    leafs["error-code"] = logEntry.ErrorCode
    leafs["error-reason"] = logEntry.ErrorReason
    return leafs
}

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetBundleName() string { return "cisco_ios_xr" }

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetYangName() string { return "log-entry" }

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) SetParent(parent types.Entity) { logEntry.parent = parent }

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetParent() types.Entity { return logEntry.parent }

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetParentYangName() string { return "error-log" }

// Isis_Instances_Instance_ErrorLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_ErrorLog_LogEntry_GenericData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetFilter() yfilter.YFilter { return genericData.YFilter }

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) SetFilter(yf yfilter.YFilter) { genericData.YFilter = yf }

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetGoName(yname string) string {
    if yname == "timestamp" { return "Timestamp" }
    return ""
}

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetSegmentPath() string {
    return "generic-data"
}

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "timestamp" {
        return &genericData.Timestamp
    }
    return nil
}

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["timestamp"] = &genericData.Timestamp
    return children
}

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetBundleName() string { return "cisco_ios_xr" }

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetYangName() string { return "generic-data" }

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) SetParent(parent types.Entity) { genericData.parent = parent }

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetParent() types.Entity { return genericData.parent }

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetParentYangName() string { return "log-entry" }

// Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetFilter() yfilter.YFilter { return timestamp.YFilter }

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) SetFilter(yf yfilter.YFilter) { timestamp.YFilter = yf }

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nano-seconds" { return "NanoSeconds" }
    return ""
}

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetSegmentPath() string {
    return "timestamp"
}

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = timestamp.Seconds
    leafs["nano-seconds"] = timestamp.NanoSeconds
    return leafs
}

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetBundleName() string { return "cisco_ios_xr" }

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetYangName() string { return "timestamp" }

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) SetParent(parent types.Entity) { timestamp.parent = parent }

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetParent() types.Entity { return timestamp.parent }

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetParentYangName() string { return "generic-data" }

// Isis_Instances_Instance_CheckpointInterfaces
// Checkpointed interface table
type Isis_Instances_Instance_CheckpointInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Checkpointed information about one IS-IS interface. The type is slice of
    // Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface.
    CheckpointInterface []Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface
}

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetFilter() yfilter.YFilter { return checkpointInterfaces.YFilter }

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) SetFilter(yf yfilter.YFilter) { checkpointInterfaces.YFilter = yf }

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetGoName(yname string) string {
    if yname == "checkpoint-interface" { return "CheckpointInterface" }
    return ""
}

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetSegmentPath() string {
    return "checkpoint-interfaces"
}

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "checkpoint-interface" {
        for _, c := range checkpointInterfaces.CheckpointInterface {
            if checkpointInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface{}
        checkpointInterfaces.CheckpointInterface = append(checkpointInterfaces.CheckpointInterface, child)
        return &checkpointInterfaces.CheckpointInterface[len(checkpointInterfaces.CheckpointInterface)-1]
    }
    return nil
}

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range checkpointInterfaces.CheckpointInterface {
        children[checkpointInterfaces.CheckpointInterface[i].GetSegmentPath()] = &checkpointInterfaces.CheckpointInterface[i]
    }
    return children
}

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetYangName() string { return "checkpoint-interfaces" }

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) SetParent(parent types.Entity) { checkpointInterfaces.parent = parent }

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetParent() types.Entity { return checkpointInterfaces.parent }

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface
// Checkpointed information about one IS-IS
// interface
type Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Checkpoint object ID. The type is interface{} with range: 0..4294967295.
    CheckpointObjectId interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // Local interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    CheckpointInterfaceHandle interface{}

    // Local circuit number. The type is interface{} with range: 0..255.
    LocalCircuitNumber interface{}

    // Areas in which this system is DIS. The type is IsisLevels.
    DisAreas interface{}

    // TRUE if there is an adjacency on this interface. The type is bool.
    HasAdjacency interface{}

    // SNPA of this interface. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    LocalSnpa interface{}

    // TRUE if multicast group registration succeeded on this interface. The type
    // is bool.
    HasJoinedMcastGroup interface{}

    // MPLS LDP sync status. The type is bool.
    HasAchievedLdpSync interface{}

    // MPLS LDPv6 sync status. The type is bool.
    HasAchievedLdPv6Sync interface{}
}

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetFilter() yfilter.YFilter { return checkpointInterface.YFilter }

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) SetFilter(yf yfilter.YFilter) { checkpointInterface.YFilter = yf }

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "checkpoint-object-id" { return "CheckpointObjectId" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "checkpoint-interface-handle" { return "CheckpointInterfaceHandle" }
    if yname == "local-circuit-number" { return "LocalCircuitNumber" }
    if yname == "dis-areas" { return "DisAreas" }
    if yname == "has-adjacency" { return "HasAdjacency" }
    if yname == "local-snpa" { return "LocalSnpa" }
    if yname == "has-joined-mcast-group" { return "HasJoinedMcastGroup" }
    if yname == "has-achieved-ldp-sync" { return "HasAchievedLdpSync" }
    if yname == "has-achieved-ld-pv6-sync" { return "HasAchievedLdPv6Sync" }
    return ""
}

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetSegmentPath() string {
    return "checkpoint-interface" + "[interface-name='" + fmt.Sprintf("%v", checkpointInterface.InterfaceName) + "']"
}

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = checkpointInterface.InterfaceName
    leafs["checkpoint-object-id"] = checkpointInterface.CheckpointObjectId
    leafs["interface-name-xr"] = checkpointInterface.InterfaceNameXr
    leafs["checkpoint-interface-handle"] = checkpointInterface.CheckpointInterfaceHandle
    leafs["local-circuit-number"] = checkpointInterface.LocalCircuitNumber
    leafs["dis-areas"] = checkpointInterface.DisAreas
    leafs["has-adjacency"] = checkpointInterface.HasAdjacency
    leafs["local-snpa"] = checkpointInterface.LocalSnpa
    leafs["has-joined-mcast-group"] = checkpointInterface.HasJoinedMcastGroup
    leafs["has-achieved-ldp-sync"] = checkpointInterface.HasAchievedLdpSync
    leafs["has-achieved-ld-pv6-sync"] = checkpointInterface.HasAchievedLdPv6Sync
    return leafs
}

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetBundleName() string { return "cisco_ios_xr" }

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetYangName() string { return "checkpoint-interface" }

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) SetParent(parent types.Entity) { checkpointInterface.parent = parent }

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetParent() types.Entity { return checkpointInterface.parent }

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetParentYangName() string { return "checkpoint-interfaces" }

// Isis_Instances_Instance_InterfaceStatistics
// Interface statistics table
type Isis_Instances_Instance_InterfaceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Statistics data for one IS-IS interface. The type is slice of
    // Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic.
    InterfaceStatistic []Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic
}

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetFilter() yfilter.YFilter { return interfaceStatistics.YFilter }

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) SetFilter(yf yfilter.YFilter) { interfaceStatistics.YFilter = yf }

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetGoName(yname string) string {
    if yname == "interface-statistic" { return "InterfaceStatistic" }
    return ""
}

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetSegmentPath() string {
    return "interface-statistics"
}

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-statistic" {
        for _, c := range interfaceStatistics.InterfaceStatistic {
            if interfaceStatistics.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic{}
        interfaceStatistics.InterfaceStatistic = append(interfaceStatistics.InterfaceStatistic, child)
        return &interfaceStatistics.InterfaceStatistic[len(interfaceStatistics.InterfaceStatistic)-1]
    }
    return nil
}

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStatistics.InterfaceStatistic {
        children[interfaceStatistics.InterfaceStatistic[i].GetSegmentPath()] = &interfaceStatistics.InterfaceStatistic[i]
    }
    return children
}

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetYangName() string { return "interface-statistics" }

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) SetParent(parent types.Entity) { interfaceStatistics.parent = parent }

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetParent() types.Entity { return interfaceStatistics.parent }

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic
// Statistics data for one IS-IS interface
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface to which traffic statistics apply. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    TrafficInterface interface{}

    // Interface media class. The type is IsisMediaClass.
    InterfaceMediaType interface{}

    // P2P interface statistics. NULL for non-P2P interfaces.
    P2PStatistics Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics

    // Per-area data. The type is slice of
    // Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData.
    PerAreaData []Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData
}

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetFilter() yfilter.YFilter { return interfaceStatistic.YFilter }

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) SetFilter(yf yfilter.YFilter) { interfaceStatistic.YFilter = yf }

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "traffic-interface" { return "TrafficInterface" }
    if yname == "interface-media-type" { return "InterfaceMediaType" }
    if yname == "p2p-statistics" { return "P2PStatistics" }
    if yname == "per-area-data" { return "PerAreaData" }
    return ""
}

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetSegmentPath() string {
    return "interface-statistic" + "[interface-name='" + fmt.Sprintf("%v", interfaceStatistic.InterfaceName) + "']"
}

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "p2p-statistics" {
        return &interfaceStatistic.P2PStatistics
    }
    if childYangName == "per-area-data" {
        for _, c := range interfaceStatistic.PerAreaData {
            if interfaceStatistic.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData{}
        interfaceStatistic.PerAreaData = append(interfaceStatistic.PerAreaData, child)
        return &interfaceStatistic.PerAreaData[len(interfaceStatistic.PerAreaData)-1]
    }
    return nil
}

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["p2p-statistics"] = &interfaceStatistic.P2PStatistics
    for i := range interfaceStatistic.PerAreaData {
        children[interfaceStatistic.PerAreaData[i].GetSegmentPath()] = &interfaceStatistic.PerAreaData[i]
    }
    return children
}

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStatistic.InterfaceName
    leafs["traffic-interface"] = interfaceStatistic.TrafficInterface
    leafs["interface-media-type"] = interfaceStatistic.InterfaceMediaType
    return leafs
}

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetYangName() string { return "interface-statistic" }

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) SetParent(parent types.Entity) { interfaceStatistic.parent = parent }

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetParent() types.Entity { return interfaceStatistic.parent }

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetParentYangName() string { return "interface-statistics" }

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics
// P2P interface statistics. NULL for non-P2P
// interfaces
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IIHs not sent due to memory exhaustion. The type is interface{} with range:
    // 0..4294967295.
    MemoryExhaustedIihCount interface{}

    // LSP retransmissions. The type is interface{} with range: 0..4294967295.
    LspRetransmitCount interface{}

    // IIH statistics.
    IihCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount
}

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetFilter() yfilter.YFilter { return p2PStatistics.YFilter }

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) SetFilter(yf yfilter.YFilter) { p2PStatistics.YFilter = yf }

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetGoName(yname string) string {
    if yname == "memory-exhausted-iih-count" { return "MemoryExhaustedIihCount" }
    if yname == "lsp-retransmit-count" { return "LspRetransmitCount" }
    if yname == "iih-count" { return "IihCount" }
    return ""
}

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetSegmentPath() string {
    return "p2p-statistics"
}

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iih-count" {
        return &p2PStatistics.IihCount
    }
    return nil
}

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iih-count"] = &p2PStatistics.IihCount
    return children
}

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["memory-exhausted-iih-count"] = p2PStatistics.MemoryExhaustedIihCount
    leafs["lsp-retransmit-count"] = p2PStatistics.LspRetransmitCount
    return leafs
}

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetYangName() string { return "p2p-statistics" }

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) SetParent(parent types.Entity) { p2PStatistics.parent = parent }

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetParent() types.Entity { return p2PStatistics.parent }

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetParentYangName() string { return "interface-statistic" }

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount
// IIH statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetFilter() yfilter.YFilter { return iihCount.YFilter }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) SetFilter(yf yfilter.YFilter) { iihCount.YFilter = yf }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetGoName(yname string) string {
    if yname == "pdu-receive-count" { return "PduReceiveCount" }
    if yname == "pdu-send-count" { return "PduSendCount" }
    return ""
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetSegmentPath() string {
    return "iih-count"
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pdu-receive-count"] = iihCount.PduReceiveCount
    leafs["pdu-send-count"] = iihCount.PduSendCount
    return leafs
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetBundleName() string { return "cisco_ios_xr" }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetYangName() string { return "iih-count" }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) SetParent(parent types.Entity) { iihCount.parent = parent }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetParent() types.Entity { return iihCount.parent }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetParentYangName() string { return "p2p-statistics" }

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData
// Per-area data
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level of the area this data relates to. The type is IsisLevel.
    Level interface{}

    // Statistics.
    Statistics Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics

    // LAN interface statistics. NULL for non-LAN interfaces.
    LanData Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData
}

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetFilter() yfilter.YFilter { return perAreaData.YFilter }

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) SetFilter(yf yfilter.YFilter) { perAreaData.YFilter = yf }

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "statistics" { return "Statistics" }
    if yname == "lan-data" { return "LanData" }
    return ""
}

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetSegmentPath() string {
    return "per-area-data"
}

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "statistics" {
        return &perAreaData.Statistics
    }
    if childYangName == "lan-data" {
        return &perAreaData.LanData
    }
    return nil
}

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["statistics"] = &perAreaData.Statistics
    children["lan-data"] = &perAreaData.LanData
    return children
}

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = perAreaData.Level
    return leafs
}

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetBundleName() string { return "cisco_ios_xr" }

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetYangName() string { return "per-area-data" }

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) SetParent(parent types.Entity) { perAreaData.parent = parent }

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetParent() types.Entity { return perAreaData.parent }

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetParentYangName() string { return "interface-statistic" }

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics
// Statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of LSPs dropped due to minimum arrival time config. The type is
    // interface{} with range: 0..4294967295.
    LspDropCount interface{}

    // Count of LSPs already received by neighbors and not flooded. The type is
    // interface{} with range: 0..4294967295.
    LspFloodingDupCount interface{}

    // LSP statistics.
    LspCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount

    // CSNP statistics.
    CsnpCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount

    // PSNP statistics.
    PsnpCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount
}

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetFilter() yfilter.YFilter { return statistics.YFilter }

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) SetFilter(yf yfilter.YFilter) { statistics.YFilter = yf }

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetGoName(yname string) string {
    if yname == "lsp-drop-count" { return "LspDropCount" }
    if yname == "lsp-flooding-dup-count" { return "LspFloodingDupCount" }
    if yname == "lsp-count" { return "LspCount" }
    if yname == "csnp-count" { return "CsnpCount" }
    if yname == "psnp-count" { return "PsnpCount" }
    return ""
}

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetSegmentPath() string {
    return "statistics"
}

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-count" {
        return &statistics.LspCount
    }
    if childYangName == "csnp-count" {
        return &statistics.CsnpCount
    }
    if childYangName == "psnp-count" {
        return &statistics.PsnpCount
    }
    return nil
}

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-count"] = &statistics.LspCount
    children["csnp-count"] = &statistics.CsnpCount
    children["psnp-count"] = &statistics.PsnpCount
    return children
}

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-drop-count"] = statistics.LspDropCount
    leafs["lsp-flooding-dup-count"] = statistics.LspFloodingDupCount
    return leafs
}

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetBundleName() string { return "cisco_ios_xr" }

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetYangName() string { return "statistics" }

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) SetParent(parent types.Entity) { statistics.parent = parent }

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetParent() types.Entity { return statistics.parent }

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetParentYangName() string { return "per-area-data" }

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount
// LSP statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetFilter() yfilter.YFilter { return lspCount.YFilter }

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) SetFilter(yf yfilter.YFilter) { lspCount.YFilter = yf }

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetGoName(yname string) string {
    if yname == "pdu-receive-count" { return "PduReceiveCount" }
    if yname == "pdu-send-count" { return "PduSendCount" }
    return ""
}

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetSegmentPath() string {
    return "lsp-count"
}

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pdu-receive-count"] = lspCount.PduReceiveCount
    leafs["pdu-send-count"] = lspCount.PduSendCount
    return leafs
}

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetBundleName() string { return "cisco_ios_xr" }

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetYangName() string { return "lsp-count" }

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) SetParent(parent types.Entity) { lspCount.parent = parent }

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetParent() types.Entity { return lspCount.parent }

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetParentYangName() string { return "statistics" }

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount
// CSNP statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetFilter() yfilter.YFilter { return csnpCount.YFilter }

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) SetFilter(yf yfilter.YFilter) { csnpCount.YFilter = yf }

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetGoName(yname string) string {
    if yname == "pdu-receive-count" { return "PduReceiveCount" }
    if yname == "pdu-send-count" { return "PduSendCount" }
    return ""
}

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetSegmentPath() string {
    return "csnp-count"
}

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pdu-receive-count"] = csnpCount.PduReceiveCount
    leafs["pdu-send-count"] = csnpCount.PduSendCount
    return leafs
}

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetBundleName() string { return "cisco_ios_xr" }

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetYangName() string { return "csnp-count" }

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) SetParent(parent types.Entity) { csnpCount.parent = parent }

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetParent() types.Entity { return csnpCount.parent }

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetParentYangName() string { return "statistics" }

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount
// PSNP statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetFilter() yfilter.YFilter { return psnpCount.YFilter }

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) SetFilter(yf yfilter.YFilter) { psnpCount.YFilter = yf }

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetGoName(yname string) string {
    if yname == "pdu-receive-count" { return "PduReceiveCount" }
    if yname == "pdu-send-count" { return "PduSendCount" }
    return ""
}

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetSegmentPath() string {
    return "psnp-count"
}

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pdu-receive-count"] = psnpCount.PduReceiveCount
    leafs["pdu-send-count"] = psnpCount.PduSendCount
    return leafs
}

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetBundleName() string { return "cisco_ios_xr" }

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetYangName() string { return "psnp-count" }

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) SetParent(parent types.Entity) { psnpCount.parent = parent }

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetParent() types.Entity { return psnpCount.parent }

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetParentYangName() string { return "statistics" }

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData
// LAN interface statistics. NULL for non-LAN
// interfaces
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IIHs not sent due to memory exhaustion. The type is interface{} with range:
    // 0..4294967295.
    MemoryExhaustedIihCount interface{}

    // DIS elections. The type is interface{} with range: 0..4294967295.
    DisElectionCount interface{}

    // IIH statistics.
    IihCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount
}

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetFilter() yfilter.YFilter { return lanData.YFilter }

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) SetFilter(yf yfilter.YFilter) { lanData.YFilter = yf }

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetGoName(yname string) string {
    if yname == "memory-exhausted-iih-count" { return "MemoryExhaustedIihCount" }
    if yname == "dis-election-count" { return "DisElectionCount" }
    if yname == "iih-count" { return "IihCount" }
    return ""
}

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetSegmentPath() string {
    return "lan-data"
}

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iih-count" {
        return &lanData.IihCount
    }
    return nil
}

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iih-count"] = &lanData.IihCount
    return children
}

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["memory-exhausted-iih-count"] = lanData.MemoryExhaustedIihCount
    leafs["dis-election-count"] = lanData.DisElectionCount
    return leafs
}

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetBundleName() string { return "cisco_ios_xr" }

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetYangName() string { return "lan-data" }

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) SetParent(parent types.Entity) { lanData.parent = parent }

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetParent() types.Entity { return lanData.parent }

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetParentYangName() string { return "per-area-data" }

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount
// IIH statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetFilter() yfilter.YFilter { return iihCount.YFilter }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) SetFilter(yf yfilter.YFilter) { iihCount.YFilter = yf }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetGoName(yname string) string {
    if yname == "pdu-receive-count" { return "PduReceiveCount" }
    if yname == "pdu-send-count" { return "PduSendCount" }
    return ""
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetSegmentPath() string {
    return "iih-count"
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pdu-receive-count"] = iihCount.PduReceiveCount
    leafs["pdu-send-count"] = iihCount.PduSendCount
    return leafs
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetBundleName() string { return "cisco_ios_xr" }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetYangName() string { return "iih-count" }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) SetParent(parent types.Entity) { iihCount.parent = parent }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetParent() types.Entity { return iihCount.parent }

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetParentYangName() string { return "lan-data" }

// Isis_Instances_Instance_Protocol
// Basic protocol information about an IS-IS
// instance
type Isis_Instances_Instance_Protocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NsapSystemId interface{}

    // Indicates if system ID valid. The type is bool.
    ValidNsapSystemId interface{}

    // instance id. The type is interface{} with range: 0..65535.
    InstanceId interface{}

    // Levels running. The type is IsisLevels.
    RunningLevels interface{}

    // Configured NSF type. The type is IsisNsfFlavor.
    ConfiguredNsfFlavor interface{}

    // NSF type of last restart. The type is IsisNsfFlavor.
    LastRestartNsfFlavor interface{}

    // Last restart status. The type is IsisStartupStatus.
    LastRestartStatus interface{}

    // TE connection. The type is IsisUp.
    TeConnection interface{}

    // Time remaining until the next NSF restart may be attempted. The type is
    // interface{} with range: 0..4294967295.
    RemainingTimeForNextNsfRestart interface{}

    // Adj Forming count. The type is interface{} with range: 0..4294967295.
    AdjFormCount interface{}

    // Adj Full count. The type is interface{} with range: 0..4294967295.
    AdjFullCount interface{}

    // Adjacency Stagger Enabled. The type is bool.
    AdjStaggerEnabled interface{}

    // Adjacency Stagger Initiall Number of Forming Neighbors Allowed. The type is
    // interface{} with range: 0..4294967295.
    AdjStaggerInit interface{}

    // Adjacency Stagger Max Number of Forming Neighbors Allowed. The type is
    // interface{} with range: 0..4294967295.
    AdjStaggerMax interface{}

    // Is SRGB allocated ?. The type is bool.
    SrgbAllocated interface{}

    // First label in SRGB. The type is interface{} with range: 0..4294967295.
    SrgbStart interface{}

    // Last label in SRGB. The type is interface{} with range: 0..4294967295.
    SrgbEnd interface{}

    // Is SRLB allocated ?. The type is bool.
    SrlbAllocated interface{}

    // First label in SRLB. The type is interface{} with range: 0..4294967295.
    SrlbStart interface{}

    // Last label in SRLB. The type is interface{} with range: 0..4294967295.
    SrlbEnd interface{}

    // Manual area addresses. The type is slice of
    // Isis_Instances_Instance_Protocol_ManualAreaAddress.
    ManualAreaAddress []Isis_Instances_Instance_Protocol_ManualAreaAddress

    // Active area addresses. The type is slice of
    // Isis_Instances_Instance_Protocol_ActiveAreaAddress.
    ActiveAreaAddress []Isis_Instances_Instance_Protocol_ActiveAreaAddress

    // Per-topology data. The type is slice of
    // Isis_Instances_Instance_Protocol_PerTopoData.
    PerTopoData []Isis_Instances_Instance_Protocol_PerTopoData
}

func (protocol *Isis_Instances_Instance_Protocol) GetFilter() yfilter.YFilter { return protocol.YFilter }

func (protocol *Isis_Instances_Instance_Protocol) SetFilter(yf yfilter.YFilter) { protocol.YFilter = yf }

func (protocol *Isis_Instances_Instance_Protocol) GetGoName(yname string) string {
    if yname == "nsap-system-id" { return "NsapSystemId" }
    if yname == "valid-nsap-system-id" { return "ValidNsapSystemId" }
    if yname == "instance-id" { return "InstanceId" }
    if yname == "running-levels" { return "RunningLevels" }
    if yname == "configured-nsf-flavor" { return "ConfiguredNsfFlavor" }
    if yname == "last-restart-nsf-flavor" { return "LastRestartNsfFlavor" }
    if yname == "last-restart-status" { return "LastRestartStatus" }
    if yname == "te-connection" { return "TeConnection" }
    if yname == "remaining-time-for-next-nsf-restart" { return "RemainingTimeForNextNsfRestart" }
    if yname == "adj-form-count" { return "AdjFormCount" }
    if yname == "adj-full-count" { return "AdjFullCount" }
    if yname == "adj-stagger-enabled" { return "AdjStaggerEnabled" }
    if yname == "adj-stagger-init" { return "AdjStaggerInit" }
    if yname == "adj-stagger-max" { return "AdjStaggerMax" }
    if yname == "srgb-allocated" { return "SrgbAllocated" }
    if yname == "srgb-start" { return "SrgbStart" }
    if yname == "srgb-end" { return "SrgbEnd" }
    if yname == "srlb-allocated" { return "SrlbAllocated" }
    if yname == "srlb-start" { return "SrlbStart" }
    if yname == "srlb-end" { return "SrlbEnd" }
    if yname == "manual-area-address" { return "ManualAreaAddress" }
    if yname == "active-area-address" { return "ActiveAreaAddress" }
    if yname == "per-topo-data" { return "PerTopoData" }
    return ""
}

func (protocol *Isis_Instances_Instance_Protocol) GetSegmentPath() string {
    return "protocol"
}

func (protocol *Isis_Instances_Instance_Protocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "manual-area-address" {
        for _, c := range protocol.ManualAreaAddress {
            if protocol.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Protocol_ManualAreaAddress{}
        protocol.ManualAreaAddress = append(protocol.ManualAreaAddress, child)
        return &protocol.ManualAreaAddress[len(protocol.ManualAreaAddress)-1]
    }
    if childYangName == "active-area-address" {
        for _, c := range protocol.ActiveAreaAddress {
            if protocol.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Protocol_ActiveAreaAddress{}
        protocol.ActiveAreaAddress = append(protocol.ActiveAreaAddress, child)
        return &protocol.ActiveAreaAddress[len(protocol.ActiveAreaAddress)-1]
    }
    if childYangName == "per-topo-data" {
        for _, c := range protocol.PerTopoData {
            if protocol.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Protocol_PerTopoData{}
        protocol.PerTopoData = append(protocol.PerTopoData, child)
        return &protocol.PerTopoData[len(protocol.PerTopoData)-1]
    }
    return nil
}

func (protocol *Isis_Instances_Instance_Protocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocol.ManualAreaAddress {
        children[protocol.ManualAreaAddress[i].GetSegmentPath()] = &protocol.ManualAreaAddress[i]
    }
    for i := range protocol.ActiveAreaAddress {
        children[protocol.ActiveAreaAddress[i].GetSegmentPath()] = &protocol.ActiveAreaAddress[i]
    }
    for i := range protocol.PerTopoData {
        children[protocol.PerTopoData[i].GetSegmentPath()] = &protocol.PerTopoData[i]
    }
    return children
}

func (protocol *Isis_Instances_Instance_Protocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsap-system-id"] = protocol.NsapSystemId
    leafs["valid-nsap-system-id"] = protocol.ValidNsapSystemId
    leafs["instance-id"] = protocol.InstanceId
    leafs["running-levels"] = protocol.RunningLevels
    leafs["configured-nsf-flavor"] = protocol.ConfiguredNsfFlavor
    leafs["last-restart-nsf-flavor"] = protocol.LastRestartNsfFlavor
    leafs["last-restart-status"] = protocol.LastRestartStatus
    leafs["te-connection"] = protocol.TeConnection
    leafs["remaining-time-for-next-nsf-restart"] = protocol.RemainingTimeForNextNsfRestart
    leafs["adj-form-count"] = protocol.AdjFormCount
    leafs["adj-full-count"] = protocol.AdjFullCount
    leafs["adj-stagger-enabled"] = protocol.AdjStaggerEnabled
    leafs["adj-stagger-init"] = protocol.AdjStaggerInit
    leafs["adj-stagger-max"] = protocol.AdjStaggerMax
    leafs["srgb-allocated"] = protocol.SrgbAllocated
    leafs["srgb-start"] = protocol.SrgbStart
    leafs["srgb-end"] = protocol.SrgbEnd
    leafs["srlb-allocated"] = protocol.SrlbAllocated
    leafs["srlb-start"] = protocol.SrlbStart
    leafs["srlb-end"] = protocol.SrlbEnd
    return leafs
}

func (protocol *Isis_Instances_Instance_Protocol) GetBundleName() string { return "cisco_ios_xr" }

func (protocol *Isis_Instances_Instance_Protocol) GetYangName() string { return "protocol" }

func (protocol *Isis_Instances_Instance_Protocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocol *Isis_Instances_Instance_Protocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocol *Isis_Instances_Instance_Protocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocol *Isis_Instances_Instance_Protocol) SetParent(parent types.Entity) { protocol.parent = parent }

func (protocol *Isis_Instances_Instance_Protocol) GetParent() types.Entity { return protocol.parent }

func (protocol *Isis_Instances_Instance_Protocol) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_Protocol_ManualAreaAddress
// Manual area addresses
type Isis_Instances_Instance_Protocol_ManualAreaAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern: [a-fA-F0-9]{2}(\.[a-fA-F0-9]{4}){0,6}.
    Entry interface{}
}

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetFilter() yfilter.YFilter { return manualAreaAddress.YFilter }

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) SetFilter(yf yfilter.YFilter) { manualAreaAddress.YFilter = yf }

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetSegmentPath() string {
    return "manual-area-address"
}

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = manualAreaAddress.Entry
    return leafs
}

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetBundleName() string { return "cisco_ios_xr" }

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetYangName() string { return "manual-area-address" }

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) SetParent(parent types.Entity) { manualAreaAddress.parent = parent }

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetParent() types.Entity { return manualAreaAddress.parent }

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetParentYangName() string { return "protocol" }

// Isis_Instances_Instance_Protocol_ActiveAreaAddress
// Active area addresses
type Isis_Instances_Instance_Protocol_ActiveAreaAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern: [a-fA-F0-9]{2}(\.[a-fA-F0-9]{4}){0,6}.
    Entry interface{}
}

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetFilter() yfilter.YFilter { return activeAreaAddress.YFilter }

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) SetFilter(yf yfilter.YFilter) { activeAreaAddress.YFilter = yf }

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetSegmentPath() string {
    return "active-area-address"
}

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = activeAreaAddress.Entry
    return leafs
}

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetBundleName() string { return "cisco_ios_xr" }

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetYangName() string { return "active-area-address" }

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) SetParent(parent types.Entity) { activeAreaAddress.parent = parent }

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetParent() types.Entity { return activeAreaAddress.parent }

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetParentYangName() string { return "protocol" }

// Isis_Instances_Instance_Protocol_PerTopoData
// Per-topology data
type Isis_Instances_Instance_Protocol_PerTopoData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default administrative distance. The type is interface{} with range:
    // 0..4294967295.
    DefaultAdminDistance interface{}

    // Advertise passive interface prefixes only. The type is bool.
    AdvertisePassiveOnly interface{}

    // Waiting for redist complete RIB event. The type is bool.
    WaitRedistComplete interface{}

    // Topology ID.
    Id Isis_Instances_Instance_Protocol_PerTopoData_Id

    // List of redistributed protocols.
    RedistProtocolsList Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList

    // Per-area data. The type is slice of
    // Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData.
    PerAreaData []Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData
}

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetFilter() yfilter.YFilter { return perTopoData.YFilter }

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) SetFilter(yf yfilter.YFilter) { perTopoData.YFilter = yf }

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetGoName(yname string) string {
    if yname == "default-admin-distance" { return "DefaultAdminDistance" }
    if yname == "advertise-passive-only" { return "AdvertisePassiveOnly" }
    if yname == "wait-redist-complete" { return "WaitRedistComplete" }
    if yname == "id" { return "Id" }
    if yname == "redist-protocols-list" { return "RedistProtocolsList" }
    if yname == "per-area-data" { return "PerAreaData" }
    return ""
}

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetSegmentPath() string {
    return "per-topo-data"
}

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "id" {
        return &perTopoData.Id
    }
    if childYangName == "redist-protocols-list" {
        return &perTopoData.RedistProtocolsList
    }
    if childYangName == "per-area-data" {
        for _, c := range perTopoData.PerAreaData {
            if perTopoData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData{}
        perTopoData.PerAreaData = append(perTopoData.PerAreaData, child)
        return &perTopoData.PerAreaData[len(perTopoData.PerAreaData)-1]
    }
    return nil
}

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["id"] = &perTopoData.Id
    children["redist-protocols-list"] = &perTopoData.RedistProtocolsList
    for i := range perTopoData.PerAreaData {
        children[perTopoData.PerAreaData[i].GetSegmentPath()] = &perTopoData.PerAreaData[i]
    }
    return children
}

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-admin-distance"] = perTopoData.DefaultAdminDistance
    leafs["advertise-passive-only"] = perTopoData.AdvertisePassiveOnly
    leafs["wait-redist-complete"] = perTopoData.WaitRedistComplete
    return leafs
}

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetBundleName() string { return "cisco_ios_xr" }

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetYangName() string { return "per-topo-data" }

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) SetParent(parent types.Entity) { perTopoData.parent = parent }

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetParent() types.Entity { return perTopoData.parent }

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetParentYangName() string { return "protocol" }

// Isis_Instances_Instance_Protocol_PerTopoData_Id
// Topology ID
type Isis_Instances_Instance_Protocol_PerTopoData_Id struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetFilter() yfilter.YFilter { return id.YFilter }

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) SetFilter(yf yfilter.YFilter) { id.YFilter = yf }

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "topology-name" { return "TopologyName" }
    return ""
}

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetSegmentPath() string {
    return "id"
}

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = id.AfName
    leafs["saf-name"] = id.SafName
    leafs["vrf-name"] = id.VrfName
    leafs["topology-name"] = id.TopologyName
    return leafs
}

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetBundleName() string { return "cisco_ios_xr" }

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetYangName() string { return "id" }

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) SetParent(parent types.Entity) { id.parent = parent }

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetParent() types.Entity { return id.parent }

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetParentYangName() string { return "per-topo-data" }

// Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList
// List of redistributed protocols
type Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // isis sh redist entry. The type is slice of
    // Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry.
    IsisShRedistEntry []Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry
}

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetFilter() yfilter.YFilter { return redistProtocolsList.YFilter }

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) SetFilter(yf yfilter.YFilter) { redistProtocolsList.YFilter = yf }

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetGoName(yname string) string {
    if yname == "isis-sh-redist-entry" { return "IsisShRedistEntry" }
    return ""
}

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetSegmentPath() string {
    return "redist-protocols-list"
}

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "isis-sh-redist-entry" {
        for _, c := range redistProtocolsList.IsisShRedistEntry {
            if redistProtocolsList.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry{}
        redistProtocolsList.IsisShRedistEntry = append(redistProtocolsList.IsisShRedistEntry, child)
        return &redistProtocolsList.IsisShRedistEntry[len(redistProtocolsList.IsisShRedistEntry)-1]
    }
    return nil
}

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range redistProtocolsList.IsisShRedistEntry {
        children[redistProtocolsList.IsisShRedistEntry[i].GetSegmentPath()] = &redistProtocolsList.IsisShRedistEntry[i]
    }
    return children
}

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetBundleName() string { return "cisco_ios_xr" }

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetYangName() string { return "redist-protocols-list" }

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) SetParent(parent types.Entity) { redistProtocolsList.parent = parent }

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetParent() types.Entity { return redistProtocolsList.parent }

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetParentYangName() string { return "per-topo-data" }

// Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry
// isis sh redist entry
type Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Relevant details of the redistributed protocol.
    ProtocolDetails Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails
}

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetFilter() yfilter.YFilter { return isisShRedistEntry.YFilter }

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) SetFilter(yf yfilter.YFilter) { isisShRedistEntry.YFilter = yf }

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetGoName(yname string) string {
    if yname == "protocol-details" { return "ProtocolDetails" }
    return ""
}

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetSegmentPath() string {
    return "isis-sh-redist-entry"
}

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-details" {
        return &isisShRedistEntry.ProtocolDetails
    }
    return nil
}

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-details"] = &isisShRedistEntry.ProtocolDetails
    return children
}

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetBundleName() string { return "cisco_ios_xr" }

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetYangName() string { return "isis-sh-redist-entry" }

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) SetParent(parent types.Entity) { isisShRedistEntry.parent = parent }

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetParent() types.Entity { return isisShRedistEntry.parent }

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetParentYangName() string { return "redist-protocols-list" }

// Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails
// Relevant details of the redistributed protocol
type Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetFilter() yfilter.YFilter { return protocolDetails.YFilter }

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) SetFilter(yf yfilter.YFilter) { protocolDetails.YFilter = yf }

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetGoName(yname string) string {
    if yname == "protocol" { return "Protocol" }
    if yname == "isis-instance-id" { return "IsisInstanceId" }
    if yname == "ospf-process-id" { return "OspfProcessId" }
    if yname == "ospfv3-process-id" { return "Ospfv3ProcessId" }
    if yname == "bgp-as-number" { return "BgpAsNumber" }
    if yname == "eigrp-as-number" { return "EigrpAsNumber" }
    if yname == "application-name" { return "ApplicationName" }
    return ""
}

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetSegmentPath() string {
    return "protocol-details"
}

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol"] = protocolDetails.Protocol
    leafs["isis-instance-id"] = protocolDetails.IsisInstanceId
    leafs["ospf-process-id"] = protocolDetails.OspfProcessId
    leafs["ospfv3-process-id"] = protocolDetails.Ospfv3ProcessId
    leafs["bgp-as-number"] = protocolDetails.BgpAsNumber
    leafs["eigrp-as-number"] = protocolDetails.EigrpAsNumber
    leafs["application-name"] = protocolDetails.ApplicationName
    return leafs
}

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetBundleName() string { return "cisco_ios_xr" }

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetYangName() string { return "protocol-details" }

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) SetParent(parent types.Entity) { protocolDetails.parent = parent }

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetParent() types.Entity { return protocolDetails.parent }

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetParentYangName() string { return "isis-sh-redist-entry" }

// Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData
// Per-area data
type Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The level this data refers to. The type is IsisLevel.
    Level interface{}

    // Does this topology use the default link topology. The type is bool.
    UsesDefaultLinkTopoFlag interface{}

    // Generate metric style. The type is IsisMetricStyle.
    GeneratedMetricStyle interface{}

    // Accept metric style. The type is IsisMetricStyle.
    AcceptedMetricStyle interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // ISPF state. The type is IsisEnabled.
    IspfState interface{}

    // Indicates whether MPLS TE is enabled. The type is bool.
    TeEnabled interface{}

    // Microloop avoidance type. The type is IsisUloopAvoidance.
    UloopAvoidanceType interface{}

    // Microloop RIB update delay. The type is interface{} with range:
    // 0..4294967295.
    RibUpdateDelay interface{}

    // Explicit paths installed in the RIB. The type is bool.
    SrUloopIsActive interface{}

    // SR microloop avoidance duration. The type is interface{} with range:
    // 0..4294967295.
    Duration interface{}

    // SR microloop avoidance event. The type is IsisUloopEvent.
    SrUloopEvent interface{}

    // SR microloop near node. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    SrUloopNearNodeId interface{}

    // SR microloop far node. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    SrUloopFarNodeId interface{}
}

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetFilter() yfilter.YFilter { return perAreaData.YFilter }

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) SetFilter(yf yfilter.YFilter) { perAreaData.YFilter = yf }

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "uses-default-link-topo-flag" { return "UsesDefaultLinkTopoFlag" }
    if yname == "generated-metric-style" { return "GeneratedMetricStyle" }
    if yname == "accepted-metric-style" { return "AcceptedMetricStyle" }
    if yname == "metric" { return "Metric" }
    if yname == "ispf-state" { return "IspfState" }
    if yname == "te-enabled" { return "TeEnabled" }
    if yname == "uloop-avoidance-type" { return "UloopAvoidanceType" }
    if yname == "rib-update-delay" { return "RibUpdateDelay" }
    if yname == "sr-uloop-is-active" { return "SrUloopIsActive" }
    if yname == "duration" { return "Duration" }
    if yname == "sr-uloop-event" { return "SrUloopEvent" }
    if yname == "sr-uloop-near-node-id" { return "SrUloopNearNodeId" }
    if yname == "sr-uloop-far-node-id" { return "SrUloopFarNodeId" }
    return ""
}

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetSegmentPath() string {
    return "per-area-data"
}

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = perAreaData.Level
    leafs["uses-default-link-topo-flag"] = perAreaData.UsesDefaultLinkTopoFlag
    leafs["generated-metric-style"] = perAreaData.GeneratedMetricStyle
    leafs["accepted-metric-style"] = perAreaData.AcceptedMetricStyle
    leafs["metric"] = perAreaData.Metric
    leafs["ispf-state"] = perAreaData.IspfState
    leafs["te-enabled"] = perAreaData.TeEnabled
    leafs["uloop-avoidance-type"] = perAreaData.UloopAvoidanceType
    leafs["rib-update-delay"] = perAreaData.RibUpdateDelay
    leafs["sr-uloop-is-active"] = perAreaData.SrUloopIsActive
    leafs["duration"] = perAreaData.Duration
    leafs["sr-uloop-event"] = perAreaData.SrUloopEvent
    leafs["sr-uloop-near-node-id"] = perAreaData.SrUloopNearNodeId
    leafs["sr-uloop-far-node-id"] = perAreaData.SrUloopFarNodeId
    return leafs
}

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetBundleName() string { return "cisco_ios_xr" }

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetYangName() string { return "per-area-data" }

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) SetParent(parent types.Entity) { perAreaData.parent = parent }

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetParent() types.Entity { return perAreaData.parent }

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetParentYangName() string { return "per-topo-data" }

// Isis_Instances_Instance_NeighborSummaries
// Neighbor-summary table
type Isis_Instances_Instance_NeighborSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor-summary data for a single interface. The type is slice of
    // Isis_Instances_Instance_NeighborSummaries_NeighborSummary.
    NeighborSummary []Isis_Instances_Instance_NeighborSummaries_NeighborSummary
}

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetFilter() yfilter.YFilter { return neighborSummaries.YFilter }

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) SetFilter(yf yfilter.YFilter) { neighborSummaries.YFilter = yf }

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetGoName(yname string) string {
    if yname == "neighbor-summary" { return "NeighborSummary" }
    return ""
}

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetSegmentPath() string {
    return "neighbor-summaries"
}

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-summary" {
        for _, c := range neighborSummaries.NeighborSummary {
            if neighborSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_NeighborSummaries_NeighborSummary{}
        neighborSummaries.NeighborSummary = append(neighborSummaries.NeighborSummary, child)
        return &neighborSummaries.NeighborSummary[len(neighborSummaries.NeighborSummary)-1]
    }
    return nil
}

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborSummaries.NeighborSummary {
        children[neighborSummaries.NeighborSummary[i].GetSegmentPath()] = &neighborSummaries.NeighborSummary[i]
    }
    return children
}

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetYangName() string { return "neighbor-summaries" }

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) SetParent(parent types.Entity) { neighborSummaries.parent = parent }

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetParent() types.Entity { return neighborSummaries.parent }

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_NeighborSummaries_NeighborSummary
// Neighbor-summary data for a single interface
type Isis_Instances_Instance_NeighborSummaries_NeighborSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // L1-only neighbors.
    Level1Neighbors Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors

    // L2-only neighbors.
    Level2Neighbors Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors

    // L12 neighbors.
    Level12Neigbors Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors
}

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetFilter() yfilter.YFilter { return neighborSummary.YFilter }

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) SetFilter(yf yfilter.YFilter) { neighborSummary.YFilter = yf }

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "level1-neighbors" { return "Level1Neighbors" }
    if yname == "level2-neighbors" { return "Level2Neighbors" }
    if yname == "level12-neigbors" { return "Level12Neigbors" }
    return ""
}

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetSegmentPath() string {
    return "neighbor-summary" + "[interface-name='" + fmt.Sprintf("%v", neighborSummary.InterfaceName) + "']"
}

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "level1-neighbors" {
        return &neighborSummary.Level1Neighbors
    }
    if childYangName == "level2-neighbors" {
        return &neighborSummary.Level2Neighbors
    }
    if childYangName == "level12-neigbors" {
        return &neighborSummary.Level12Neigbors
    }
    return nil
}

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["level1-neighbors"] = &neighborSummary.Level1Neighbors
    children["level2-neighbors"] = &neighborSummary.Level2Neighbors
    children["level12-neigbors"] = &neighborSummary.Level12Neigbors
    return children
}

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = neighborSummary.InterfaceName
    return leafs
}

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetBundleName() string { return "cisco_ios_xr" }

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetYangName() string { return "neighbor-summary" }

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) SetParent(parent types.Entity) { neighborSummary.parent = parent }

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetParent() types.Entity { return neighborSummary.parent }

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetParentYangName() string { return "neighbor-summaries" }

// Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors
// L1-only neighbors
type Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbors up. The type is interface{} with range: 0..4294967295.
    NeighborUpCount interface{}

    // Neighbors being initialized. The type is interface{} with range:
    // 0..4294967295.
    NeighborInitCount interface{}

    // Neighbors down. The type is interface{} with range: 0..4294967295.
    NeighborDownCount interface{}
}

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetFilter() yfilter.YFilter { return level1Neighbors.YFilter }

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) SetFilter(yf yfilter.YFilter) { level1Neighbors.YFilter = yf }

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetGoName(yname string) string {
    if yname == "neighbor-up-count" { return "NeighborUpCount" }
    if yname == "neighbor-init-count" { return "NeighborInitCount" }
    if yname == "neighbor-down-count" { return "NeighborDownCount" }
    return ""
}

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetSegmentPath() string {
    return "level1-neighbors"
}

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-up-count"] = level1Neighbors.NeighborUpCount
    leafs["neighbor-init-count"] = level1Neighbors.NeighborInitCount
    leafs["neighbor-down-count"] = level1Neighbors.NeighborDownCount
    return leafs
}

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetYangName() string { return "level1-neighbors" }

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) SetParent(parent types.Entity) { level1Neighbors.parent = parent }

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetParent() types.Entity { return level1Neighbors.parent }

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetParentYangName() string { return "neighbor-summary" }

// Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors
// L2-only neighbors
type Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbors up. The type is interface{} with range: 0..4294967295.
    NeighborUpCount interface{}

    // Neighbors being initialized. The type is interface{} with range:
    // 0..4294967295.
    NeighborInitCount interface{}

    // Neighbors down. The type is interface{} with range: 0..4294967295.
    NeighborDownCount interface{}
}

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetFilter() yfilter.YFilter { return level2Neighbors.YFilter }

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) SetFilter(yf yfilter.YFilter) { level2Neighbors.YFilter = yf }

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetGoName(yname string) string {
    if yname == "neighbor-up-count" { return "NeighborUpCount" }
    if yname == "neighbor-init-count" { return "NeighborInitCount" }
    if yname == "neighbor-down-count" { return "NeighborDownCount" }
    return ""
}

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetSegmentPath() string {
    return "level2-neighbors"
}

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-up-count"] = level2Neighbors.NeighborUpCount
    leafs["neighbor-init-count"] = level2Neighbors.NeighborInitCount
    leafs["neighbor-down-count"] = level2Neighbors.NeighborDownCount
    return leafs
}

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetYangName() string { return "level2-neighbors" }

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) SetParent(parent types.Entity) { level2Neighbors.parent = parent }

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetParent() types.Entity { return level2Neighbors.parent }

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetParentYangName() string { return "neighbor-summary" }

// Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors
// L12 neighbors
type Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbors up. The type is interface{} with range: 0..4294967295.
    NeighborUpCount interface{}

    // Neighbors being initialized. The type is interface{} with range:
    // 0..4294967295.
    NeighborInitCount interface{}

    // Neighbors down. The type is interface{} with range: 0..4294967295.
    NeighborDownCount interface{}
}

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetFilter() yfilter.YFilter { return level12Neigbors.YFilter }

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) SetFilter(yf yfilter.YFilter) { level12Neigbors.YFilter = yf }

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetGoName(yname string) string {
    if yname == "neighbor-up-count" { return "NeighborUpCount" }
    if yname == "neighbor-init-count" { return "NeighborInitCount" }
    if yname == "neighbor-down-count" { return "NeighborDownCount" }
    return ""
}

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetSegmentPath() string {
    return "level12-neigbors"
}

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-up-count"] = level12Neigbors.NeighborUpCount
    leafs["neighbor-init-count"] = level12Neigbors.NeighborInitCount
    leafs["neighbor-down-count"] = level12Neigbors.NeighborDownCount
    return leafs
}

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetBundleName() string { return "cisco_ios_xr" }

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetYangName() string { return "level12-neigbors" }

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) SetParent(parent types.Entity) { level12Neigbors.parent = parent }

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetParent() types.Entity { return level12Neigbors.parent }

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetParentYangName() string { return "neighbor-summary" }

// Isis_Instances_Instance_CheckpointLsps
// Checkpointed LSP table
type Isis_Instances_Instance_CheckpointLsps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A checkpointed IS-IS LSP. The type is slice of
    // Isis_Instances_Instance_CheckpointLsps_CheckpointLsp.
    CheckpointLsp []Isis_Instances_Instance_CheckpointLsps_CheckpointLsp
}

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetFilter() yfilter.YFilter { return checkpointLsps.YFilter }

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) SetFilter(yf yfilter.YFilter) { checkpointLsps.YFilter = yf }

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetGoName(yname string) string {
    if yname == "checkpoint-lsp" { return "CheckpointLsp" }
    return ""
}

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetSegmentPath() string {
    return "checkpoint-lsps"
}

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "checkpoint-lsp" {
        for _, c := range checkpointLsps.CheckpointLsp {
            if checkpointLsps.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_CheckpointLsps_CheckpointLsp{}
        checkpointLsps.CheckpointLsp = append(checkpointLsps.CheckpointLsp, child)
        return &checkpointLsps.CheckpointLsp[len(checkpointLsps.CheckpointLsp)-1]
    }
    return nil
}

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range checkpointLsps.CheckpointLsp {
        children[checkpointLsps.CheckpointLsp[i].GetSegmentPath()] = &checkpointLsps.CheckpointLsp[i]
    }
    return children
}

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetBundleName() string { return "cisco_ios_xr" }

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetYangName() string { return "checkpoint-lsps" }

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) SetParent(parent types.Entity) { checkpointLsps.parent = parent }

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetParent() types.Entity { return checkpointLsps.parent }

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_CheckpointLsps_CheckpointLsp
// A checkpointed IS-IS LSP
type Isis_Instances_Instance_CheckpointLsps_CheckpointLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level. The type is IsisInternalLevel.
    Level interface{}

    // LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // LSP Checkpoint table object ID. The type is interface{} with range:
    // 0..4294967295.
    CheckpointLspObjectId interface{}

    // LSP level. The type is interface{} with range: 0..255.
    CheckpointLspLevel interface{}

    // TRUE if this is a local LSP. The type is bool.
    CheckpointLspLocalFlag interface{}

    // LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    CheckpointLspId interface{}
}

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetFilter() yfilter.YFilter { return checkpointLsp.YFilter }

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) SetFilter(yf yfilter.YFilter) { checkpointLsp.YFilter = yf }

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "lsp-id" { return "LspId" }
    if yname == "checkpoint-lsp-object-id" { return "CheckpointLspObjectId" }
    if yname == "checkpoint-lsp-level" { return "CheckpointLspLevel" }
    if yname == "checkpoint-lsp-local-flag" { return "CheckpointLspLocalFlag" }
    if yname == "checkpoint-lsp-id" { return "CheckpointLspId" }
    return ""
}

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetSegmentPath() string {
    return "checkpoint-lsp"
}

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = checkpointLsp.Level
    leafs["lsp-id"] = checkpointLsp.LspId
    leafs["checkpoint-lsp-object-id"] = checkpointLsp.CheckpointLspObjectId
    leafs["checkpoint-lsp-level"] = checkpointLsp.CheckpointLspLevel
    leafs["checkpoint-lsp-local-flag"] = checkpointLsp.CheckpointLspLocalFlag
    leafs["checkpoint-lsp-id"] = checkpointLsp.CheckpointLspId
    return leafs
}

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetBundleName() string { return "cisco_ios_xr" }

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetYangName() string { return "checkpoint-lsp" }

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) SetParent(parent types.Entity) { checkpointLsp.parent = parent }

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetParent() types.Entity { return checkpointLsp.parent }

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetParentYangName() string { return "checkpoint-lsps" }

// Isis_Instances_Instance_MeshGroups
// Mesh-group information
type Isis_Instances_Instance_MeshGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of mesh-group-configured interfaces.
    MeshGroupConfiguredInterfaceList Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList
}

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetFilter() yfilter.YFilter { return meshGroups.YFilter }

func (meshGroups *Isis_Instances_Instance_MeshGroups) SetFilter(yf yfilter.YFilter) { meshGroups.YFilter = yf }

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetGoName(yname string) string {
    if yname == "mesh-group-configured-interface-list" { return "MeshGroupConfiguredInterfaceList" }
    return ""
}

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetSegmentPath() string {
    return "mesh-groups"
}

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mesh-group-configured-interface-list" {
        return &meshGroups.MeshGroupConfiguredInterfaceList
    }
    return nil
}

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mesh-group-configured-interface-list"] = &meshGroups.MeshGroupConfiguredInterfaceList
    return children
}

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetBundleName() string { return "cisco_ios_xr" }

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetYangName() string { return "mesh-groups" }

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (meshGroups *Isis_Instances_Instance_MeshGroups) SetParent(parent types.Entity) { meshGroups.parent = parent }

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetParent() types.Entity { return meshGroups.parent }

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList
// List of mesh-group-configured interfaces
type Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // isis sh mesh entry. The type is slice of
    // Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry.
    IsisShMeshEntry []Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry
}

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetFilter() yfilter.YFilter { return meshGroupConfiguredInterfaceList.YFilter }

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) SetFilter(yf yfilter.YFilter) { meshGroupConfiguredInterfaceList.YFilter = yf }

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetGoName(yname string) string {
    if yname == "isis-sh-mesh-entry" { return "IsisShMeshEntry" }
    return ""
}

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetSegmentPath() string {
    return "mesh-group-configured-interface-list"
}

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "isis-sh-mesh-entry" {
        for _, c := range meshGroupConfiguredInterfaceList.IsisShMeshEntry {
            if meshGroupConfiguredInterfaceList.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry{}
        meshGroupConfiguredInterfaceList.IsisShMeshEntry = append(meshGroupConfiguredInterfaceList.IsisShMeshEntry, child)
        return &meshGroupConfiguredInterfaceList.IsisShMeshEntry[len(meshGroupConfiguredInterfaceList.IsisShMeshEntry)-1]
    }
    return nil
}

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range meshGroupConfiguredInterfaceList.IsisShMeshEntry {
        children[meshGroupConfiguredInterfaceList.IsisShMeshEntry[i].GetSegmentPath()] = &meshGroupConfiguredInterfaceList.IsisShMeshEntry[i]
    }
    return children
}

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetBundleName() string { return "cisco_ios_xr" }

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetYangName() string { return "mesh-group-configured-interface-list" }

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) SetParent(parent types.Entity) { meshGroupConfiguredInterfaceList.parent = parent }

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetParent() types.Entity { return meshGroupConfiguredInterfaceList.parent }

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetParentYangName() string { return "mesh-groups" }

// Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry
// isis sh mesh entry
type Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    MeshGroupInterface interface{}

    // Mesh-group number. The type is interface{} with range: 0..4294967295.
    MeshGroupNumber interface{}
}

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetFilter() yfilter.YFilter { return isisShMeshEntry.YFilter }

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) SetFilter(yf yfilter.YFilter) { isisShMeshEntry.YFilter = yf }

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetGoName(yname string) string {
    if yname == "mesh-group-interface" { return "MeshGroupInterface" }
    if yname == "mesh-group-number" { return "MeshGroupNumber" }
    return ""
}

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetSegmentPath() string {
    return "isis-sh-mesh-entry"
}

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mesh-group-interface"] = isisShMeshEntry.MeshGroupInterface
    leafs["mesh-group-number"] = isisShMeshEntry.MeshGroupNumber
    return leafs
}

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetBundleName() string { return "cisco_ios_xr" }

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetYangName() string { return "isis-sh-mesh-entry" }

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) SetParent(parent types.Entity) { isisShMeshEntry.parent = parent }

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetParent() types.Entity { return isisShMeshEntry.parent }

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetParentYangName() string { return "mesh-group-configured-interface-list" }

// Isis_Instances_Instance_NsrStatistics
// NSR Statistics information
type Isis_Instances_Instance_NsrStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ISIS VM STATE. The type is interface{} with range: 0..65535.
    IsisVmState interface{}

    // ISIS NSR STATS Data.
    IsisNsrStatsData Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData
}

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetFilter() yfilter.YFilter { return nsrStatistics.YFilter }

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) SetFilter(yf yfilter.YFilter) { nsrStatistics.YFilter = yf }

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetGoName(yname string) string {
    if yname == "isis-vm-state" { return "IsisVmState" }
    if yname == "isis-nsr-stats-data" { return "IsisNsrStatsData" }
    return ""
}

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetSegmentPath() string {
    return "nsr-statistics"
}

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "isis-nsr-stats-data" {
        return &nsrStatistics.IsisNsrStatsData
    }
    return nil
}

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["isis-nsr-stats-data"] = &nsrStatistics.IsisNsrStatsData
    return children
}

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["isis-vm-state"] = nsrStatistics.IsisVmState
    return leafs
}

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetYangName() string { return "nsr-statistics" }

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) SetParent(parent types.Entity) { nsrStatistics.parent = parent }

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetParent() types.Entity { return nsrStatistics.parent }

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData
// ISIS NSR STATS Data
type Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // self.
    Self Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self

    // peer. The type is slice of
    // Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer.
    Peer []Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer
}

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetFilter() yfilter.YFilter { return isisNsrStatsData.YFilter }

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) SetFilter(yf yfilter.YFilter) { isisNsrStatsData.YFilter = yf }

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetGoName(yname string) string {
    if yname == "self" { return "Self" }
    if yname == "peer" { return "Peer" }
    return ""
}

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetSegmentPath() string {
    return "isis-nsr-stats-data"
}

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "self" {
        return &isisNsrStatsData.Self
    }
    if childYangName == "peer" {
        for _, c := range isisNsrStatsData.Peer {
            if isisNsrStatsData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer{}
        isisNsrStatsData.Peer = append(isisNsrStatsData.Peer, child)
        return &isisNsrStatsData.Peer[len(isisNsrStatsData.Peer)-1]
    }
    return nil
}

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["self"] = &isisNsrStatsData.Self
    for i := range isisNsrStatsData.Peer {
        children[isisNsrStatsData.Peer[i].GetSegmentPath()] = &isisNsrStatsData.Peer[i]
    }
    return children
}

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetBundleName() string { return "cisco_ios_xr" }

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetYangName() string { return "isis-nsr-stats-data" }

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) SetParent(parent types.Entity) { isisNsrStatsData.parent = parent }

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetParent() types.Entity { return isisNsrStatsData.parent }

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetParentYangName() string { return "nsr-statistics" }

// Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self
// self
type Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // no of l1 lsp. The type is interface{} with range: 0..4294967295.
    NoOfL1Lsp interface{}

    // no of l2 lsp. The type is interface{} with range: 0..4294967295.
    NoOfL2Lsp interface{}

    // no of l1 adj. The type is interface{} with range: 0..65535.
    NoOfL1Adj interface{}

    // no of l2 adj. The type is interface{} with range: 0..65535.
    NoOfL2Adj interface{}

    // no of live interface. The type is interface{} with range: 0..65535.
    NoOfLiveInterface interface{}

    // no of ptp interface. The type is interface{} with range: 0..65535.
    NoOfPtpInterface interface{}

    // no of lan interface. The type is interface{} with range: 0..65535.
    NoOfLanInterface interface{}

    // no of loopback interface. The type is interface{} with range: 0..65535.
    NoOfLoopbackInterface interface{}

    // no of te tunnels. The type is interface{} with range: 0..65535.
    NoOfTeTunnels interface{}

    // no of te links. The type is interface{} with range: 0..65535.
    NoOfTeLinks interface{}

    // no of ipv4 routes. The type is interface{} with range: 0..4294967295.
    NoOfIpv4Routes interface{}

    // no of ipv6 routes. The type is interface{} with range: 0..4294967295.
    NoOfIpv6Routes interface{}

    // seqnum. The type is interface{} with range: 0..4294967295.
    Seqnum interface{}
}

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetGoName(yname string) string {
    if yname == "no-of-l1-lsp" { return "NoOfL1Lsp" }
    if yname == "no-of-l2-lsp" { return "NoOfL2Lsp" }
    if yname == "no-of-l1-adj" { return "NoOfL1Adj" }
    if yname == "no-of-l2-adj" { return "NoOfL2Adj" }
    if yname == "no-of-live-interface" { return "NoOfLiveInterface" }
    if yname == "no-of-ptp-interface" { return "NoOfPtpInterface" }
    if yname == "no-of-lan-interface" { return "NoOfLanInterface" }
    if yname == "no-of-loopback-interface" { return "NoOfLoopbackInterface" }
    if yname == "no-of-te-tunnels" { return "NoOfTeTunnels" }
    if yname == "no-of-te-links" { return "NoOfTeLinks" }
    if yname == "no-of-ipv4-routes" { return "NoOfIpv4Routes" }
    if yname == "no-of-ipv6-routes" { return "NoOfIpv6Routes" }
    if yname == "seqnum" { return "Seqnum" }
    return ""
}

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetSegmentPath() string {
    return "self"
}

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["no-of-l1-lsp"] = self.NoOfL1Lsp
    leafs["no-of-l2-lsp"] = self.NoOfL2Lsp
    leafs["no-of-l1-adj"] = self.NoOfL1Adj
    leafs["no-of-l2-adj"] = self.NoOfL2Adj
    leafs["no-of-live-interface"] = self.NoOfLiveInterface
    leafs["no-of-ptp-interface"] = self.NoOfPtpInterface
    leafs["no-of-lan-interface"] = self.NoOfLanInterface
    leafs["no-of-loopback-interface"] = self.NoOfLoopbackInterface
    leafs["no-of-te-tunnels"] = self.NoOfTeTunnels
    leafs["no-of-te-links"] = self.NoOfTeLinks
    leafs["no-of-ipv4-routes"] = self.NoOfIpv4Routes
    leafs["no-of-ipv6-routes"] = self.NoOfIpv6Routes
    leafs["seqnum"] = self.Seqnum
    return leafs
}

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetBundleName() string { return "cisco_ios_xr" }

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetYangName() string { return "self" }

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) SetParent(parent types.Entity) { self.parent = parent }

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetParent() types.Entity { return self.parent }

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetParentYangName() string { return "isis-nsr-stats-data" }

// Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer
// peer
type Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // no of l1 lsp. The type is interface{} with range: 0..4294967295.
    NoOfL1Lsp interface{}

    // no of l2 lsp. The type is interface{} with range: 0..4294967295.
    NoOfL2Lsp interface{}

    // no of l1 adj. The type is interface{} with range: 0..65535.
    NoOfL1Adj interface{}

    // no of l2 adj. The type is interface{} with range: 0..65535.
    NoOfL2Adj interface{}

    // no of live interface. The type is interface{} with range: 0..65535.
    NoOfLiveInterface interface{}

    // no of ptp interface. The type is interface{} with range: 0..65535.
    NoOfPtpInterface interface{}

    // no of lan interface. The type is interface{} with range: 0..65535.
    NoOfLanInterface interface{}

    // no of loopback interface. The type is interface{} with range: 0..65535.
    NoOfLoopbackInterface interface{}

    // no of te tunnels. The type is interface{} with range: 0..65535.
    NoOfTeTunnels interface{}

    // no of te links. The type is interface{} with range: 0..65535.
    NoOfTeLinks interface{}

    // no of ipv4 routes. The type is interface{} with range: 0..4294967295.
    NoOfIpv4Routes interface{}

    // no of ipv6 routes. The type is interface{} with range: 0..4294967295.
    NoOfIpv6Routes interface{}

    // seqnum. The type is interface{} with range: 0..4294967295.
    Seqnum interface{}
}

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetGoName(yname string) string {
    if yname == "no-of-l1-lsp" { return "NoOfL1Lsp" }
    if yname == "no-of-l2-lsp" { return "NoOfL2Lsp" }
    if yname == "no-of-l1-adj" { return "NoOfL1Adj" }
    if yname == "no-of-l2-adj" { return "NoOfL2Adj" }
    if yname == "no-of-live-interface" { return "NoOfLiveInterface" }
    if yname == "no-of-ptp-interface" { return "NoOfPtpInterface" }
    if yname == "no-of-lan-interface" { return "NoOfLanInterface" }
    if yname == "no-of-loopback-interface" { return "NoOfLoopbackInterface" }
    if yname == "no-of-te-tunnels" { return "NoOfTeTunnels" }
    if yname == "no-of-te-links" { return "NoOfTeLinks" }
    if yname == "no-of-ipv4-routes" { return "NoOfIpv4Routes" }
    if yname == "no-of-ipv6-routes" { return "NoOfIpv6Routes" }
    if yname == "seqnum" { return "Seqnum" }
    return ""
}

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetSegmentPath() string {
    return "peer"
}

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["no-of-l1-lsp"] = peer.NoOfL1Lsp
    leafs["no-of-l2-lsp"] = peer.NoOfL2Lsp
    leafs["no-of-l1-adj"] = peer.NoOfL1Adj
    leafs["no-of-l2-adj"] = peer.NoOfL2Adj
    leafs["no-of-live-interface"] = peer.NoOfLiveInterface
    leafs["no-of-ptp-interface"] = peer.NoOfPtpInterface
    leafs["no-of-lan-interface"] = peer.NoOfLanInterface
    leafs["no-of-loopback-interface"] = peer.NoOfLoopbackInterface
    leafs["no-of-te-tunnels"] = peer.NoOfTeTunnels
    leafs["no-of-te-links"] = peer.NoOfTeLinks
    leafs["no-of-ipv4-routes"] = peer.NoOfIpv4Routes
    leafs["no-of-ipv6-routes"] = peer.NoOfIpv6Routes
    leafs["seqnum"] = peer.Seqnum
    return leafs
}

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetYangName() string { return "peer" }

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetParent() types.Entity { return peer.parent }

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetParentYangName() string { return "isis-nsr-stats-data" }

// Isis_Instances_Instance_CheckpointTeTunnels
// Checkpointed TE tunnel table
type Isis_Instances_Instance_CheckpointTeTunnels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A checkpointed TE tunnel. The type is slice of
    // Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel.
    CheckpointTeTunnel []Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel
}

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetFilter() yfilter.YFilter { return checkpointTeTunnels.YFilter }

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) SetFilter(yf yfilter.YFilter) { checkpointTeTunnels.YFilter = yf }

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetGoName(yname string) string {
    if yname == "checkpoint-te-tunnel" { return "CheckpointTeTunnel" }
    return ""
}

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetSegmentPath() string {
    return "checkpoint-te-tunnels"
}

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "checkpoint-te-tunnel" {
        for _, c := range checkpointTeTunnels.CheckpointTeTunnel {
            if checkpointTeTunnels.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel{}
        checkpointTeTunnels.CheckpointTeTunnel = append(checkpointTeTunnels.CheckpointTeTunnel, child)
        return &checkpointTeTunnels.CheckpointTeTunnel[len(checkpointTeTunnels.CheckpointTeTunnel)-1]
    }
    return nil
}

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range checkpointTeTunnels.CheckpointTeTunnel {
        children[checkpointTeTunnels.CheckpointTeTunnel[i].GetSegmentPath()] = &checkpointTeTunnels.CheckpointTeTunnel[i]
    }
    return children
}

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetBundleName() string { return "cisco_ios_xr" }

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetYangName() string { return "checkpoint-te-tunnels" }

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) SetParent(parent types.Entity) { checkpointTeTunnels.parent = parent }

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetParent() types.Entity { return checkpointTeTunnels.parent }

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetParentYangName() string { return "instance" }

// Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel
// A checkpointed TE tunnel
type Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Level. The type is IsisInternalLevel.
    Level interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // TE database level. The type is IsisLevel.
    CheckpointTeLevel interface{}

    // Destination system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    CheckpointTeSystemId interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    CheckpointTeInterface interface{}

    // Tunnel flags. The type is interface{} with range: 0..4294967295.
    CheckpointTeFlags interface{}

    // Tunnel next-hop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    CheckpointTeNexthop interface{}

    // Tunnel metric. The type is interface{} with range: -2147483648..2147483647.
    CheckpointTeMetric interface{}

    // Tunnel metric mode. The type is IsisMetricMode.
    CheckpointTeMetricMode interface{}

    // Tunnel bandwidth. The type is interface{} with range: 0..4294967295.
    CheckpointTeBandwidth interface{}

    // Tunnel checkpoint object ID. The type is interface{} with range:
    // 0..4294967295.
    CheckpointTeObjectId interface{}
}

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetFilter() yfilter.YFilter { return checkpointTeTunnel.YFilter }

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) SetFilter(yf yfilter.YFilter) { checkpointTeTunnel.YFilter = yf }

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "checkpoint-te-level" { return "CheckpointTeLevel" }
    if yname == "checkpoint-te-system-id" { return "CheckpointTeSystemId" }
    if yname == "checkpoint-te-interface" { return "CheckpointTeInterface" }
    if yname == "checkpoint-te-flags" { return "CheckpointTeFlags" }
    if yname == "checkpoint-te-nexthop" { return "CheckpointTeNexthop" }
    if yname == "checkpoint-te-metric" { return "CheckpointTeMetric" }
    if yname == "checkpoint-te-metric-mode" { return "CheckpointTeMetricMode" }
    if yname == "checkpoint-te-bandwidth" { return "CheckpointTeBandwidth" }
    if yname == "checkpoint-te-object-id" { return "CheckpointTeObjectId" }
    return ""
}

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetSegmentPath() string {
    return "checkpoint-te-tunnel"
}

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = checkpointTeTunnel.Level
    leafs["interface-name"] = checkpointTeTunnel.InterfaceName
    leafs["checkpoint-te-level"] = checkpointTeTunnel.CheckpointTeLevel
    leafs["checkpoint-te-system-id"] = checkpointTeTunnel.CheckpointTeSystemId
    leafs["checkpoint-te-interface"] = checkpointTeTunnel.CheckpointTeInterface
    leafs["checkpoint-te-flags"] = checkpointTeTunnel.CheckpointTeFlags
    leafs["checkpoint-te-nexthop"] = checkpointTeTunnel.CheckpointTeNexthop
    leafs["checkpoint-te-metric"] = checkpointTeTunnel.CheckpointTeMetric
    leafs["checkpoint-te-metric-mode"] = checkpointTeTunnel.CheckpointTeMetricMode
    leafs["checkpoint-te-bandwidth"] = checkpointTeTunnel.CheckpointTeBandwidth
    leafs["checkpoint-te-object-id"] = checkpointTeTunnel.CheckpointTeObjectId
    return leafs
}

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetBundleName() string { return "cisco_ios_xr" }

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetYangName() string { return "checkpoint-te-tunnel" }

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) SetParent(parent types.Entity) { checkpointTeTunnel.parent = parent }

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetParent() types.Entity { return checkpointTeTunnel.parent }

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetParentYangName() string { return "checkpoint-te-tunnels" }

