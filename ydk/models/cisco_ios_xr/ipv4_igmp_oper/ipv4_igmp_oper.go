// This module contains a collection of YANG definitions
// for Cisco IOS-XR ipv4-igmp package operational data.
// 
// This module contains definitions
// for the following management objects:
//   mld: MLD operational data
//   igmp: igmp
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ipv4_igmp_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ipv4_igmp_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-igmp-oper mld}", reflect.TypeOf(Mld{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-igmp-oper:mld", reflect.TypeOf(Mld{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-igmp-oper igmp}", reflect.TypeOf(Igmp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-igmp-oper:igmp", reflect.TypeOf(Igmp{}))
}

// IgmpEdmProtocol represents IGMP Protocol
type IgmpEdmProtocol string

const (
    // no route
    IgmpEdmProtocol_no_route IgmpEdmProtocol = "no-route"

    // sm
    IgmpEdmProtocol_sm IgmpEdmProtocol = "sm"

    // dm
    IgmpEdmProtocol_dm IgmpEdmProtocol = "dm"

    // bidir
    IgmpEdmProtocol_bidir IgmpEdmProtocol = "bidir"

    // ssm
    IgmpEdmProtocol_ssm IgmpEdmProtocol = "ssm"

    // any
    IgmpEdmProtocol_any IgmpEdmProtocol = "any"
)

// IgmpAfi represents Address family
type IgmpAfi string

const (
    // IP v4 unicast
    IgmpAfi_ipv4_unicast IgmpAfi = "ipv4-unicast"

    // IP v6 unicast
    IgmpAfi_ipv6_unicast IgmpAfi = "ipv6-unicast"
)

// IgmpssmMap represents Igmpssm map
type IgmpssmMap string

const (
    // Static
    IgmpssmMap_static IgmpssmMap = "static"

    // Dns
    IgmpssmMap_dns IgmpssmMap = "dns"

    // All
    IgmpssmMap_all IgmpssmMap = "all"
)

// Mld
// MLD operational data
type Mld struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Standby Process.
    Standby Mld_Standby

    // Active Process.
    Active Mld_Active
}

func (mld *Mld) GetFilter() yfilter.YFilter { return mld.YFilter }

func (mld *Mld) SetFilter(yf yfilter.YFilter) { mld.YFilter = yf }

func (mld *Mld) GetGoName(yname string) string {
    if yname == "standby" { return "Standby" }
    if yname == "active" { return "Active" }
    return ""
}

func (mld *Mld) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-igmp-oper:mld"
}

func (mld *Mld) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "standby" {
        return &mld.Standby
    }
    if childYangName == "active" {
        return &mld.Active
    }
    return nil
}

func (mld *Mld) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["standby"] = &mld.Standby
    children["active"] = &mld.Active
    return children
}

func (mld *Mld) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mld *Mld) GetBundleName() string { return "cisco_ios_xr" }

func (mld *Mld) GetYangName() string { return "mld" }

func (mld *Mld) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mld *Mld) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mld *Mld) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mld *Mld) SetParent(parent types.Entity) { mld.parent = parent }

func (mld *Mld) GetParent() types.Entity { return mld.parent }

func (mld *Mld) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-igmp-oper" }

// Mld_Standby
// Standby Process
type Mld_Standby struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF Table.
    Vrfs Mld_Standby_Vrfs

    // Process.
    Process Mld_Standby_Process

    // Default Context.
    DefaultContext Mld_Standby_DefaultContext
}

func (standby *Mld_Standby) GetFilter() yfilter.YFilter { return standby.YFilter }

func (standby *Mld_Standby) SetFilter(yf yfilter.YFilter) { standby.YFilter = yf }

func (standby *Mld_Standby) GetGoName(yname string) string {
    if yname == "vrfs" { return "Vrfs" }
    if yname == "process" { return "Process" }
    if yname == "default-context" { return "DefaultContext" }
    return ""
}

func (standby *Mld_Standby) GetSegmentPath() string {
    return "standby"
}

func (standby *Mld_Standby) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrfs" {
        return &standby.Vrfs
    }
    if childYangName == "process" {
        return &standby.Process
    }
    if childYangName == "default-context" {
        return &standby.DefaultContext
    }
    return nil
}

func (standby *Mld_Standby) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vrfs"] = &standby.Vrfs
    children["process"] = &standby.Process
    children["default-context"] = &standby.DefaultContext
    return children
}

func (standby *Mld_Standby) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (standby *Mld_Standby) GetBundleName() string { return "cisco_ios_xr" }

func (standby *Mld_Standby) GetYangName() string { return "standby" }

func (standby *Mld_Standby) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standby *Mld_Standby) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standby *Mld_Standby) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standby *Mld_Standby) SetParent(parent types.Entity) { standby.parent = parent }

func (standby *Mld_Standby) GetParent() types.Entity { return standby.parent }

func (standby *Mld_Standby) GetParentYangName() string { return "mld" }

// Mld_Standby_Vrfs
// VRF Table
type Mld_Standby_Vrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table Names. The type is slice of Mld_Standby_Vrfs_Vrf.
    Vrf []Mld_Standby_Vrfs_Vrf
}

func (vrfs *Mld_Standby_Vrfs) GetFilter() yfilter.YFilter { return vrfs.YFilter }

func (vrfs *Mld_Standby_Vrfs) SetFilter(yf yfilter.YFilter) { vrfs.YFilter = yf }

func (vrfs *Mld_Standby_Vrfs) GetGoName(yname string) string {
    if yname == "vrf" { return "Vrf" }
    return ""
}

func (vrfs *Mld_Standby_Vrfs) GetSegmentPath() string {
    return "vrfs"
}

func (vrfs *Mld_Standby_Vrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf" {
        for _, c := range vrfs.Vrf {
            if vrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf{}
        vrfs.Vrf = append(vrfs.Vrf, child)
        return &vrfs.Vrf[len(vrfs.Vrf)-1]
    }
    return nil
}

func (vrfs *Mld_Standby_Vrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfs.Vrf {
        children[vrfs.Vrf[i].GetSegmentPath()] = &vrfs.Vrf[i]
    }
    return children
}

func (vrfs *Mld_Standby_Vrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfs *Mld_Standby_Vrfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfs *Mld_Standby_Vrfs) GetYangName() string { return "vrfs" }

func (vrfs *Mld_Standby_Vrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfs *Mld_Standby_Vrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfs *Mld_Standby_Vrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfs *Mld_Standby_Vrfs) SetParent(parent types.Entity) { vrfs.parent = parent }

func (vrfs *Mld_Standby_Vrfs) GetParent() types.Entity { return vrfs.parent }

func (vrfs *Mld_Standby_Vrfs) GetParentYangName() string { return "standby" }

// Mld_Standby_Vrfs_Vrf
// VRF table Names
type Mld_Standby_Vrfs_Vrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with length: 1..32.
    VrfName interface{}

    // IGMP Summary Information.
    Summary Mld_Standby_Vrfs_Vrf_Summary

    // IGMP Interface state on.
    InterfaceStateOns Mld_Standby_Vrfs_Vrf_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Mld_Standby_Vrfs_Vrf_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Mld_Standby_Vrfs_Vrf_NonActiveGroups

    // SSM Map Table.
    SsmMaps Mld_Standby_Vrfs_Vrf_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Mld_Standby_Vrfs_Vrf_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Mld_Standby_Vrfs_Vrf_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Mld_Standby_Vrfs_Vrf_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Mld_Standby_Vrfs_Vrf_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Mld_Standby_Vrfs_Vrf_TrafficCounters

    // IGMP Group Database Table.
    Groups Mld_Standby_Vrfs_Vrf_Groups

    // IGMP Groups Summary.
    GroupSummary Mld_Standby_Vrfs_Vrf_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Mld_Standby_Vrfs_Vrf_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Mld_Standby_Vrfs_Vrf_InterfaceStateOffs
}

func (vrf *Mld_Standby_Vrfs_Vrf) GetFilter() yfilter.YFilter { return vrf.YFilter }

func (vrf *Mld_Standby_Vrfs_Vrf) SetFilter(yf yfilter.YFilter) { vrf.YFilter = yf }

func (vrf *Mld_Standby_Vrfs_Vrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "summary" { return "Summary" }
    if yname == "interface-state-ons" { return "InterfaceStateOns" }
    if yname == "detail-groups" { return "DetailGroups" }
    if yname == "non-active-groups" { return "NonActiveGroups" }
    if yname == "ssm-maps" { return "SsmMaps" }
    if yname == "explicit-groups" { return "ExplicitGroups" }
    if yname == "interface-table" { return "InterfaceTable" }
    if yname == "interface-unicast-qos-adjusts" { return "InterfaceUnicastQosAdjusts" }
    if yname == "ranges" { return "Ranges" }
    if yname == "ifrs-interfaces" { return "IfrsInterfaces" }
    if yname == "traffic-counters" { return "TrafficCounters" }
    if yname == "groups" { return "Groups" }
    if yname == "group-summary" { return "GroupSummary" }
    if yname == "ifrs-interface-summary" { return "IfrsInterfaceSummary" }
    if yname == "global-interface-table" { return "GlobalInterfaceTable" }
    if yname == "ssm-map-details" { return "SsmMapDetails" }
    if yname == "interface-state-offs" { return "InterfaceStateOffs" }
    return ""
}

func (vrf *Mld_Standby_Vrfs_Vrf) GetSegmentPath() string {
    return "vrf" + "[vrf-name='" + fmt.Sprintf("%v", vrf.VrfName) + "']"
}

func (vrf *Mld_Standby_Vrfs_Vrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &vrf.Summary
    }
    if childYangName == "interface-state-ons" {
        return &vrf.InterfaceStateOns
    }
    if childYangName == "detail-groups" {
        return &vrf.DetailGroups
    }
    if childYangName == "non-active-groups" {
        return &vrf.NonActiveGroups
    }
    if childYangName == "ssm-maps" {
        return &vrf.SsmMaps
    }
    if childYangName == "explicit-groups" {
        return &vrf.ExplicitGroups
    }
    if childYangName == "interface-table" {
        return &vrf.InterfaceTable
    }
    if childYangName == "interface-unicast-qos-adjusts" {
        return &vrf.InterfaceUnicastQosAdjusts
    }
    if childYangName == "ranges" {
        return &vrf.Ranges
    }
    if childYangName == "ifrs-interfaces" {
        return &vrf.IfrsInterfaces
    }
    if childYangName == "traffic-counters" {
        return &vrf.TrafficCounters
    }
    if childYangName == "groups" {
        return &vrf.Groups
    }
    if childYangName == "group-summary" {
        return &vrf.GroupSummary
    }
    if childYangName == "ifrs-interface-summary" {
        return &vrf.IfrsInterfaceSummary
    }
    if childYangName == "global-interface-table" {
        return &vrf.GlobalInterfaceTable
    }
    if childYangName == "ssm-map-details" {
        return &vrf.SsmMapDetails
    }
    if childYangName == "interface-state-offs" {
        return &vrf.InterfaceStateOffs
    }
    return nil
}

func (vrf *Mld_Standby_Vrfs_Vrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &vrf.Summary
    children["interface-state-ons"] = &vrf.InterfaceStateOns
    children["detail-groups"] = &vrf.DetailGroups
    children["non-active-groups"] = &vrf.NonActiveGroups
    children["ssm-maps"] = &vrf.SsmMaps
    children["explicit-groups"] = &vrf.ExplicitGroups
    children["interface-table"] = &vrf.InterfaceTable
    children["interface-unicast-qos-adjusts"] = &vrf.InterfaceUnicastQosAdjusts
    children["ranges"] = &vrf.Ranges
    children["ifrs-interfaces"] = &vrf.IfrsInterfaces
    children["traffic-counters"] = &vrf.TrafficCounters
    children["groups"] = &vrf.Groups
    children["group-summary"] = &vrf.GroupSummary
    children["ifrs-interface-summary"] = &vrf.IfrsInterfaceSummary
    children["global-interface-table"] = &vrf.GlobalInterfaceTable
    children["ssm-map-details"] = &vrf.SsmMapDetails
    children["interface-state-offs"] = &vrf.InterfaceStateOffs
    return children
}

func (vrf *Mld_Standby_Vrfs_Vrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = vrf.VrfName
    return leafs
}

func (vrf *Mld_Standby_Vrfs_Vrf) GetBundleName() string { return "cisco_ios_xr" }

func (vrf *Mld_Standby_Vrfs_Vrf) GetYangName() string { return "vrf" }

func (vrf *Mld_Standby_Vrfs_Vrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrf *Mld_Standby_Vrfs_Vrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrf *Mld_Standby_Vrfs_Vrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrf *Mld_Standby_Vrfs_Vrf) SetParent(parent types.Entity) { vrf.parent = parent }

func (vrf *Mld_Standby_Vrfs_Vrf) GetParent() types.Entity { return vrf.parent }

func (vrf *Mld_Standby_Vrfs_Vrf) GetParentYangName() string { return "vrfs" }

// Mld_Standby_Vrfs_Vrf_Summary
// IGMP Summary Information
type Mld_Standby_Vrfs_Vrf_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Mld_Standby_Vrfs_Vrf_Summary_Interface.
    Interface []Mld_Standby_Vrfs_Vrf_Summary_Interface
}

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Mld_Standby_Vrfs_Vrf_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetGoName(yname string) string {
    if yname == "robustness" { return "Robustness" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-disabled" { return "IsDisabled" }
    if yname == "supported-interfaces" { return "SupportedInterfaces" }
    if yname == "unsupported-interfaces" { return "UnsupportedInterfaces" }
    if yname == "enabled-interface-count" { return "EnabledInterfaceCount" }
    if yname == "disabled-interface-count" { return "DisabledInterfaceCount" }
    if yname == "tunnel-mte-config-count" { return "TunnelMteConfigCount" }
    if yname == "node-low-memory" { return "NodeLowMemory" }
    if yname == "interface" { return "Interface" }
    return ""
}

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range summary.Interface {
            if summary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_Summary_Interface{}
        summary.Interface = append(summary.Interface, child)
        return &summary.Interface[len(summary.Interface)-1]
    }
    return nil
}

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summary.Interface {
        children[summary.Interface[i].GetSegmentPath()] = &summary.Interface[i]
    }
    return children
}

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["robustness"] = summary.Robustness
    leafs["group-limit"] = summary.GroupLimit
    leafs["group-count"] = summary.GroupCount
    leafs["is-disabled"] = summary.IsDisabled
    leafs["supported-interfaces"] = summary.SupportedInterfaces
    leafs["unsupported-interfaces"] = summary.UnsupportedInterfaces
    leafs["enabled-interface-count"] = summary.EnabledInterfaceCount
    leafs["disabled-interface-count"] = summary.DisabledInterfaceCount
    leafs["tunnel-mte-config-count"] = summary.TunnelMteConfigCount
    leafs["node-low-memory"] = summary.NodeLowMemory
    return leafs
}

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetYangName() string { return "summary" }

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Mld_Standby_Vrfs_Vrf_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Mld_Standby_Vrfs_Vrf_Summary_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "on-off" { return "OnOff" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    return ""
}

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetSegmentPath() string {
    return "interface"
}

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["group-limit"] = self.GroupLimit
    leafs["group-count"] = self.GroupCount
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["on-off"] = self.OnOff
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    return leafs
}

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetYangName() string { return "interface" }

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetParent() types.Entity { return self.parent }

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetParentYangName() string { return "summary" }

// Mld_Standby_Vrfs_Vrf_InterfaceStateOns
// IGMP Interface state on
type Mld_Standby_Vrfs_Vrf_InterfaceStateOns struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetFilter() yfilter.YFilter { return interfaceStateOns.YFilter }

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) SetFilter(yf yfilter.YFilter) { interfaceStateOns.YFilter = yf }

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetGoName(yname string) string {
    if yname == "interface-state-on" { return "InterfaceStateOn" }
    return ""
}

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetSegmentPath() string {
    return "interface-state-ons"
}

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-on" {
        for _, c := range interfaceStateOns.InterfaceStateOn {
            if interfaceStateOns.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn{}
        interfaceStateOns.InterfaceStateOn = append(interfaceStateOns.InterfaceStateOn, child)
        return &interfaceStateOns.InterfaceStateOn[len(interfaceStateOns.InterfaceStateOn)-1]
    }
    return nil
}

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOns.InterfaceStateOn {
        children[interfaceStateOns.InterfaceStateOn[i].GetSegmentPath()] = &interfaceStateOns.InterfaceStateOn[i]
    }
    return children
}

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetYangName() string { return "interface-state-ons" }

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) SetParent(parent types.Entity) { interfaceStateOns.parent = parent }

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetParent() types.Entity { return interfaceStateOns.parent }

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetFilter() yfilter.YFilter { return interfaceStateOn.YFilter }

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) SetFilter(yf yfilter.YFilter) { interfaceStateOn.YFilter = yf }

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetSegmentPath() string {
    return "interface-state-on" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOn.InterfaceName) + "']"
}

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOn.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOn.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOn.SubscriberAddress
    }
    return nil
}

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOn.Address
    children["querier-address"] = &interfaceStateOn.QuerierAddress
    children["subscriber-address"] = &interfaceStateOn.SubscriberAddress
    return children
}

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOn.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOn.InterfaceNameXr
    leafs["state"] = interfaceStateOn.State
    leafs["prefix-length"] = interfaceStateOn.PrefixLength
    leafs["is-interface-up"] = interfaceStateOn.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOn.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOn.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOn.IgmpVersion
    leafs["host-version"] = interfaceStateOn.HostVersion
    leafs["query-interval"] = interfaceStateOn.QueryInterval
    leafs["query-timeout"] = interfaceStateOn.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOn.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOn.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOn.GroupJoins
    leafs["group-leaves"] = interfaceStateOn.GroupLeaves
    leafs["is-querier"] = interfaceStateOn.IsQuerier
    leafs["total-active-groups"] = interfaceStateOn.TotalActiveGroups
    leafs["robustness"] = interfaceStateOn.Robustness
    leafs["proxy-interface"] = interfaceStateOn.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOn.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOn.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOn.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOn.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOn.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOn.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOn.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOn.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOn.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOn.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOn.VrfId
    leafs["mte-vrf-id"] = interfaceStateOn.MteVrfId
    leafs["location"] = interfaceStateOn.Location
    leafs["mtu"] = interfaceStateOn.Mtu
    leafs["vrf-state"] = interfaceStateOn.VrfState
    leafs["is-configurationverify"] = interfaceStateOn.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOn.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOn.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOn.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOn.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOn.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOn.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOn.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOn.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOn.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOn.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOn.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOn.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOn.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOn.MteTupleCount
    return leafs
}

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetYangName() string { return "interface-state-on" }

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) SetParent(parent types.Entity) { interfaceStateOn.parent = parent }

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetParent() types.Entity { return interfaceStateOn.parent }

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetParentYangName() string { return "interface-state-ons" }

// Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetYangName() string { return "address" }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetParentYangName() string { return "interface-state-on" }

// Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParentYangName() string { return "interface-state-on" }

// Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParentYangName() string { return "interface-state-on" }

// Mld_Standby_Vrfs_Vrf_DetailGroups
// IGMP Detail Group Database
type Mld_Standby_Vrfs_Vrf_DetailGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup.
    DetailGroup []Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup
}

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetFilter() yfilter.YFilter { return detailGroups.YFilter }

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) SetFilter(yf yfilter.YFilter) { detailGroups.YFilter = yf }

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetGoName(yname string) string {
    if yname == "detail-group" { return "DetailGroup" }
    return ""
}

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetSegmentPath() string {
    return "detail-groups"
}

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detail-group" {
        for _, c := range detailGroups.DetailGroup {
            if detailGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup{}
        detailGroups.DetailGroup = append(detailGroups.DetailGroup, child)
        return &detailGroups.DetailGroup[len(detailGroups.DetailGroup)-1]
    }
    return nil
}

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range detailGroups.DetailGroup {
        children[detailGroups.DetailGroup[i].GetSegmentPath()] = &detailGroups.DetailGroup[i]
    }
    return children
}

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetYangName() string { return "detail-groups" }

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) SetParent(parent types.Entity) { detailGroups.parent = parent }

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetParent() types.Entity { return detailGroups.parent }

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source.
    Source []Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source
}

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetFilter() yfilter.YFilter { return detailGroup.YFilter }

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) SetFilter(yf yfilter.YFilter) { detailGroup.YFilter = yf }

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "is-router-exclude-mode" { return "IsRouterExcludeMode" }
    if yname == "is-host-exclude-mode" { return "IsHostExcludeMode" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "source" { return "Source" }
    return ""
}

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetSegmentPath() string {
    return "detail-group"
}

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &detailGroup.GroupInfo
    }
    if childYangName == "source" {
        for _, c := range detailGroup.Source {
            if detailGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source{}
        detailGroup.Source = append(detailGroup.Source, child)
        return &detailGroup.Source[len(detailGroup.Source)-1]
    }
    return nil
}

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &detailGroup.GroupInfo
    for i := range detailGroup.Source {
        children[detailGroup.Source[i].GetSegmentPath()] = &detailGroup.Source[i]
    }
    return children
}

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = detailGroup.GroupAddress
    leafs["interface-name"] = detailGroup.InterfaceName
    leafs["source-address"] = detailGroup.SourceAddress
    leafs["is-router-exclude-mode"] = detailGroup.IsRouterExcludeMode
    leafs["is-host-exclude-mode"] = detailGroup.IsHostExcludeMode
    return leafs
}

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetYangName() string { return "detail-group" }

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) SetParent(parent types.Entity) { detailGroup.parent = parent }

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetParent() types.Entity { return detailGroup.parent }

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetParentYangName() string { return "detail-groups" }

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetParentYangName() string { return "detail-group" }

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source
// List of sources
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-remote" { return "IsRemote" }
    if yname == "is-forward" { return "IsForward" }
    if yname == "is-we-report" { return "IsWeReport" }
    if yname == "flags" { return "Flags" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetSegmentPath() string {
    return "source"
}

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &source.SourceAddress
    }
    return nil
}

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &source.SourceAddress
    return children
}

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = source.Uptime
    leafs["expiration-time"] = source.ExpirationTime
    leafs["is-local"] = source.IsLocal
    leafs["is-remote"] = source.IsRemote
    leafs["is-forward"] = source.IsForward
    leafs["is-we-report"] = source.IsWeReport
    leafs["flags"] = source.Flags
    leafs["is-added"] = source.IsAdded
    return leafs
}

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetYangName() string { return "source" }

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetParent() types.Entity { return source.parent }

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetParentYangName() string { return "detail-group" }

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetParentYangName() string { return "source" }

// Mld_Standby_Vrfs_Vrf_NonActiveGroups
// IGMP Non-Active Groups Information
type Mld_Standby_Vrfs_Vrf_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetGoName(yname string) string {
    if yname == "non-active-groups" { return "NonActiveGroups" }
    return ""
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-active-groups" {
        for _, c := range nonActiveGroups.NonActiveGroups {
            if nonActiveGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups{}
        nonActiveGroups.NonActiveGroups = append(nonActiveGroups.NonActiveGroups, child)
        return &nonActiveGroups.NonActiveGroups[len(nonActiveGroups.NonActiveGroups)-1]
    }
    return nil
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nonActiveGroups.NonActiveGroups {
        children[nonActiveGroups.NonActiveGroups[i].GetSegmentPath()] = &nonActiveGroups.NonActiveGroups[i]
    }
    return children
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    if yname == "reason-for-non-activity" { return "ReasonForNonActivity" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address" {
        return &nonActiveGroups.GroupAddress
    }
    if childYangName == "source-address" {
        return &nonActiveGroups.SourceAddress
    }
    return nil
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address"] = &nonActiveGroups.GroupAddress
    children["source-address"] = &nonActiveGroups.SourceAddress
    return children
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface"] = nonActiveGroups.Interface
    leafs["reason-for-non-activity"] = nonActiveGroups.ReasonForNonActivity
    return leafs
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetParentYangName() string { return "non-active-groups" }

// Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetParentYangName() string { return "non-active-groups" }

// Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetParentYangName() string { return "non-active-groups" }

// Mld_Standby_Vrfs_Vrf_SsmMaps
// SSM Map Table
type Mld_Standby_Vrfs_Vrf_SsmMaps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap.
    SsmMap []Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap
}

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetFilter() yfilter.YFilter { return ssmMaps.YFilter }

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) SetFilter(yf yfilter.YFilter) { ssmMaps.YFilter = yf }

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetGoName(yname string) string {
    if yname == "ssm-map" { return "SsmMap" }
    return ""
}

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetSegmentPath() string {
    return "ssm-maps"
}

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map" {
        for _, c := range ssmMaps.SsmMap {
            if ssmMaps.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap{}
        ssmMaps.SsmMap = append(ssmMaps.SsmMap, child)
        return &ssmMaps.SsmMap[len(ssmMaps.SsmMap)-1]
    }
    return nil
}

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMaps.SsmMap {
        children[ssmMaps.SsmMap[i].GetSegmentPath()] = &ssmMaps.SsmMap[i]
    }
    return children
}

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetYangName() string { return "ssm-maps" }

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) SetParent(parent types.Entity) { ssmMaps.parent = parent }

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetParent() types.Entity { return ssmMaps.parent }

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap
// SSM Map information
type Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetFilter() yfilter.YFilter { return ssmMap.YFilter }

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) SetFilter(yf yfilter.YFilter) { ssmMap.YFilter = yf }

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetSegmentPath() string {
    return "ssm-map"
}

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &ssmMap.GroupAddressXr
    }
    return nil
}

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &ssmMap.GroupAddressXr
    return children
}

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMap.SsmMapType
    leafs["group-address"] = ssmMap.GroupAddress
    leafs["map-type"] = ssmMap.MapType
    leafs["source-counts"] = ssmMap.SourceCounts
    return leafs
}

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetYangName() string { return "ssm-map" }

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) SetParent(parent types.Entity) { ssmMap.parent = parent }

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetParent() types.Entity { return ssmMap.parent }

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetParentYangName() string { return "ssm-maps" }

// Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetParentYangName() string { return "ssm-map" }

// Mld_Standby_Vrfs_Vrf_ExplicitGroups
// IGMP Explicit Group Database
type Mld_Standby_Vrfs_Vrf_ExplicitGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetFilter() yfilter.YFilter { return explicitGroups.YFilter }

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) SetFilter(yf yfilter.YFilter) { explicitGroups.YFilter = yf }

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetGoName(yname string) string {
    if yname == "explicit-group" { return "ExplicitGroup" }
    return ""
}

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetSegmentPath() string {
    return "explicit-groups"
}

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "explicit-group" {
        for _, c := range explicitGroups.ExplicitGroup {
            if explicitGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup{}
        explicitGroups.ExplicitGroup = append(explicitGroups.ExplicitGroup, child)
        return &explicitGroups.ExplicitGroup[len(explicitGroups.ExplicitGroup)-1]
    }
    return nil
}

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range explicitGroups.ExplicitGroup {
        children[explicitGroups.ExplicitGroup[i].GetSegmentPath()] = &explicitGroups.ExplicitGroup[i]
    }
    return children
}

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetYangName() string { return "explicit-groups" }

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) SetParent(parent types.Entity) { explicitGroups.parent = parent }

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetParent() types.Entity { return explicitGroups.parent }

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host.
    Host []Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetFilter() yfilter.YFilter { return explicitGroup.YFilter }

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) SetFilter(yf yfilter.YFilter) { explicitGroup.YFilter = yf }

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "include-hosts" { return "IncludeHosts" }
    if yname == "exclude-hosts" { return "ExcludeHosts" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "host" { return "Host" }
    return ""
}

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetSegmentPath() string {
    return "explicit-group"
}

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &explicitGroup.GroupInfo
    }
    if childYangName == "host" {
        for _, c := range explicitGroup.Host {
            if explicitGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host{}
        explicitGroup.Host = append(explicitGroup.Host, child)
        return &explicitGroup.Host[len(explicitGroup.Host)-1]
    }
    return nil
}

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &explicitGroup.GroupInfo
    for i := range explicitGroup.Host {
        children[explicitGroup.Host[i].GetSegmentPath()] = &explicitGroup.Host[i]
    }
    return children
}

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = explicitGroup.GroupAddress
    leafs["interface-name"] = explicitGroup.InterfaceName
    leafs["source-address"] = explicitGroup.SourceAddress
    leafs["include-hosts"] = explicitGroup.IncludeHosts
    leafs["exclude-hosts"] = explicitGroup.ExcludeHosts
    return leafs
}

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetYangName() string { return "explicit-group" }

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) SetParent(parent types.Entity) { explicitGroup.parent = parent }

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetParent() types.Entity { return explicitGroup.parent }

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetParentYangName() string { return "explicit-groups" }

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetParentYangName() string { return "explicit-group" }

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetFilter() yfilter.YFilter { return host.YFilter }

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) SetFilter(yf yfilter.YFilter) { host.YFilter = yf }

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "is-exclude" { return "IsExclude" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "source-count" { return "SourceCount" }
    if yname == "address" { return "Address" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetSegmentPath() string {
    return "host"
}

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &host.Address
    }
    if childYangName == "source-address" {
        for _, c := range host.SourceAddress {
            if host.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress{}
        host.SourceAddress = append(host.SourceAddress, child)
        return &host.SourceAddress[len(host.SourceAddress)-1]
    }
    return nil
}

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &host.Address
    for i := range host.SourceAddress {
        children[host.SourceAddress[i].GetSegmentPath()] = &host.SourceAddress[i]
    }
    return children
}

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = host.Uptime
    leafs["is-exclude"] = host.IsExclude
    leafs["expiration-time"] = host.ExpirationTime
    leafs["source-count"] = host.SourceCount
    return leafs
}

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetBundleName() string { return "cisco_ios_xr" }

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetYangName() string { return "host" }

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) SetParent(parent types.Entity) { host.parent = parent }

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetParent() types.Entity { return host.parent }

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetParentYangName() string { return "explicit-group" }

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetYangName() string { return "address" }

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetParentYangName() string { return "host" }

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParentYangName() string { return "host" }

// Mld_Standby_Vrfs_Vrf_InterfaceTable
// IGMP Interface specific Table
type Mld_Standby_Vrfs_Vrf_InterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface.
    Interface []Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface
}

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetFilter() yfilter.YFilter { return interfaceTable.YFilter }

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) SetFilter(yf yfilter.YFilter) { interfaceTable.YFilter = yf }

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetSegmentPath() string {
    return "interface-table"
}

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaceTable.Interface {
            if interfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface{}
        interfaceTable.Interface = append(interfaceTable.Interface, child)
        return &interfaceTable.Interface[len(interfaceTable.Interface)-1]
    }
    return nil
}

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceTable.Interface {
        children[interfaceTable.Interface[i].GetSegmentPath()] = &interfaceTable.Interface[i]
    }
    return children
}

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetYangName() string { return "interface-table" }

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) SetParent(parent types.Entity) { interfaceTable.parent = parent }

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetParent() types.Entity { return interfaceTable.parent }

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface
// IGMP Interface
type Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetParentYangName() string { return "interface-table" }

// Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address
// IP address
type Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjusts.YFilter }

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjusts.YFilter = yf }

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetGoName(yname string) string {
    if yname == "interface-unicast-qos-adjust" { return "InterfaceUnicastQosAdjust" }
    return ""
}

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetSegmentPath() string {
    return "interface-unicast-qos-adjusts"
}

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-unicast-qos-adjust" {
        for _, c := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
            if interfaceUnicastQosAdjusts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust{}
        interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust = append(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, child)
        return &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[len(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        children[interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i].GetSegmentPath()] = &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]
    }
    return children
}

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetYangName() string { return "interface-unicast-qos-adjusts" }

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) SetParent(parent types.Entity) { interfaceUnicastQosAdjusts.parent = parent }

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetParent() types.Entity { return interfaceUnicastQosAdjusts.parent }

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjust.YFilter }

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjust.YFilter = yf }

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-access" { return "IsVirtualAccess" }
    if yname == "rate" { return "Rate" }
    if yname == "rate-increments" { return "RateIncrements" }
    if yname == "rate-decrements" { return "RateDecrements" }
    if yname == "update" { return "Update" }
    return ""
}

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetSegmentPath() string {
    return "interface-unicast-qos-adjust" + "[interface-name='" + fmt.Sprintf("%v", interfaceUnicastQosAdjust.InterfaceName) + "']"
}

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update" {
        for _, c := range interfaceUnicastQosAdjust.Update {
            if interfaceUnicastQosAdjust.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update{}
        interfaceUnicastQosAdjust.Update = append(interfaceUnicastQosAdjust.Update, child)
        return &interfaceUnicastQosAdjust.Update[len(interfaceUnicastQosAdjust.Update)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjust.Update {
        children[interfaceUnicastQosAdjust.Update[i].GetSegmentPath()] = &interfaceUnicastQosAdjust.Update[i]
    }
    return children
}

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceUnicastQosAdjust.InterfaceName
    leafs["is-virtual-access"] = interfaceUnicastQosAdjust.IsVirtualAccess
    leafs["rate"] = interfaceUnicastQosAdjust.Rate
    leafs["rate-increments"] = interfaceUnicastQosAdjust.RateIncrements
    leafs["rate-decrements"] = interfaceUnicastQosAdjust.RateDecrements
    return leafs
}

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetYangName() string { return "interface-unicast-qos-adjust" }

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetParent(parent types.Entity) { interfaceUnicastQosAdjust.parent = parent }

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParent() types.Entity { return interfaceUnicastQosAdjust.parent }

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParentYangName() string { return "interface-unicast-qos-adjusts" }

// Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetFilter() yfilter.YFilter { return update.YFilter }

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetFilter(yf yfilter.YFilter) { update.YFilter = yf }

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetGoName(yname string) string {
    if yname == "is-add" { return "IsAdd" }
    if yname == "weight" { return "Weight" }
    if yname == "received-time" { return "ReceivedTime" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "group-address" { return "GroupAddress" }
    return ""
}

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetSegmentPath() string {
    return "update"
}

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &update.SourceAddress
    }
    if childYangName == "group-address" {
        return &update.GroupAddress
    }
    return nil
}

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &update.SourceAddress
    children["group-address"] = &update.GroupAddress
    return children
}

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-add"] = update.IsAdd
    leafs["weight"] = update.Weight
    leafs["received-time"] = update.ReceivedTime
    return leafs
}

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleName() string { return "cisco_ios_xr" }

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetYangName() string { return "update" }

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetParent(parent types.Entity) { update.parent = parent }

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParent() types.Entity { return update.parent }

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParentYangName() string { return "interface-unicast-qos-adjust" }

// Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParentYangName() string { return "update" }

// Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParentYangName() string { return "update" }

// Mld_Standby_Vrfs_Vrf_Ranges
// Range table
type Mld_Standby_Vrfs_Vrf_Ranges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Range information. The type is slice of Mld_Standby_Vrfs_Vrf_Ranges_Range.
    Range []Mld_Standby_Vrfs_Vrf_Ranges_Range
}

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetFilter() yfilter.YFilter { return ranges.YFilter }

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) SetFilter(yf yfilter.YFilter) { ranges.YFilter = yf }

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetGoName(yname string) string {
    if yname == "range" { return "Range" }
    return ""
}

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetSegmentPath() string {
    return "ranges"
}

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "range" {
        for _, c := range ranges.Range {
            if ranges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_Ranges_Range{}
        ranges.Range = append(ranges.Range, child)
        return &ranges.Range[len(ranges.Range)-1]
    }
    return nil
}

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ranges.Range {
        children[ranges.Range[i].GetSegmentPath()] = &ranges.Range[i]
    }
    return children
}

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetBundleName() string { return "cisco_ios_xr" }

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetYangName() string { return "ranges" }

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) SetParent(parent types.Entity) { ranges.parent = parent }

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetParent() types.Entity { return ranges.parent }

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_Ranges_Range
// Range information
type Mld_Standby_Vrfs_Vrf_Ranges_Range struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: -2147483648..2147483647.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr
}

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "group-mask" { return "GroupMask" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "protocol" { return "Protocol" }
    if yname == "is-stale" { return "IsStale" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetSegmentPath() string {
    return "range"
}

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &self.GroupAddressXr
    }
    return nil
}

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &self.GroupAddressXr
    return children
}

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = self.GroupAddress
    leafs["group-mask"] = self.GroupMask
    leafs["prefix-length"] = self.PrefixLength
    leafs["protocol"] = self.Protocol
    leafs["is-stale"] = self.IsStale
    return leafs
}

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetYangName() string { return "range" }

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetParent() types.Entity { return self.parent }

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetParentYangName() string { return "ranges" }

// Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr
// Group address
type Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetParentYangName() string { return "range" }

// Mld_Standby_Vrfs_Vrf_IfrsInterfaces
// IGMP Interface specific
type Mld_Standby_Vrfs_Vrf_IfrsInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface.
    IfrsInterface []Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetFilter() yfilter.YFilter { return ifrsInterfaces.YFilter }

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) SetFilter(yf yfilter.YFilter) { ifrsInterfaces.YFilter = yf }

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetGoName(yname string) string {
    if yname == "ifrs-interface" { return "IfrsInterface" }
    return ""
}

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetSegmentPath() string {
    return "ifrs-interfaces"
}

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ifrs-interface" {
        for _, c := range ifrsInterfaces.IfrsInterface {
            if ifrsInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface{}
        ifrsInterfaces.IfrsInterface = append(ifrsInterfaces.IfrsInterface, child)
        return &ifrsInterfaces.IfrsInterface[len(ifrsInterfaces.IfrsInterface)-1]
    }
    return nil
}

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ifrsInterfaces.IfrsInterface {
        children[ifrsInterfaces.IfrsInterface[i].GetSegmentPath()] = &ifrsInterfaces.IfrsInterface[i]
    }
    return children
}

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetYangName() string { return "ifrs-interfaces" }

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) SetParent(parent types.Entity) { ifrsInterfaces.parent = parent }

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetParent() types.Entity { return ifrsInterfaces.parent }

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetFilter() yfilter.YFilter { return ifrsInterface.YFilter }

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) SetFilter(yf yfilter.YFilter) { ifrsInterface.YFilter = yf }

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "join-group-count" { return "JoinGroupCount" }
    if yname == "igmp-interface-entry" { return "IgmpInterfaceEntry" }
    return ""
}

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetSegmentPath() string {
    return "ifrs-interface" + "[interface-name='" + fmt.Sprintf("%v", ifrsInterface.InterfaceName) + "']"
}

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "igmp-interface-entry" {
        return &ifrsInterface.IgmpInterfaceEntry
    }
    return nil
}

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["igmp-interface-entry"] = &ifrsInterface.IgmpInterfaceEntry
    return children
}

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ifrsInterface.InterfaceName
    leafs["join-group-count"] = ifrsInterface.JoinGroupCount
    return leafs
}

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetYangName() string { return "ifrs-interface" }

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) SetParent(parent types.Entity) { ifrsInterface.parent = parent }

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetParent() types.Entity { return ifrsInterface.parent }

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetParentYangName() string { return "ifrs-interfaces" }

// Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetFilter() yfilter.YFilter { return igmpInterfaceEntry.YFilter }

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetFilter(yf yfilter.YFilter) { igmpInterfaceEntry.YFilter = yf }

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetSegmentPath() string {
    return "igmp-interface-entry"
}

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &igmpInterfaceEntry.Address
    }
    if childYangName == "querier-address" {
        return &igmpInterfaceEntry.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &igmpInterfaceEntry.SubscriberAddress
    }
    return nil
}

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &igmpInterfaceEntry.Address
    children["querier-address"] = &igmpInterfaceEntry.QuerierAddress
    children["subscriber-address"] = &igmpInterfaceEntry.SubscriberAddress
    return children
}

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = igmpInterfaceEntry.InterfaceNameXr
    leafs["state"] = igmpInterfaceEntry.State
    leafs["prefix-length"] = igmpInterfaceEntry.PrefixLength
    leafs["is-interface-up"] = igmpInterfaceEntry.IsInterfaceUp
    leafs["is-ip-enabled"] = igmpInterfaceEntry.IsIpEnabled
    leafs["is-router-enabled"] = igmpInterfaceEntry.IsRouterEnabled
    leafs["igmp-version"] = igmpInterfaceEntry.IgmpVersion
    leafs["host-version"] = igmpInterfaceEntry.HostVersion
    leafs["query-interval"] = igmpInterfaceEntry.QueryInterval
    leafs["query-timeout"] = igmpInterfaceEntry.QueryTimeout
    leafs["query-maximum-response-time"] = igmpInterfaceEntry.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = igmpInterfaceEntry.LastMemberQueryInterval
    leafs["group-joins"] = igmpInterfaceEntry.GroupJoins
    leafs["group-leaves"] = igmpInterfaceEntry.GroupLeaves
    leafs["is-querier"] = igmpInterfaceEntry.IsQuerier
    leafs["total-active-groups"] = igmpInterfaceEntry.TotalActiveGroups
    leafs["robustness"] = igmpInterfaceEntry.Robustness
    leafs["proxy-interface"] = igmpInterfaceEntry.ProxyInterface
    leafs["querier-uptime"] = igmpInterfaceEntry.QuerierUptime
    leafs["las-ll-registration-count"] = igmpInterfaceEntry.LasLlRegistrationCount
    leafs["las-get-address-count"] = igmpInterfaceEntry.LasGetAddressCount
    leafs["las-update-count"] = igmpInterfaceEntry.LasUpdateCount
    leafs["las-ll-remove-update-count"] = igmpInterfaceEntry.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = igmpInterfaceEntry.LasLlAddUpdateCount
    leafs["las-null-update-count"] = igmpInterfaceEntry.LasNullUpdateCount
    leafs["las-unregistration-count"] = igmpInterfaceEntry.LasUnregistrationCount
    leafs["is-las-request"] = igmpInterfaceEntry.IsLasRequest
    leafs["is-las-registered"] = igmpInterfaceEntry.IsLasRegistered
    leafs["vrf-id"] = igmpInterfaceEntry.VrfId
    leafs["mte-vrf-id"] = igmpInterfaceEntry.MteVrfId
    leafs["location"] = igmpInterfaceEntry.Location
    leafs["mtu"] = igmpInterfaceEntry.Mtu
    leafs["vrf-state"] = igmpInterfaceEntry.VrfState
    leafs["is-configurationverify"] = igmpInterfaceEntry.IsConfigurationverify
    leafs["configurationvrf-set"] = igmpInterfaceEntry.ConfigurationvrfSet
    leafs["configurationvrf-error"] = igmpInterfaceEntry.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = igmpInterfaceEntry.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = igmpInterfaceEntry.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = igmpInterfaceEntry.IsImStateRegistered
    leafs["is-subscriber"] = igmpInterfaceEntry.IsSubscriber
    leafs["subscriber-mode"] = igmpInterfaceEntry.SubscriberMode
    leafs["is-identity-present"] = igmpInterfaceEntry.IsIdentityPresent
    leafs["subscriber-id"] = igmpInterfaceEntry.SubscriberId
    leafs["parent-ifhandle"] = igmpInterfaceEntry.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = igmpInterfaceEntry.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = igmpInterfaceEntry.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = igmpInterfaceEntry.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = igmpInterfaceEntry.MteTupleCount
    return leafs
}

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleName() string { return "cisco_ios_xr" }

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetYangName() string { return "igmp-interface-entry" }

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetParent(parent types.Entity) { igmpInterfaceEntry.parent = parent }

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParent() types.Entity { return igmpInterfaceEntry.parent }

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParentYangName() string { return "ifrs-interface" }

// Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetYangName() string { return "address" }

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParentYangName() string { return "igmp-interface-entry" }

// Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Mld_Standby_Vrfs_Vrf_TrafficCounters
// IGMP Message Traffic Counters
type Mld_Standby_Vrfs_Vrf_TrafficCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetFilter() yfilter.YFilter { return trafficCounters.YFilter }

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) SetFilter(yf yfilter.YFilter) { trafficCounters.YFilter = yf }

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetGoName(yname string) string {
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "packets-in" { return "PacketsIn" }
    if yname == "packets-out" { return "PacketsOut" }
    if yname == "format-errors" { return "FormatErrors" }
    if yname == "packet-manager-input-errors" { return "PacketManagerInputErrors" }
    if yname == "packet-manager-output-errors" { return "PacketManagerOutputErrors" }
    if yname == "checksum-errors" { return "ChecksumErrors" }
    if yname == "receive-socket-errors" { return "ReceiveSocketErrors" }
    if yname == "socket-errors" { return "SocketErrors" }
    if yname == "bad-scope-errors" { return "BadScopeErrors" }
    if yname == "auxillary-data-length-errors" { return "AuxillaryDataLengthErrors" }
    if yname == "invalid-source-address-errors" { return "InvalidSourceAddressErrors" }
    if yname == "no-socket-connection" { return "NoSocketConnection" }
    if yname == "miscellaneous-errors" { return "MiscellaneousErrors" }
    if yname == "input-queries" { return "InputQueries" }
    if yname == "input-reports" { return "InputReports" }
    if yname == "input-leaves" { return "InputLeaves" }
    if yname == "input-mtrace" { return "InputMtrace" }
    if yname == "input-dvmrp" { return "InputDvmrp" }
    if yname == "input-pim" { return "InputPim" }
    if yname == "output-queries" { return "OutputQueries" }
    if yname == "output-reports" { return "OutputReports" }
    if yname == "output-leaves" { return "OutputLeaves" }
    if yname == "output-mtrace" { return "OutputMtrace" }
    if yname == "output-dvmrp" { return "OutputDvmrp" }
    if yname == "output-pim" { return "OutputPim" }
    if yname == "get-packet-failure" { return "GetPacketFailure" }
    if yname == "output-no-parent-interface-handle" { return "OutputNoParentInterfaceHandle" }
    if yname == "input-no-idb" { return "InputNoIdb" }
    if yname == "input-no-vrf-in-idb" { return "InputNoVrfInIdb" }
    if yname == "input-disabled-idb" { return "InputDisabledIdb" }
    if yname == "input-martian-address" { return "InputMartianAddress" }
    if yname == "input-no-assigned-vrf-id" { return "InputNoAssignedVrfId" }
    if yname == "input-no-vrf-mtrace" { return "InputNoVrfMtrace" }
    if yname == "input-no-platform-support-mtrace" { return "InputNoPlatformSupportMtrace" }
    return ""
}

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetSegmentPath() string {
    return "traffic-counters"
}

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["elapsed-time"] = trafficCounters.ElapsedTime
    leafs["packets-in"] = trafficCounters.PacketsIn
    leafs["packets-out"] = trafficCounters.PacketsOut
    leafs["format-errors"] = trafficCounters.FormatErrors
    leafs["packet-manager-input-errors"] = trafficCounters.PacketManagerInputErrors
    leafs["packet-manager-output-errors"] = trafficCounters.PacketManagerOutputErrors
    leafs["checksum-errors"] = trafficCounters.ChecksumErrors
    leafs["receive-socket-errors"] = trafficCounters.ReceiveSocketErrors
    leafs["socket-errors"] = trafficCounters.SocketErrors
    leafs["bad-scope-errors"] = trafficCounters.BadScopeErrors
    leafs["auxillary-data-length-errors"] = trafficCounters.AuxillaryDataLengthErrors
    leafs["invalid-source-address-errors"] = trafficCounters.InvalidSourceAddressErrors
    leafs["no-socket-connection"] = trafficCounters.NoSocketConnection
    leafs["miscellaneous-errors"] = trafficCounters.MiscellaneousErrors
    leafs["input-queries"] = trafficCounters.InputQueries
    leafs["input-reports"] = trafficCounters.InputReports
    leafs["input-leaves"] = trafficCounters.InputLeaves
    leafs["input-mtrace"] = trafficCounters.InputMtrace
    leafs["input-dvmrp"] = trafficCounters.InputDvmrp
    leafs["input-pim"] = trafficCounters.InputPim
    leafs["output-queries"] = trafficCounters.OutputQueries
    leafs["output-reports"] = trafficCounters.OutputReports
    leafs["output-leaves"] = trafficCounters.OutputLeaves
    leafs["output-mtrace"] = trafficCounters.OutputMtrace
    leafs["output-dvmrp"] = trafficCounters.OutputDvmrp
    leafs["output-pim"] = trafficCounters.OutputPim
    leafs["get-packet-failure"] = trafficCounters.GetPacketFailure
    leafs["output-no-parent-interface-handle"] = trafficCounters.OutputNoParentInterfaceHandle
    leafs["input-no-idb"] = trafficCounters.InputNoIdb
    leafs["input-no-vrf-in-idb"] = trafficCounters.InputNoVrfInIdb
    leafs["input-disabled-idb"] = trafficCounters.InputDisabledIdb
    leafs["input-martian-address"] = trafficCounters.InputMartianAddress
    leafs["input-no-assigned-vrf-id"] = trafficCounters.InputNoAssignedVrfId
    leafs["input-no-vrf-mtrace"] = trafficCounters.InputNoVrfMtrace
    leafs["input-no-platform-support-mtrace"] = trafficCounters.InputNoPlatformSupportMtrace
    return leafs
}

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetBundleName() string { return "cisco_ios_xr" }

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetYangName() string { return "traffic-counters" }

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) SetParent(parent types.Entity) { trafficCounters.parent = parent }

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetParent() types.Entity { return trafficCounters.parent }

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_Groups
// IGMP Group Database Table
type Mld_Standby_Vrfs_Vrf_Groups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Mld_Standby_Vrfs_Vrf_Groups_Group.
    Group []Mld_Standby_Vrfs_Vrf_Groups_Group
}

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetFilter() yfilter.YFilter { return groups.YFilter }

func (groups *Mld_Standby_Vrfs_Vrf_Groups) SetFilter(yf yfilter.YFilter) { groups.YFilter = yf }

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetGoName(yname string) string {
    if yname == "group" { return "Group" }
    return ""
}

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetSegmentPath() string {
    return "groups"
}

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group" {
        for _, c := range groups.Group {
            if groups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_Groups_Group{}
        groups.Group = append(groups.Group, child)
        return &groups.Group[len(groups.Group)-1]
    }
    return nil
}

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range groups.Group {
        children[groups.Group[i].GetSegmentPath()] = &groups.Group[i]
    }
    return children
}

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetBundleName() string { return "cisco_ios_xr" }

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetYangName() string { return "groups" }

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groups *Mld_Standby_Vrfs_Vrf_Groups) SetParent(parent types.Entity) { groups.parent = parent }

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetParent() types.Entity { return groups.parent }

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_Groups_Group
// IGMP Group Entry Information
type Mld_Standby_Vrfs_Vrf_Groups_Group struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress
}

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetFilter() yfilter.YFilter { return group.YFilter }

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) SetFilter(yf yfilter.YFilter) { group.YFilter = yf }

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetSegmentPath() string {
    return "group"
}

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &group.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &group.LastReporter
    }
    if childYangName == "source-address" {
        return &group.SourceAddress
    }
    return nil
}

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &group.GroupAddressXr
    children["last-reporter"] = &group.LastReporter
    children["source-address"] = &group.SourceAddress
    return children
}

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = group.GroupAddress
    leafs["interface-name"] = group.InterfaceName
    leafs["interface-name-xr"] = group.InterfaceNameXr
    leafs["uptime"] = group.Uptime
    leafs["expiration-time"] = group.ExpirationTime
    leafs["explicit-tracking-enabled"] = group.ExplicitTrackingEnabled
    leafs["is-self-join"] = group.IsSelfJoin
    leafs["row-status"] = group.RowStatus
    leafs["is-low-memory"] = group.IsLowMemory
    leafs["router-filter-mode"] = group.RouterFilterMode
    leafs["older-host-version1-timer"] = group.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = group.OlderHostVersion2Timer
    leafs["is-added"] = group.IsAdded
    leafs["is-suppressed"] = group.IsSuppressed
    return leafs
}

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetBundleName() string { return "cisco_ios_xr" }

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetYangName() string { return "group" }

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) SetParent(parent types.Entity) { group.parent = parent }

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetParent() types.Entity { return group.parent }

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetParentYangName() string { return "groups" }

// Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr
// Group Address
type Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetParentYangName() string { return "group" }

// Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter
// Last reporter address
type Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetParentYangName() string { return "group" }

// Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress
// Source Address
type Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetParentYangName() string { return "group" }

// Mld_Standby_Vrfs_Vrf_GroupSummary
// IGMP Groups Summary
type Mld_Standby_Vrfs_Vrf_GroupSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetFilter() yfilter.YFilter { return groupSummary.YFilter }

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) SetFilter(yf yfilter.YFilter) { groupSummary.YFilter = yf }

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetGoName(yname string) string {
    if yname == "groutes" { return "Groutes" }
    if yname == "sg-routes" { return "SgRoutes" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    return ""
}

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetSegmentPath() string {
    return "group-summary"
}

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["groutes"] = groupSummary.Groutes
    leafs["sg-routes"] = groupSummary.SgRoutes
    leafs["group-count"] = groupSummary.GroupCount
    leafs["is-low-memory"] = groupSummary.IsLowMemory
    return leafs
}

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetBundleName() string { return "cisco_ios_xr" }

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetYangName() string { return "group-summary" }

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) SetParent(parent types.Entity) { groupSummary.parent = parent }

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetParent() types.Entity { return groupSummary.parent }

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetFilter() yfilter.YFilter { return ifrsInterfaceSummary.YFilter }

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) SetFilter(yf yfilter.YFilter) { ifrsInterfaceSummary.YFilter = yf }

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-count" { return "InterfaceCount" }
    if yname == "configuration-count" { return "ConfigurationCount" }
    return ""
}

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetSegmentPath() string {
    return "ifrs-interface-summary"
}

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-count"] = ifrsInterfaceSummary.InterfaceCount
    leafs["configuration-count"] = ifrsInterfaceSummary.ConfigurationCount
    return leafs
}

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetYangName() string { return "ifrs-interface-summary" }

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) SetParent(parent types.Entity) { ifrsInterfaceSummary.parent = parent }

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetParent() types.Entity { return ifrsInterfaceSummary.parent }

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable
// IGMP Global Interface 
type Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface.
    Interface []Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetFilter() yfilter.YFilter { return globalInterfaceTable.YFilter }

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) SetFilter(yf yfilter.YFilter) { globalInterfaceTable.YFilter = yf }

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetSegmentPath() string {
    return "global-interface-table"
}

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range globalInterfaceTable.Interface {
            if globalInterfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface{}
        globalInterfaceTable.Interface = append(globalInterfaceTable.Interface, child)
        return &globalInterfaceTable.Interface[len(globalInterfaceTable.Interface)-1]
    }
    return nil
}

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalInterfaceTable.Interface {
        children[globalInterfaceTable.Interface[i].GetSegmentPath()] = &globalInterfaceTable.Interface[i]
    }
    return children
}

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetYangName() string { return "global-interface-table" }

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) SetParent(parent types.Entity) { globalInterfaceTable.parent = parent }

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetParent() types.Entity { return globalInterfaceTable.parent }

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface
// IGMP Interface
type Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetParentYangName() string { return "global-interface-table" }

// Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address
// IP address
type Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Mld_Standby_Vrfs_Vrf_SsmMapDetails
// SSM Map Detail
type Mld_Standby_Vrfs_Vrf_SsmMapDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetFilter() yfilter.YFilter { return ssmMapDetails.YFilter }

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) SetFilter(yf yfilter.YFilter) { ssmMapDetails.YFilter = yf }

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetGoName(yname string) string {
    if yname == "ssm-map-detail" { return "SsmMapDetail" }
    return ""
}

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetSegmentPath() string {
    return "ssm-map-details"
}

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map-detail" {
        for _, c := range ssmMapDetails.SsmMapDetail {
            if ssmMapDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail{}
        ssmMapDetails.SsmMapDetail = append(ssmMapDetails.SsmMapDetail, child)
        return &ssmMapDetails.SsmMapDetail[len(ssmMapDetails.SsmMapDetail)-1]
    }
    return nil
}

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMapDetails.SsmMapDetail {
        children[ssmMapDetails.SsmMapDetail[i].GetSegmentPath()] = &ssmMapDetails.SsmMapDetail[i]
    }
    return children
}

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetYangName() string { return "ssm-map-details" }

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) SetParent(parent types.Entity) { ssmMapDetails.parent = parent }

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetParent() types.Entity { return ssmMapDetails.parent }

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources.
    Sources []Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetFilter() yfilter.YFilter { return ssmMapDetail.YFilter }

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) SetFilter(yf yfilter.YFilter) { ssmMapDetail.YFilter = yf }

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "response-pending" { return "ResponsePending" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "map-info" { return "MapInfo" }
    if yname == "sources" { return "Sources" }
    return ""
}

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetSegmentPath() string {
    return "ssm-map-detail"
}

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "map-info" {
        return &ssmMapDetail.MapInfo
    }
    if childYangName == "sources" {
        for _, c := range ssmMapDetail.Sources {
            if ssmMapDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources{}
        ssmMapDetail.Sources = append(ssmMapDetail.Sources, child)
        return &ssmMapDetail.Sources[len(ssmMapDetail.Sources)-1]
    }
    return nil
}

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["map-info"] = &ssmMapDetail.MapInfo
    for i := range ssmMapDetail.Sources {
        children[ssmMapDetail.Sources[i].GetSegmentPath()] = &ssmMapDetail.Sources[i]
    }
    return children
}

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMapDetail.SsmMapType
    leafs["group-address"] = ssmMapDetail.GroupAddress
    leafs["expiration-time"] = ssmMapDetail.ExpirationTime
    leafs["response-pending"] = ssmMapDetail.ResponsePending
    leafs["query-interval"] = ssmMapDetail.QueryInterval
    leafs["elapsed-time"] = ssmMapDetail.ElapsedTime
    return leafs
}

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetYangName() string { return "ssm-map-detail" }

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) SetParent(parent types.Entity) { ssmMapDetail.parent = parent }

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetParent() types.Entity { return ssmMapDetail.parent }

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetParentYangName() string { return "ssm-map-details" }

// Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetFilter() yfilter.YFilter { return mapInfo.YFilter }

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) SetFilter(yf yfilter.YFilter) { mapInfo.YFilter = yf }

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetGoName(yname string) string {
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetSegmentPath() string {
    return "map-info"
}

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &mapInfo.GroupAddressXr
    }
    return nil
}

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &mapInfo.GroupAddressXr
    return children
}

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["map-type"] = mapInfo.MapType
    leafs["source-counts"] = mapInfo.SourceCounts
    return leafs
}

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleName() string { return "cisco_ios_xr" }

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetYangName() string { return "map-info" }

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) SetParent(parent types.Entity) { mapInfo.parent = parent }

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetParent() types.Entity { return mapInfo.parent }

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetParentYangName() string { return "ssm-map-detail" }

// Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParentYangName() string { return "map-info" }

// Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetFilter() yfilter.YFilter { return sources.YFilter }

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) SetFilter(yf yfilter.YFilter) { sources.YFilter = yf }

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetSegmentPath() string {
    return "sources"
}

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sources.AfName
    leafs["ipv4-address"] = sources.Ipv4Address
    leafs["ipv6-address"] = sources.Ipv6Address
    return leafs
}

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetBundleName() string { return "cisco_ios_xr" }

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetYangName() string { return "sources" }

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) SetParent(parent types.Entity) { sources.parent = parent }

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetParent() types.Entity { return sources.parent }

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetParentYangName() string { return "ssm-map-detail" }

// Mld_Standby_Vrfs_Vrf_InterfaceStateOffs
// IGMP Interface state off
type Mld_Standby_Vrfs_Vrf_InterfaceStateOffs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetFilter() yfilter.YFilter { return interfaceStateOffs.YFilter }

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) SetFilter(yf yfilter.YFilter) { interfaceStateOffs.YFilter = yf }

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetGoName(yname string) string {
    if yname == "interface-state-off" { return "InterfaceStateOff" }
    return ""
}

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetSegmentPath() string {
    return "interface-state-offs"
}

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-off" {
        for _, c := range interfaceStateOffs.InterfaceStateOff {
            if interfaceStateOffs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff{}
        interfaceStateOffs.InterfaceStateOff = append(interfaceStateOffs.InterfaceStateOff, child)
        return &interfaceStateOffs.InterfaceStateOff[len(interfaceStateOffs.InterfaceStateOff)-1]
    }
    return nil
}

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOffs.InterfaceStateOff {
        children[interfaceStateOffs.InterfaceStateOff[i].GetSegmentPath()] = &interfaceStateOffs.InterfaceStateOff[i]
    }
    return children
}

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetYangName() string { return "interface-state-offs" }

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) SetParent(parent types.Entity) { interfaceStateOffs.parent = parent }

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetParent() types.Entity { return interfaceStateOffs.parent }

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetParentYangName() string { return "vrf" }

// Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetFilter() yfilter.YFilter { return interfaceStateOff.YFilter }

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) SetFilter(yf yfilter.YFilter) { interfaceStateOff.YFilter = yf }

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetSegmentPath() string {
    return "interface-state-off" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOff.InterfaceName) + "']"
}

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOff.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOff.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOff.SubscriberAddress
    }
    return nil
}

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOff.Address
    children["querier-address"] = &interfaceStateOff.QuerierAddress
    children["subscriber-address"] = &interfaceStateOff.SubscriberAddress
    return children
}

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOff.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOff.InterfaceNameXr
    leafs["state"] = interfaceStateOff.State
    leafs["prefix-length"] = interfaceStateOff.PrefixLength
    leafs["is-interface-up"] = interfaceStateOff.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOff.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOff.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOff.IgmpVersion
    leafs["host-version"] = interfaceStateOff.HostVersion
    leafs["query-interval"] = interfaceStateOff.QueryInterval
    leafs["query-timeout"] = interfaceStateOff.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOff.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOff.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOff.GroupJoins
    leafs["group-leaves"] = interfaceStateOff.GroupLeaves
    leafs["is-querier"] = interfaceStateOff.IsQuerier
    leafs["total-active-groups"] = interfaceStateOff.TotalActiveGroups
    leafs["robustness"] = interfaceStateOff.Robustness
    leafs["proxy-interface"] = interfaceStateOff.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOff.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOff.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOff.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOff.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOff.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOff.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOff.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOff.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOff.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOff.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOff.VrfId
    leafs["mte-vrf-id"] = interfaceStateOff.MteVrfId
    leafs["location"] = interfaceStateOff.Location
    leafs["mtu"] = interfaceStateOff.Mtu
    leafs["vrf-state"] = interfaceStateOff.VrfState
    leafs["is-configurationverify"] = interfaceStateOff.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOff.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOff.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOff.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOff.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOff.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOff.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOff.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOff.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOff.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOff.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOff.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOff.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOff.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOff.MteTupleCount
    return leafs
}

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetYangName() string { return "interface-state-off" }

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) SetParent(parent types.Entity) { interfaceStateOff.parent = parent }

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetParent() types.Entity { return interfaceStateOff.parent }

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetParentYangName() string { return "interface-state-offs" }

// Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetYangName() string { return "address" }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetParentYangName() string { return "interface-state-off" }

// Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParentYangName() string { return "interface-state-off" }

// Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParentYangName() string { return "interface-state-off" }

// Mld_Standby_Process
// Process
type Mld_Standby_Process struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MRIB RouteDB Expiry Information.
    AmtSummary Mld_Standby_Process_AmtSummary

    // NSR Information.
    Nsr Mld_Standby_Process_Nsr

    // Table containing AMT Gateway DataBase information.
    AmtGatewaies Mld_Standby_Process_AmtGatewaies

    // IGMP Unicast-Qos-Adjust Statistics.
    UnicastQosAdjustStats Mld_Standby_Process_UnicastQosAdjustStats

    // IGMP BVI Stats.
    BviStatistics Mld_Standby_Process_BviStatistics

    // NSF Information.
    Nsf Mld_Standby_Process_Nsf
}

func (process *Mld_Standby_Process) GetFilter() yfilter.YFilter { return process.YFilter }

func (process *Mld_Standby_Process) SetFilter(yf yfilter.YFilter) { process.YFilter = yf }

func (process *Mld_Standby_Process) GetGoName(yname string) string {
    if yname == "amt-summary" { return "AmtSummary" }
    if yname == "nsr" { return "Nsr" }
    if yname == "amt-gatewaies" { return "AmtGatewaies" }
    if yname == "unicast-qos-adjust-stats" { return "UnicastQosAdjustStats" }
    if yname == "bvi-statistics" { return "BviStatistics" }
    if yname == "nsf" { return "Nsf" }
    return ""
}

func (process *Mld_Standby_Process) GetSegmentPath() string {
    return "process"
}

func (process *Mld_Standby_Process) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "amt-summary" {
        return &process.AmtSummary
    }
    if childYangName == "nsr" {
        return &process.Nsr
    }
    if childYangName == "amt-gatewaies" {
        return &process.AmtGatewaies
    }
    if childYangName == "unicast-qos-adjust-stats" {
        return &process.UnicastQosAdjustStats
    }
    if childYangName == "bvi-statistics" {
        return &process.BviStatistics
    }
    if childYangName == "nsf" {
        return &process.Nsf
    }
    return nil
}

func (process *Mld_Standby_Process) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["amt-summary"] = &process.AmtSummary
    children["nsr"] = &process.Nsr
    children["amt-gatewaies"] = &process.AmtGatewaies
    children["unicast-qos-adjust-stats"] = &process.UnicastQosAdjustStats
    children["bvi-statistics"] = &process.BviStatistics
    children["nsf"] = &process.Nsf
    return children
}

func (process *Mld_Standby_Process) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (process *Mld_Standby_Process) GetBundleName() string { return "cisco_ios_xr" }

func (process *Mld_Standby_Process) GetYangName() string { return "process" }

func (process *Mld_Standby_Process) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (process *Mld_Standby_Process) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (process *Mld_Standby_Process) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (process *Mld_Standby_Process) SetParent(parent types.Entity) { process.parent = parent }

func (process *Mld_Standby_Process) GetParent() types.Entity { return process.parent }

func (process *Mld_Standby_Process) GetParentYangName() string { return "standby" }

// Mld_Standby_Process_AmtSummary
// MRIB RouteDB Expiry Information
type Mld_Standby_Process_AmtSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Robustness variable. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AnycastPrefix interface{}

    // Advertize AMT prefix length. The type is interface{} with range:
    // 0..4294967295.
    PrefixLength interface{}

    // Advertaisment for AMT Relay address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RelayAddress interface{}

    // AMT Tunnel MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Type Of Service value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Tos interface{}

    // Time To Live value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Ttl interface{}

    // AMT Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Number of AMT Gateway. The type is interface{} with range: 0..4294967295.
    GatewayCount interface{}

    // Maximum Gateway allowed. The type is interface{} with range: 0..4294967295.
    MaxGateway interface{}

    // AMT Tunnel Count. The type is interface{} with range: 0..4294967295.
    TunnelCount interface{}

    // AMT Tunnel configured Maximum. The type is interface{} with range:
    // 0..4294967295.
    TunnelConfiguredMaximum interface{}

    // ACL configured under AMT. The type is bool.
    IsAclConfigured interface{}

    // AMT Gateway Simulation. The type is bool.
    IsGatewaySimulation interface{}

    // AMT Out Of Resource. The type is bool.
    IsOuOfResource interface{}
}

func (amtSummary *Mld_Standby_Process_AmtSummary) GetFilter() yfilter.YFilter { return amtSummary.YFilter }

func (amtSummary *Mld_Standby_Process_AmtSummary) SetFilter(yf yfilter.YFilter) { amtSummary.YFilter = yf }

func (amtSummary *Mld_Standby_Process_AmtSummary) GetGoName(yname string) string {
    if yname == "anycast-prefix" { return "AnycastPrefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "relay-address" { return "RelayAddress" }
    if yname == "mtu" { return "Mtu" }
    if yname == "tos" { return "Tos" }
    if yname == "ttl" { return "Ttl" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "gateway-count" { return "GatewayCount" }
    if yname == "max-gateway" { return "MaxGateway" }
    if yname == "tunnel-count" { return "TunnelCount" }
    if yname == "tunnel-configured-maximum" { return "TunnelConfiguredMaximum" }
    if yname == "is-acl-configured" { return "IsAclConfigured" }
    if yname == "is-gateway-simulation" { return "IsGatewaySimulation" }
    if yname == "is-ou-of-resource" { return "IsOuOfResource" }
    return ""
}

func (amtSummary *Mld_Standby_Process_AmtSummary) GetSegmentPath() string {
    return "amt-summary"
}

func (amtSummary *Mld_Standby_Process_AmtSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (amtSummary *Mld_Standby_Process_AmtSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (amtSummary *Mld_Standby_Process_AmtSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["anycast-prefix"] = amtSummary.AnycastPrefix
    leafs["prefix-length"] = amtSummary.PrefixLength
    leafs["relay-address"] = amtSummary.RelayAddress
    leafs["mtu"] = amtSummary.Mtu
    leafs["tos"] = amtSummary.Tos
    leafs["ttl"] = amtSummary.Ttl
    leafs["query-interval"] = amtSummary.QueryInterval
    leafs["gateway-count"] = amtSummary.GatewayCount
    leafs["max-gateway"] = amtSummary.MaxGateway
    leafs["tunnel-count"] = amtSummary.TunnelCount
    leafs["tunnel-configured-maximum"] = amtSummary.TunnelConfiguredMaximum
    leafs["is-acl-configured"] = amtSummary.IsAclConfigured
    leafs["is-gateway-simulation"] = amtSummary.IsGatewaySimulation
    leafs["is-ou-of-resource"] = amtSummary.IsOuOfResource
    return leafs
}

func (amtSummary *Mld_Standby_Process_AmtSummary) GetBundleName() string { return "cisco_ios_xr" }

func (amtSummary *Mld_Standby_Process_AmtSummary) GetYangName() string { return "amt-summary" }

func (amtSummary *Mld_Standby_Process_AmtSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (amtSummary *Mld_Standby_Process_AmtSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (amtSummary *Mld_Standby_Process_AmtSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (amtSummary *Mld_Standby_Process_AmtSummary) SetParent(parent types.Entity) { amtSummary.parent = parent }

func (amtSummary *Mld_Standby_Process_AmtSummary) GetParent() types.Entity { return amtSummary.parent }

func (amtSummary *Mld_Standby_Process_AmtSummary) GetParentYangName() string { return "process" }

// Mld_Standby_Process_Nsr
// NSR Information
type Mld_Standby_Process_Nsr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NSR state. The type is interface{} with range: 0..255.
    State interface{}

    // Partner process connected. The type is bool.
    PartnerProcConnected interface{}

    // Collaborators convergence done. The type is bool.
    CollabConvDone interface{}

    // RMF Notification done. The type is bool.
    RmfNotificationDone interface{}

    // Time when process came up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProc interface{}

    // Time when process connection went up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionUp interface{}

    // Time when process connection went down. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionDn interface{}

    // Time when RMF Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfReady interface{}

    // Time when RMF Not-Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfNotReady interface{}

    // No. of times process connection went up. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionUp interface{}

    // No. of times process connection went down. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionDn interface{}

    // No. of times RMF Ready notif was sent. The type is interface{} with range:
    // 0..4294967295.
    CountRmfReady interface{}

    // No. of times RMF Not Ready notif was sent. The type is interface{} with
    // range: 0..4294967295.
    CountRmfNotReady interface{}
}

func (nsr *Mld_Standby_Process_Nsr) GetFilter() yfilter.YFilter { return nsr.YFilter }

func (nsr *Mld_Standby_Process_Nsr) SetFilter(yf yfilter.YFilter) { nsr.YFilter = yf }

func (nsr *Mld_Standby_Process_Nsr) GetGoName(yname string) string {
    if yname == "state" { return "State" }
    if yname == "partner-proc-connected" { return "PartnerProcConnected" }
    if yname == "collab-conv-done" { return "CollabConvDone" }
    if yname == "rmf-notification-done" { return "RmfNotificationDone" }
    if yname == "last-proc" { return "LastProc" }
    if yname == "last-proc-connection-up" { return "LastProcConnectionUp" }
    if yname == "last-proc-connection-dn" { return "LastProcConnectionDn" }
    if yname == "last-rmf-ready" { return "LastRmfReady" }
    if yname == "last-rmf-not-ready" { return "LastRmfNotReady" }
    if yname == "count-proc-connection-up" { return "CountProcConnectionUp" }
    if yname == "count-proc-connection-dn" { return "CountProcConnectionDn" }
    if yname == "count-rmf-ready" { return "CountRmfReady" }
    if yname == "count-rmf-not-ready" { return "CountRmfNotReady" }
    return ""
}

func (nsr *Mld_Standby_Process_Nsr) GetSegmentPath() string {
    return "nsr"
}

func (nsr *Mld_Standby_Process_Nsr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsr *Mld_Standby_Process_Nsr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsr *Mld_Standby_Process_Nsr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state"] = nsr.State
    leafs["partner-proc-connected"] = nsr.PartnerProcConnected
    leafs["collab-conv-done"] = nsr.CollabConvDone
    leafs["rmf-notification-done"] = nsr.RmfNotificationDone
    leafs["last-proc"] = nsr.LastProc
    leafs["last-proc-connection-up"] = nsr.LastProcConnectionUp
    leafs["last-proc-connection-dn"] = nsr.LastProcConnectionDn
    leafs["last-rmf-ready"] = nsr.LastRmfReady
    leafs["last-rmf-not-ready"] = nsr.LastRmfNotReady
    leafs["count-proc-connection-up"] = nsr.CountProcConnectionUp
    leafs["count-proc-connection-dn"] = nsr.CountProcConnectionDn
    leafs["count-rmf-ready"] = nsr.CountRmfReady
    leafs["count-rmf-not-ready"] = nsr.CountRmfNotReady
    return leafs
}

func (nsr *Mld_Standby_Process_Nsr) GetBundleName() string { return "cisco_ios_xr" }

func (nsr *Mld_Standby_Process_Nsr) GetYangName() string { return "nsr" }

func (nsr *Mld_Standby_Process_Nsr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsr *Mld_Standby_Process_Nsr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsr *Mld_Standby_Process_Nsr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsr *Mld_Standby_Process_Nsr) SetParent(parent types.Entity) { nsr.parent = parent }

func (nsr *Mld_Standby_Process_Nsr) GetParent() types.Entity { return nsr.parent }

func (nsr *Mld_Standby_Process_Nsr) GetParentYangName() string { return "process" }

// Mld_Standby_Process_AmtGatewaies
// Table containing AMT Gateway DataBase
// information
type Mld_Standby_Process_AmtGatewaies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AMT Gateway DataBase information. The type is slice of
    // Mld_Standby_Process_AmtGatewaies_AmtGateway.
    AmtGateway []Mld_Standby_Process_AmtGatewaies_AmtGateway
}

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetFilter() yfilter.YFilter { return amtGatewaies.YFilter }

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) SetFilter(yf yfilter.YFilter) { amtGatewaies.YFilter = yf }

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetGoName(yname string) string {
    if yname == "amt-gateway" { return "AmtGateway" }
    return ""
}

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetSegmentPath() string {
    return "amt-gatewaies"
}

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "amt-gateway" {
        for _, c := range amtGatewaies.AmtGateway {
            if amtGatewaies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_Process_AmtGatewaies_AmtGateway{}
        amtGatewaies.AmtGateway = append(amtGatewaies.AmtGateway, child)
        return &amtGatewaies.AmtGateway[len(amtGatewaies.AmtGateway)-1]
    }
    return nil
}

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range amtGatewaies.AmtGateway {
        children[amtGatewaies.AmtGateway[i].GetSegmentPath()] = &amtGatewaies.AmtGateway[i]
    }
    return children
}

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetBundleName() string { return "cisco_ios_xr" }

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetYangName() string { return "amt-gatewaies" }

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) SetParent(parent types.Entity) { amtGatewaies.parent = parent }

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetParent() types.Entity { return amtGatewaies.parent }

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetParentYangName() string { return "process" }

// Mld_Standby_Process_AmtGatewaies_AmtGateway
// AMT Gateway DataBase information
type Mld_Standby_Process_AmtGatewaies_AmtGateway struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Gateway Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GatewayAddress interface{}

    // Port. The type is interface{} with range: -2147483648..2147483647.
    Port interface{}

    // GW. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Amtgw interface{}

    // Port. The type is interface{} with range: 0..4294967295.
    AmtPort interface{}

    // Len. The type is interface{} with range: 0..4294967295.
    KeyLen interface{}

    // AMT NH. The type is interface{} with range: 0..4294967295.
    Amtnh interface{}

    // Nonce. The type is interface{} with range: 0..4294967295.
    AmtNonce interface{}

    // IDB. The type is interface{} with range: 0..18446744073709551615.
    Idb interface{}

    // UpdIn. The type is interface{} with range: 0..4294967295.
    MemUpdIn interface{}

    // UpdOut. The type is interface{} with range: 0..4294967295.
    MemUpdOut interface{}
}

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetFilter() yfilter.YFilter { return amtGateway.YFilter }

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) SetFilter(yf yfilter.YFilter) { amtGateway.YFilter = yf }

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetGoName(yname string) string {
    if yname == "gateway-address" { return "GatewayAddress" }
    if yname == "port" { return "Port" }
    if yname == "amtgw" { return "Amtgw" }
    if yname == "amt-port" { return "AmtPort" }
    if yname == "key-len" { return "KeyLen" }
    if yname == "amtnh" { return "Amtnh" }
    if yname == "amt-nonce" { return "AmtNonce" }
    if yname == "idb" { return "Idb" }
    if yname == "mem-upd-in" { return "MemUpdIn" }
    if yname == "mem-upd-out" { return "MemUpdOut" }
    return ""
}

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetSegmentPath() string {
    return "amt-gateway"
}

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gateway-address"] = amtGateway.GatewayAddress
    leafs["port"] = amtGateway.Port
    leafs["amtgw"] = amtGateway.Amtgw
    leafs["amt-port"] = amtGateway.AmtPort
    leafs["key-len"] = amtGateway.KeyLen
    leafs["amtnh"] = amtGateway.Amtnh
    leafs["amt-nonce"] = amtGateway.AmtNonce
    leafs["idb"] = amtGateway.Idb
    leafs["mem-upd-in"] = amtGateway.MemUpdIn
    leafs["mem-upd-out"] = amtGateway.MemUpdOut
    return leafs
}

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetBundleName() string { return "cisco_ios_xr" }

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetYangName() string { return "amt-gateway" }

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) SetParent(parent types.Entity) { amtGateway.parent = parent }

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetParent() types.Entity { return amtGateway.parent }

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetParentYangName() string { return "amt-gatewaies" }

// Mld_Standby_Process_UnicastQosAdjustStats
// IGMP Unicast-Qos-Adjust Statistics
type Mld_Standby_Process_UnicastQosAdjustStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // I2Q Queue count. The type is interface{} with range: 0..65535.
    Queues interface{}

    // I2Q Rate Batch count. The type is interface{} with range: 0..65535.
    Batches interface{}

    // Add to batch count. The type is interface{} with range: 0..4294967295.
    AddToBatches interface{}

    // Delete to batch count. The type is interface{} with range: 0..4294967295.
    DeleteToBatches interface{}

    // Send Success count. The type is interface{} with range: 0..4294967295.
    SendSuccess interface{}

    // Number of Send errors in batch. The type is interface{} with range:
    // 0..4294967295.
    SendErrors interface{}

    // Send Error due to comms count. The type is interface{} with range:
    // 0..4294967295.
    SendCommErrors interface{}

    // Send Error due to partial issue count. The type is interface{} with range:
    // 0..4294967295.
    SendPartialErrors interface{}

    // Number of Resync request received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedResyncRequests interface{}

    // Number of bulks sent for last resync received. The type is interface{} with
    // range: 0..4294967295.
    SentResyncBulks interface{}

    // Is Resync request received. The type is bool.
    IsResyncReceived interface{}

    // Is Resync required. The type is bool.
    IsResyncRequired interface{}

    // Is Resync Start message sent. The type is bool.
    IsResyncStartSent interface{}

    // Is QOS Sweeped once . The type is bool.
    IsQosSSweeped interface{}

    // Time elapsed since Last mark and sweep in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastSweepTime interface{}

    // Time elapsed since Last download to QOS in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastDownloadTime interface{}
}

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetFilter() yfilter.YFilter { return unicastQosAdjustStats.YFilter }

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) SetFilter(yf yfilter.YFilter) { unicastQosAdjustStats.YFilter = yf }

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetGoName(yname string) string {
    if yname == "queues" { return "Queues" }
    if yname == "batches" { return "Batches" }
    if yname == "add-to-batches" { return "AddToBatches" }
    if yname == "delete-to-batches" { return "DeleteToBatches" }
    if yname == "send-success" { return "SendSuccess" }
    if yname == "send-errors" { return "SendErrors" }
    if yname == "send-comm-errors" { return "SendCommErrors" }
    if yname == "send-partial-errors" { return "SendPartialErrors" }
    if yname == "received-resync-requests" { return "ReceivedResyncRequests" }
    if yname == "sent-resync-bulks" { return "SentResyncBulks" }
    if yname == "is-resync-received" { return "IsResyncReceived" }
    if yname == "is-resync-required" { return "IsResyncRequired" }
    if yname == "is-resync-start-sent" { return "IsResyncStartSent" }
    if yname == "is-qos-s-sweeped" { return "IsQosSSweeped" }
    if yname == "last-sweep-time" { return "LastSweepTime" }
    if yname == "last-download-time" { return "LastDownloadTime" }
    return ""
}

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetSegmentPath() string {
    return "unicast-qos-adjust-stats"
}

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["queues"] = unicastQosAdjustStats.Queues
    leafs["batches"] = unicastQosAdjustStats.Batches
    leafs["add-to-batches"] = unicastQosAdjustStats.AddToBatches
    leafs["delete-to-batches"] = unicastQosAdjustStats.DeleteToBatches
    leafs["send-success"] = unicastQosAdjustStats.SendSuccess
    leafs["send-errors"] = unicastQosAdjustStats.SendErrors
    leafs["send-comm-errors"] = unicastQosAdjustStats.SendCommErrors
    leafs["send-partial-errors"] = unicastQosAdjustStats.SendPartialErrors
    leafs["received-resync-requests"] = unicastQosAdjustStats.ReceivedResyncRequests
    leafs["sent-resync-bulks"] = unicastQosAdjustStats.SentResyncBulks
    leafs["is-resync-received"] = unicastQosAdjustStats.IsResyncReceived
    leafs["is-resync-required"] = unicastQosAdjustStats.IsResyncRequired
    leafs["is-resync-start-sent"] = unicastQosAdjustStats.IsResyncStartSent
    leafs["is-qos-s-sweeped"] = unicastQosAdjustStats.IsQosSSweeped
    leafs["last-sweep-time"] = unicastQosAdjustStats.LastSweepTime
    leafs["last-download-time"] = unicastQosAdjustStats.LastDownloadTime
    return leafs
}

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetBundleName() string { return "cisco_ios_xr" }

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetYangName() string { return "unicast-qos-adjust-stats" }

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) SetParent(parent types.Entity) { unicastQosAdjustStats.parent = parent }

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetParent() types.Entity { return unicastQosAdjustStats.parent }

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetParentYangName() string { return "process" }

// Mld_Standby_Process_BviStatistics
// IGMP BVI Stats
type Mld_Standby_Process_BviStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of AIPC buffers received. The type is interface{} with range:
    // 0..4294967295.
    ReceiveBuffers interface{}

    // Number of AIPC buffers released. The type is interface{} with range:
    // 0..4294967295.
    ReleaseBuffers interface{}

    // Number of AIPC buffers send blocked. The type is interface{} with range:
    // 0..4294967295.
    SendBlocks interface{}

    // Number of AIPC buffers release failed. The type is interface{} with range:
    // 0..4294967295.
    ReleaseFailBuffers interface{}

    // Number of AIPC NULL buffer handles. The type is interface{} with range:
    // 0..4294967295.
    NullBufferHandles interface{}

    // Number of AIPC open notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOpenNotif interface{}

    // Number of AIPC close notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcCloseNotif interface{}

    // Number of AIPC error notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcErrorNotif interface{}

    // Number of AIPC LWM notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcLwmNotif interface{}

    // Number of AIPC input waiting notifications received. The type is
    // interface{} with range: 0..4294967295.
    RxIpcInputWaitNotif interface{}

    // Number of AIPC send status notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcSendStatusNotif interface{}

    // Number of AIPC publish notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcPublishNotif interface{}

    // Number of AIPC queue full notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcQFullNotif interface{}

    // Number of AIPC output notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOutputNotif interface{}

    // Number of AIPC connect notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcConnectNotif interface{}

    // Number of IGMP protocol messages received. The type is interface{} with
    // range: 0..4294967295.
    RxIgmpPacketSuccess interface{}

    // Number of IGMP Mrouter Add messages received. The type is interface{} with
    // range: 0..4294967295.
    RxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages received. The type is interface{}
    // with range: 0..4294967295.
    RxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    RxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Add messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    TxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages received. The type is interface{}
    // with range: 0..4294967295.
    RxUnknownMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages transmitted. The type is
    // interface{} with range: 0..4294967295.
    TxUnknownMrouterMsg interface{}

    // Number of AIPC transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TxBufferErrors interface{}

    // Number of AIPC buffers transmited. The type is interface{} with range:
    // 0..4294967295.
    TxBuffers interface{}

    // Number of IGMP protocol buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxProtocolBuffers interface{}

    // Number of IGMP Mrouter buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxMrouterBuffers interface{}

    // Number of IGMP Unknown buffers transmited. The type is interface{} with
    // range: 0..4294967295.
    TxUnknownBuffers interface{}

    // Number of WTX messages received. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgRecvd interface{}

    // Number of WTX messages sent. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgSent interface{}

    // Number of WTX messages sent to Protocol. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgProtoSent interface{}

    // Number of WTX messages dropped due to disconnect. The type is interface{}
    // with range: 0..4294967295.
    WtxMsgDropDc interface{}

    // Number of WTX messages dropped to memory. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgDropNomem interface{}

    // Number of WTX messages freed. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgFreed interface{}
}

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetFilter() yfilter.YFilter { return bviStatistics.YFilter }

func (bviStatistics *Mld_Standby_Process_BviStatistics) SetFilter(yf yfilter.YFilter) { bviStatistics.YFilter = yf }

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetGoName(yname string) string {
    if yname == "receive-buffers" { return "ReceiveBuffers" }
    if yname == "release-buffers" { return "ReleaseBuffers" }
    if yname == "send-blocks" { return "SendBlocks" }
    if yname == "release-fail-buffers" { return "ReleaseFailBuffers" }
    if yname == "null-buffer-handles" { return "NullBufferHandles" }
    if yname == "rx-ipc-open-notif" { return "RxIpcOpenNotif" }
    if yname == "rx-ipc-close-notif" { return "RxIpcCloseNotif" }
    if yname == "rx-ipc-error-notif" { return "RxIpcErrorNotif" }
    if yname == "rx-ipc-lwm-notif" { return "RxIpcLwmNotif" }
    if yname == "rx-ipc-input-wait-notif" { return "RxIpcInputWaitNotif" }
    if yname == "rx-ipc-send-status-notif" { return "RxIpcSendStatusNotif" }
    if yname == "rx-ipc-publish-notif" { return "RxIpcPublishNotif" }
    if yname == "rx-ipc-q-full-notif" { return "RxIpcQFullNotif" }
    if yname == "rx-ipc-output-notif" { return "RxIpcOutputNotif" }
    if yname == "rx-ipc-connect-notif" { return "RxIpcConnectNotif" }
    if yname == "rx-igmp-packet-success" { return "RxIgmpPacketSuccess" }
    if yname == "rx-add-mrouter-msg" { return "RxAddMrouterMsg" }
    if yname == "rx-delete-mrouter-msg" { return "RxDeleteMrouterMsg" }
    if yname == "rx-sweep-mrouter-msg" { return "RxSweepMrouterMsg" }
    if yname == "tx-add-mrouter-msg" { return "TxAddMrouterMsg" }
    if yname == "tx-delete-mrouter-msg" { return "TxDeleteMrouterMsg" }
    if yname == "tx-sweep-mrouter-msg" { return "TxSweepMrouterMsg" }
    if yname == "rx-unknown-mrouter-msg" { return "RxUnknownMrouterMsg" }
    if yname == "tx-unknown-mrouter-msg" { return "TxUnknownMrouterMsg" }
    if yname == "tx-buffer-errors" { return "TxBufferErrors" }
    if yname == "tx-buffers" { return "TxBuffers" }
    if yname == "tx-protocol-buffers" { return "TxProtocolBuffers" }
    if yname == "tx-mrouter-buffers" { return "TxMrouterBuffers" }
    if yname == "tx-unknown-buffers" { return "TxUnknownBuffers" }
    if yname == "wtx-msg-recvd" { return "WtxMsgRecvd" }
    if yname == "wtx-msg-sent" { return "WtxMsgSent" }
    if yname == "wtx-msg-proto-sent" { return "WtxMsgProtoSent" }
    if yname == "wtx-msg-drop-dc" { return "WtxMsgDropDc" }
    if yname == "wtx-msg-drop-nomem" { return "WtxMsgDropNomem" }
    if yname == "wtx-msg-freed" { return "WtxMsgFreed" }
    return ""
}

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetSegmentPath() string {
    return "bvi-statistics"
}

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["receive-buffers"] = bviStatistics.ReceiveBuffers
    leafs["release-buffers"] = bviStatistics.ReleaseBuffers
    leafs["send-blocks"] = bviStatistics.SendBlocks
    leafs["release-fail-buffers"] = bviStatistics.ReleaseFailBuffers
    leafs["null-buffer-handles"] = bviStatistics.NullBufferHandles
    leafs["rx-ipc-open-notif"] = bviStatistics.RxIpcOpenNotif
    leafs["rx-ipc-close-notif"] = bviStatistics.RxIpcCloseNotif
    leafs["rx-ipc-error-notif"] = bviStatistics.RxIpcErrorNotif
    leafs["rx-ipc-lwm-notif"] = bviStatistics.RxIpcLwmNotif
    leafs["rx-ipc-input-wait-notif"] = bviStatistics.RxIpcInputWaitNotif
    leafs["rx-ipc-send-status-notif"] = bviStatistics.RxIpcSendStatusNotif
    leafs["rx-ipc-publish-notif"] = bviStatistics.RxIpcPublishNotif
    leafs["rx-ipc-q-full-notif"] = bviStatistics.RxIpcQFullNotif
    leafs["rx-ipc-output-notif"] = bviStatistics.RxIpcOutputNotif
    leafs["rx-ipc-connect-notif"] = bviStatistics.RxIpcConnectNotif
    leafs["rx-igmp-packet-success"] = bviStatistics.RxIgmpPacketSuccess
    leafs["rx-add-mrouter-msg"] = bviStatistics.RxAddMrouterMsg
    leafs["rx-delete-mrouter-msg"] = bviStatistics.RxDeleteMrouterMsg
    leafs["rx-sweep-mrouter-msg"] = bviStatistics.RxSweepMrouterMsg
    leafs["tx-add-mrouter-msg"] = bviStatistics.TxAddMrouterMsg
    leafs["tx-delete-mrouter-msg"] = bviStatistics.TxDeleteMrouterMsg
    leafs["tx-sweep-mrouter-msg"] = bviStatistics.TxSweepMrouterMsg
    leafs["rx-unknown-mrouter-msg"] = bviStatistics.RxUnknownMrouterMsg
    leafs["tx-unknown-mrouter-msg"] = bviStatistics.TxUnknownMrouterMsg
    leafs["tx-buffer-errors"] = bviStatistics.TxBufferErrors
    leafs["tx-buffers"] = bviStatistics.TxBuffers
    leafs["tx-protocol-buffers"] = bviStatistics.TxProtocolBuffers
    leafs["tx-mrouter-buffers"] = bviStatistics.TxMrouterBuffers
    leafs["tx-unknown-buffers"] = bviStatistics.TxUnknownBuffers
    leafs["wtx-msg-recvd"] = bviStatistics.WtxMsgRecvd
    leafs["wtx-msg-sent"] = bviStatistics.WtxMsgSent
    leafs["wtx-msg-proto-sent"] = bviStatistics.WtxMsgProtoSent
    leafs["wtx-msg-drop-dc"] = bviStatistics.WtxMsgDropDc
    leafs["wtx-msg-drop-nomem"] = bviStatistics.WtxMsgDropNomem
    leafs["wtx-msg-freed"] = bviStatistics.WtxMsgFreed
    return leafs
}

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetYangName() string { return "bvi-statistics" }

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bviStatistics *Mld_Standby_Process_BviStatistics) SetParent(parent types.Entity) { bviStatistics.parent = parent }

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetParent() types.Entity { return bviStatistics.parent }

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetParentYangName() string { return "process" }

// Mld_Standby_Process_Nsf
// NSF Information
type Mld_Standby_Process_Nsf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is Multicast NSF active. The type is bool.
    IsMulticastNsfActive interface{}

    // Multicast NSF timeout in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeout interface{}

    // Multicast NSF time remaining in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeLeft interface{}

    // Respawn Count. The type is interface{} with range: 0..4294967295.
    RespawnCount interface{}

    // Last NSF time ON. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOn interface{}

    // Last NSF time off. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOff interface{}

    // Last NSF time ON in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOnMin interface{}

    // Last NSF time OFF in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOffMin interface{}

    // Last ICD Notif Recv. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastIcdNotifRecv interface{}

    // Last ICD Notif Recv in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastIcdNotifRecvMin interface{}
}

func (nsf *Mld_Standby_Process_Nsf) GetFilter() yfilter.YFilter { return nsf.YFilter }

func (nsf *Mld_Standby_Process_Nsf) SetFilter(yf yfilter.YFilter) { nsf.YFilter = yf }

func (nsf *Mld_Standby_Process_Nsf) GetGoName(yname string) string {
    if yname == "is-multicast-nsf-active" { return "IsMulticastNsfActive" }
    if yname == "multicast-nsf-timeout" { return "MulticastNsfTimeout" }
    if yname == "multicast-nsf-time-left" { return "MulticastNsfTimeLeft" }
    if yname == "respawn-count" { return "RespawnCount" }
    if yname == "last-nsf-on" { return "LastNsfOn" }
    if yname == "last-nsf-off" { return "LastNsfOff" }
    if yname == "last-nsf-on-min" { return "LastNsfOnMin" }
    if yname == "last-nsf-off-min" { return "LastNsfOffMin" }
    if yname == "last-icd-notif-recv" { return "LastIcdNotifRecv" }
    if yname == "last-icd-notif-recv-min" { return "LastIcdNotifRecvMin" }
    return ""
}

func (nsf *Mld_Standby_Process_Nsf) GetSegmentPath() string {
    return "nsf"
}

func (nsf *Mld_Standby_Process_Nsf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsf *Mld_Standby_Process_Nsf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsf *Mld_Standby_Process_Nsf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-multicast-nsf-active"] = nsf.IsMulticastNsfActive
    leafs["multicast-nsf-timeout"] = nsf.MulticastNsfTimeout
    leafs["multicast-nsf-time-left"] = nsf.MulticastNsfTimeLeft
    leafs["respawn-count"] = nsf.RespawnCount
    leafs["last-nsf-on"] = nsf.LastNsfOn
    leafs["last-nsf-off"] = nsf.LastNsfOff
    leafs["last-nsf-on-min"] = nsf.LastNsfOnMin
    leafs["last-nsf-off-min"] = nsf.LastNsfOffMin
    leafs["last-icd-notif-recv"] = nsf.LastIcdNotifRecv
    leafs["last-icd-notif-recv-min"] = nsf.LastIcdNotifRecvMin
    return leafs
}

func (nsf *Mld_Standby_Process_Nsf) GetBundleName() string { return "cisco_ios_xr" }

func (nsf *Mld_Standby_Process_Nsf) GetYangName() string { return "nsf" }

func (nsf *Mld_Standby_Process_Nsf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsf *Mld_Standby_Process_Nsf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsf *Mld_Standby_Process_Nsf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsf *Mld_Standby_Process_Nsf) SetParent(parent types.Entity) { nsf.parent = parent }

func (nsf *Mld_Standby_Process_Nsf) GetParent() types.Entity { return nsf.parent }

func (nsf *Mld_Standby_Process_Nsf) GetParentYangName() string { return "process" }

// Mld_Standby_DefaultContext
// Default Context
type Mld_Standby_DefaultContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Summary Information.
    Summary Mld_Standby_DefaultContext_Summary

    // IGMP Interface state on.
    InterfaceStateOns Mld_Standby_DefaultContext_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Mld_Standby_DefaultContext_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Mld_Standby_DefaultContext_NonActiveGroups

    // SSM Map Table.
    SsmMaps Mld_Standby_DefaultContext_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Mld_Standby_DefaultContext_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Mld_Standby_DefaultContext_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Mld_Standby_DefaultContext_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Mld_Standby_DefaultContext_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Mld_Standby_DefaultContext_TrafficCounters

    // IGMP Group Database Table.
    Groups Mld_Standby_DefaultContext_Groups

    // IGMP Groups Summary.
    GroupSummary Mld_Standby_DefaultContext_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Mld_Standby_DefaultContext_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Mld_Standby_DefaultContext_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Mld_Standby_DefaultContext_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Mld_Standby_DefaultContext_InterfaceStateOffs
}

func (defaultContext *Mld_Standby_DefaultContext) GetFilter() yfilter.YFilter { return defaultContext.YFilter }

func (defaultContext *Mld_Standby_DefaultContext) SetFilter(yf yfilter.YFilter) { defaultContext.YFilter = yf }

func (defaultContext *Mld_Standby_DefaultContext) GetGoName(yname string) string {
    if yname == "summary" { return "Summary" }
    if yname == "interface-state-ons" { return "InterfaceStateOns" }
    if yname == "detail-groups" { return "DetailGroups" }
    if yname == "non-active-groups" { return "NonActiveGroups" }
    if yname == "ssm-maps" { return "SsmMaps" }
    if yname == "explicit-groups" { return "ExplicitGroups" }
    if yname == "interface-table" { return "InterfaceTable" }
    if yname == "interface-unicast-qos-adjusts" { return "InterfaceUnicastQosAdjusts" }
    if yname == "ranges" { return "Ranges" }
    if yname == "ifrs-interfaces" { return "IfrsInterfaces" }
    if yname == "traffic-counters" { return "TrafficCounters" }
    if yname == "groups" { return "Groups" }
    if yname == "group-summary" { return "GroupSummary" }
    if yname == "ifrs-interface-summary" { return "IfrsInterfaceSummary" }
    if yname == "global-interface-table" { return "GlobalInterfaceTable" }
    if yname == "ssm-map-details" { return "SsmMapDetails" }
    if yname == "interface-state-offs" { return "InterfaceStateOffs" }
    return ""
}

func (defaultContext *Mld_Standby_DefaultContext) GetSegmentPath() string {
    return "default-context"
}

func (defaultContext *Mld_Standby_DefaultContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &defaultContext.Summary
    }
    if childYangName == "interface-state-ons" {
        return &defaultContext.InterfaceStateOns
    }
    if childYangName == "detail-groups" {
        return &defaultContext.DetailGroups
    }
    if childYangName == "non-active-groups" {
        return &defaultContext.NonActiveGroups
    }
    if childYangName == "ssm-maps" {
        return &defaultContext.SsmMaps
    }
    if childYangName == "explicit-groups" {
        return &defaultContext.ExplicitGroups
    }
    if childYangName == "interface-table" {
        return &defaultContext.InterfaceTable
    }
    if childYangName == "interface-unicast-qos-adjusts" {
        return &defaultContext.InterfaceUnicastQosAdjusts
    }
    if childYangName == "ranges" {
        return &defaultContext.Ranges
    }
    if childYangName == "ifrs-interfaces" {
        return &defaultContext.IfrsInterfaces
    }
    if childYangName == "traffic-counters" {
        return &defaultContext.TrafficCounters
    }
    if childYangName == "groups" {
        return &defaultContext.Groups
    }
    if childYangName == "group-summary" {
        return &defaultContext.GroupSummary
    }
    if childYangName == "ifrs-interface-summary" {
        return &defaultContext.IfrsInterfaceSummary
    }
    if childYangName == "global-interface-table" {
        return &defaultContext.GlobalInterfaceTable
    }
    if childYangName == "ssm-map-details" {
        return &defaultContext.SsmMapDetails
    }
    if childYangName == "interface-state-offs" {
        return &defaultContext.InterfaceStateOffs
    }
    return nil
}

func (defaultContext *Mld_Standby_DefaultContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &defaultContext.Summary
    children["interface-state-ons"] = &defaultContext.InterfaceStateOns
    children["detail-groups"] = &defaultContext.DetailGroups
    children["non-active-groups"] = &defaultContext.NonActiveGroups
    children["ssm-maps"] = &defaultContext.SsmMaps
    children["explicit-groups"] = &defaultContext.ExplicitGroups
    children["interface-table"] = &defaultContext.InterfaceTable
    children["interface-unicast-qos-adjusts"] = &defaultContext.InterfaceUnicastQosAdjusts
    children["ranges"] = &defaultContext.Ranges
    children["ifrs-interfaces"] = &defaultContext.IfrsInterfaces
    children["traffic-counters"] = &defaultContext.TrafficCounters
    children["groups"] = &defaultContext.Groups
    children["group-summary"] = &defaultContext.GroupSummary
    children["ifrs-interface-summary"] = &defaultContext.IfrsInterfaceSummary
    children["global-interface-table"] = &defaultContext.GlobalInterfaceTable
    children["ssm-map-details"] = &defaultContext.SsmMapDetails
    children["interface-state-offs"] = &defaultContext.InterfaceStateOffs
    return children
}

func (defaultContext *Mld_Standby_DefaultContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (defaultContext *Mld_Standby_DefaultContext) GetBundleName() string { return "cisco_ios_xr" }

func (defaultContext *Mld_Standby_DefaultContext) GetYangName() string { return "default-context" }

func (defaultContext *Mld_Standby_DefaultContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultContext *Mld_Standby_DefaultContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultContext *Mld_Standby_DefaultContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultContext *Mld_Standby_DefaultContext) SetParent(parent types.Entity) { defaultContext.parent = parent }

func (defaultContext *Mld_Standby_DefaultContext) GetParent() types.Entity { return defaultContext.parent }

func (defaultContext *Mld_Standby_DefaultContext) GetParentYangName() string { return "standby" }

// Mld_Standby_DefaultContext_Summary
// IGMP Summary Information
type Mld_Standby_DefaultContext_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Mld_Standby_DefaultContext_Summary_Interface.
    Interface []Mld_Standby_DefaultContext_Summary_Interface
}

func (summary *Mld_Standby_DefaultContext_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Mld_Standby_DefaultContext_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Mld_Standby_DefaultContext_Summary) GetGoName(yname string) string {
    if yname == "robustness" { return "Robustness" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-disabled" { return "IsDisabled" }
    if yname == "supported-interfaces" { return "SupportedInterfaces" }
    if yname == "unsupported-interfaces" { return "UnsupportedInterfaces" }
    if yname == "enabled-interface-count" { return "EnabledInterfaceCount" }
    if yname == "disabled-interface-count" { return "DisabledInterfaceCount" }
    if yname == "tunnel-mte-config-count" { return "TunnelMteConfigCount" }
    if yname == "node-low-memory" { return "NodeLowMemory" }
    if yname == "interface" { return "Interface" }
    return ""
}

func (summary *Mld_Standby_DefaultContext_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Mld_Standby_DefaultContext_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range summary.Interface {
            if summary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_Summary_Interface{}
        summary.Interface = append(summary.Interface, child)
        return &summary.Interface[len(summary.Interface)-1]
    }
    return nil
}

func (summary *Mld_Standby_DefaultContext_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summary.Interface {
        children[summary.Interface[i].GetSegmentPath()] = &summary.Interface[i]
    }
    return children
}

func (summary *Mld_Standby_DefaultContext_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["robustness"] = summary.Robustness
    leafs["group-limit"] = summary.GroupLimit
    leafs["group-count"] = summary.GroupCount
    leafs["is-disabled"] = summary.IsDisabled
    leafs["supported-interfaces"] = summary.SupportedInterfaces
    leafs["unsupported-interfaces"] = summary.UnsupportedInterfaces
    leafs["enabled-interface-count"] = summary.EnabledInterfaceCount
    leafs["disabled-interface-count"] = summary.DisabledInterfaceCount
    leafs["tunnel-mte-config-count"] = summary.TunnelMteConfigCount
    leafs["node-low-memory"] = summary.NodeLowMemory
    return leafs
}

func (summary *Mld_Standby_DefaultContext_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Mld_Standby_DefaultContext_Summary) GetYangName() string { return "summary" }

func (summary *Mld_Standby_DefaultContext_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Mld_Standby_DefaultContext_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Mld_Standby_DefaultContext_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Mld_Standby_DefaultContext_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Mld_Standby_DefaultContext_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Mld_Standby_DefaultContext_Summary) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Mld_Standby_DefaultContext_Summary_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Standby_DefaultContext_Summary_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "on-off" { return "OnOff" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    return ""
}

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetSegmentPath() string {
    return "interface"
}

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["group-limit"] = self.GroupLimit
    leafs["group-count"] = self.GroupCount
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["on-off"] = self.OnOff
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    return leafs
}

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetYangName() string { return "interface" }

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Standby_DefaultContext_Summary_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetParent() types.Entity { return self.parent }

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetParentYangName() string { return "summary" }

// Mld_Standby_DefaultContext_InterfaceStateOns
// IGMP Interface state on
type Mld_Standby_DefaultContext_InterfaceStateOns struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetFilter() yfilter.YFilter { return interfaceStateOns.YFilter }

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) SetFilter(yf yfilter.YFilter) { interfaceStateOns.YFilter = yf }

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetGoName(yname string) string {
    if yname == "interface-state-on" { return "InterfaceStateOn" }
    return ""
}

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetSegmentPath() string {
    return "interface-state-ons"
}

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-on" {
        for _, c := range interfaceStateOns.InterfaceStateOn {
            if interfaceStateOns.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn{}
        interfaceStateOns.InterfaceStateOn = append(interfaceStateOns.InterfaceStateOn, child)
        return &interfaceStateOns.InterfaceStateOn[len(interfaceStateOns.InterfaceStateOn)-1]
    }
    return nil
}

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOns.InterfaceStateOn {
        children[interfaceStateOns.InterfaceStateOn[i].GetSegmentPath()] = &interfaceStateOns.InterfaceStateOn[i]
    }
    return children
}

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetYangName() string { return "interface-state-ons" }

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) SetParent(parent types.Entity) { interfaceStateOns.parent = parent }

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetParent() types.Entity { return interfaceStateOns.parent }

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetFilter() yfilter.YFilter { return interfaceStateOn.YFilter }

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) SetFilter(yf yfilter.YFilter) { interfaceStateOn.YFilter = yf }

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetSegmentPath() string {
    return "interface-state-on" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOn.InterfaceName) + "']"
}

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOn.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOn.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOn.SubscriberAddress
    }
    return nil
}

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOn.Address
    children["querier-address"] = &interfaceStateOn.QuerierAddress
    children["subscriber-address"] = &interfaceStateOn.SubscriberAddress
    return children
}

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOn.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOn.InterfaceNameXr
    leafs["state"] = interfaceStateOn.State
    leafs["prefix-length"] = interfaceStateOn.PrefixLength
    leafs["is-interface-up"] = interfaceStateOn.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOn.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOn.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOn.IgmpVersion
    leafs["host-version"] = interfaceStateOn.HostVersion
    leafs["query-interval"] = interfaceStateOn.QueryInterval
    leafs["query-timeout"] = interfaceStateOn.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOn.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOn.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOn.GroupJoins
    leafs["group-leaves"] = interfaceStateOn.GroupLeaves
    leafs["is-querier"] = interfaceStateOn.IsQuerier
    leafs["total-active-groups"] = interfaceStateOn.TotalActiveGroups
    leafs["robustness"] = interfaceStateOn.Robustness
    leafs["proxy-interface"] = interfaceStateOn.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOn.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOn.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOn.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOn.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOn.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOn.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOn.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOn.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOn.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOn.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOn.VrfId
    leafs["mte-vrf-id"] = interfaceStateOn.MteVrfId
    leafs["location"] = interfaceStateOn.Location
    leafs["mtu"] = interfaceStateOn.Mtu
    leafs["vrf-state"] = interfaceStateOn.VrfState
    leafs["is-configurationverify"] = interfaceStateOn.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOn.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOn.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOn.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOn.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOn.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOn.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOn.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOn.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOn.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOn.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOn.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOn.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOn.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOn.MteTupleCount
    return leafs
}

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetYangName() string { return "interface-state-on" }

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) SetParent(parent types.Entity) { interfaceStateOn.parent = parent }

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetParent() types.Entity { return interfaceStateOn.parent }

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetParentYangName() string { return "interface-state-ons" }

// Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetYangName() string { return "address" }

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetParentYangName() string { return "interface-state-on" }

// Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParentYangName() string { return "interface-state-on" }

// Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParentYangName() string { return "interface-state-on" }

// Mld_Standby_DefaultContext_DetailGroups
// IGMP Detail Group Database
type Mld_Standby_DefaultContext_DetailGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Mld_Standby_DefaultContext_DetailGroups_DetailGroup.
    DetailGroup []Mld_Standby_DefaultContext_DetailGroups_DetailGroup
}

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetFilter() yfilter.YFilter { return detailGroups.YFilter }

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) SetFilter(yf yfilter.YFilter) { detailGroups.YFilter = yf }

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetGoName(yname string) string {
    if yname == "detail-group" { return "DetailGroup" }
    return ""
}

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetSegmentPath() string {
    return "detail-groups"
}

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detail-group" {
        for _, c := range detailGroups.DetailGroup {
            if detailGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_DetailGroups_DetailGroup{}
        detailGroups.DetailGroup = append(detailGroups.DetailGroup, child)
        return &detailGroups.DetailGroup[len(detailGroups.DetailGroup)-1]
    }
    return nil
}

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range detailGroups.DetailGroup {
        children[detailGroups.DetailGroup[i].GetSegmentPath()] = &detailGroups.DetailGroup[i]
    }
    return children
}

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetYangName() string { return "detail-groups" }

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) SetParent(parent types.Entity) { detailGroups.parent = parent }

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetParent() types.Entity { return detailGroups.parent }

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source.
    Source []Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source
}

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetFilter() yfilter.YFilter { return detailGroup.YFilter }

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) SetFilter(yf yfilter.YFilter) { detailGroup.YFilter = yf }

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "is-router-exclude-mode" { return "IsRouterExcludeMode" }
    if yname == "is-host-exclude-mode" { return "IsHostExcludeMode" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "source" { return "Source" }
    return ""
}

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetSegmentPath() string {
    return "detail-group"
}

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &detailGroup.GroupInfo
    }
    if childYangName == "source" {
        for _, c := range detailGroup.Source {
            if detailGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source{}
        detailGroup.Source = append(detailGroup.Source, child)
        return &detailGroup.Source[len(detailGroup.Source)-1]
    }
    return nil
}

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &detailGroup.GroupInfo
    for i := range detailGroup.Source {
        children[detailGroup.Source[i].GetSegmentPath()] = &detailGroup.Source[i]
    }
    return children
}

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = detailGroup.GroupAddress
    leafs["interface-name"] = detailGroup.InterfaceName
    leafs["source-address"] = detailGroup.SourceAddress
    leafs["is-router-exclude-mode"] = detailGroup.IsRouterExcludeMode
    leafs["is-host-exclude-mode"] = detailGroup.IsHostExcludeMode
    return leafs
}

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetYangName() string { return "detail-group" }

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) SetParent(parent types.Entity) { detailGroup.parent = parent }

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetParent() types.Entity { return detailGroup.parent }

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetParentYangName() string { return "detail-groups" }

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetParentYangName() string { return "detail-group" }

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source
// List of sources
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-remote" { return "IsRemote" }
    if yname == "is-forward" { return "IsForward" }
    if yname == "is-we-report" { return "IsWeReport" }
    if yname == "flags" { return "Flags" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetSegmentPath() string {
    return "source"
}

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &source.SourceAddress
    }
    return nil
}

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &source.SourceAddress
    return children
}

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = source.Uptime
    leafs["expiration-time"] = source.ExpirationTime
    leafs["is-local"] = source.IsLocal
    leafs["is-remote"] = source.IsRemote
    leafs["is-forward"] = source.IsForward
    leafs["is-we-report"] = source.IsWeReport
    leafs["flags"] = source.Flags
    leafs["is-added"] = source.IsAdded
    return leafs
}

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetYangName() string { return "source" }

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetParent() types.Entity { return source.parent }

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetParentYangName() string { return "detail-group" }

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetParentYangName() string { return "source" }

// Mld_Standby_DefaultContext_NonActiveGroups
// IGMP Non-Active Groups Information
type Mld_Standby_DefaultContext_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetGoName(yname string) string {
    if yname == "non-active-groups" { return "NonActiveGroups" }
    return ""
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-active-groups" {
        for _, c := range nonActiveGroups.NonActiveGroups {
            if nonActiveGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups{}
        nonActiveGroups.NonActiveGroups = append(nonActiveGroups.NonActiveGroups, child)
        return &nonActiveGroups.NonActiveGroups[len(nonActiveGroups.NonActiveGroups)-1]
    }
    return nil
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nonActiveGroups.NonActiveGroups {
        children[nonActiveGroups.NonActiveGroups[i].GetSegmentPath()] = &nonActiveGroups.NonActiveGroups[i]
    }
    return children
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    if yname == "reason-for-non-activity" { return "ReasonForNonActivity" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address" {
        return &nonActiveGroups.GroupAddress
    }
    if childYangName == "source-address" {
        return &nonActiveGroups.SourceAddress
    }
    return nil
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address"] = &nonActiveGroups.GroupAddress
    children["source-address"] = &nonActiveGroups.SourceAddress
    return children
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface"] = nonActiveGroups.Interface
    leafs["reason-for-non-activity"] = nonActiveGroups.ReasonForNonActivity
    return leafs
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetParentYangName() string { return "non-active-groups" }

// Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetParentYangName() string { return "non-active-groups" }

// Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetParentYangName() string { return "non-active-groups" }

// Mld_Standby_DefaultContext_SsmMaps
// SSM Map Table
type Mld_Standby_DefaultContext_SsmMaps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Mld_Standby_DefaultContext_SsmMaps_SsmMap.
    SsmMap []Mld_Standby_DefaultContext_SsmMaps_SsmMap
}

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetFilter() yfilter.YFilter { return ssmMaps.YFilter }

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) SetFilter(yf yfilter.YFilter) { ssmMaps.YFilter = yf }

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetGoName(yname string) string {
    if yname == "ssm-map" { return "SsmMap" }
    return ""
}

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetSegmentPath() string {
    return "ssm-maps"
}

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map" {
        for _, c := range ssmMaps.SsmMap {
            if ssmMaps.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_SsmMaps_SsmMap{}
        ssmMaps.SsmMap = append(ssmMaps.SsmMap, child)
        return &ssmMaps.SsmMap[len(ssmMaps.SsmMap)-1]
    }
    return nil
}

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMaps.SsmMap {
        children[ssmMaps.SsmMap[i].GetSegmentPath()] = &ssmMaps.SsmMap[i]
    }
    return children
}

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetYangName() string { return "ssm-maps" }

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) SetParent(parent types.Entity) { ssmMaps.parent = parent }

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetParent() types.Entity { return ssmMaps.parent }

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_SsmMaps_SsmMap
// SSM Map information
type Mld_Standby_DefaultContext_SsmMaps_SsmMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetFilter() yfilter.YFilter { return ssmMap.YFilter }

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) SetFilter(yf yfilter.YFilter) { ssmMap.YFilter = yf }

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetSegmentPath() string {
    return "ssm-map"
}

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &ssmMap.GroupAddressXr
    }
    return nil
}

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &ssmMap.GroupAddressXr
    return children
}

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMap.SsmMapType
    leafs["group-address"] = ssmMap.GroupAddress
    leafs["map-type"] = ssmMap.MapType
    leafs["source-counts"] = ssmMap.SourceCounts
    return leafs
}

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetYangName() string { return "ssm-map" }

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) SetParent(parent types.Entity) { ssmMap.parent = parent }

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetParent() types.Entity { return ssmMap.parent }

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetParentYangName() string { return "ssm-maps" }

// Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetParentYangName() string { return "ssm-map" }

// Mld_Standby_DefaultContext_ExplicitGroups
// IGMP Explicit Group Database
type Mld_Standby_DefaultContext_ExplicitGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetFilter() yfilter.YFilter { return explicitGroups.YFilter }

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) SetFilter(yf yfilter.YFilter) { explicitGroups.YFilter = yf }

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetGoName(yname string) string {
    if yname == "explicit-group" { return "ExplicitGroup" }
    return ""
}

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetSegmentPath() string {
    return "explicit-groups"
}

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "explicit-group" {
        for _, c := range explicitGroups.ExplicitGroup {
            if explicitGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup{}
        explicitGroups.ExplicitGroup = append(explicitGroups.ExplicitGroup, child)
        return &explicitGroups.ExplicitGroup[len(explicitGroups.ExplicitGroup)-1]
    }
    return nil
}

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range explicitGroups.ExplicitGroup {
        children[explicitGroups.ExplicitGroup[i].GetSegmentPath()] = &explicitGroups.ExplicitGroup[i]
    }
    return children
}

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetYangName() string { return "explicit-groups" }

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) SetParent(parent types.Entity) { explicitGroups.parent = parent }

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetParent() types.Entity { return explicitGroups.parent }

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host.
    Host []Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetFilter() yfilter.YFilter { return explicitGroup.YFilter }

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) SetFilter(yf yfilter.YFilter) { explicitGroup.YFilter = yf }

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "include-hosts" { return "IncludeHosts" }
    if yname == "exclude-hosts" { return "ExcludeHosts" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "host" { return "Host" }
    return ""
}

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetSegmentPath() string {
    return "explicit-group"
}

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &explicitGroup.GroupInfo
    }
    if childYangName == "host" {
        for _, c := range explicitGroup.Host {
            if explicitGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host{}
        explicitGroup.Host = append(explicitGroup.Host, child)
        return &explicitGroup.Host[len(explicitGroup.Host)-1]
    }
    return nil
}

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &explicitGroup.GroupInfo
    for i := range explicitGroup.Host {
        children[explicitGroup.Host[i].GetSegmentPath()] = &explicitGroup.Host[i]
    }
    return children
}

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = explicitGroup.GroupAddress
    leafs["interface-name"] = explicitGroup.InterfaceName
    leafs["source-address"] = explicitGroup.SourceAddress
    leafs["include-hosts"] = explicitGroup.IncludeHosts
    leafs["exclude-hosts"] = explicitGroup.ExcludeHosts
    return leafs
}

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetYangName() string { return "explicit-group" }

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) SetParent(parent types.Entity) { explicitGroup.parent = parent }

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetParent() types.Entity { return explicitGroup.parent }

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetParentYangName() string { return "explicit-groups" }

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetParentYangName() string { return "explicit-group" }

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetFilter() yfilter.YFilter { return host.YFilter }

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) SetFilter(yf yfilter.YFilter) { host.YFilter = yf }

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "is-exclude" { return "IsExclude" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "source-count" { return "SourceCount" }
    if yname == "address" { return "Address" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetSegmentPath() string {
    return "host"
}

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &host.Address
    }
    if childYangName == "source-address" {
        for _, c := range host.SourceAddress {
            if host.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress{}
        host.SourceAddress = append(host.SourceAddress, child)
        return &host.SourceAddress[len(host.SourceAddress)-1]
    }
    return nil
}

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &host.Address
    for i := range host.SourceAddress {
        children[host.SourceAddress[i].GetSegmentPath()] = &host.SourceAddress[i]
    }
    return children
}

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = host.Uptime
    leafs["is-exclude"] = host.IsExclude
    leafs["expiration-time"] = host.ExpirationTime
    leafs["source-count"] = host.SourceCount
    return leafs
}

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetBundleName() string { return "cisco_ios_xr" }

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetYangName() string { return "host" }

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) SetParent(parent types.Entity) { host.parent = parent }

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetParent() types.Entity { return host.parent }

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetParentYangName() string { return "explicit-group" }

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetYangName() string { return "address" }

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetParentYangName() string { return "host" }

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParentYangName() string { return "host" }

// Mld_Standby_DefaultContext_InterfaceTable
// IGMP Interface specific Table
type Mld_Standby_DefaultContext_InterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_DefaultContext_InterfaceTable_Interface.
    Interface []Mld_Standby_DefaultContext_InterfaceTable_Interface
}

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetFilter() yfilter.YFilter { return interfaceTable.YFilter }

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) SetFilter(yf yfilter.YFilter) { interfaceTable.YFilter = yf }

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetSegmentPath() string {
    return "interface-table"
}

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaceTable.Interface {
            if interfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_InterfaceTable_Interface{}
        interfaceTable.Interface = append(interfaceTable.Interface, child)
        return &interfaceTable.Interface[len(interfaceTable.Interface)-1]
    }
    return nil
}

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceTable.Interface {
        children[interfaceTable.Interface[i].GetSegmentPath()] = &interfaceTable.Interface[i]
    }
    return children
}

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetYangName() string { return "interface-table" }

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) SetParent(parent types.Entity) { interfaceTable.parent = parent }

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetParent() types.Entity { return interfaceTable.parent }

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_InterfaceTable_Interface
// IGMP Interface
type Mld_Standby_DefaultContext_InterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_DefaultContext_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetParentYangName() string { return "interface-table" }

// Mld_Standby_DefaultContext_InterfaceTable_Interface_Address
// IP address
type Mld_Standby_DefaultContext_InterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjusts.YFilter }

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjusts.YFilter = yf }

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetGoName(yname string) string {
    if yname == "interface-unicast-qos-adjust" { return "InterfaceUnicastQosAdjust" }
    return ""
}

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetSegmentPath() string {
    return "interface-unicast-qos-adjusts"
}

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-unicast-qos-adjust" {
        for _, c := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
            if interfaceUnicastQosAdjusts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust{}
        interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust = append(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, child)
        return &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[len(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        children[interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i].GetSegmentPath()] = &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]
    }
    return children
}

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetYangName() string { return "interface-unicast-qos-adjusts" }

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) SetParent(parent types.Entity) { interfaceUnicastQosAdjusts.parent = parent }

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetParent() types.Entity { return interfaceUnicastQosAdjusts.parent }

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjust.YFilter }

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjust.YFilter = yf }

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-access" { return "IsVirtualAccess" }
    if yname == "rate" { return "Rate" }
    if yname == "rate-increments" { return "RateIncrements" }
    if yname == "rate-decrements" { return "RateDecrements" }
    if yname == "update" { return "Update" }
    return ""
}

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetSegmentPath() string {
    return "interface-unicast-qos-adjust" + "[interface-name='" + fmt.Sprintf("%v", interfaceUnicastQosAdjust.InterfaceName) + "']"
}

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update" {
        for _, c := range interfaceUnicastQosAdjust.Update {
            if interfaceUnicastQosAdjust.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update{}
        interfaceUnicastQosAdjust.Update = append(interfaceUnicastQosAdjust.Update, child)
        return &interfaceUnicastQosAdjust.Update[len(interfaceUnicastQosAdjust.Update)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjust.Update {
        children[interfaceUnicastQosAdjust.Update[i].GetSegmentPath()] = &interfaceUnicastQosAdjust.Update[i]
    }
    return children
}

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceUnicastQosAdjust.InterfaceName
    leafs["is-virtual-access"] = interfaceUnicastQosAdjust.IsVirtualAccess
    leafs["rate"] = interfaceUnicastQosAdjust.Rate
    leafs["rate-increments"] = interfaceUnicastQosAdjust.RateIncrements
    leafs["rate-decrements"] = interfaceUnicastQosAdjust.RateDecrements
    return leafs
}

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetYangName() string { return "interface-unicast-qos-adjust" }

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetParent(parent types.Entity) { interfaceUnicastQosAdjust.parent = parent }

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParent() types.Entity { return interfaceUnicastQosAdjust.parent }

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParentYangName() string { return "interface-unicast-qos-adjusts" }

// Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetFilter() yfilter.YFilter { return update.YFilter }

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetFilter(yf yfilter.YFilter) { update.YFilter = yf }

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetGoName(yname string) string {
    if yname == "is-add" { return "IsAdd" }
    if yname == "weight" { return "Weight" }
    if yname == "received-time" { return "ReceivedTime" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "group-address" { return "GroupAddress" }
    return ""
}

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetSegmentPath() string {
    return "update"
}

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &update.SourceAddress
    }
    if childYangName == "group-address" {
        return &update.GroupAddress
    }
    return nil
}

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &update.SourceAddress
    children["group-address"] = &update.GroupAddress
    return children
}

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-add"] = update.IsAdd
    leafs["weight"] = update.Weight
    leafs["received-time"] = update.ReceivedTime
    return leafs
}

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleName() string { return "cisco_ios_xr" }

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetYangName() string { return "update" }

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetParent(parent types.Entity) { update.parent = parent }

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParent() types.Entity { return update.parent }

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParentYangName() string { return "interface-unicast-qos-adjust" }

// Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParentYangName() string { return "update" }

// Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParentYangName() string { return "update" }

// Mld_Standby_DefaultContext_Ranges
// Range table
type Mld_Standby_DefaultContext_Ranges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Range information. The type is slice of
    // Mld_Standby_DefaultContext_Ranges_Range.
    Range []Mld_Standby_DefaultContext_Ranges_Range
}

func (ranges *Mld_Standby_DefaultContext_Ranges) GetFilter() yfilter.YFilter { return ranges.YFilter }

func (ranges *Mld_Standby_DefaultContext_Ranges) SetFilter(yf yfilter.YFilter) { ranges.YFilter = yf }

func (ranges *Mld_Standby_DefaultContext_Ranges) GetGoName(yname string) string {
    if yname == "range" { return "Range" }
    return ""
}

func (ranges *Mld_Standby_DefaultContext_Ranges) GetSegmentPath() string {
    return "ranges"
}

func (ranges *Mld_Standby_DefaultContext_Ranges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "range" {
        for _, c := range ranges.Range {
            if ranges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_Ranges_Range{}
        ranges.Range = append(ranges.Range, child)
        return &ranges.Range[len(ranges.Range)-1]
    }
    return nil
}

func (ranges *Mld_Standby_DefaultContext_Ranges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ranges.Range {
        children[ranges.Range[i].GetSegmentPath()] = &ranges.Range[i]
    }
    return children
}

func (ranges *Mld_Standby_DefaultContext_Ranges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ranges *Mld_Standby_DefaultContext_Ranges) GetBundleName() string { return "cisco_ios_xr" }

func (ranges *Mld_Standby_DefaultContext_Ranges) GetYangName() string { return "ranges" }

func (ranges *Mld_Standby_DefaultContext_Ranges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ranges *Mld_Standby_DefaultContext_Ranges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ranges *Mld_Standby_DefaultContext_Ranges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ranges *Mld_Standby_DefaultContext_Ranges) SetParent(parent types.Entity) { ranges.parent = parent }

func (ranges *Mld_Standby_DefaultContext_Ranges) GetParent() types.Entity { return ranges.parent }

func (ranges *Mld_Standby_DefaultContext_Ranges) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_Ranges_Range
// Range information
type Mld_Standby_DefaultContext_Ranges_Range struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: -2147483648..2147483647.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr
}

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Standby_DefaultContext_Ranges_Range) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "group-mask" { return "GroupMask" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "protocol" { return "Protocol" }
    if yname == "is-stale" { return "IsStale" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetSegmentPath() string {
    return "range"
}

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &self.GroupAddressXr
    }
    return nil
}

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &self.GroupAddressXr
    return children
}

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = self.GroupAddress
    leafs["group-mask"] = self.GroupMask
    leafs["prefix-length"] = self.PrefixLength
    leafs["protocol"] = self.Protocol
    leafs["is-stale"] = self.IsStale
    return leafs
}

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetYangName() string { return "range" }

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Standby_DefaultContext_Ranges_Range) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetParent() types.Entity { return self.parent }

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetParentYangName() string { return "ranges" }

// Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr
// Group address
type Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetParentYangName() string { return "range" }

// Mld_Standby_DefaultContext_IfrsInterfaces
// IGMP Interface specific
type Mld_Standby_DefaultContext_IfrsInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface.
    IfrsInterface []Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetFilter() yfilter.YFilter { return ifrsInterfaces.YFilter }

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) SetFilter(yf yfilter.YFilter) { ifrsInterfaces.YFilter = yf }

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetGoName(yname string) string {
    if yname == "ifrs-interface" { return "IfrsInterface" }
    return ""
}

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetSegmentPath() string {
    return "ifrs-interfaces"
}

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ifrs-interface" {
        for _, c := range ifrsInterfaces.IfrsInterface {
            if ifrsInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface{}
        ifrsInterfaces.IfrsInterface = append(ifrsInterfaces.IfrsInterface, child)
        return &ifrsInterfaces.IfrsInterface[len(ifrsInterfaces.IfrsInterface)-1]
    }
    return nil
}

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ifrsInterfaces.IfrsInterface {
        children[ifrsInterfaces.IfrsInterface[i].GetSegmentPath()] = &ifrsInterfaces.IfrsInterface[i]
    }
    return children
}

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetYangName() string { return "ifrs-interfaces" }

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) SetParent(parent types.Entity) { ifrsInterfaces.parent = parent }

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetParent() types.Entity { return ifrsInterfaces.parent }

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetFilter() yfilter.YFilter { return ifrsInterface.YFilter }

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) SetFilter(yf yfilter.YFilter) { ifrsInterface.YFilter = yf }

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "join-group-count" { return "JoinGroupCount" }
    if yname == "igmp-interface-entry" { return "IgmpInterfaceEntry" }
    return ""
}

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetSegmentPath() string {
    return "ifrs-interface" + "[interface-name='" + fmt.Sprintf("%v", ifrsInterface.InterfaceName) + "']"
}

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "igmp-interface-entry" {
        return &ifrsInterface.IgmpInterfaceEntry
    }
    return nil
}

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["igmp-interface-entry"] = &ifrsInterface.IgmpInterfaceEntry
    return children
}

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ifrsInterface.InterfaceName
    leafs["join-group-count"] = ifrsInterface.JoinGroupCount
    return leafs
}

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetYangName() string { return "ifrs-interface" }

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) SetParent(parent types.Entity) { ifrsInterface.parent = parent }

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetParent() types.Entity { return ifrsInterface.parent }

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetParentYangName() string { return "ifrs-interfaces" }

// Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetFilter() yfilter.YFilter { return igmpInterfaceEntry.YFilter }

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetFilter(yf yfilter.YFilter) { igmpInterfaceEntry.YFilter = yf }

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetSegmentPath() string {
    return "igmp-interface-entry"
}

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &igmpInterfaceEntry.Address
    }
    if childYangName == "querier-address" {
        return &igmpInterfaceEntry.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &igmpInterfaceEntry.SubscriberAddress
    }
    return nil
}

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &igmpInterfaceEntry.Address
    children["querier-address"] = &igmpInterfaceEntry.QuerierAddress
    children["subscriber-address"] = &igmpInterfaceEntry.SubscriberAddress
    return children
}

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = igmpInterfaceEntry.InterfaceNameXr
    leafs["state"] = igmpInterfaceEntry.State
    leafs["prefix-length"] = igmpInterfaceEntry.PrefixLength
    leafs["is-interface-up"] = igmpInterfaceEntry.IsInterfaceUp
    leafs["is-ip-enabled"] = igmpInterfaceEntry.IsIpEnabled
    leafs["is-router-enabled"] = igmpInterfaceEntry.IsRouterEnabled
    leafs["igmp-version"] = igmpInterfaceEntry.IgmpVersion
    leafs["host-version"] = igmpInterfaceEntry.HostVersion
    leafs["query-interval"] = igmpInterfaceEntry.QueryInterval
    leafs["query-timeout"] = igmpInterfaceEntry.QueryTimeout
    leafs["query-maximum-response-time"] = igmpInterfaceEntry.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = igmpInterfaceEntry.LastMemberQueryInterval
    leafs["group-joins"] = igmpInterfaceEntry.GroupJoins
    leafs["group-leaves"] = igmpInterfaceEntry.GroupLeaves
    leafs["is-querier"] = igmpInterfaceEntry.IsQuerier
    leafs["total-active-groups"] = igmpInterfaceEntry.TotalActiveGroups
    leafs["robustness"] = igmpInterfaceEntry.Robustness
    leafs["proxy-interface"] = igmpInterfaceEntry.ProxyInterface
    leafs["querier-uptime"] = igmpInterfaceEntry.QuerierUptime
    leafs["las-ll-registration-count"] = igmpInterfaceEntry.LasLlRegistrationCount
    leafs["las-get-address-count"] = igmpInterfaceEntry.LasGetAddressCount
    leafs["las-update-count"] = igmpInterfaceEntry.LasUpdateCount
    leafs["las-ll-remove-update-count"] = igmpInterfaceEntry.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = igmpInterfaceEntry.LasLlAddUpdateCount
    leafs["las-null-update-count"] = igmpInterfaceEntry.LasNullUpdateCount
    leafs["las-unregistration-count"] = igmpInterfaceEntry.LasUnregistrationCount
    leafs["is-las-request"] = igmpInterfaceEntry.IsLasRequest
    leafs["is-las-registered"] = igmpInterfaceEntry.IsLasRegistered
    leafs["vrf-id"] = igmpInterfaceEntry.VrfId
    leafs["mte-vrf-id"] = igmpInterfaceEntry.MteVrfId
    leafs["location"] = igmpInterfaceEntry.Location
    leafs["mtu"] = igmpInterfaceEntry.Mtu
    leafs["vrf-state"] = igmpInterfaceEntry.VrfState
    leafs["is-configurationverify"] = igmpInterfaceEntry.IsConfigurationverify
    leafs["configurationvrf-set"] = igmpInterfaceEntry.ConfigurationvrfSet
    leafs["configurationvrf-error"] = igmpInterfaceEntry.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = igmpInterfaceEntry.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = igmpInterfaceEntry.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = igmpInterfaceEntry.IsImStateRegistered
    leafs["is-subscriber"] = igmpInterfaceEntry.IsSubscriber
    leafs["subscriber-mode"] = igmpInterfaceEntry.SubscriberMode
    leafs["is-identity-present"] = igmpInterfaceEntry.IsIdentityPresent
    leafs["subscriber-id"] = igmpInterfaceEntry.SubscriberId
    leafs["parent-ifhandle"] = igmpInterfaceEntry.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = igmpInterfaceEntry.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = igmpInterfaceEntry.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = igmpInterfaceEntry.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = igmpInterfaceEntry.MteTupleCount
    return leafs
}

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleName() string { return "cisco_ios_xr" }

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetYangName() string { return "igmp-interface-entry" }

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetParent(parent types.Entity) { igmpInterfaceEntry.parent = parent }

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParent() types.Entity { return igmpInterfaceEntry.parent }

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParentYangName() string { return "ifrs-interface" }

// Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetYangName() string { return "address" }

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParentYangName() string { return "igmp-interface-entry" }

// Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Mld_Standby_DefaultContext_TrafficCounters
// IGMP Message Traffic Counters
type Mld_Standby_DefaultContext_TrafficCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetFilter() yfilter.YFilter { return trafficCounters.YFilter }

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) SetFilter(yf yfilter.YFilter) { trafficCounters.YFilter = yf }

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetGoName(yname string) string {
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "packets-in" { return "PacketsIn" }
    if yname == "packets-out" { return "PacketsOut" }
    if yname == "format-errors" { return "FormatErrors" }
    if yname == "packet-manager-input-errors" { return "PacketManagerInputErrors" }
    if yname == "packet-manager-output-errors" { return "PacketManagerOutputErrors" }
    if yname == "checksum-errors" { return "ChecksumErrors" }
    if yname == "receive-socket-errors" { return "ReceiveSocketErrors" }
    if yname == "socket-errors" { return "SocketErrors" }
    if yname == "bad-scope-errors" { return "BadScopeErrors" }
    if yname == "auxillary-data-length-errors" { return "AuxillaryDataLengthErrors" }
    if yname == "invalid-source-address-errors" { return "InvalidSourceAddressErrors" }
    if yname == "no-socket-connection" { return "NoSocketConnection" }
    if yname == "miscellaneous-errors" { return "MiscellaneousErrors" }
    if yname == "input-queries" { return "InputQueries" }
    if yname == "input-reports" { return "InputReports" }
    if yname == "input-leaves" { return "InputLeaves" }
    if yname == "input-mtrace" { return "InputMtrace" }
    if yname == "input-dvmrp" { return "InputDvmrp" }
    if yname == "input-pim" { return "InputPim" }
    if yname == "output-queries" { return "OutputQueries" }
    if yname == "output-reports" { return "OutputReports" }
    if yname == "output-leaves" { return "OutputLeaves" }
    if yname == "output-mtrace" { return "OutputMtrace" }
    if yname == "output-dvmrp" { return "OutputDvmrp" }
    if yname == "output-pim" { return "OutputPim" }
    if yname == "get-packet-failure" { return "GetPacketFailure" }
    if yname == "output-no-parent-interface-handle" { return "OutputNoParentInterfaceHandle" }
    if yname == "input-no-idb" { return "InputNoIdb" }
    if yname == "input-no-vrf-in-idb" { return "InputNoVrfInIdb" }
    if yname == "input-disabled-idb" { return "InputDisabledIdb" }
    if yname == "input-martian-address" { return "InputMartianAddress" }
    if yname == "input-no-assigned-vrf-id" { return "InputNoAssignedVrfId" }
    if yname == "input-no-vrf-mtrace" { return "InputNoVrfMtrace" }
    if yname == "input-no-platform-support-mtrace" { return "InputNoPlatformSupportMtrace" }
    return ""
}

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetSegmentPath() string {
    return "traffic-counters"
}

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["elapsed-time"] = trafficCounters.ElapsedTime
    leafs["packets-in"] = trafficCounters.PacketsIn
    leafs["packets-out"] = trafficCounters.PacketsOut
    leafs["format-errors"] = trafficCounters.FormatErrors
    leafs["packet-manager-input-errors"] = trafficCounters.PacketManagerInputErrors
    leafs["packet-manager-output-errors"] = trafficCounters.PacketManagerOutputErrors
    leafs["checksum-errors"] = trafficCounters.ChecksumErrors
    leafs["receive-socket-errors"] = trafficCounters.ReceiveSocketErrors
    leafs["socket-errors"] = trafficCounters.SocketErrors
    leafs["bad-scope-errors"] = trafficCounters.BadScopeErrors
    leafs["auxillary-data-length-errors"] = trafficCounters.AuxillaryDataLengthErrors
    leafs["invalid-source-address-errors"] = trafficCounters.InvalidSourceAddressErrors
    leafs["no-socket-connection"] = trafficCounters.NoSocketConnection
    leafs["miscellaneous-errors"] = trafficCounters.MiscellaneousErrors
    leafs["input-queries"] = trafficCounters.InputQueries
    leafs["input-reports"] = trafficCounters.InputReports
    leafs["input-leaves"] = trafficCounters.InputLeaves
    leafs["input-mtrace"] = trafficCounters.InputMtrace
    leafs["input-dvmrp"] = trafficCounters.InputDvmrp
    leafs["input-pim"] = trafficCounters.InputPim
    leafs["output-queries"] = trafficCounters.OutputQueries
    leafs["output-reports"] = trafficCounters.OutputReports
    leafs["output-leaves"] = trafficCounters.OutputLeaves
    leafs["output-mtrace"] = trafficCounters.OutputMtrace
    leafs["output-dvmrp"] = trafficCounters.OutputDvmrp
    leafs["output-pim"] = trafficCounters.OutputPim
    leafs["get-packet-failure"] = trafficCounters.GetPacketFailure
    leafs["output-no-parent-interface-handle"] = trafficCounters.OutputNoParentInterfaceHandle
    leafs["input-no-idb"] = trafficCounters.InputNoIdb
    leafs["input-no-vrf-in-idb"] = trafficCounters.InputNoVrfInIdb
    leafs["input-disabled-idb"] = trafficCounters.InputDisabledIdb
    leafs["input-martian-address"] = trafficCounters.InputMartianAddress
    leafs["input-no-assigned-vrf-id"] = trafficCounters.InputNoAssignedVrfId
    leafs["input-no-vrf-mtrace"] = trafficCounters.InputNoVrfMtrace
    leafs["input-no-platform-support-mtrace"] = trafficCounters.InputNoPlatformSupportMtrace
    return leafs
}

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetBundleName() string { return "cisco_ios_xr" }

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetYangName() string { return "traffic-counters" }

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) SetParent(parent types.Entity) { trafficCounters.parent = parent }

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetParent() types.Entity { return trafficCounters.parent }

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_Groups
// IGMP Group Database Table
type Mld_Standby_DefaultContext_Groups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Mld_Standby_DefaultContext_Groups_Group.
    Group []Mld_Standby_DefaultContext_Groups_Group
}

func (groups *Mld_Standby_DefaultContext_Groups) GetFilter() yfilter.YFilter { return groups.YFilter }

func (groups *Mld_Standby_DefaultContext_Groups) SetFilter(yf yfilter.YFilter) { groups.YFilter = yf }

func (groups *Mld_Standby_DefaultContext_Groups) GetGoName(yname string) string {
    if yname == "group" { return "Group" }
    return ""
}

func (groups *Mld_Standby_DefaultContext_Groups) GetSegmentPath() string {
    return "groups"
}

func (groups *Mld_Standby_DefaultContext_Groups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group" {
        for _, c := range groups.Group {
            if groups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_Groups_Group{}
        groups.Group = append(groups.Group, child)
        return &groups.Group[len(groups.Group)-1]
    }
    return nil
}

func (groups *Mld_Standby_DefaultContext_Groups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range groups.Group {
        children[groups.Group[i].GetSegmentPath()] = &groups.Group[i]
    }
    return children
}

func (groups *Mld_Standby_DefaultContext_Groups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (groups *Mld_Standby_DefaultContext_Groups) GetBundleName() string { return "cisco_ios_xr" }

func (groups *Mld_Standby_DefaultContext_Groups) GetYangName() string { return "groups" }

func (groups *Mld_Standby_DefaultContext_Groups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groups *Mld_Standby_DefaultContext_Groups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groups *Mld_Standby_DefaultContext_Groups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groups *Mld_Standby_DefaultContext_Groups) SetParent(parent types.Entity) { groups.parent = parent }

func (groups *Mld_Standby_DefaultContext_Groups) GetParent() types.Entity { return groups.parent }

func (groups *Mld_Standby_DefaultContext_Groups) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_Groups_Group
// IGMP Group Entry Information
type Mld_Standby_DefaultContext_Groups_Group struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Standby_DefaultContext_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Mld_Standby_DefaultContext_Groups_Group_SourceAddress
}

func (group *Mld_Standby_DefaultContext_Groups_Group) GetFilter() yfilter.YFilter { return group.YFilter }

func (group *Mld_Standby_DefaultContext_Groups_Group) SetFilter(yf yfilter.YFilter) { group.YFilter = yf }

func (group *Mld_Standby_DefaultContext_Groups_Group) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (group *Mld_Standby_DefaultContext_Groups_Group) GetSegmentPath() string {
    return "group"
}

func (group *Mld_Standby_DefaultContext_Groups_Group) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &group.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &group.LastReporter
    }
    if childYangName == "source-address" {
        return &group.SourceAddress
    }
    return nil
}

func (group *Mld_Standby_DefaultContext_Groups_Group) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &group.GroupAddressXr
    children["last-reporter"] = &group.LastReporter
    children["source-address"] = &group.SourceAddress
    return children
}

func (group *Mld_Standby_DefaultContext_Groups_Group) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = group.GroupAddress
    leafs["interface-name"] = group.InterfaceName
    leafs["interface-name-xr"] = group.InterfaceNameXr
    leafs["uptime"] = group.Uptime
    leafs["expiration-time"] = group.ExpirationTime
    leafs["explicit-tracking-enabled"] = group.ExplicitTrackingEnabled
    leafs["is-self-join"] = group.IsSelfJoin
    leafs["row-status"] = group.RowStatus
    leafs["is-low-memory"] = group.IsLowMemory
    leafs["router-filter-mode"] = group.RouterFilterMode
    leafs["older-host-version1-timer"] = group.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = group.OlderHostVersion2Timer
    leafs["is-added"] = group.IsAdded
    leafs["is-suppressed"] = group.IsSuppressed
    return leafs
}

func (group *Mld_Standby_DefaultContext_Groups_Group) GetBundleName() string { return "cisco_ios_xr" }

func (group *Mld_Standby_DefaultContext_Groups_Group) GetYangName() string { return "group" }

func (group *Mld_Standby_DefaultContext_Groups_Group) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (group *Mld_Standby_DefaultContext_Groups_Group) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (group *Mld_Standby_DefaultContext_Groups_Group) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (group *Mld_Standby_DefaultContext_Groups_Group) SetParent(parent types.Entity) { group.parent = parent }

func (group *Mld_Standby_DefaultContext_Groups_Group) GetParent() types.Entity { return group.parent }

func (group *Mld_Standby_DefaultContext_Groups_Group) GetParentYangName() string { return "groups" }

// Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr
// Group Address
type Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetParentYangName() string { return "group" }

// Mld_Standby_DefaultContext_Groups_Group_LastReporter
// Last reporter address
type Mld_Standby_DefaultContext_Groups_Group_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetParentYangName() string { return "group" }

// Mld_Standby_DefaultContext_Groups_Group_SourceAddress
// Source Address
type Mld_Standby_DefaultContext_Groups_Group_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetParentYangName() string { return "group" }

// Mld_Standby_DefaultContext_GroupSummary
// IGMP Groups Summary
type Mld_Standby_DefaultContext_GroupSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetFilter() yfilter.YFilter { return groupSummary.YFilter }

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) SetFilter(yf yfilter.YFilter) { groupSummary.YFilter = yf }

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetGoName(yname string) string {
    if yname == "groutes" { return "Groutes" }
    if yname == "sg-routes" { return "SgRoutes" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    return ""
}

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetSegmentPath() string {
    return "group-summary"
}

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["groutes"] = groupSummary.Groutes
    leafs["sg-routes"] = groupSummary.SgRoutes
    leafs["group-count"] = groupSummary.GroupCount
    leafs["is-low-memory"] = groupSummary.IsLowMemory
    return leafs
}

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetBundleName() string { return "cisco_ios_xr" }

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetYangName() string { return "group-summary" }

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) SetParent(parent types.Entity) { groupSummary.parent = parent }

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetParent() types.Entity { return groupSummary.parent }

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Mld_Standby_DefaultContext_IfrsInterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetFilter() yfilter.YFilter { return ifrsInterfaceSummary.YFilter }

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) SetFilter(yf yfilter.YFilter) { ifrsInterfaceSummary.YFilter = yf }

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-count" { return "InterfaceCount" }
    if yname == "configuration-count" { return "ConfigurationCount" }
    return ""
}

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetSegmentPath() string {
    return "ifrs-interface-summary"
}

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-count"] = ifrsInterfaceSummary.InterfaceCount
    leafs["configuration-count"] = ifrsInterfaceSummary.ConfigurationCount
    return leafs
}

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetYangName() string { return "ifrs-interface-summary" }

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) SetParent(parent types.Entity) { ifrsInterfaceSummary.parent = parent }

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetParent() types.Entity { return ifrsInterfaceSummary.parent }

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_GlobalInterfaceTable
// IGMP Global Interface 
type Mld_Standby_DefaultContext_GlobalInterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface.
    Interface []Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetFilter() yfilter.YFilter { return globalInterfaceTable.YFilter }

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) SetFilter(yf yfilter.YFilter) { globalInterfaceTable.YFilter = yf }

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetSegmentPath() string {
    return "global-interface-table"
}

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range globalInterfaceTable.Interface {
            if globalInterfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface{}
        globalInterfaceTable.Interface = append(globalInterfaceTable.Interface, child)
        return &globalInterfaceTable.Interface[len(globalInterfaceTable.Interface)-1]
    }
    return nil
}

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalInterfaceTable.Interface {
        children[globalInterfaceTable.Interface[i].GetSegmentPath()] = &globalInterfaceTable.Interface[i]
    }
    return children
}

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetYangName() string { return "global-interface-table" }

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) SetParent(parent types.Entity) { globalInterfaceTable.parent = parent }

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetParent() types.Entity { return globalInterfaceTable.parent }

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface
// IGMP Interface
type Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetParentYangName() string { return "global-interface-table" }

// Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address
// IP address
type Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Mld_Standby_DefaultContext_SsmMapDetails
// SSM Map Detail
type Mld_Standby_DefaultContext_SsmMapDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetFilter() yfilter.YFilter { return ssmMapDetails.YFilter }

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) SetFilter(yf yfilter.YFilter) { ssmMapDetails.YFilter = yf }

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetGoName(yname string) string {
    if yname == "ssm-map-detail" { return "SsmMapDetail" }
    return ""
}

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetSegmentPath() string {
    return "ssm-map-details"
}

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map-detail" {
        for _, c := range ssmMapDetails.SsmMapDetail {
            if ssmMapDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail{}
        ssmMapDetails.SsmMapDetail = append(ssmMapDetails.SsmMapDetail, child)
        return &ssmMapDetails.SsmMapDetail[len(ssmMapDetails.SsmMapDetail)-1]
    }
    return nil
}

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMapDetails.SsmMapDetail {
        children[ssmMapDetails.SsmMapDetail[i].GetSegmentPath()] = &ssmMapDetails.SsmMapDetail[i]
    }
    return children
}

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetYangName() string { return "ssm-map-details" }

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) SetParent(parent types.Entity) { ssmMapDetails.parent = parent }

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetParent() types.Entity { return ssmMapDetails.parent }

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources.
    Sources []Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetFilter() yfilter.YFilter { return ssmMapDetail.YFilter }

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) SetFilter(yf yfilter.YFilter) { ssmMapDetail.YFilter = yf }

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "response-pending" { return "ResponsePending" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "map-info" { return "MapInfo" }
    if yname == "sources" { return "Sources" }
    return ""
}

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetSegmentPath() string {
    return "ssm-map-detail"
}

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "map-info" {
        return &ssmMapDetail.MapInfo
    }
    if childYangName == "sources" {
        for _, c := range ssmMapDetail.Sources {
            if ssmMapDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources{}
        ssmMapDetail.Sources = append(ssmMapDetail.Sources, child)
        return &ssmMapDetail.Sources[len(ssmMapDetail.Sources)-1]
    }
    return nil
}

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["map-info"] = &ssmMapDetail.MapInfo
    for i := range ssmMapDetail.Sources {
        children[ssmMapDetail.Sources[i].GetSegmentPath()] = &ssmMapDetail.Sources[i]
    }
    return children
}

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMapDetail.SsmMapType
    leafs["group-address"] = ssmMapDetail.GroupAddress
    leafs["expiration-time"] = ssmMapDetail.ExpirationTime
    leafs["response-pending"] = ssmMapDetail.ResponsePending
    leafs["query-interval"] = ssmMapDetail.QueryInterval
    leafs["elapsed-time"] = ssmMapDetail.ElapsedTime
    return leafs
}

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetYangName() string { return "ssm-map-detail" }

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) SetParent(parent types.Entity) { ssmMapDetail.parent = parent }

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetParent() types.Entity { return ssmMapDetail.parent }

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetParentYangName() string { return "ssm-map-details" }

// Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetFilter() yfilter.YFilter { return mapInfo.YFilter }

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) SetFilter(yf yfilter.YFilter) { mapInfo.YFilter = yf }

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetGoName(yname string) string {
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetSegmentPath() string {
    return "map-info"
}

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &mapInfo.GroupAddressXr
    }
    return nil
}

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &mapInfo.GroupAddressXr
    return children
}

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["map-type"] = mapInfo.MapType
    leafs["source-counts"] = mapInfo.SourceCounts
    return leafs
}

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleName() string { return "cisco_ios_xr" }

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetYangName() string { return "map-info" }

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) SetParent(parent types.Entity) { mapInfo.parent = parent }

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetParent() types.Entity { return mapInfo.parent }

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetParentYangName() string { return "ssm-map-detail" }

// Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParentYangName() string { return "map-info" }

// Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetFilter() yfilter.YFilter { return sources.YFilter }

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) SetFilter(yf yfilter.YFilter) { sources.YFilter = yf }

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetSegmentPath() string {
    return "sources"
}

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sources.AfName
    leafs["ipv4-address"] = sources.Ipv4Address
    leafs["ipv6-address"] = sources.Ipv6Address
    return leafs
}

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetBundleName() string { return "cisco_ios_xr" }

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetYangName() string { return "sources" }

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) SetParent(parent types.Entity) { sources.parent = parent }

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetParent() types.Entity { return sources.parent }

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetParentYangName() string { return "ssm-map-detail" }

// Mld_Standby_DefaultContext_InterfaceStateOffs
// IGMP Interface state off
type Mld_Standby_DefaultContext_InterfaceStateOffs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetFilter() yfilter.YFilter { return interfaceStateOffs.YFilter }

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) SetFilter(yf yfilter.YFilter) { interfaceStateOffs.YFilter = yf }

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetGoName(yname string) string {
    if yname == "interface-state-off" { return "InterfaceStateOff" }
    return ""
}

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetSegmentPath() string {
    return "interface-state-offs"
}

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-off" {
        for _, c := range interfaceStateOffs.InterfaceStateOff {
            if interfaceStateOffs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff{}
        interfaceStateOffs.InterfaceStateOff = append(interfaceStateOffs.InterfaceStateOff, child)
        return &interfaceStateOffs.InterfaceStateOff[len(interfaceStateOffs.InterfaceStateOff)-1]
    }
    return nil
}

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOffs.InterfaceStateOff {
        children[interfaceStateOffs.InterfaceStateOff[i].GetSegmentPath()] = &interfaceStateOffs.InterfaceStateOff[i]
    }
    return children
}

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetYangName() string { return "interface-state-offs" }

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) SetParent(parent types.Entity) { interfaceStateOffs.parent = parent }

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetParent() types.Entity { return interfaceStateOffs.parent }

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetParentYangName() string { return "default-context" }

// Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetFilter() yfilter.YFilter { return interfaceStateOff.YFilter }

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) SetFilter(yf yfilter.YFilter) { interfaceStateOff.YFilter = yf }

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetSegmentPath() string {
    return "interface-state-off" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOff.InterfaceName) + "']"
}

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOff.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOff.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOff.SubscriberAddress
    }
    return nil
}

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOff.Address
    children["querier-address"] = &interfaceStateOff.QuerierAddress
    children["subscriber-address"] = &interfaceStateOff.SubscriberAddress
    return children
}

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOff.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOff.InterfaceNameXr
    leafs["state"] = interfaceStateOff.State
    leafs["prefix-length"] = interfaceStateOff.PrefixLength
    leafs["is-interface-up"] = interfaceStateOff.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOff.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOff.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOff.IgmpVersion
    leafs["host-version"] = interfaceStateOff.HostVersion
    leafs["query-interval"] = interfaceStateOff.QueryInterval
    leafs["query-timeout"] = interfaceStateOff.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOff.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOff.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOff.GroupJoins
    leafs["group-leaves"] = interfaceStateOff.GroupLeaves
    leafs["is-querier"] = interfaceStateOff.IsQuerier
    leafs["total-active-groups"] = interfaceStateOff.TotalActiveGroups
    leafs["robustness"] = interfaceStateOff.Robustness
    leafs["proxy-interface"] = interfaceStateOff.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOff.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOff.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOff.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOff.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOff.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOff.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOff.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOff.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOff.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOff.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOff.VrfId
    leafs["mte-vrf-id"] = interfaceStateOff.MteVrfId
    leafs["location"] = interfaceStateOff.Location
    leafs["mtu"] = interfaceStateOff.Mtu
    leafs["vrf-state"] = interfaceStateOff.VrfState
    leafs["is-configurationverify"] = interfaceStateOff.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOff.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOff.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOff.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOff.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOff.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOff.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOff.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOff.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOff.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOff.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOff.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOff.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOff.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOff.MteTupleCount
    return leafs
}

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetYangName() string { return "interface-state-off" }

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) SetParent(parent types.Entity) { interfaceStateOff.parent = parent }

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetParent() types.Entity { return interfaceStateOff.parent }

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetParentYangName() string { return "interface-state-offs" }

// Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetYangName() string { return "address" }

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetParentYangName() string { return "interface-state-off" }

// Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParentYangName() string { return "interface-state-off" }

// Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParentYangName() string { return "interface-state-off" }

// Mld_Active
// Active Process
type Mld_Active struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF Table.
    Vrfs Mld_Active_Vrfs

    // Process.
    Process Mld_Active_Process

    // Default Context.
    DefaultContext Mld_Active_DefaultContext
}

func (active *Mld_Active) GetFilter() yfilter.YFilter { return active.YFilter }

func (active *Mld_Active) SetFilter(yf yfilter.YFilter) { active.YFilter = yf }

func (active *Mld_Active) GetGoName(yname string) string {
    if yname == "vrfs" { return "Vrfs" }
    if yname == "process" { return "Process" }
    if yname == "default-context" { return "DefaultContext" }
    return ""
}

func (active *Mld_Active) GetSegmentPath() string {
    return "active"
}

func (active *Mld_Active) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrfs" {
        return &active.Vrfs
    }
    if childYangName == "process" {
        return &active.Process
    }
    if childYangName == "default-context" {
        return &active.DefaultContext
    }
    return nil
}

func (active *Mld_Active) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vrfs"] = &active.Vrfs
    children["process"] = &active.Process
    children["default-context"] = &active.DefaultContext
    return children
}

func (active *Mld_Active) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (active *Mld_Active) GetBundleName() string { return "cisco_ios_xr" }

func (active *Mld_Active) GetYangName() string { return "active" }

func (active *Mld_Active) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (active *Mld_Active) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (active *Mld_Active) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (active *Mld_Active) SetParent(parent types.Entity) { active.parent = parent }

func (active *Mld_Active) GetParent() types.Entity { return active.parent }

func (active *Mld_Active) GetParentYangName() string { return "mld" }

// Mld_Active_Vrfs
// VRF Table
type Mld_Active_Vrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table Names. The type is slice of Mld_Active_Vrfs_Vrf.
    Vrf []Mld_Active_Vrfs_Vrf
}

func (vrfs *Mld_Active_Vrfs) GetFilter() yfilter.YFilter { return vrfs.YFilter }

func (vrfs *Mld_Active_Vrfs) SetFilter(yf yfilter.YFilter) { vrfs.YFilter = yf }

func (vrfs *Mld_Active_Vrfs) GetGoName(yname string) string {
    if yname == "vrf" { return "Vrf" }
    return ""
}

func (vrfs *Mld_Active_Vrfs) GetSegmentPath() string {
    return "vrfs"
}

func (vrfs *Mld_Active_Vrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf" {
        for _, c := range vrfs.Vrf {
            if vrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf{}
        vrfs.Vrf = append(vrfs.Vrf, child)
        return &vrfs.Vrf[len(vrfs.Vrf)-1]
    }
    return nil
}

func (vrfs *Mld_Active_Vrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfs.Vrf {
        children[vrfs.Vrf[i].GetSegmentPath()] = &vrfs.Vrf[i]
    }
    return children
}

func (vrfs *Mld_Active_Vrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfs *Mld_Active_Vrfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfs *Mld_Active_Vrfs) GetYangName() string { return "vrfs" }

func (vrfs *Mld_Active_Vrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfs *Mld_Active_Vrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfs *Mld_Active_Vrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfs *Mld_Active_Vrfs) SetParent(parent types.Entity) { vrfs.parent = parent }

func (vrfs *Mld_Active_Vrfs) GetParent() types.Entity { return vrfs.parent }

func (vrfs *Mld_Active_Vrfs) GetParentYangName() string { return "active" }

// Mld_Active_Vrfs_Vrf
// VRF table Names
type Mld_Active_Vrfs_Vrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with length: 1..32.
    VrfName interface{}

    // IGMP Summary Information.
    Summary Mld_Active_Vrfs_Vrf_Summary

    // IGMP Interface state on.
    InterfaceStateOns Mld_Active_Vrfs_Vrf_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Mld_Active_Vrfs_Vrf_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Mld_Active_Vrfs_Vrf_NonActiveGroups

    // SSM Map Table.
    SsmMaps Mld_Active_Vrfs_Vrf_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Mld_Active_Vrfs_Vrf_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Mld_Active_Vrfs_Vrf_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Mld_Active_Vrfs_Vrf_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Mld_Active_Vrfs_Vrf_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Mld_Active_Vrfs_Vrf_TrafficCounters

    // IGMP Group Database Table.
    Groups Mld_Active_Vrfs_Vrf_Groups

    // IGMP Groups Summary.
    GroupSummary Mld_Active_Vrfs_Vrf_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Mld_Active_Vrfs_Vrf_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Mld_Active_Vrfs_Vrf_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Mld_Active_Vrfs_Vrf_InterfaceStateOffs
}

func (vrf *Mld_Active_Vrfs_Vrf) GetFilter() yfilter.YFilter { return vrf.YFilter }

func (vrf *Mld_Active_Vrfs_Vrf) SetFilter(yf yfilter.YFilter) { vrf.YFilter = yf }

func (vrf *Mld_Active_Vrfs_Vrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "summary" { return "Summary" }
    if yname == "interface-state-ons" { return "InterfaceStateOns" }
    if yname == "detail-groups" { return "DetailGroups" }
    if yname == "non-active-groups" { return "NonActiveGroups" }
    if yname == "ssm-maps" { return "SsmMaps" }
    if yname == "explicit-groups" { return "ExplicitGroups" }
    if yname == "interface-table" { return "InterfaceTable" }
    if yname == "interface-unicast-qos-adjusts" { return "InterfaceUnicastQosAdjusts" }
    if yname == "ranges" { return "Ranges" }
    if yname == "ifrs-interfaces" { return "IfrsInterfaces" }
    if yname == "traffic-counters" { return "TrafficCounters" }
    if yname == "groups" { return "Groups" }
    if yname == "group-summary" { return "GroupSummary" }
    if yname == "ifrs-interface-summary" { return "IfrsInterfaceSummary" }
    if yname == "global-interface-table" { return "GlobalInterfaceTable" }
    if yname == "ssm-map-details" { return "SsmMapDetails" }
    if yname == "interface-state-offs" { return "InterfaceStateOffs" }
    return ""
}

func (vrf *Mld_Active_Vrfs_Vrf) GetSegmentPath() string {
    return "vrf" + "[vrf-name='" + fmt.Sprintf("%v", vrf.VrfName) + "']"
}

func (vrf *Mld_Active_Vrfs_Vrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &vrf.Summary
    }
    if childYangName == "interface-state-ons" {
        return &vrf.InterfaceStateOns
    }
    if childYangName == "detail-groups" {
        return &vrf.DetailGroups
    }
    if childYangName == "non-active-groups" {
        return &vrf.NonActiveGroups
    }
    if childYangName == "ssm-maps" {
        return &vrf.SsmMaps
    }
    if childYangName == "explicit-groups" {
        return &vrf.ExplicitGroups
    }
    if childYangName == "interface-table" {
        return &vrf.InterfaceTable
    }
    if childYangName == "interface-unicast-qos-adjusts" {
        return &vrf.InterfaceUnicastQosAdjusts
    }
    if childYangName == "ranges" {
        return &vrf.Ranges
    }
    if childYangName == "ifrs-interfaces" {
        return &vrf.IfrsInterfaces
    }
    if childYangName == "traffic-counters" {
        return &vrf.TrafficCounters
    }
    if childYangName == "groups" {
        return &vrf.Groups
    }
    if childYangName == "group-summary" {
        return &vrf.GroupSummary
    }
    if childYangName == "ifrs-interface-summary" {
        return &vrf.IfrsInterfaceSummary
    }
    if childYangName == "global-interface-table" {
        return &vrf.GlobalInterfaceTable
    }
    if childYangName == "ssm-map-details" {
        return &vrf.SsmMapDetails
    }
    if childYangName == "interface-state-offs" {
        return &vrf.InterfaceStateOffs
    }
    return nil
}

func (vrf *Mld_Active_Vrfs_Vrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &vrf.Summary
    children["interface-state-ons"] = &vrf.InterfaceStateOns
    children["detail-groups"] = &vrf.DetailGroups
    children["non-active-groups"] = &vrf.NonActiveGroups
    children["ssm-maps"] = &vrf.SsmMaps
    children["explicit-groups"] = &vrf.ExplicitGroups
    children["interface-table"] = &vrf.InterfaceTable
    children["interface-unicast-qos-adjusts"] = &vrf.InterfaceUnicastQosAdjusts
    children["ranges"] = &vrf.Ranges
    children["ifrs-interfaces"] = &vrf.IfrsInterfaces
    children["traffic-counters"] = &vrf.TrafficCounters
    children["groups"] = &vrf.Groups
    children["group-summary"] = &vrf.GroupSummary
    children["ifrs-interface-summary"] = &vrf.IfrsInterfaceSummary
    children["global-interface-table"] = &vrf.GlobalInterfaceTable
    children["ssm-map-details"] = &vrf.SsmMapDetails
    children["interface-state-offs"] = &vrf.InterfaceStateOffs
    return children
}

func (vrf *Mld_Active_Vrfs_Vrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = vrf.VrfName
    return leafs
}

func (vrf *Mld_Active_Vrfs_Vrf) GetBundleName() string { return "cisco_ios_xr" }

func (vrf *Mld_Active_Vrfs_Vrf) GetYangName() string { return "vrf" }

func (vrf *Mld_Active_Vrfs_Vrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrf *Mld_Active_Vrfs_Vrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrf *Mld_Active_Vrfs_Vrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrf *Mld_Active_Vrfs_Vrf) SetParent(parent types.Entity) { vrf.parent = parent }

func (vrf *Mld_Active_Vrfs_Vrf) GetParent() types.Entity { return vrf.parent }

func (vrf *Mld_Active_Vrfs_Vrf) GetParentYangName() string { return "vrfs" }

// Mld_Active_Vrfs_Vrf_Summary
// IGMP Summary Information
type Mld_Active_Vrfs_Vrf_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Mld_Active_Vrfs_Vrf_Summary_Interface.
    Interface []Mld_Active_Vrfs_Vrf_Summary_Interface
}

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Mld_Active_Vrfs_Vrf_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetGoName(yname string) string {
    if yname == "robustness" { return "Robustness" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-disabled" { return "IsDisabled" }
    if yname == "supported-interfaces" { return "SupportedInterfaces" }
    if yname == "unsupported-interfaces" { return "UnsupportedInterfaces" }
    if yname == "enabled-interface-count" { return "EnabledInterfaceCount" }
    if yname == "disabled-interface-count" { return "DisabledInterfaceCount" }
    if yname == "tunnel-mte-config-count" { return "TunnelMteConfigCount" }
    if yname == "node-low-memory" { return "NodeLowMemory" }
    if yname == "interface" { return "Interface" }
    return ""
}

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range summary.Interface {
            if summary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_Summary_Interface{}
        summary.Interface = append(summary.Interface, child)
        return &summary.Interface[len(summary.Interface)-1]
    }
    return nil
}

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summary.Interface {
        children[summary.Interface[i].GetSegmentPath()] = &summary.Interface[i]
    }
    return children
}

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["robustness"] = summary.Robustness
    leafs["group-limit"] = summary.GroupLimit
    leafs["group-count"] = summary.GroupCount
    leafs["is-disabled"] = summary.IsDisabled
    leafs["supported-interfaces"] = summary.SupportedInterfaces
    leafs["unsupported-interfaces"] = summary.UnsupportedInterfaces
    leafs["enabled-interface-count"] = summary.EnabledInterfaceCount
    leafs["disabled-interface-count"] = summary.DisabledInterfaceCount
    leafs["tunnel-mte-config-count"] = summary.TunnelMteConfigCount
    leafs["node-low-memory"] = summary.NodeLowMemory
    return leafs
}

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetYangName() string { return "summary" }

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Mld_Active_Vrfs_Vrf_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Mld_Active_Vrfs_Vrf_Summary_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "on-off" { return "OnOff" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    return ""
}

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetSegmentPath() string {
    return "interface"
}

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["group-limit"] = self.GroupLimit
    leafs["group-count"] = self.GroupCount
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["on-off"] = self.OnOff
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    return leafs
}

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetYangName() string { return "interface" }

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetParent() types.Entity { return self.parent }

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetParentYangName() string { return "summary" }

// Mld_Active_Vrfs_Vrf_InterfaceStateOns
// IGMP Interface state on
type Mld_Active_Vrfs_Vrf_InterfaceStateOns struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetFilter() yfilter.YFilter { return interfaceStateOns.YFilter }

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) SetFilter(yf yfilter.YFilter) { interfaceStateOns.YFilter = yf }

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetGoName(yname string) string {
    if yname == "interface-state-on" { return "InterfaceStateOn" }
    return ""
}

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetSegmentPath() string {
    return "interface-state-ons"
}

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-on" {
        for _, c := range interfaceStateOns.InterfaceStateOn {
            if interfaceStateOns.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn{}
        interfaceStateOns.InterfaceStateOn = append(interfaceStateOns.InterfaceStateOn, child)
        return &interfaceStateOns.InterfaceStateOn[len(interfaceStateOns.InterfaceStateOn)-1]
    }
    return nil
}

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOns.InterfaceStateOn {
        children[interfaceStateOns.InterfaceStateOn[i].GetSegmentPath()] = &interfaceStateOns.InterfaceStateOn[i]
    }
    return children
}

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetYangName() string { return "interface-state-ons" }

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) SetParent(parent types.Entity) { interfaceStateOns.parent = parent }

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetParent() types.Entity { return interfaceStateOns.parent }

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetFilter() yfilter.YFilter { return interfaceStateOn.YFilter }

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) SetFilter(yf yfilter.YFilter) { interfaceStateOn.YFilter = yf }

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetSegmentPath() string {
    return "interface-state-on" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOn.InterfaceName) + "']"
}

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOn.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOn.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOn.SubscriberAddress
    }
    return nil
}

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOn.Address
    children["querier-address"] = &interfaceStateOn.QuerierAddress
    children["subscriber-address"] = &interfaceStateOn.SubscriberAddress
    return children
}

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOn.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOn.InterfaceNameXr
    leafs["state"] = interfaceStateOn.State
    leafs["prefix-length"] = interfaceStateOn.PrefixLength
    leafs["is-interface-up"] = interfaceStateOn.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOn.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOn.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOn.IgmpVersion
    leafs["host-version"] = interfaceStateOn.HostVersion
    leafs["query-interval"] = interfaceStateOn.QueryInterval
    leafs["query-timeout"] = interfaceStateOn.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOn.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOn.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOn.GroupJoins
    leafs["group-leaves"] = interfaceStateOn.GroupLeaves
    leafs["is-querier"] = interfaceStateOn.IsQuerier
    leafs["total-active-groups"] = interfaceStateOn.TotalActiveGroups
    leafs["robustness"] = interfaceStateOn.Robustness
    leafs["proxy-interface"] = interfaceStateOn.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOn.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOn.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOn.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOn.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOn.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOn.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOn.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOn.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOn.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOn.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOn.VrfId
    leafs["mte-vrf-id"] = interfaceStateOn.MteVrfId
    leafs["location"] = interfaceStateOn.Location
    leafs["mtu"] = interfaceStateOn.Mtu
    leafs["vrf-state"] = interfaceStateOn.VrfState
    leafs["is-configurationverify"] = interfaceStateOn.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOn.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOn.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOn.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOn.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOn.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOn.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOn.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOn.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOn.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOn.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOn.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOn.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOn.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOn.MteTupleCount
    return leafs
}

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetYangName() string { return "interface-state-on" }

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) SetParent(parent types.Entity) { interfaceStateOn.parent = parent }

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetParent() types.Entity { return interfaceStateOn.parent }

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetParentYangName() string { return "interface-state-ons" }

// Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetYangName() string { return "address" }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetParentYangName() string { return "interface-state-on" }

// Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParentYangName() string { return "interface-state-on" }

// Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParentYangName() string { return "interface-state-on" }

// Mld_Active_Vrfs_Vrf_DetailGroups
// IGMP Detail Group Database
type Mld_Active_Vrfs_Vrf_DetailGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup.
    DetailGroup []Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup
}

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetFilter() yfilter.YFilter { return detailGroups.YFilter }

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) SetFilter(yf yfilter.YFilter) { detailGroups.YFilter = yf }

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetGoName(yname string) string {
    if yname == "detail-group" { return "DetailGroup" }
    return ""
}

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetSegmentPath() string {
    return "detail-groups"
}

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detail-group" {
        for _, c := range detailGroups.DetailGroup {
            if detailGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup{}
        detailGroups.DetailGroup = append(detailGroups.DetailGroup, child)
        return &detailGroups.DetailGroup[len(detailGroups.DetailGroup)-1]
    }
    return nil
}

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range detailGroups.DetailGroup {
        children[detailGroups.DetailGroup[i].GetSegmentPath()] = &detailGroups.DetailGroup[i]
    }
    return children
}

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetYangName() string { return "detail-groups" }

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) SetParent(parent types.Entity) { detailGroups.parent = parent }

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetParent() types.Entity { return detailGroups.parent }

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source.
    Source []Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source
}

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetFilter() yfilter.YFilter { return detailGroup.YFilter }

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) SetFilter(yf yfilter.YFilter) { detailGroup.YFilter = yf }

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "is-router-exclude-mode" { return "IsRouterExcludeMode" }
    if yname == "is-host-exclude-mode" { return "IsHostExcludeMode" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "source" { return "Source" }
    return ""
}

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetSegmentPath() string {
    return "detail-group"
}

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &detailGroup.GroupInfo
    }
    if childYangName == "source" {
        for _, c := range detailGroup.Source {
            if detailGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source{}
        detailGroup.Source = append(detailGroup.Source, child)
        return &detailGroup.Source[len(detailGroup.Source)-1]
    }
    return nil
}

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &detailGroup.GroupInfo
    for i := range detailGroup.Source {
        children[detailGroup.Source[i].GetSegmentPath()] = &detailGroup.Source[i]
    }
    return children
}

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = detailGroup.GroupAddress
    leafs["interface-name"] = detailGroup.InterfaceName
    leafs["source-address"] = detailGroup.SourceAddress
    leafs["is-router-exclude-mode"] = detailGroup.IsRouterExcludeMode
    leafs["is-host-exclude-mode"] = detailGroup.IsHostExcludeMode
    return leafs
}

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetYangName() string { return "detail-group" }

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) SetParent(parent types.Entity) { detailGroup.parent = parent }

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetParent() types.Entity { return detailGroup.parent }

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetParentYangName() string { return "detail-groups" }

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetParentYangName() string { return "detail-group" }

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source
// List of sources
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-remote" { return "IsRemote" }
    if yname == "is-forward" { return "IsForward" }
    if yname == "is-we-report" { return "IsWeReport" }
    if yname == "flags" { return "Flags" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetSegmentPath() string {
    return "source"
}

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &source.SourceAddress
    }
    return nil
}

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &source.SourceAddress
    return children
}

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = source.Uptime
    leafs["expiration-time"] = source.ExpirationTime
    leafs["is-local"] = source.IsLocal
    leafs["is-remote"] = source.IsRemote
    leafs["is-forward"] = source.IsForward
    leafs["is-we-report"] = source.IsWeReport
    leafs["flags"] = source.Flags
    leafs["is-added"] = source.IsAdded
    return leafs
}

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetYangName() string { return "source" }

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetParent() types.Entity { return source.parent }

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetParentYangName() string { return "detail-group" }

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetParentYangName() string { return "source" }

// Mld_Active_Vrfs_Vrf_NonActiveGroups
// IGMP Non-Active Groups Information
type Mld_Active_Vrfs_Vrf_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetGoName(yname string) string {
    if yname == "non-active-groups" { return "NonActiveGroups" }
    return ""
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-active-groups" {
        for _, c := range nonActiveGroups.NonActiveGroups {
            if nonActiveGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups{}
        nonActiveGroups.NonActiveGroups = append(nonActiveGroups.NonActiveGroups, child)
        return &nonActiveGroups.NonActiveGroups[len(nonActiveGroups.NonActiveGroups)-1]
    }
    return nil
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nonActiveGroups.NonActiveGroups {
        children[nonActiveGroups.NonActiveGroups[i].GetSegmentPath()] = &nonActiveGroups.NonActiveGroups[i]
    }
    return children
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    if yname == "reason-for-non-activity" { return "ReasonForNonActivity" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address" {
        return &nonActiveGroups.GroupAddress
    }
    if childYangName == "source-address" {
        return &nonActiveGroups.SourceAddress
    }
    return nil
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address"] = &nonActiveGroups.GroupAddress
    children["source-address"] = &nonActiveGroups.SourceAddress
    return children
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface"] = nonActiveGroups.Interface
    leafs["reason-for-non-activity"] = nonActiveGroups.ReasonForNonActivity
    return leafs
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetParentYangName() string { return "non-active-groups" }

// Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetParentYangName() string { return "non-active-groups" }

// Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetParentYangName() string { return "non-active-groups" }

// Mld_Active_Vrfs_Vrf_SsmMaps
// SSM Map Table
type Mld_Active_Vrfs_Vrf_SsmMaps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap.
    SsmMap []Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap
}

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetFilter() yfilter.YFilter { return ssmMaps.YFilter }

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) SetFilter(yf yfilter.YFilter) { ssmMaps.YFilter = yf }

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetGoName(yname string) string {
    if yname == "ssm-map" { return "SsmMap" }
    return ""
}

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetSegmentPath() string {
    return "ssm-maps"
}

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map" {
        for _, c := range ssmMaps.SsmMap {
            if ssmMaps.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap{}
        ssmMaps.SsmMap = append(ssmMaps.SsmMap, child)
        return &ssmMaps.SsmMap[len(ssmMaps.SsmMap)-1]
    }
    return nil
}

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMaps.SsmMap {
        children[ssmMaps.SsmMap[i].GetSegmentPath()] = &ssmMaps.SsmMap[i]
    }
    return children
}

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetYangName() string { return "ssm-maps" }

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) SetParent(parent types.Entity) { ssmMaps.parent = parent }

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetParent() types.Entity { return ssmMaps.parent }

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap
// SSM Map information
type Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetFilter() yfilter.YFilter { return ssmMap.YFilter }

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) SetFilter(yf yfilter.YFilter) { ssmMap.YFilter = yf }

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetSegmentPath() string {
    return "ssm-map"
}

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &ssmMap.GroupAddressXr
    }
    return nil
}

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &ssmMap.GroupAddressXr
    return children
}

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMap.SsmMapType
    leafs["group-address"] = ssmMap.GroupAddress
    leafs["map-type"] = ssmMap.MapType
    leafs["source-counts"] = ssmMap.SourceCounts
    return leafs
}

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetYangName() string { return "ssm-map" }

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) SetParent(parent types.Entity) { ssmMap.parent = parent }

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetParent() types.Entity { return ssmMap.parent }

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetParentYangName() string { return "ssm-maps" }

// Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetParentYangName() string { return "ssm-map" }

// Mld_Active_Vrfs_Vrf_ExplicitGroups
// IGMP Explicit Group Database
type Mld_Active_Vrfs_Vrf_ExplicitGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetFilter() yfilter.YFilter { return explicitGroups.YFilter }

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) SetFilter(yf yfilter.YFilter) { explicitGroups.YFilter = yf }

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetGoName(yname string) string {
    if yname == "explicit-group" { return "ExplicitGroup" }
    return ""
}

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetSegmentPath() string {
    return "explicit-groups"
}

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "explicit-group" {
        for _, c := range explicitGroups.ExplicitGroup {
            if explicitGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup{}
        explicitGroups.ExplicitGroup = append(explicitGroups.ExplicitGroup, child)
        return &explicitGroups.ExplicitGroup[len(explicitGroups.ExplicitGroup)-1]
    }
    return nil
}

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range explicitGroups.ExplicitGroup {
        children[explicitGroups.ExplicitGroup[i].GetSegmentPath()] = &explicitGroups.ExplicitGroup[i]
    }
    return children
}

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetYangName() string { return "explicit-groups" }

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) SetParent(parent types.Entity) { explicitGroups.parent = parent }

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetParent() types.Entity { return explicitGroups.parent }

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host.
    Host []Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetFilter() yfilter.YFilter { return explicitGroup.YFilter }

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) SetFilter(yf yfilter.YFilter) { explicitGroup.YFilter = yf }

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "include-hosts" { return "IncludeHosts" }
    if yname == "exclude-hosts" { return "ExcludeHosts" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "host" { return "Host" }
    return ""
}

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetSegmentPath() string {
    return "explicit-group"
}

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &explicitGroup.GroupInfo
    }
    if childYangName == "host" {
        for _, c := range explicitGroup.Host {
            if explicitGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host{}
        explicitGroup.Host = append(explicitGroup.Host, child)
        return &explicitGroup.Host[len(explicitGroup.Host)-1]
    }
    return nil
}

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &explicitGroup.GroupInfo
    for i := range explicitGroup.Host {
        children[explicitGroup.Host[i].GetSegmentPath()] = &explicitGroup.Host[i]
    }
    return children
}

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = explicitGroup.GroupAddress
    leafs["interface-name"] = explicitGroup.InterfaceName
    leafs["source-address"] = explicitGroup.SourceAddress
    leafs["include-hosts"] = explicitGroup.IncludeHosts
    leafs["exclude-hosts"] = explicitGroup.ExcludeHosts
    return leafs
}

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetYangName() string { return "explicit-group" }

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) SetParent(parent types.Entity) { explicitGroup.parent = parent }

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetParent() types.Entity { return explicitGroup.parent }

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetParentYangName() string { return "explicit-groups" }

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetParentYangName() string { return "explicit-group" }

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetFilter() yfilter.YFilter { return host.YFilter }

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) SetFilter(yf yfilter.YFilter) { host.YFilter = yf }

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "is-exclude" { return "IsExclude" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "source-count" { return "SourceCount" }
    if yname == "address" { return "Address" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetSegmentPath() string {
    return "host"
}

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &host.Address
    }
    if childYangName == "source-address" {
        for _, c := range host.SourceAddress {
            if host.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress{}
        host.SourceAddress = append(host.SourceAddress, child)
        return &host.SourceAddress[len(host.SourceAddress)-1]
    }
    return nil
}

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &host.Address
    for i := range host.SourceAddress {
        children[host.SourceAddress[i].GetSegmentPath()] = &host.SourceAddress[i]
    }
    return children
}

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = host.Uptime
    leafs["is-exclude"] = host.IsExclude
    leafs["expiration-time"] = host.ExpirationTime
    leafs["source-count"] = host.SourceCount
    return leafs
}

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetBundleName() string { return "cisco_ios_xr" }

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetYangName() string { return "host" }

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) SetParent(parent types.Entity) { host.parent = parent }

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetParent() types.Entity { return host.parent }

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetParentYangName() string { return "explicit-group" }

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetYangName() string { return "address" }

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetParentYangName() string { return "host" }

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParentYangName() string { return "host" }

// Mld_Active_Vrfs_Vrf_InterfaceTable
// IGMP Interface specific Table
type Mld_Active_Vrfs_Vrf_InterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_Vrfs_Vrf_InterfaceTable_Interface.
    Interface []Mld_Active_Vrfs_Vrf_InterfaceTable_Interface
}

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetFilter() yfilter.YFilter { return interfaceTable.YFilter }

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) SetFilter(yf yfilter.YFilter) { interfaceTable.YFilter = yf }

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetSegmentPath() string {
    return "interface-table"
}

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaceTable.Interface {
            if interfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_InterfaceTable_Interface{}
        interfaceTable.Interface = append(interfaceTable.Interface, child)
        return &interfaceTable.Interface[len(interfaceTable.Interface)-1]
    }
    return nil
}

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceTable.Interface {
        children[interfaceTable.Interface[i].GetSegmentPath()] = &interfaceTable.Interface[i]
    }
    return children
}

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetYangName() string { return "interface-table" }

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) SetParent(parent types.Entity) { interfaceTable.parent = parent }

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetParent() types.Entity { return interfaceTable.parent }

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_InterfaceTable_Interface
// IGMP Interface
type Mld_Active_Vrfs_Vrf_InterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetParentYangName() string { return "interface-table" }

// Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address
// IP address
type Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjusts.YFilter }

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjusts.YFilter = yf }

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetGoName(yname string) string {
    if yname == "interface-unicast-qos-adjust" { return "InterfaceUnicastQosAdjust" }
    return ""
}

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetSegmentPath() string {
    return "interface-unicast-qos-adjusts"
}

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-unicast-qos-adjust" {
        for _, c := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
            if interfaceUnicastQosAdjusts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust{}
        interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust = append(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, child)
        return &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[len(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        children[interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i].GetSegmentPath()] = &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]
    }
    return children
}

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetYangName() string { return "interface-unicast-qos-adjusts" }

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) SetParent(parent types.Entity) { interfaceUnicastQosAdjusts.parent = parent }

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetParent() types.Entity { return interfaceUnicastQosAdjusts.parent }

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjust.YFilter }

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjust.YFilter = yf }

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-access" { return "IsVirtualAccess" }
    if yname == "rate" { return "Rate" }
    if yname == "rate-increments" { return "RateIncrements" }
    if yname == "rate-decrements" { return "RateDecrements" }
    if yname == "update" { return "Update" }
    return ""
}

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetSegmentPath() string {
    return "interface-unicast-qos-adjust" + "[interface-name='" + fmt.Sprintf("%v", interfaceUnicastQosAdjust.InterfaceName) + "']"
}

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update" {
        for _, c := range interfaceUnicastQosAdjust.Update {
            if interfaceUnicastQosAdjust.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update{}
        interfaceUnicastQosAdjust.Update = append(interfaceUnicastQosAdjust.Update, child)
        return &interfaceUnicastQosAdjust.Update[len(interfaceUnicastQosAdjust.Update)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjust.Update {
        children[interfaceUnicastQosAdjust.Update[i].GetSegmentPath()] = &interfaceUnicastQosAdjust.Update[i]
    }
    return children
}

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceUnicastQosAdjust.InterfaceName
    leafs["is-virtual-access"] = interfaceUnicastQosAdjust.IsVirtualAccess
    leafs["rate"] = interfaceUnicastQosAdjust.Rate
    leafs["rate-increments"] = interfaceUnicastQosAdjust.RateIncrements
    leafs["rate-decrements"] = interfaceUnicastQosAdjust.RateDecrements
    return leafs
}

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetYangName() string { return "interface-unicast-qos-adjust" }

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetParent(parent types.Entity) { interfaceUnicastQosAdjust.parent = parent }

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParent() types.Entity { return interfaceUnicastQosAdjust.parent }

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParentYangName() string { return "interface-unicast-qos-adjusts" }

// Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetFilter() yfilter.YFilter { return update.YFilter }

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetFilter(yf yfilter.YFilter) { update.YFilter = yf }

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetGoName(yname string) string {
    if yname == "is-add" { return "IsAdd" }
    if yname == "weight" { return "Weight" }
    if yname == "received-time" { return "ReceivedTime" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "group-address" { return "GroupAddress" }
    return ""
}

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetSegmentPath() string {
    return "update"
}

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &update.SourceAddress
    }
    if childYangName == "group-address" {
        return &update.GroupAddress
    }
    return nil
}

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &update.SourceAddress
    children["group-address"] = &update.GroupAddress
    return children
}

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-add"] = update.IsAdd
    leafs["weight"] = update.Weight
    leafs["received-time"] = update.ReceivedTime
    return leafs
}

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleName() string { return "cisco_ios_xr" }

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetYangName() string { return "update" }

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetParent(parent types.Entity) { update.parent = parent }

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParent() types.Entity { return update.parent }

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParentYangName() string { return "interface-unicast-qos-adjust" }

// Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParentYangName() string { return "update" }

// Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParentYangName() string { return "update" }

// Mld_Active_Vrfs_Vrf_Ranges
// Range table
type Mld_Active_Vrfs_Vrf_Ranges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Range information. The type is slice of Mld_Active_Vrfs_Vrf_Ranges_Range.
    Range []Mld_Active_Vrfs_Vrf_Ranges_Range
}

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetFilter() yfilter.YFilter { return ranges.YFilter }

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) SetFilter(yf yfilter.YFilter) { ranges.YFilter = yf }

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetGoName(yname string) string {
    if yname == "range" { return "Range" }
    return ""
}

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetSegmentPath() string {
    return "ranges"
}

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "range" {
        for _, c := range ranges.Range {
            if ranges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_Ranges_Range{}
        ranges.Range = append(ranges.Range, child)
        return &ranges.Range[len(ranges.Range)-1]
    }
    return nil
}

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ranges.Range {
        children[ranges.Range[i].GetSegmentPath()] = &ranges.Range[i]
    }
    return children
}

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetBundleName() string { return "cisco_ios_xr" }

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetYangName() string { return "ranges" }

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) SetParent(parent types.Entity) { ranges.parent = parent }

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetParent() types.Entity { return ranges.parent }

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_Ranges_Range
// Range information
type Mld_Active_Vrfs_Vrf_Ranges_Range struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: -2147483648..2147483647.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr
}

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "group-mask" { return "GroupMask" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "protocol" { return "Protocol" }
    if yname == "is-stale" { return "IsStale" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetSegmentPath() string {
    return "range"
}

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &self.GroupAddressXr
    }
    return nil
}

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &self.GroupAddressXr
    return children
}

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = self.GroupAddress
    leafs["group-mask"] = self.GroupMask
    leafs["prefix-length"] = self.PrefixLength
    leafs["protocol"] = self.Protocol
    leafs["is-stale"] = self.IsStale
    return leafs
}

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetYangName() string { return "range" }

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetParent() types.Entity { return self.parent }

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetParentYangName() string { return "ranges" }

// Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr
// Group address
type Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetParentYangName() string { return "range" }

// Mld_Active_Vrfs_Vrf_IfrsInterfaces
// IGMP Interface specific
type Mld_Active_Vrfs_Vrf_IfrsInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface.
    IfrsInterface []Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetFilter() yfilter.YFilter { return ifrsInterfaces.YFilter }

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) SetFilter(yf yfilter.YFilter) { ifrsInterfaces.YFilter = yf }

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetGoName(yname string) string {
    if yname == "ifrs-interface" { return "IfrsInterface" }
    return ""
}

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetSegmentPath() string {
    return "ifrs-interfaces"
}

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ifrs-interface" {
        for _, c := range ifrsInterfaces.IfrsInterface {
            if ifrsInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface{}
        ifrsInterfaces.IfrsInterface = append(ifrsInterfaces.IfrsInterface, child)
        return &ifrsInterfaces.IfrsInterface[len(ifrsInterfaces.IfrsInterface)-1]
    }
    return nil
}

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ifrsInterfaces.IfrsInterface {
        children[ifrsInterfaces.IfrsInterface[i].GetSegmentPath()] = &ifrsInterfaces.IfrsInterface[i]
    }
    return children
}

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetYangName() string { return "ifrs-interfaces" }

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) SetParent(parent types.Entity) { ifrsInterfaces.parent = parent }

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetParent() types.Entity { return ifrsInterfaces.parent }

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetFilter() yfilter.YFilter { return ifrsInterface.YFilter }

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) SetFilter(yf yfilter.YFilter) { ifrsInterface.YFilter = yf }

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "join-group-count" { return "JoinGroupCount" }
    if yname == "igmp-interface-entry" { return "IgmpInterfaceEntry" }
    return ""
}

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetSegmentPath() string {
    return "ifrs-interface" + "[interface-name='" + fmt.Sprintf("%v", ifrsInterface.InterfaceName) + "']"
}

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "igmp-interface-entry" {
        return &ifrsInterface.IgmpInterfaceEntry
    }
    return nil
}

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["igmp-interface-entry"] = &ifrsInterface.IgmpInterfaceEntry
    return children
}

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ifrsInterface.InterfaceName
    leafs["join-group-count"] = ifrsInterface.JoinGroupCount
    return leafs
}

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetYangName() string { return "ifrs-interface" }

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) SetParent(parent types.Entity) { ifrsInterface.parent = parent }

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetParent() types.Entity { return ifrsInterface.parent }

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetParentYangName() string { return "ifrs-interfaces" }

// Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetFilter() yfilter.YFilter { return igmpInterfaceEntry.YFilter }

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetFilter(yf yfilter.YFilter) { igmpInterfaceEntry.YFilter = yf }

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetSegmentPath() string {
    return "igmp-interface-entry"
}

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &igmpInterfaceEntry.Address
    }
    if childYangName == "querier-address" {
        return &igmpInterfaceEntry.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &igmpInterfaceEntry.SubscriberAddress
    }
    return nil
}

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &igmpInterfaceEntry.Address
    children["querier-address"] = &igmpInterfaceEntry.QuerierAddress
    children["subscriber-address"] = &igmpInterfaceEntry.SubscriberAddress
    return children
}

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = igmpInterfaceEntry.InterfaceNameXr
    leafs["state"] = igmpInterfaceEntry.State
    leafs["prefix-length"] = igmpInterfaceEntry.PrefixLength
    leafs["is-interface-up"] = igmpInterfaceEntry.IsInterfaceUp
    leafs["is-ip-enabled"] = igmpInterfaceEntry.IsIpEnabled
    leafs["is-router-enabled"] = igmpInterfaceEntry.IsRouterEnabled
    leafs["igmp-version"] = igmpInterfaceEntry.IgmpVersion
    leafs["host-version"] = igmpInterfaceEntry.HostVersion
    leafs["query-interval"] = igmpInterfaceEntry.QueryInterval
    leafs["query-timeout"] = igmpInterfaceEntry.QueryTimeout
    leafs["query-maximum-response-time"] = igmpInterfaceEntry.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = igmpInterfaceEntry.LastMemberQueryInterval
    leafs["group-joins"] = igmpInterfaceEntry.GroupJoins
    leafs["group-leaves"] = igmpInterfaceEntry.GroupLeaves
    leafs["is-querier"] = igmpInterfaceEntry.IsQuerier
    leafs["total-active-groups"] = igmpInterfaceEntry.TotalActiveGroups
    leafs["robustness"] = igmpInterfaceEntry.Robustness
    leafs["proxy-interface"] = igmpInterfaceEntry.ProxyInterface
    leafs["querier-uptime"] = igmpInterfaceEntry.QuerierUptime
    leafs["las-ll-registration-count"] = igmpInterfaceEntry.LasLlRegistrationCount
    leafs["las-get-address-count"] = igmpInterfaceEntry.LasGetAddressCount
    leafs["las-update-count"] = igmpInterfaceEntry.LasUpdateCount
    leafs["las-ll-remove-update-count"] = igmpInterfaceEntry.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = igmpInterfaceEntry.LasLlAddUpdateCount
    leafs["las-null-update-count"] = igmpInterfaceEntry.LasNullUpdateCount
    leafs["las-unregistration-count"] = igmpInterfaceEntry.LasUnregistrationCount
    leafs["is-las-request"] = igmpInterfaceEntry.IsLasRequest
    leafs["is-las-registered"] = igmpInterfaceEntry.IsLasRegistered
    leafs["vrf-id"] = igmpInterfaceEntry.VrfId
    leafs["mte-vrf-id"] = igmpInterfaceEntry.MteVrfId
    leafs["location"] = igmpInterfaceEntry.Location
    leafs["mtu"] = igmpInterfaceEntry.Mtu
    leafs["vrf-state"] = igmpInterfaceEntry.VrfState
    leafs["is-configurationverify"] = igmpInterfaceEntry.IsConfigurationverify
    leafs["configurationvrf-set"] = igmpInterfaceEntry.ConfigurationvrfSet
    leafs["configurationvrf-error"] = igmpInterfaceEntry.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = igmpInterfaceEntry.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = igmpInterfaceEntry.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = igmpInterfaceEntry.IsImStateRegistered
    leafs["is-subscriber"] = igmpInterfaceEntry.IsSubscriber
    leafs["subscriber-mode"] = igmpInterfaceEntry.SubscriberMode
    leafs["is-identity-present"] = igmpInterfaceEntry.IsIdentityPresent
    leafs["subscriber-id"] = igmpInterfaceEntry.SubscriberId
    leafs["parent-ifhandle"] = igmpInterfaceEntry.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = igmpInterfaceEntry.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = igmpInterfaceEntry.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = igmpInterfaceEntry.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = igmpInterfaceEntry.MteTupleCount
    return leafs
}

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleName() string { return "cisco_ios_xr" }

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetYangName() string { return "igmp-interface-entry" }

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetParent(parent types.Entity) { igmpInterfaceEntry.parent = parent }

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParent() types.Entity { return igmpInterfaceEntry.parent }

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParentYangName() string { return "ifrs-interface" }

// Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetYangName() string { return "address" }

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParentYangName() string { return "igmp-interface-entry" }

// Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Mld_Active_Vrfs_Vrf_TrafficCounters
// IGMP Message Traffic Counters
type Mld_Active_Vrfs_Vrf_TrafficCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetFilter() yfilter.YFilter { return trafficCounters.YFilter }

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) SetFilter(yf yfilter.YFilter) { trafficCounters.YFilter = yf }

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetGoName(yname string) string {
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "packets-in" { return "PacketsIn" }
    if yname == "packets-out" { return "PacketsOut" }
    if yname == "format-errors" { return "FormatErrors" }
    if yname == "packet-manager-input-errors" { return "PacketManagerInputErrors" }
    if yname == "packet-manager-output-errors" { return "PacketManagerOutputErrors" }
    if yname == "checksum-errors" { return "ChecksumErrors" }
    if yname == "receive-socket-errors" { return "ReceiveSocketErrors" }
    if yname == "socket-errors" { return "SocketErrors" }
    if yname == "bad-scope-errors" { return "BadScopeErrors" }
    if yname == "auxillary-data-length-errors" { return "AuxillaryDataLengthErrors" }
    if yname == "invalid-source-address-errors" { return "InvalidSourceAddressErrors" }
    if yname == "no-socket-connection" { return "NoSocketConnection" }
    if yname == "miscellaneous-errors" { return "MiscellaneousErrors" }
    if yname == "input-queries" { return "InputQueries" }
    if yname == "input-reports" { return "InputReports" }
    if yname == "input-leaves" { return "InputLeaves" }
    if yname == "input-mtrace" { return "InputMtrace" }
    if yname == "input-dvmrp" { return "InputDvmrp" }
    if yname == "input-pim" { return "InputPim" }
    if yname == "output-queries" { return "OutputQueries" }
    if yname == "output-reports" { return "OutputReports" }
    if yname == "output-leaves" { return "OutputLeaves" }
    if yname == "output-mtrace" { return "OutputMtrace" }
    if yname == "output-dvmrp" { return "OutputDvmrp" }
    if yname == "output-pim" { return "OutputPim" }
    if yname == "get-packet-failure" { return "GetPacketFailure" }
    if yname == "output-no-parent-interface-handle" { return "OutputNoParentInterfaceHandle" }
    if yname == "input-no-idb" { return "InputNoIdb" }
    if yname == "input-no-vrf-in-idb" { return "InputNoVrfInIdb" }
    if yname == "input-disabled-idb" { return "InputDisabledIdb" }
    if yname == "input-martian-address" { return "InputMartianAddress" }
    if yname == "input-no-assigned-vrf-id" { return "InputNoAssignedVrfId" }
    if yname == "input-no-vrf-mtrace" { return "InputNoVrfMtrace" }
    if yname == "input-no-platform-support-mtrace" { return "InputNoPlatformSupportMtrace" }
    return ""
}

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetSegmentPath() string {
    return "traffic-counters"
}

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["elapsed-time"] = trafficCounters.ElapsedTime
    leafs["packets-in"] = trafficCounters.PacketsIn
    leafs["packets-out"] = trafficCounters.PacketsOut
    leafs["format-errors"] = trafficCounters.FormatErrors
    leafs["packet-manager-input-errors"] = trafficCounters.PacketManagerInputErrors
    leafs["packet-manager-output-errors"] = trafficCounters.PacketManagerOutputErrors
    leafs["checksum-errors"] = trafficCounters.ChecksumErrors
    leafs["receive-socket-errors"] = trafficCounters.ReceiveSocketErrors
    leafs["socket-errors"] = trafficCounters.SocketErrors
    leafs["bad-scope-errors"] = trafficCounters.BadScopeErrors
    leafs["auxillary-data-length-errors"] = trafficCounters.AuxillaryDataLengthErrors
    leafs["invalid-source-address-errors"] = trafficCounters.InvalidSourceAddressErrors
    leafs["no-socket-connection"] = trafficCounters.NoSocketConnection
    leafs["miscellaneous-errors"] = trafficCounters.MiscellaneousErrors
    leafs["input-queries"] = trafficCounters.InputQueries
    leafs["input-reports"] = trafficCounters.InputReports
    leafs["input-leaves"] = trafficCounters.InputLeaves
    leafs["input-mtrace"] = trafficCounters.InputMtrace
    leafs["input-dvmrp"] = trafficCounters.InputDvmrp
    leafs["input-pim"] = trafficCounters.InputPim
    leafs["output-queries"] = trafficCounters.OutputQueries
    leafs["output-reports"] = trafficCounters.OutputReports
    leafs["output-leaves"] = trafficCounters.OutputLeaves
    leafs["output-mtrace"] = trafficCounters.OutputMtrace
    leafs["output-dvmrp"] = trafficCounters.OutputDvmrp
    leafs["output-pim"] = trafficCounters.OutputPim
    leafs["get-packet-failure"] = trafficCounters.GetPacketFailure
    leafs["output-no-parent-interface-handle"] = trafficCounters.OutputNoParentInterfaceHandle
    leafs["input-no-idb"] = trafficCounters.InputNoIdb
    leafs["input-no-vrf-in-idb"] = trafficCounters.InputNoVrfInIdb
    leafs["input-disabled-idb"] = trafficCounters.InputDisabledIdb
    leafs["input-martian-address"] = trafficCounters.InputMartianAddress
    leafs["input-no-assigned-vrf-id"] = trafficCounters.InputNoAssignedVrfId
    leafs["input-no-vrf-mtrace"] = trafficCounters.InputNoVrfMtrace
    leafs["input-no-platform-support-mtrace"] = trafficCounters.InputNoPlatformSupportMtrace
    return leafs
}

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetBundleName() string { return "cisco_ios_xr" }

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetYangName() string { return "traffic-counters" }

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) SetParent(parent types.Entity) { trafficCounters.parent = parent }

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetParent() types.Entity { return trafficCounters.parent }

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_Groups
// IGMP Group Database Table
type Mld_Active_Vrfs_Vrf_Groups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Mld_Active_Vrfs_Vrf_Groups_Group.
    Group []Mld_Active_Vrfs_Vrf_Groups_Group
}

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetFilter() yfilter.YFilter { return groups.YFilter }

func (groups *Mld_Active_Vrfs_Vrf_Groups) SetFilter(yf yfilter.YFilter) { groups.YFilter = yf }

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetGoName(yname string) string {
    if yname == "group" { return "Group" }
    return ""
}

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetSegmentPath() string {
    return "groups"
}

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group" {
        for _, c := range groups.Group {
            if groups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_Groups_Group{}
        groups.Group = append(groups.Group, child)
        return &groups.Group[len(groups.Group)-1]
    }
    return nil
}

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range groups.Group {
        children[groups.Group[i].GetSegmentPath()] = &groups.Group[i]
    }
    return children
}

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetBundleName() string { return "cisco_ios_xr" }

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetYangName() string { return "groups" }

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groups *Mld_Active_Vrfs_Vrf_Groups) SetParent(parent types.Entity) { groups.parent = parent }

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetParent() types.Entity { return groups.parent }

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_Groups_Group
// IGMP Group Entry Information
type Mld_Active_Vrfs_Vrf_Groups_Group struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress
}

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetFilter() yfilter.YFilter { return group.YFilter }

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) SetFilter(yf yfilter.YFilter) { group.YFilter = yf }

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetSegmentPath() string {
    return "group"
}

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &group.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &group.LastReporter
    }
    if childYangName == "source-address" {
        return &group.SourceAddress
    }
    return nil
}

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &group.GroupAddressXr
    children["last-reporter"] = &group.LastReporter
    children["source-address"] = &group.SourceAddress
    return children
}

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = group.GroupAddress
    leafs["interface-name"] = group.InterfaceName
    leafs["interface-name-xr"] = group.InterfaceNameXr
    leafs["uptime"] = group.Uptime
    leafs["expiration-time"] = group.ExpirationTime
    leafs["explicit-tracking-enabled"] = group.ExplicitTrackingEnabled
    leafs["is-self-join"] = group.IsSelfJoin
    leafs["row-status"] = group.RowStatus
    leafs["is-low-memory"] = group.IsLowMemory
    leafs["router-filter-mode"] = group.RouterFilterMode
    leafs["older-host-version1-timer"] = group.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = group.OlderHostVersion2Timer
    leafs["is-added"] = group.IsAdded
    leafs["is-suppressed"] = group.IsSuppressed
    return leafs
}

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetBundleName() string { return "cisco_ios_xr" }

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetYangName() string { return "group" }

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) SetParent(parent types.Entity) { group.parent = parent }

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetParent() types.Entity { return group.parent }

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetParentYangName() string { return "groups" }

// Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr
// Group Address
type Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetParentYangName() string { return "group" }

// Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter
// Last reporter address
type Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetParentYangName() string { return "group" }

// Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress
// Source Address
type Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetParentYangName() string { return "group" }

// Mld_Active_Vrfs_Vrf_GroupSummary
// IGMP Groups Summary
type Mld_Active_Vrfs_Vrf_GroupSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetFilter() yfilter.YFilter { return groupSummary.YFilter }

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) SetFilter(yf yfilter.YFilter) { groupSummary.YFilter = yf }

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetGoName(yname string) string {
    if yname == "groutes" { return "Groutes" }
    if yname == "sg-routes" { return "SgRoutes" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    return ""
}

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetSegmentPath() string {
    return "group-summary"
}

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["groutes"] = groupSummary.Groutes
    leafs["sg-routes"] = groupSummary.SgRoutes
    leafs["group-count"] = groupSummary.GroupCount
    leafs["is-low-memory"] = groupSummary.IsLowMemory
    return leafs
}

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetBundleName() string { return "cisco_ios_xr" }

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetYangName() string { return "group-summary" }

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) SetParent(parent types.Entity) { groupSummary.parent = parent }

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetParent() types.Entity { return groupSummary.parent }

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetFilter() yfilter.YFilter { return ifrsInterfaceSummary.YFilter }

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) SetFilter(yf yfilter.YFilter) { ifrsInterfaceSummary.YFilter = yf }

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-count" { return "InterfaceCount" }
    if yname == "configuration-count" { return "ConfigurationCount" }
    return ""
}

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetSegmentPath() string {
    return "ifrs-interface-summary"
}

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-count"] = ifrsInterfaceSummary.InterfaceCount
    leafs["configuration-count"] = ifrsInterfaceSummary.ConfigurationCount
    return leafs
}

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetYangName() string { return "ifrs-interface-summary" }

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) SetParent(parent types.Entity) { ifrsInterfaceSummary.parent = parent }

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetParent() types.Entity { return ifrsInterfaceSummary.parent }

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_GlobalInterfaceTable
// IGMP Global Interface 
type Mld_Active_Vrfs_Vrf_GlobalInterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface.
    Interface []Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetFilter() yfilter.YFilter { return globalInterfaceTable.YFilter }

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) SetFilter(yf yfilter.YFilter) { globalInterfaceTable.YFilter = yf }

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetSegmentPath() string {
    return "global-interface-table"
}

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range globalInterfaceTable.Interface {
            if globalInterfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface{}
        globalInterfaceTable.Interface = append(globalInterfaceTable.Interface, child)
        return &globalInterfaceTable.Interface[len(globalInterfaceTable.Interface)-1]
    }
    return nil
}

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalInterfaceTable.Interface {
        children[globalInterfaceTable.Interface[i].GetSegmentPath()] = &globalInterfaceTable.Interface[i]
    }
    return children
}

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetYangName() string { return "global-interface-table" }

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) SetParent(parent types.Entity) { globalInterfaceTable.parent = parent }

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetParent() types.Entity { return globalInterfaceTable.parent }

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface
// IGMP Interface
type Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetParentYangName() string { return "global-interface-table" }

// Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address
// IP address
type Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Mld_Active_Vrfs_Vrf_SsmMapDetails
// SSM Map Detail
type Mld_Active_Vrfs_Vrf_SsmMapDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetFilter() yfilter.YFilter { return ssmMapDetails.YFilter }

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) SetFilter(yf yfilter.YFilter) { ssmMapDetails.YFilter = yf }

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetGoName(yname string) string {
    if yname == "ssm-map-detail" { return "SsmMapDetail" }
    return ""
}

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetSegmentPath() string {
    return "ssm-map-details"
}

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map-detail" {
        for _, c := range ssmMapDetails.SsmMapDetail {
            if ssmMapDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail{}
        ssmMapDetails.SsmMapDetail = append(ssmMapDetails.SsmMapDetail, child)
        return &ssmMapDetails.SsmMapDetail[len(ssmMapDetails.SsmMapDetail)-1]
    }
    return nil
}

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMapDetails.SsmMapDetail {
        children[ssmMapDetails.SsmMapDetail[i].GetSegmentPath()] = &ssmMapDetails.SsmMapDetail[i]
    }
    return children
}

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetYangName() string { return "ssm-map-details" }

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) SetParent(parent types.Entity) { ssmMapDetails.parent = parent }

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetParent() types.Entity { return ssmMapDetails.parent }

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources.
    Sources []Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetFilter() yfilter.YFilter { return ssmMapDetail.YFilter }

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) SetFilter(yf yfilter.YFilter) { ssmMapDetail.YFilter = yf }

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "response-pending" { return "ResponsePending" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "map-info" { return "MapInfo" }
    if yname == "sources" { return "Sources" }
    return ""
}

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetSegmentPath() string {
    return "ssm-map-detail"
}

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "map-info" {
        return &ssmMapDetail.MapInfo
    }
    if childYangName == "sources" {
        for _, c := range ssmMapDetail.Sources {
            if ssmMapDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources{}
        ssmMapDetail.Sources = append(ssmMapDetail.Sources, child)
        return &ssmMapDetail.Sources[len(ssmMapDetail.Sources)-1]
    }
    return nil
}

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["map-info"] = &ssmMapDetail.MapInfo
    for i := range ssmMapDetail.Sources {
        children[ssmMapDetail.Sources[i].GetSegmentPath()] = &ssmMapDetail.Sources[i]
    }
    return children
}

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMapDetail.SsmMapType
    leafs["group-address"] = ssmMapDetail.GroupAddress
    leafs["expiration-time"] = ssmMapDetail.ExpirationTime
    leafs["response-pending"] = ssmMapDetail.ResponsePending
    leafs["query-interval"] = ssmMapDetail.QueryInterval
    leafs["elapsed-time"] = ssmMapDetail.ElapsedTime
    return leafs
}

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetYangName() string { return "ssm-map-detail" }

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) SetParent(parent types.Entity) { ssmMapDetail.parent = parent }

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetParent() types.Entity { return ssmMapDetail.parent }

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetParentYangName() string { return "ssm-map-details" }

// Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetFilter() yfilter.YFilter { return mapInfo.YFilter }

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) SetFilter(yf yfilter.YFilter) { mapInfo.YFilter = yf }

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetGoName(yname string) string {
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetSegmentPath() string {
    return "map-info"
}

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &mapInfo.GroupAddressXr
    }
    return nil
}

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &mapInfo.GroupAddressXr
    return children
}

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["map-type"] = mapInfo.MapType
    leafs["source-counts"] = mapInfo.SourceCounts
    return leafs
}

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleName() string { return "cisco_ios_xr" }

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetYangName() string { return "map-info" }

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) SetParent(parent types.Entity) { mapInfo.parent = parent }

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetParent() types.Entity { return mapInfo.parent }

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetParentYangName() string { return "ssm-map-detail" }

// Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParentYangName() string { return "map-info" }

// Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetFilter() yfilter.YFilter { return sources.YFilter }

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) SetFilter(yf yfilter.YFilter) { sources.YFilter = yf }

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetSegmentPath() string {
    return "sources"
}

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sources.AfName
    leafs["ipv4-address"] = sources.Ipv4Address
    leafs["ipv6-address"] = sources.Ipv6Address
    return leafs
}

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetBundleName() string { return "cisco_ios_xr" }

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetYangName() string { return "sources" }

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) SetParent(parent types.Entity) { sources.parent = parent }

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetParent() types.Entity { return sources.parent }

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetParentYangName() string { return "ssm-map-detail" }

// Mld_Active_Vrfs_Vrf_InterfaceStateOffs
// IGMP Interface state off
type Mld_Active_Vrfs_Vrf_InterfaceStateOffs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetFilter() yfilter.YFilter { return interfaceStateOffs.YFilter }

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) SetFilter(yf yfilter.YFilter) { interfaceStateOffs.YFilter = yf }

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetGoName(yname string) string {
    if yname == "interface-state-off" { return "InterfaceStateOff" }
    return ""
}

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetSegmentPath() string {
    return "interface-state-offs"
}

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-off" {
        for _, c := range interfaceStateOffs.InterfaceStateOff {
            if interfaceStateOffs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff{}
        interfaceStateOffs.InterfaceStateOff = append(interfaceStateOffs.InterfaceStateOff, child)
        return &interfaceStateOffs.InterfaceStateOff[len(interfaceStateOffs.InterfaceStateOff)-1]
    }
    return nil
}

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOffs.InterfaceStateOff {
        children[interfaceStateOffs.InterfaceStateOff[i].GetSegmentPath()] = &interfaceStateOffs.InterfaceStateOff[i]
    }
    return children
}

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetYangName() string { return "interface-state-offs" }

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) SetParent(parent types.Entity) { interfaceStateOffs.parent = parent }

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetParent() types.Entity { return interfaceStateOffs.parent }

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetParentYangName() string { return "vrf" }

// Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetFilter() yfilter.YFilter { return interfaceStateOff.YFilter }

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) SetFilter(yf yfilter.YFilter) { interfaceStateOff.YFilter = yf }

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetSegmentPath() string {
    return "interface-state-off" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOff.InterfaceName) + "']"
}

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOff.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOff.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOff.SubscriberAddress
    }
    return nil
}

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOff.Address
    children["querier-address"] = &interfaceStateOff.QuerierAddress
    children["subscriber-address"] = &interfaceStateOff.SubscriberAddress
    return children
}

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOff.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOff.InterfaceNameXr
    leafs["state"] = interfaceStateOff.State
    leafs["prefix-length"] = interfaceStateOff.PrefixLength
    leafs["is-interface-up"] = interfaceStateOff.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOff.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOff.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOff.IgmpVersion
    leafs["host-version"] = interfaceStateOff.HostVersion
    leafs["query-interval"] = interfaceStateOff.QueryInterval
    leafs["query-timeout"] = interfaceStateOff.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOff.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOff.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOff.GroupJoins
    leafs["group-leaves"] = interfaceStateOff.GroupLeaves
    leafs["is-querier"] = interfaceStateOff.IsQuerier
    leafs["total-active-groups"] = interfaceStateOff.TotalActiveGroups
    leafs["robustness"] = interfaceStateOff.Robustness
    leafs["proxy-interface"] = interfaceStateOff.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOff.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOff.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOff.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOff.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOff.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOff.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOff.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOff.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOff.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOff.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOff.VrfId
    leafs["mte-vrf-id"] = interfaceStateOff.MteVrfId
    leafs["location"] = interfaceStateOff.Location
    leafs["mtu"] = interfaceStateOff.Mtu
    leafs["vrf-state"] = interfaceStateOff.VrfState
    leafs["is-configurationverify"] = interfaceStateOff.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOff.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOff.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOff.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOff.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOff.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOff.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOff.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOff.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOff.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOff.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOff.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOff.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOff.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOff.MteTupleCount
    return leafs
}

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetYangName() string { return "interface-state-off" }

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) SetParent(parent types.Entity) { interfaceStateOff.parent = parent }

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetParent() types.Entity { return interfaceStateOff.parent }

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetParentYangName() string { return "interface-state-offs" }

// Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetYangName() string { return "address" }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetParentYangName() string { return "interface-state-off" }

// Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParentYangName() string { return "interface-state-off" }

// Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParentYangName() string { return "interface-state-off" }

// Mld_Active_Process
// Process
type Mld_Active_Process struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MRIB RouteDB Expiry Information.
    AmtSummary Mld_Active_Process_AmtSummary

    // NSR Information.
    Nsr Mld_Active_Process_Nsr

    // Table containing AMT Gateway DataBase information.
    AmtGatewaies Mld_Active_Process_AmtGatewaies

    // IGMP Unicast-Qos-Adjust Statistics.
    UnicastQosAdjustStats Mld_Active_Process_UnicastQosAdjustStats

    // IGMP BVI Stats.
    BviStatistics Mld_Active_Process_BviStatistics

    // NSF Information.
    Nsf Mld_Active_Process_Nsf
}

func (process *Mld_Active_Process) GetFilter() yfilter.YFilter { return process.YFilter }

func (process *Mld_Active_Process) SetFilter(yf yfilter.YFilter) { process.YFilter = yf }

func (process *Mld_Active_Process) GetGoName(yname string) string {
    if yname == "amt-summary" { return "AmtSummary" }
    if yname == "nsr" { return "Nsr" }
    if yname == "amt-gatewaies" { return "AmtGatewaies" }
    if yname == "unicast-qos-adjust-stats" { return "UnicastQosAdjustStats" }
    if yname == "bvi-statistics" { return "BviStatistics" }
    if yname == "nsf" { return "Nsf" }
    return ""
}

func (process *Mld_Active_Process) GetSegmentPath() string {
    return "process"
}

func (process *Mld_Active_Process) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "amt-summary" {
        return &process.AmtSummary
    }
    if childYangName == "nsr" {
        return &process.Nsr
    }
    if childYangName == "amt-gatewaies" {
        return &process.AmtGatewaies
    }
    if childYangName == "unicast-qos-adjust-stats" {
        return &process.UnicastQosAdjustStats
    }
    if childYangName == "bvi-statistics" {
        return &process.BviStatistics
    }
    if childYangName == "nsf" {
        return &process.Nsf
    }
    return nil
}

func (process *Mld_Active_Process) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["amt-summary"] = &process.AmtSummary
    children["nsr"] = &process.Nsr
    children["amt-gatewaies"] = &process.AmtGatewaies
    children["unicast-qos-adjust-stats"] = &process.UnicastQosAdjustStats
    children["bvi-statistics"] = &process.BviStatistics
    children["nsf"] = &process.Nsf
    return children
}

func (process *Mld_Active_Process) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (process *Mld_Active_Process) GetBundleName() string { return "cisco_ios_xr" }

func (process *Mld_Active_Process) GetYangName() string { return "process" }

func (process *Mld_Active_Process) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (process *Mld_Active_Process) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (process *Mld_Active_Process) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (process *Mld_Active_Process) SetParent(parent types.Entity) { process.parent = parent }

func (process *Mld_Active_Process) GetParent() types.Entity { return process.parent }

func (process *Mld_Active_Process) GetParentYangName() string { return "active" }

// Mld_Active_Process_AmtSummary
// MRIB RouteDB Expiry Information
type Mld_Active_Process_AmtSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Robustness variable. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AnycastPrefix interface{}

    // Advertize AMT prefix length. The type is interface{} with range:
    // 0..4294967295.
    PrefixLength interface{}

    // Advertaisment for AMT Relay address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RelayAddress interface{}

    // AMT Tunnel MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Type Of Service value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Tos interface{}

    // Time To Live value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Ttl interface{}

    // AMT Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Number of AMT Gateway. The type is interface{} with range: 0..4294967295.
    GatewayCount interface{}

    // Maximum Gateway allowed. The type is interface{} with range: 0..4294967295.
    MaxGateway interface{}

    // AMT Tunnel Count. The type is interface{} with range: 0..4294967295.
    TunnelCount interface{}

    // AMT Tunnel configured Maximum. The type is interface{} with range:
    // 0..4294967295.
    TunnelConfiguredMaximum interface{}

    // ACL configured under AMT. The type is bool.
    IsAclConfigured interface{}

    // AMT Gateway Simulation. The type is bool.
    IsGatewaySimulation interface{}

    // AMT Out Of Resource. The type is bool.
    IsOuOfResource interface{}
}

func (amtSummary *Mld_Active_Process_AmtSummary) GetFilter() yfilter.YFilter { return amtSummary.YFilter }

func (amtSummary *Mld_Active_Process_AmtSummary) SetFilter(yf yfilter.YFilter) { amtSummary.YFilter = yf }

func (amtSummary *Mld_Active_Process_AmtSummary) GetGoName(yname string) string {
    if yname == "anycast-prefix" { return "AnycastPrefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "relay-address" { return "RelayAddress" }
    if yname == "mtu" { return "Mtu" }
    if yname == "tos" { return "Tos" }
    if yname == "ttl" { return "Ttl" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "gateway-count" { return "GatewayCount" }
    if yname == "max-gateway" { return "MaxGateway" }
    if yname == "tunnel-count" { return "TunnelCount" }
    if yname == "tunnel-configured-maximum" { return "TunnelConfiguredMaximum" }
    if yname == "is-acl-configured" { return "IsAclConfigured" }
    if yname == "is-gateway-simulation" { return "IsGatewaySimulation" }
    if yname == "is-ou-of-resource" { return "IsOuOfResource" }
    return ""
}

func (amtSummary *Mld_Active_Process_AmtSummary) GetSegmentPath() string {
    return "amt-summary"
}

func (amtSummary *Mld_Active_Process_AmtSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (amtSummary *Mld_Active_Process_AmtSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (amtSummary *Mld_Active_Process_AmtSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["anycast-prefix"] = amtSummary.AnycastPrefix
    leafs["prefix-length"] = amtSummary.PrefixLength
    leafs["relay-address"] = amtSummary.RelayAddress
    leafs["mtu"] = amtSummary.Mtu
    leafs["tos"] = amtSummary.Tos
    leafs["ttl"] = amtSummary.Ttl
    leafs["query-interval"] = amtSummary.QueryInterval
    leafs["gateway-count"] = amtSummary.GatewayCount
    leafs["max-gateway"] = amtSummary.MaxGateway
    leafs["tunnel-count"] = amtSummary.TunnelCount
    leafs["tunnel-configured-maximum"] = amtSummary.TunnelConfiguredMaximum
    leafs["is-acl-configured"] = amtSummary.IsAclConfigured
    leafs["is-gateway-simulation"] = amtSummary.IsGatewaySimulation
    leafs["is-ou-of-resource"] = amtSummary.IsOuOfResource
    return leafs
}

func (amtSummary *Mld_Active_Process_AmtSummary) GetBundleName() string { return "cisco_ios_xr" }

func (amtSummary *Mld_Active_Process_AmtSummary) GetYangName() string { return "amt-summary" }

func (amtSummary *Mld_Active_Process_AmtSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (amtSummary *Mld_Active_Process_AmtSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (amtSummary *Mld_Active_Process_AmtSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (amtSummary *Mld_Active_Process_AmtSummary) SetParent(parent types.Entity) { amtSummary.parent = parent }

func (amtSummary *Mld_Active_Process_AmtSummary) GetParent() types.Entity { return amtSummary.parent }

func (amtSummary *Mld_Active_Process_AmtSummary) GetParentYangName() string { return "process" }

// Mld_Active_Process_Nsr
// NSR Information
type Mld_Active_Process_Nsr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NSR state. The type is interface{} with range: 0..255.
    State interface{}

    // Partner process connected. The type is bool.
    PartnerProcConnected interface{}

    // Collaborators convergence done. The type is bool.
    CollabConvDone interface{}

    // RMF Notification done. The type is bool.
    RmfNotificationDone interface{}

    // Time when process came up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProc interface{}

    // Time when process connection went up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionUp interface{}

    // Time when process connection went down. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionDn interface{}

    // Time when RMF Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfReady interface{}

    // Time when RMF Not-Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfNotReady interface{}

    // No. of times process connection went up. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionUp interface{}

    // No. of times process connection went down. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionDn interface{}

    // No. of times RMF Ready notif was sent. The type is interface{} with range:
    // 0..4294967295.
    CountRmfReady interface{}

    // No. of times RMF Not Ready notif was sent. The type is interface{} with
    // range: 0..4294967295.
    CountRmfNotReady interface{}
}

func (nsr *Mld_Active_Process_Nsr) GetFilter() yfilter.YFilter { return nsr.YFilter }

func (nsr *Mld_Active_Process_Nsr) SetFilter(yf yfilter.YFilter) { nsr.YFilter = yf }

func (nsr *Mld_Active_Process_Nsr) GetGoName(yname string) string {
    if yname == "state" { return "State" }
    if yname == "partner-proc-connected" { return "PartnerProcConnected" }
    if yname == "collab-conv-done" { return "CollabConvDone" }
    if yname == "rmf-notification-done" { return "RmfNotificationDone" }
    if yname == "last-proc" { return "LastProc" }
    if yname == "last-proc-connection-up" { return "LastProcConnectionUp" }
    if yname == "last-proc-connection-dn" { return "LastProcConnectionDn" }
    if yname == "last-rmf-ready" { return "LastRmfReady" }
    if yname == "last-rmf-not-ready" { return "LastRmfNotReady" }
    if yname == "count-proc-connection-up" { return "CountProcConnectionUp" }
    if yname == "count-proc-connection-dn" { return "CountProcConnectionDn" }
    if yname == "count-rmf-ready" { return "CountRmfReady" }
    if yname == "count-rmf-not-ready" { return "CountRmfNotReady" }
    return ""
}

func (nsr *Mld_Active_Process_Nsr) GetSegmentPath() string {
    return "nsr"
}

func (nsr *Mld_Active_Process_Nsr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsr *Mld_Active_Process_Nsr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsr *Mld_Active_Process_Nsr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state"] = nsr.State
    leafs["partner-proc-connected"] = nsr.PartnerProcConnected
    leafs["collab-conv-done"] = nsr.CollabConvDone
    leafs["rmf-notification-done"] = nsr.RmfNotificationDone
    leafs["last-proc"] = nsr.LastProc
    leafs["last-proc-connection-up"] = nsr.LastProcConnectionUp
    leafs["last-proc-connection-dn"] = nsr.LastProcConnectionDn
    leafs["last-rmf-ready"] = nsr.LastRmfReady
    leafs["last-rmf-not-ready"] = nsr.LastRmfNotReady
    leafs["count-proc-connection-up"] = nsr.CountProcConnectionUp
    leafs["count-proc-connection-dn"] = nsr.CountProcConnectionDn
    leafs["count-rmf-ready"] = nsr.CountRmfReady
    leafs["count-rmf-not-ready"] = nsr.CountRmfNotReady
    return leafs
}

func (nsr *Mld_Active_Process_Nsr) GetBundleName() string { return "cisco_ios_xr" }

func (nsr *Mld_Active_Process_Nsr) GetYangName() string { return "nsr" }

func (nsr *Mld_Active_Process_Nsr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsr *Mld_Active_Process_Nsr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsr *Mld_Active_Process_Nsr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsr *Mld_Active_Process_Nsr) SetParent(parent types.Entity) { nsr.parent = parent }

func (nsr *Mld_Active_Process_Nsr) GetParent() types.Entity { return nsr.parent }

func (nsr *Mld_Active_Process_Nsr) GetParentYangName() string { return "process" }

// Mld_Active_Process_AmtGatewaies
// Table containing AMT Gateway DataBase
// information
type Mld_Active_Process_AmtGatewaies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AMT Gateway DataBase information. The type is slice of
    // Mld_Active_Process_AmtGatewaies_AmtGateway.
    AmtGateway []Mld_Active_Process_AmtGatewaies_AmtGateway
}

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetFilter() yfilter.YFilter { return amtGatewaies.YFilter }

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) SetFilter(yf yfilter.YFilter) { amtGatewaies.YFilter = yf }

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetGoName(yname string) string {
    if yname == "amt-gateway" { return "AmtGateway" }
    return ""
}

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetSegmentPath() string {
    return "amt-gatewaies"
}

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "amt-gateway" {
        for _, c := range amtGatewaies.AmtGateway {
            if amtGatewaies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_Process_AmtGatewaies_AmtGateway{}
        amtGatewaies.AmtGateway = append(amtGatewaies.AmtGateway, child)
        return &amtGatewaies.AmtGateway[len(amtGatewaies.AmtGateway)-1]
    }
    return nil
}

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range amtGatewaies.AmtGateway {
        children[amtGatewaies.AmtGateway[i].GetSegmentPath()] = &amtGatewaies.AmtGateway[i]
    }
    return children
}

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetBundleName() string { return "cisco_ios_xr" }

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetYangName() string { return "amt-gatewaies" }

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) SetParent(parent types.Entity) { amtGatewaies.parent = parent }

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetParent() types.Entity { return amtGatewaies.parent }

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetParentYangName() string { return "process" }

// Mld_Active_Process_AmtGatewaies_AmtGateway
// AMT Gateway DataBase information
type Mld_Active_Process_AmtGatewaies_AmtGateway struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Gateway Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GatewayAddress interface{}

    // Port. The type is interface{} with range: -2147483648..2147483647.
    Port interface{}

    // GW. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Amtgw interface{}

    // Port. The type is interface{} with range: 0..4294967295.
    AmtPort interface{}

    // Len. The type is interface{} with range: 0..4294967295.
    KeyLen interface{}

    // AMT NH. The type is interface{} with range: 0..4294967295.
    Amtnh interface{}

    // Nonce. The type is interface{} with range: 0..4294967295.
    AmtNonce interface{}

    // IDB. The type is interface{} with range: 0..18446744073709551615.
    Idb interface{}

    // UpdIn. The type is interface{} with range: 0..4294967295.
    MemUpdIn interface{}

    // UpdOut. The type is interface{} with range: 0..4294967295.
    MemUpdOut interface{}
}

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetFilter() yfilter.YFilter { return amtGateway.YFilter }

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) SetFilter(yf yfilter.YFilter) { amtGateway.YFilter = yf }

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetGoName(yname string) string {
    if yname == "gateway-address" { return "GatewayAddress" }
    if yname == "port" { return "Port" }
    if yname == "amtgw" { return "Amtgw" }
    if yname == "amt-port" { return "AmtPort" }
    if yname == "key-len" { return "KeyLen" }
    if yname == "amtnh" { return "Amtnh" }
    if yname == "amt-nonce" { return "AmtNonce" }
    if yname == "idb" { return "Idb" }
    if yname == "mem-upd-in" { return "MemUpdIn" }
    if yname == "mem-upd-out" { return "MemUpdOut" }
    return ""
}

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetSegmentPath() string {
    return "amt-gateway"
}

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gateway-address"] = amtGateway.GatewayAddress
    leafs["port"] = amtGateway.Port
    leafs["amtgw"] = amtGateway.Amtgw
    leafs["amt-port"] = amtGateway.AmtPort
    leafs["key-len"] = amtGateway.KeyLen
    leafs["amtnh"] = amtGateway.Amtnh
    leafs["amt-nonce"] = amtGateway.AmtNonce
    leafs["idb"] = amtGateway.Idb
    leafs["mem-upd-in"] = amtGateway.MemUpdIn
    leafs["mem-upd-out"] = amtGateway.MemUpdOut
    return leafs
}

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetBundleName() string { return "cisco_ios_xr" }

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetYangName() string { return "amt-gateway" }

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) SetParent(parent types.Entity) { amtGateway.parent = parent }

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetParent() types.Entity { return amtGateway.parent }

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetParentYangName() string { return "amt-gatewaies" }

// Mld_Active_Process_UnicastQosAdjustStats
// IGMP Unicast-Qos-Adjust Statistics
type Mld_Active_Process_UnicastQosAdjustStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // I2Q Queue count. The type is interface{} with range: 0..65535.
    Queues interface{}

    // I2Q Rate Batch count. The type is interface{} with range: 0..65535.
    Batches interface{}

    // Add to batch count. The type is interface{} with range: 0..4294967295.
    AddToBatches interface{}

    // Delete to batch count. The type is interface{} with range: 0..4294967295.
    DeleteToBatches interface{}

    // Send Success count. The type is interface{} with range: 0..4294967295.
    SendSuccess interface{}

    // Number of Send errors in batch. The type is interface{} with range:
    // 0..4294967295.
    SendErrors interface{}

    // Send Error due to comms count. The type is interface{} with range:
    // 0..4294967295.
    SendCommErrors interface{}

    // Send Error due to partial issue count. The type is interface{} with range:
    // 0..4294967295.
    SendPartialErrors interface{}

    // Number of Resync request received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedResyncRequests interface{}

    // Number of bulks sent for last resync received. The type is interface{} with
    // range: 0..4294967295.
    SentResyncBulks interface{}

    // Is Resync request received. The type is bool.
    IsResyncReceived interface{}

    // Is Resync required. The type is bool.
    IsResyncRequired interface{}

    // Is Resync Start message sent. The type is bool.
    IsResyncStartSent interface{}

    // Is QOS Sweeped once . The type is bool.
    IsQosSSweeped interface{}

    // Time elapsed since Last mark and sweep in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastSweepTime interface{}

    // Time elapsed since Last download to QOS in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastDownloadTime interface{}
}

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetFilter() yfilter.YFilter { return unicastQosAdjustStats.YFilter }

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) SetFilter(yf yfilter.YFilter) { unicastQosAdjustStats.YFilter = yf }

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetGoName(yname string) string {
    if yname == "queues" { return "Queues" }
    if yname == "batches" { return "Batches" }
    if yname == "add-to-batches" { return "AddToBatches" }
    if yname == "delete-to-batches" { return "DeleteToBatches" }
    if yname == "send-success" { return "SendSuccess" }
    if yname == "send-errors" { return "SendErrors" }
    if yname == "send-comm-errors" { return "SendCommErrors" }
    if yname == "send-partial-errors" { return "SendPartialErrors" }
    if yname == "received-resync-requests" { return "ReceivedResyncRequests" }
    if yname == "sent-resync-bulks" { return "SentResyncBulks" }
    if yname == "is-resync-received" { return "IsResyncReceived" }
    if yname == "is-resync-required" { return "IsResyncRequired" }
    if yname == "is-resync-start-sent" { return "IsResyncStartSent" }
    if yname == "is-qos-s-sweeped" { return "IsQosSSweeped" }
    if yname == "last-sweep-time" { return "LastSweepTime" }
    if yname == "last-download-time" { return "LastDownloadTime" }
    return ""
}

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetSegmentPath() string {
    return "unicast-qos-adjust-stats"
}

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["queues"] = unicastQosAdjustStats.Queues
    leafs["batches"] = unicastQosAdjustStats.Batches
    leafs["add-to-batches"] = unicastQosAdjustStats.AddToBatches
    leafs["delete-to-batches"] = unicastQosAdjustStats.DeleteToBatches
    leafs["send-success"] = unicastQosAdjustStats.SendSuccess
    leafs["send-errors"] = unicastQosAdjustStats.SendErrors
    leafs["send-comm-errors"] = unicastQosAdjustStats.SendCommErrors
    leafs["send-partial-errors"] = unicastQosAdjustStats.SendPartialErrors
    leafs["received-resync-requests"] = unicastQosAdjustStats.ReceivedResyncRequests
    leafs["sent-resync-bulks"] = unicastQosAdjustStats.SentResyncBulks
    leafs["is-resync-received"] = unicastQosAdjustStats.IsResyncReceived
    leafs["is-resync-required"] = unicastQosAdjustStats.IsResyncRequired
    leafs["is-resync-start-sent"] = unicastQosAdjustStats.IsResyncStartSent
    leafs["is-qos-s-sweeped"] = unicastQosAdjustStats.IsQosSSweeped
    leafs["last-sweep-time"] = unicastQosAdjustStats.LastSweepTime
    leafs["last-download-time"] = unicastQosAdjustStats.LastDownloadTime
    return leafs
}

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetBundleName() string { return "cisco_ios_xr" }

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetYangName() string { return "unicast-qos-adjust-stats" }

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) SetParent(parent types.Entity) { unicastQosAdjustStats.parent = parent }

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetParent() types.Entity { return unicastQosAdjustStats.parent }

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetParentYangName() string { return "process" }

// Mld_Active_Process_BviStatistics
// IGMP BVI Stats
type Mld_Active_Process_BviStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of AIPC buffers received. The type is interface{} with range:
    // 0..4294967295.
    ReceiveBuffers interface{}

    // Number of AIPC buffers released. The type is interface{} with range:
    // 0..4294967295.
    ReleaseBuffers interface{}

    // Number of AIPC buffers send blocked. The type is interface{} with range:
    // 0..4294967295.
    SendBlocks interface{}

    // Number of AIPC buffers release failed. The type is interface{} with range:
    // 0..4294967295.
    ReleaseFailBuffers interface{}

    // Number of AIPC NULL buffer handles. The type is interface{} with range:
    // 0..4294967295.
    NullBufferHandles interface{}

    // Number of AIPC open notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOpenNotif interface{}

    // Number of AIPC close notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcCloseNotif interface{}

    // Number of AIPC error notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcErrorNotif interface{}

    // Number of AIPC LWM notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcLwmNotif interface{}

    // Number of AIPC input waiting notifications received. The type is
    // interface{} with range: 0..4294967295.
    RxIpcInputWaitNotif interface{}

    // Number of AIPC send status notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcSendStatusNotif interface{}

    // Number of AIPC publish notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcPublishNotif interface{}

    // Number of AIPC queue full notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcQFullNotif interface{}

    // Number of AIPC output notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOutputNotif interface{}

    // Number of AIPC connect notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcConnectNotif interface{}

    // Number of IGMP protocol messages received. The type is interface{} with
    // range: 0..4294967295.
    RxIgmpPacketSuccess interface{}

    // Number of IGMP Mrouter Add messages received. The type is interface{} with
    // range: 0..4294967295.
    RxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages received. The type is interface{}
    // with range: 0..4294967295.
    RxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    RxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Add messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    TxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages received. The type is interface{}
    // with range: 0..4294967295.
    RxUnknownMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages transmitted. The type is
    // interface{} with range: 0..4294967295.
    TxUnknownMrouterMsg interface{}

    // Number of AIPC transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TxBufferErrors interface{}

    // Number of AIPC buffers transmited. The type is interface{} with range:
    // 0..4294967295.
    TxBuffers interface{}

    // Number of IGMP protocol buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxProtocolBuffers interface{}

    // Number of IGMP Mrouter buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxMrouterBuffers interface{}

    // Number of IGMP Unknown buffers transmited. The type is interface{} with
    // range: 0..4294967295.
    TxUnknownBuffers interface{}

    // Number of WTX messages received. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgRecvd interface{}

    // Number of WTX messages sent. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgSent interface{}

    // Number of WTX messages sent to Protocol. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgProtoSent interface{}

    // Number of WTX messages dropped due to disconnect. The type is interface{}
    // with range: 0..4294967295.
    WtxMsgDropDc interface{}

    // Number of WTX messages dropped to memory. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgDropNomem interface{}

    // Number of WTX messages freed. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgFreed interface{}
}

func (bviStatistics *Mld_Active_Process_BviStatistics) GetFilter() yfilter.YFilter { return bviStatistics.YFilter }

func (bviStatistics *Mld_Active_Process_BviStatistics) SetFilter(yf yfilter.YFilter) { bviStatistics.YFilter = yf }

func (bviStatistics *Mld_Active_Process_BviStatistics) GetGoName(yname string) string {
    if yname == "receive-buffers" { return "ReceiveBuffers" }
    if yname == "release-buffers" { return "ReleaseBuffers" }
    if yname == "send-blocks" { return "SendBlocks" }
    if yname == "release-fail-buffers" { return "ReleaseFailBuffers" }
    if yname == "null-buffer-handles" { return "NullBufferHandles" }
    if yname == "rx-ipc-open-notif" { return "RxIpcOpenNotif" }
    if yname == "rx-ipc-close-notif" { return "RxIpcCloseNotif" }
    if yname == "rx-ipc-error-notif" { return "RxIpcErrorNotif" }
    if yname == "rx-ipc-lwm-notif" { return "RxIpcLwmNotif" }
    if yname == "rx-ipc-input-wait-notif" { return "RxIpcInputWaitNotif" }
    if yname == "rx-ipc-send-status-notif" { return "RxIpcSendStatusNotif" }
    if yname == "rx-ipc-publish-notif" { return "RxIpcPublishNotif" }
    if yname == "rx-ipc-q-full-notif" { return "RxIpcQFullNotif" }
    if yname == "rx-ipc-output-notif" { return "RxIpcOutputNotif" }
    if yname == "rx-ipc-connect-notif" { return "RxIpcConnectNotif" }
    if yname == "rx-igmp-packet-success" { return "RxIgmpPacketSuccess" }
    if yname == "rx-add-mrouter-msg" { return "RxAddMrouterMsg" }
    if yname == "rx-delete-mrouter-msg" { return "RxDeleteMrouterMsg" }
    if yname == "rx-sweep-mrouter-msg" { return "RxSweepMrouterMsg" }
    if yname == "tx-add-mrouter-msg" { return "TxAddMrouterMsg" }
    if yname == "tx-delete-mrouter-msg" { return "TxDeleteMrouterMsg" }
    if yname == "tx-sweep-mrouter-msg" { return "TxSweepMrouterMsg" }
    if yname == "rx-unknown-mrouter-msg" { return "RxUnknownMrouterMsg" }
    if yname == "tx-unknown-mrouter-msg" { return "TxUnknownMrouterMsg" }
    if yname == "tx-buffer-errors" { return "TxBufferErrors" }
    if yname == "tx-buffers" { return "TxBuffers" }
    if yname == "tx-protocol-buffers" { return "TxProtocolBuffers" }
    if yname == "tx-mrouter-buffers" { return "TxMrouterBuffers" }
    if yname == "tx-unknown-buffers" { return "TxUnknownBuffers" }
    if yname == "wtx-msg-recvd" { return "WtxMsgRecvd" }
    if yname == "wtx-msg-sent" { return "WtxMsgSent" }
    if yname == "wtx-msg-proto-sent" { return "WtxMsgProtoSent" }
    if yname == "wtx-msg-drop-dc" { return "WtxMsgDropDc" }
    if yname == "wtx-msg-drop-nomem" { return "WtxMsgDropNomem" }
    if yname == "wtx-msg-freed" { return "WtxMsgFreed" }
    return ""
}

func (bviStatistics *Mld_Active_Process_BviStatistics) GetSegmentPath() string {
    return "bvi-statistics"
}

func (bviStatistics *Mld_Active_Process_BviStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bviStatistics *Mld_Active_Process_BviStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bviStatistics *Mld_Active_Process_BviStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["receive-buffers"] = bviStatistics.ReceiveBuffers
    leafs["release-buffers"] = bviStatistics.ReleaseBuffers
    leafs["send-blocks"] = bviStatistics.SendBlocks
    leafs["release-fail-buffers"] = bviStatistics.ReleaseFailBuffers
    leafs["null-buffer-handles"] = bviStatistics.NullBufferHandles
    leafs["rx-ipc-open-notif"] = bviStatistics.RxIpcOpenNotif
    leafs["rx-ipc-close-notif"] = bviStatistics.RxIpcCloseNotif
    leafs["rx-ipc-error-notif"] = bviStatistics.RxIpcErrorNotif
    leafs["rx-ipc-lwm-notif"] = bviStatistics.RxIpcLwmNotif
    leafs["rx-ipc-input-wait-notif"] = bviStatistics.RxIpcInputWaitNotif
    leafs["rx-ipc-send-status-notif"] = bviStatistics.RxIpcSendStatusNotif
    leafs["rx-ipc-publish-notif"] = bviStatistics.RxIpcPublishNotif
    leafs["rx-ipc-q-full-notif"] = bviStatistics.RxIpcQFullNotif
    leafs["rx-ipc-output-notif"] = bviStatistics.RxIpcOutputNotif
    leafs["rx-ipc-connect-notif"] = bviStatistics.RxIpcConnectNotif
    leafs["rx-igmp-packet-success"] = bviStatistics.RxIgmpPacketSuccess
    leafs["rx-add-mrouter-msg"] = bviStatistics.RxAddMrouterMsg
    leafs["rx-delete-mrouter-msg"] = bviStatistics.RxDeleteMrouterMsg
    leafs["rx-sweep-mrouter-msg"] = bviStatistics.RxSweepMrouterMsg
    leafs["tx-add-mrouter-msg"] = bviStatistics.TxAddMrouterMsg
    leafs["tx-delete-mrouter-msg"] = bviStatistics.TxDeleteMrouterMsg
    leafs["tx-sweep-mrouter-msg"] = bviStatistics.TxSweepMrouterMsg
    leafs["rx-unknown-mrouter-msg"] = bviStatistics.RxUnknownMrouterMsg
    leafs["tx-unknown-mrouter-msg"] = bviStatistics.TxUnknownMrouterMsg
    leafs["tx-buffer-errors"] = bviStatistics.TxBufferErrors
    leafs["tx-buffers"] = bviStatistics.TxBuffers
    leafs["tx-protocol-buffers"] = bviStatistics.TxProtocolBuffers
    leafs["tx-mrouter-buffers"] = bviStatistics.TxMrouterBuffers
    leafs["tx-unknown-buffers"] = bviStatistics.TxUnknownBuffers
    leafs["wtx-msg-recvd"] = bviStatistics.WtxMsgRecvd
    leafs["wtx-msg-sent"] = bviStatistics.WtxMsgSent
    leafs["wtx-msg-proto-sent"] = bviStatistics.WtxMsgProtoSent
    leafs["wtx-msg-drop-dc"] = bviStatistics.WtxMsgDropDc
    leafs["wtx-msg-drop-nomem"] = bviStatistics.WtxMsgDropNomem
    leafs["wtx-msg-freed"] = bviStatistics.WtxMsgFreed
    return leafs
}

func (bviStatistics *Mld_Active_Process_BviStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (bviStatistics *Mld_Active_Process_BviStatistics) GetYangName() string { return "bvi-statistics" }

func (bviStatistics *Mld_Active_Process_BviStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bviStatistics *Mld_Active_Process_BviStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bviStatistics *Mld_Active_Process_BviStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bviStatistics *Mld_Active_Process_BviStatistics) SetParent(parent types.Entity) { bviStatistics.parent = parent }

func (bviStatistics *Mld_Active_Process_BviStatistics) GetParent() types.Entity { return bviStatistics.parent }

func (bviStatistics *Mld_Active_Process_BviStatistics) GetParentYangName() string { return "process" }

// Mld_Active_Process_Nsf
// NSF Information
type Mld_Active_Process_Nsf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is Multicast NSF active. The type is bool.
    IsMulticastNsfActive interface{}

    // Multicast NSF timeout in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeout interface{}

    // Multicast NSF time remaining in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeLeft interface{}

    // Respawn Count. The type is interface{} with range: 0..4294967295.
    RespawnCount interface{}

    // Last NSF time ON. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOn interface{}

    // Last NSF time off. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOff interface{}

    // Last NSF time ON in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOnMin interface{}

    // Last NSF time OFF in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOffMin interface{}

    // Last ICD Notif Recv. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastIcdNotifRecv interface{}

    // Last ICD Notif Recv in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastIcdNotifRecvMin interface{}
}

func (nsf *Mld_Active_Process_Nsf) GetFilter() yfilter.YFilter { return nsf.YFilter }

func (nsf *Mld_Active_Process_Nsf) SetFilter(yf yfilter.YFilter) { nsf.YFilter = yf }

func (nsf *Mld_Active_Process_Nsf) GetGoName(yname string) string {
    if yname == "is-multicast-nsf-active" { return "IsMulticastNsfActive" }
    if yname == "multicast-nsf-timeout" { return "MulticastNsfTimeout" }
    if yname == "multicast-nsf-time-left" { return "MulticastNsfTimeLeft" }
    if yname == "respawn-count" { return "RespawnCount" }
    if yname == "last-nsf-on" { return "LastNsfOn" }
    if yname == "last-nsf-off" { return "LastNsfOff" }
    if yname == "last-nsf-on-min" { return "LastNsfOnMin" }
    if yname == "last-nsf-off-min" { return "LastNsfOffMin" }
    if yname == "last-icd-notif-recv" { return "LastIcdNotifRecv" }
    if yname == "last-icd-notif-recv-min" { return "LastIcdNotifRecvMin" }
    return ""
}

func (nsf *Mld_Active_Process_Nsf) GetSegmentPath() string {
    return "nsf"
}

func (nsf *Mld_Active_Process_Nsf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsf *Mld_Active_Process_Nsf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsf *Mld_Active_Process_Nsf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-multicast-nsf-active"] = nsf.IsMulticastNsfActive
    leafs["multicast-nsf-timeout"] = nsf.MulticastNsfTimeout
    leafs["multicast-nsf-time-left"] = nsf.MulticastNsfTimeLeft
    leafs["respawn-count"] = nsf.RespawnCount
    leafs["last-nsf-on"] = nsf.LastNsfOn
    leafs["last-nsf-off"] = nsf.LastNsfOff
    leafs["last-nsf-on-min"] = nsf.LastNsfOnMin
    leafs["last-nsf-off-min"] = nsf.LastNsfOffMin
    leafs["last-icd-notif-recv"] = nsf.LastIcdNotifRecv
    leafs["last-icd-notif-recv-min"] = nsf.LastIcdNotifRecvMin
    return leafs
}

func (nsf *Mld_Active_Process_Nsf) GetBundleName() string { return "cisco_ios_xr" }

func (nsf *Mld_Active_Process_Nsf) GetYangName() string { return "nsf" }

func (nsf *Mld_Active_Process_Nsf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsf *Mld_Active_Process_Nsf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsf *Mld_Active_Process_Nsf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsf *Mld_Active_Process_Nsf) SetParent(parent types.Entity) { nsf.parent = parent }

func (nsf *Mld_Active_Process_Nsf) GetParent() types.Entity { return nsf.parent }

func (nsf *Mld_Active_Process_Nsf) GetParentYangName() string { return "process" }

// Mld_Active_DefaultContext
// Default Context
type Mld_Active_DefaultContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Summary Information.
    Summary Mld_Active_DefaultContext_Summary

    // IGMP Interface state on.
    InterfaceStateOns Mld_Active_DefaultContext_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Mld_Active_DefaultContext_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Mld_Active_DefaultContext_NonActiveGroups

    // SSM Map Table.
    SsmMaps Mld_Active_DefaultContext_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Mld_Active_DefaultContext_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Mld_Active_DefaultContext_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Mld_Active_DefaultContext_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Mld_Active_DefaultContext_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Mld_Active_DefaultContext_TrafficCounters

    // IGMP Group Database Table.
    Groups Mld_Active_DefaultContext_Groups

    // IGMP Groups Summary.
    GroupSummary Mld_Active_DefaultContext_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Mld_Active_DefaultContext_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Mld_Active_DefaultContext_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Mld_Active_DefaultContext_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Mld_Active_DefaultContext_InterfaceStateOffs
}

func (defaultContext *Mld_Active_DefaultContext) GetFilter() yfilter.YFilter { return defaultContext.YFilter }

func (defaultContext *Mld_Active_DefaultContext) SetFilter(yf yfilter.YFilter) { defaultContext.YFilter = yf }

func (defaultContext *Mld_Active_DefaultContext) GetGoName(yname string) string {
    if yname == "summary" { return "Summary" }
    if yname == "interface-state-ons" { return "InterfaceStateOns" }
    if yname == "detail-groups" { return "DetailGroups" }
    if yname == "non-active-groups" { return "NonActiveGroups" }
    if yname == "ssm-maps" { return "SsmMaps" }
    if yname == "explicit-groups" { return "ExplicitGroups" }
    if yname == "interface-table" { return "InterfaceTable" }
    if yname == "interface-unicast-qos-adjusts" { return "InterfaceUnicastQosAdjusts" }
    if yname == "ranges" { return "Ranges" }
    if yname == "ifrs-interfaces" { return "IfrsInterfaces" }
    if yname == "traffic-counters" { return "TrafficCounters" }
    if yname == "groups" { return "Groups" }
    if yname == "group-summary" { return "GroupSummary" }
    if yname == "ifrs-interface-summary" { return "IfrsInterfaceSummary" }
    if yname == "global-interface-table" { return "GlobalInterfaceTable" }
    if yname == "ssm-map-details" { return "SsmMapDetails" }
    if yname == "interface-state-offs" { return "InterfaceStateOffs" }
    return ""
}

func (defaultContext *Mld_Active_DefaultContext) GetSegmentPath() string {
    return "default-context"
}

func (defaultContext *Mld_Active_DefaultContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &defaultContext.Summary
    }
    if childYangName == "interface-state-ons" {
        return &defaultContext.InterfaceStateOns
    }
    if childYangName == "detail-groups" {
        return &defaultContext.DetailGroups
    }
    if childYangName == "non-active-groups" {
        return &defaultContext.NonActiveGroups
    }
    if childYangName == "ssm-maps" {
        return &defaultContext.SsmMaps
    }
    if childYangName == "explicit-groups" {
        return &defaultContext.ExplicitGroups
    }
    if childYangName == "interface-table" {
        return &defaultContext.InterfaceTable
    }
    if childYangName == "interface-unicast-qos-adjusts" {
        return &defaultContext.InterfaceUnicastQosAdjusts
    }
    if childYangName == "ranges" {
        return &defaultContext.Ranges
    }
    if childYangName == "ifrs-interfaces" {
        return &defaultContext.IfrsInterfaces
    }
    if childYangName == "traffic-counters" {
        return &defaultContext.TrafficCounters
    }
    if childYangName == "groups" {
        return &defaultContext.Groups
    }
    if childYangName == "group-summary" {
        return &defaultContext.GroupSummary
    }
    if childYangName == "ifrs-interface-summary" {
        return &defaultContext.IfrsInterfaceSummary
    }
    if childYangName == "global-interface-table" {
        return &defaultContext.GlobalInterfaceTable
    }
    if childYangName == "ssm-map-details" {
        return &defaultContext.SsmMapDetails
    }
    if childYangName == "interface-state-offs" {
        return &defaultContext.InterfaceStateOffs
    }
    return nil
}

func (defaultContext *Mld_Active_DefaultContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &defaultContext.Summary
    children["interface-state-ons"] = &defaultContext.InterfaceStateOns
    children["detail-groups"] = &defaultContext.DetailGroups
    children["non-active-groups"] = &defaultContext.NonActiveGroups
    children["ssm-maps"] = &defaultContext.SsmMaps
    children["explicit-groups"] = &defaultContext.ExplicitGroups
    children["interface-table"] = &defaultContext.InterfaceTable
    children["interface-unicast-qos-adjusts"] = &defaultContext.InterfaceUnicastQosAdjusts
    children["ranges"] = &defaultContext.Ranges
    children["ifrs-interfaces"] = &defaultContext.IfrsInterfaces
    children["traffic-counters"] = &defaultContext.TrafficCounters
    children["groups"] = &defaultContext.Groups
    children["group-summary"] = &defaultContext.GroupSummary
    children["ifrs-interface-summary"] = &defaultContext.IfrsInterfaceSummary
    children["global-interface-table"] = &defaultContext.GlobalInterfaceTable
    children["ssm-map-details"] = &defaultContext.SsmMapDetails
    children["interface-state-offs"] = &defaultContext.InterfaceStateOffs
    return children
}

func (defaultContext *Mld_Active_DefaultContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (defaultContext *Mld_Active_DefaultContext) GetBundleName() string { return "cisco_ios_xr" }

func (defaultContext *Mld_Active_DefaultContext) GetYangName() string { return "default-context" }

func (defaultContext *Mld_Active_DefaultContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultContext *Mld_Active_DefaultContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultContext *Mld_Active_DefaultContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultContext *Mld_Active_DefaultContext) SetParent(parent types.Entity) { defaultContext.parent = parent }

func (defaultContext *Mld_Active_DefaultContext) GetParent() types.Entity { return defaultContext.parent }

func (defaultContext *Mld_Active_DefaultContext) GetParentYangName() string { return "active" }

// Mld_Active_DefaultContext_Summary
// IGMP Summary Information
type Mld_Active_DefaultContext_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Mld_Active_DefaultContext_Summary_Interface.
    Interface []Mld_Active_DefaultContext_Summary_Interface
}

func (summary *Mld_Active_DefaultContext_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Mld_Active_DefaultContext_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Mld_Active_DefaultContext_Summary) GetGoName(yname string) string {
    if yname == "robustness" { return "Robustness" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-disabled" { return "IsDisabled" }
    if yname == "supported-interfaces" { return "SupportedInterfaces" }
    if yname == "unsupported-interfaces" { return "UnsupportedInterfaces" }
    if yname == "enabled-interface-count" { return "EnabledInterfaceCount" }
    if yname == "disabled-interface-count" { return "DisabledInterfaceCount" }
    if yname == "tunnel-mte-config-count" { return "TunnelMteConfigCount" }
    if yname == "node-low-memory" { return "NodeLowMemory" }
    if yname == "interface" { return "Interface" }
    return ""
}

func (summary *Mld_Active_DefaultContext_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Mld_Active_DefaultContext_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range summary.Interface {
            if summary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_Summary_Interface{}
        summary.Interface = append(summary.Interface, child)
        return &summary.Interface[len(summary.Interface)-1]
    }
    return nil
}

func (summary *Mld_Active_DefaultContext_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summary.Interface {
        children[summary.Interface[i].GetSegmentPath()] = &summary.Interface[i]
    }
    return children
}

func (summary *Mld_Active_DefaultContext_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["robustness"] = summary.Robustness
    leafs["group-limit"] = summary.GroupLimit
    leafs["group-count"] = summary.GroupCount
    leafs["is-disabled"] = summary.IsDisabled
    leafs["supported-interfaces"] = summary.SupportedInterfaces
    leafs["unsupported-interfaces"] = summary.UnsupportedInterfaces
    leafs["enabled-interface-count"] = summary.EnabledInterfaceCount
    leafs["disabled-interface-count"] = summary.DisabledInterfaceCount
    leafs["tunnel-mte-config-count"] = summary.TunnelMteConfigCount
    leafs["node-low-memory"] = summary.NodeLowMemory
    return leafs
}

func (summary *Mld_Active_DefaultContext_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Mld_Active_DefaultContext_Summary) GetYangName() string { return "summary" }

func (summary *Mld_Active_DefaultContext_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Mld_Active_DefaultContext_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Mld_Active_DefaultContext_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Mld_Active_DefaultContext_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Mld_Active_DefaultContext_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Mld_Active_DefaultContext_Summary) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Mld_Active_DefaultContext_Summary_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Mld_Active_DefaultContext_Summary_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Active_DefaultContext_Summary_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Active_DefaultContext_Summary_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "on-off" { return "OnOff" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    return ""
}

func (self *Mld_Active_DefaultContext_Summary_Interface) GetSegmentPath() string {
    return "interface"
}

func (self *Mld_Active_DefaultContext_Summary_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Mld_Active_DefaultContext_Summary_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Mld_Active_DefaultContext_Summary_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["group-limit"] = self.GroupLimit
    leafs["group-count"] = self.GroupCount
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["on-off"] = self.OnOff
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    return leafs
}

func (self *Mld_Active_DefaultContext_Summary_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Active_DefaultContext_Summary_Interface) GetYangName() string { return "interface" }

func (self *Mld_Active_DefaultContext_Summary_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Active_DefaultContext_Summary_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Active_DefaultContext_Summary_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Active_DefaultContext_Summary_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Active_DefaultContext_Summary_Interface) GetParent() types.Entity { return self.parent }

func (self *Mld_Active_DefaultContext_Summary_Interface) GetParentYangName() string { return "summary" }

// Mld_Active_DefaultContext_InterfaceStateOns
// IGMP Interface state on
type Mld_Active_DefaultContext_InterfaceStateOns struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetFilter() yfilter.YFilter { return interfaceStateOns.YFilter }

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) SetFilter(yf yfilter.YFilter) { interfaceStateOns.YFilter = yf }

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetGoName(yname string) string {
    if yname == "interface-state-on" { return "InterfaceStateOn" }
    return ""
}

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetSegmentPath() string {
    return "interface-state-ons"
}

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-on" {
        for _, c := range interfaceStateOns.InterfaceStateOn {
            if interfaceStateOns.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn{}
        interfaceStateOns.InterfaceStateOn = append(interfaceStateOns.InterfaceStateOn, child)
        return &interfaceStateOns.InterfaceStateOn[len(interfaceStateOns.InterfaceStateOn)-1]
    }
    return nil
}

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOns.InterfaceStateOn {
        children[interfaceStateOns.InterfaceStateOn[i].GetSegmentPath()] = &interfaceStateOns.InterfaceStateOn[i]
    }
    return children
}

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetYangName() string { return "interface-state-ons" }

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) SetParent(parent types.Entity) { interfaceStateOns.parent = parent }

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetParent() types.Entity { return interfaceStateOns.parent }

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetFilter() yfilter.YFilter { return interfaceStateOn.YFilter }

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) SetFilter(yf yfilter.YFilter) { interfaceStateOn.YFilter = yf }

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetSegmentPath() string {
    return "interface-state-on" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOn.InterfaceName) + "']"
}

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOn.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOn.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOn.SubscriberAddress
    }
    return nil
}

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOn.Address
    children["querier-address"] = &interfaceStateOn.QuerierAddress
    children["subscriber-address"] = &interfaceStateOn.SubscriberAddress
    return children
}

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOn.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOn.InterfaceNameXr
    leafs["state"] = interfaceStateOn.State
    leafs["prefix-length"] = interfaceStateOn.PrefixLength
    leafs["is-interface-up"] = interfaceStateOn.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOn.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOn.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOn.IgmpVersion
    leafs["host-version"] = interfaceStateOn.HostVersion
    leafs["query-interval"] = interfaceStateOn.QueryInterval
    leafs["query-timeout"] = interfaceStateOn.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOn.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOn.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOn.GroupJoins
    leafs["group-leaves"] = interfaceStateOn.GroupLeaves
    leafs["is-querier"] = interfaceStateOn.IsQuerier
    leafs["total-active-groups"] = interfaceStateOn.TotalActiveGroups
    leafs["robustness"] = interfaceStateOn.Robustness
    leafs["proxy-interface"] = interfaceStateOn.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOn.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOn.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOn.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOn.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOn.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOn.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOn.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOn.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOn.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOn.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOn.VrfId
    leafs["mte-vrf-id"] = interfaceStateOn.MteVrfId
    leafs["location"] = interfaceStateOn.Location
    leafs["mtu"] = interfaceStateOn.Mtu
    leafs["vrf-state"] = interfaceStateOn.VrfState
    leafs["is-configurationverify"] = interfaceStateOn.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOn.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOn.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOn.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOn.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOn.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOn.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOn.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOn.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOn.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOn.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOn.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOn.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOn.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOn.MteTupleCount
    return leafs
}

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetYangName() string { return "interface-state-on" }

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) SetParent(parent types.Entity) { interfaceStateOn.parent = parent }

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetParent() types.Entity { return interfaceStateOn.parent }

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetParentYangName() string { return "interface-state-ons" }

// Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetYangName() string { return "address" }

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetParentYangName() string { return "interface-state-on" }

// Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParentYangName() string { return "interface-state-on" }

// Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParentYangName() string { return "interface-state-on" }

// Mld_Active_DefaultContext_DetailGroups
// IGMP Detail Group Database
type Mld_Active_DefaultContext_DetailGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Mld_Active_DefaultContext_DetailGroups_DetailGroup.
    DetailGroup []Mld_Active_DefaultContext_DetailGroups_DetailGroup
}

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetFilter() yfilter.YFilter { return detailGroups.YFilter }

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) SetFilter(yf yfilter.YFilter) { detailGroups.YFilter = yf }

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetGoName(yname string) string {
    if yname == "detail-group" { return "DetailGroup" }
    return ""
}

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetSegmentPath() string {
    return "detail-groups"
}

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detail-group" {
        for _, c := range detailGroups.DetailGroup {
            if detailGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_DetailGroups_DetailGroup{}
        detailGroups.DetailGroup = append(detailGroups.DetailGroup, child)
        return &detailGroups.DetailGroup[len(detailGroups.DetailGroup)-1]
    }
    return nil
}

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range detailGroups.DetailGroup {
        children[detailGroups.DetailGroup[i].GetSegmentPath()] = &detailGroups.DetailGroup[i]
    }
    return children
}

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetYangName() string { return "detail-groups" }

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) SetParent(parent types.Entity) { detailGroups.parent = parent }

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetParent() types.Entity { return detailGroups.parent }

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Mld_Active_DefaultContext_DetailGroups_DetailGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source.
    Source []Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source
}

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetFilter() yfilter.YFilter { return detailGroup.YFilter }

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) SetFilter(yf yfilter.YFilter) { detailGroup.YFilter = yf }

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "is-router-exclude-mode" { return "IsRouterExcludeMode" }
    if yname == "is-host-exclude-mode" { return "IsHostExcludeMode" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "source" { return "Source" }
    return ""
}

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetSegmentPath() string {
    return "detail-group"
}

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &detailGroup.GroupInfo
    }
    if childYangName == "source" {
        for _, c := range detailGroup.Source {
            if detailGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source{}
        detailGroup.Source = append(detailGroup.Source, child)
        return &detailGroup.Source[len(detailGroup.Source)-1]
    }
    return nil
}

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &detailGroup.GroupInfo
    for i := range detailGroup.Source {
        children[detailGroup.Source[i].GetSegmentPath()] = &detailGroup.Source[i]
    }
    return children
}

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = detailGroup.GroupAddress
    leafs["interface-name"] = detailGroup.InterfaceName
    leafs["source-address"] = detailGroup.SourceAddress
    leafs["is-router-exclude-mode"] = detailGroup.IsRouterExcludeMode
    leafs["is-host-exclude-mode"] = detailGroup.IsHostExcludeMode
    return leafs
}

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetYangName() string { return "detail-group" }

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) SetParent(parent types.Entity) { detailGroup.parent = parent }

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetParent() types.Entity { return detailGroup.parent }

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetParentYangName() string { return "detail-groups" }

// Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetParentYangName() string { return "detail-group" }

// Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source
// List of sources
type Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-remote" { return "IsRemote" }
    if yname == "is-forward" { return "IsForward" }
    if yname == "is-we-report" { return "IsWeReport" }
    if yname == "flags" { return "Flags" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetSegmentPath() string {
    return "source"
}

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &source.SourceAddress
    }
    return nil
}

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &source.SourceAddress
    return children
}

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = source.Uptime
    leafs["expiration-time"] = source.ExpirationTime
    leafs["is-local"] = source.IsLocal
    leafs["is-remote"] = source.IsRemote
    leafs["is-forward"] = source.IsForward
    leafs["is-we-report"] = source.IsWeReport
    leafs["flags"] = source.Flags
    leafs["is-added"] = source.IsAdded
    return leafs
}

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetYangName() string { return "source" }

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetParent() types.Entity { return source.parent }

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetParentYangName() string { return "detail-group" }

// Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetParentYangName() string { return "source" }

// Mld_Active_DefaultContext_NonActiveGroups
// IGMP Non-Active Groups Information
type Mld_Active_DefaultContext_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetGoName(yname string) string {
    if yname == "non-active-groups" { return "NonActiveGroups" }
    return ""
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-active-groups" {
        for _, c := range nonActiveGroups.NonActiveGroups {
            if nonActiveGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups{}
        nonActiveGroups.NonActiveGroups = append(nonActiveGroups.NonActiveGroups, child)
        return &nonActiveGroups.NonActiveGroups[len(nonActiveGroups.NonActiveGroups)-1]
    }
    return nil
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nonActiveGroups.NonActiveGroups {
        children[nonActiveGroups.NonActiveGroups[i].GetSegmentPath()] = &nonActiveGroups.NonActiveGroups[i]
    }
    return children
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    if yname == "reason-for-non-activity" { return "ReasonForNonActivity" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address" {
        return &nonActiveGroups.GroupAddress
    }
    if childYangName == "source-address" {
        return &nonActiveGroups.SourceAddress
    }
    return nil
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address"] = &nonActiveGroups.GroupAddress
    children["source-address"] = &nonActiveGroups.SourceAddress
    return children
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface"] = nonActiveGroups.Interface
    leafs["reason-for-non-activity"] = nonActiveGroups.ReasonForNonActivity
    return leafs
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetParentYangName() string { return "non-active-groups" }

// Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetParentYangName() string { return "non-active-groups" }

// Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetParentYangName() string { return "non-active-groups" }

// Mld_Active_DefaultContext_SsmMaps
// SSM Map Table
type Mld_Active_DefaultContext_SsmMaps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Mld_Active_DefaultContext_SsmMaps_SsmMap.
    SsmMap []Mld_Active_DefaultContext_SsmMaps_SsmMap
}

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetFilter() yfilter.YFilter { return ssmMaps.YFilter }

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) SetFilter(yf yfilter.YFilter) { ssmMaps.YFilter = yf }

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetGoName(yname string) string {
    if yname == "ssm-map" { return "SsmMap" }
    return ""
}

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetSegmentPath() string {
    return "ssm-maps"
}

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map" {
        for _, c := range ssmMaps.SsmMap {
            if ssmMaps.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_SsmMaps_SsmMap{}
        ssmMaps.SsmMap = append(ssmMaps.SsmMap, child)
        return &ssmMaps.SsmMap[len(ssmMaps.SsmMap)-1]
    }
    return nil
}

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMaps.SsmMap {
        children[ssmMaps.SsmMap[i].GetSegmentPath()] = &ssmMaps.SsmMap[i]
    }
    return children
}

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetYangName() string { return "ssm-maps" }

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) SetParent(parent types.Entity) { ssmMaps.parent = parent }

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetParent() types.Entity { return ssmMaps.parent }

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_SsmMaps_SsmMap
// SSM Map information
type Mld_Active_DefaultContext_SsmMaps_SsmMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetFilter() yfilter.YFilter { return ssmMap.YFilter }

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) SetFilter(yf yfilter.YFilter) { ssmMap.YFilter = yf }

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetSegmentPath() string {
    return "ssm-map"
}

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &ssmMap.GroupAddressXr
    }
    return nil
}

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &ssmMap.GroupAddressXr
    return children
}

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMap.SsmMapType
    leafs["group-address"] = ssmMap.GroupAddress
    leafs["map-type"] = ssmMap.MapType
    leafs["source-counts"] = ssmMap.SourceCounts
    return leafs
}

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetYangName() string { return "ssm-map" }

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) SetParent(parent types.Entity) { ssmMap.parent = parent }

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetParent() types.Entity { return ssmMap.parent }

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetParentYangName() string { return "ssm-maps" }

// Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetParentYangName() string { return "ssm-map" }

// Mld_Active_DefaultContext_ExplicitGroups
// IGMP Explicit Group Database
type Mld_Active_DefaultContext_ExplicitGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetFilter() yfilter.YFilter { return explicitGroups.YFilter }

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) SetFilter(yf yfilter.YFilter) { explicitGroups.YFilter = yf }

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetGoName(yname string) string {
    if yname == "explicit-group" { return "ExplicitGroup" }
    return ""
}

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetSegmentPath() string {
    return "explicit-groups"
}

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "explicit-group" {
        for _, c := range explicitGroups.ExplicitGroup {
            if explicitGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup{}
        explicitGroups.ExplicitGroup = append(explicitGroups.ExplicitGroup, child)
        return &explicitGroups.ExplicitGroup[len(explicitGroups.ExplicitGroup)-1]
    }
    return nil
}

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range explicitGroups.ExplicitGroup {
        children[explicitGroups.ExplicitGroup[i].GetSegmentPath()] = &explicitGroups.ExplicitGroup[i]
    }
    return children
}

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetYangName() string { return "explicit-groups" }

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) SetParent(parent types.Entity) { explicitGroups.parent = parent }

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetParent() types.Entity { return explicitGroups.parent }

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host.
    Host []Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetFilter() yfilter.YFilter { return explicitGroup.YFilter }

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) SetFilter(yf yfilter.YFilter) { explicitGroup.YFilter = yf }

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "include-hosts" { return "IncludeHosts" }
    if yname == "exclude-hosts" { return "ExcludeHosts" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "host" { return "Host" }
    return ""
}

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetSegmentPath() string {
    return "explicit-group"
}

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &explicitGroup.GroupInfo
    }
    if childYangName == "host" {
        for _, c := range explicitGroup.Host {
            if explicitGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host{}
        explicitGroup.Host = append(explicitGroup.Host, child)
        return &explicitGroup.Host[len(explicitGroup.Host)-1]
    }
    return nil
}

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &explicitGroup.GroupInfo
    for i := range explicitGroup.Host {
        children[explicitGroup.Host[i].GetSegmentPath()] = &explicitGroup.Host[i]
    }
    return children
}

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = explicitGroup.GroupAddress
    leafs["interface-name"] = explicitGroup.InterfaceName
    leafs["source-address"] = explicitGroup.SourceAddress
    leafs["include-hosts"] = explicitGroup.IncludeHosts
    leafs["exclude-hosts"] = explicitGroup.ExcludeHosts
    return leafs
}

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetYangName() string { return "explicit-group" }

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) SetParent(parent types.Entity) { explicitGroup.parent = parent }

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetParent() types.Entity { return explicitGroup.parent }

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetParentYangName() string { return "explicit-groups" }

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetParentYangName() string { return "explicit-group" }

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetFilter() yfilter.YFilter { return host.YFilter }

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) SetFilter(yf yfilter.YFilter) { host.YFilter = yf }

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "is-exclude" { return "IsExclude" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "source-count" { return "SourceCount" }
    if yname == "address" { return "Address" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetSegmentPath() string {
    return "host"
}

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &host.Address
    }
    if childYangName == "source-address" {
        for _, c := range host.SourceAddress {
            if host.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress{}
        host.SourceAddress = append(host.SourceAddress, child)
        return &host.SourceAddress[len(host.SourceAddress)-1]
    }
    return nil
}

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &host.Address
    for i := range host.SourceAddress {
        children[host.SourceAddress[i].GetSegmentPath()] = &host.SourceAddress[i]
    }
    return children
}

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = host.Uptime
    leafs["is-exclude"] = host.IsExclude
    leafs["expiration-time"] = host.ExpirationTime
    leafs["source-count"] = host.SourceCount
    return leafs
}

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetBundleName() string { return "cisco_ios_xr" }

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetYangName() string { return "host" }

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) SetParent(parent types.Entity) { host.parent = parent }

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetParent() types.Entity { return host.parent }

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetParentYangName() string { return "explicit-group" }

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetYangName() string { return "address" }

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetParentYangName() string { return "host" }

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParentYangName() string { return "host" }

// Mld_Active_DefaultContext_InterfaceTable
// IGMP Interface specific Table
type Mld_Active_DefaultContext_InterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_DefaultContext_InterfaceTable_Interface.
    Interface []Mld_Active_DefaultContext_InterfaceTable_Interface
}

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetFilter() yfilter.YFilter { return interfaceTable.YFilter }

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) SetFilter(yf yfilter.YFilter) { interfaceTable.YFilter = yf }

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetSegmentPath() string {
    return "interface-table"
}

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaceTable.Interface {
            if interfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_InterfaceTable_Interface{}
        interfaceTable.Interface = append(interfaceTable.Interface, child)
        return &interfaceTable.Interface[len(interfaceTable.Interface)-1]
    }
    return nil
}

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceTable.Interface {
        children[interfaceTable.Interface[i].GetSegmentPath()] = &interfaceTable.Interface[i]
    }
    return children
}

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetYangName() string { return "interface-table" }

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) SetParent(parent types.Entity) { interfaceTable.parent = parent }

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetParent() types.Entity { return interfaceTable.parent }

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_InterfaceTable_Interface
// IGMP Interface
type Mld_Active_DefaultContext_InterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_DefaultContext_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetParentYangName() string { return "interface-table" }

// Mld_Active_DefaultContext_InterfaceTable_Interface_Address
// IP address
type Mld_Active_DefaultContext_InterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjusts.YFilter }

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjusts.YFilter = yf }

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetGoName(yname string) string {
    if yname == "interface-unicast-qos-adjust" { return "InterfaceUnicastQosAdjust" }
    return ""
}

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetSegmentPath() string {
    return "interface-unicast-qos-adjusts"
}

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-unicast-qos-adjust" {
        for _, c := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
            if interfaceUnicastQosAdjusts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust{}
        interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust = append(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, child)
        return &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[len(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        children[interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i].GetSegmentPath()] = &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]
    }
    return children
}

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetYangName() string { return "interface-unicast-qos-adjusts" }

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) SetParent(parent types.Entity) { interfaceUnicastQosAdjusts.parent = parent }

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetParent() types.Entity { return interfaceUnicastQosAdjusts.parent }

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjust.YFilter }

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjust.YFilter = yf }

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-access" { return "IsVirtualAccess" }
    if yname == "rate" { return "Rate" }
    if yname == "rate-increments" { return "RateIncrements" }
    if yname == "rate-decrements" { return "RateDecrements" }
    if yname == "update" { return "Update" }
    return ""
}

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetSegmentPath() string {
    return "interface-unicast-qos-adjust" + "[interface-name='" + fmt.Sprintf("%v", interfaceUnicastQosAdjust.InterfaceName) + "']"
}

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update" {
        for _, c := range interfaceUnicastQosAdjust.Update {
            if interfaceUnicastQosAdjust.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update{}
        interfaceUnicastQosAdjust.Update = append(interfaceUnicastQosAdjust.Update, child)
        return &interfaceUnicastQosAdjust.Update[len(interfaceUnicastQosAdjust.Update)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjust.Update {
        children[interfaceUnicastQosAdjust.Update[i].GetSegmentPath()] = &interfaceUnicastQosAdjust.Update[i]
    }
    return children
}

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceUnicastQosAdjust.InterfaceName
    leafs["is-virtual-access"] = interfaceUnicastQosAdjust.IsVirtualAccess
    leafs["rate"] = interfaceUnicastQosAdjust.Rate
    leafs["rate-increments"] = interfaceUnicastQosAdjust.RateIncrements
    leafs["rate-decrements"] = interfaceUnicastQosAdjust.RateDecrements
    return leafs
}

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetYangName() string { return "interface-unicast-qos-adjust" }

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetParent(parent types.Entity) { interfaceUnicastQosAdjust.parent = parent }

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParent() types.Entity { return interfaceUnicastQosAdjust.parent }

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParentYangName() string { return "interface-unicast-qos-adjusts" }

// Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetFilter() yfilter.YFilter { return update.YFilter }

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetFilter(yf yfilter.YFilter) { update.YFilter = yf }

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetGoName(yname string) string {
    if yname == "is-add" { return "IsAdd" }
    if yname == "weight" { return "Weight" }
    if yname == "received-time" { return "ReceivedTime" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "group-address" { return "GroupAddress" }
    return ""
}

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetSegmentPath() string {
    return "update"
}

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &update.SourceAddress
    }
    if childYangName == "group-address" {
        return &update.GroupAddress
    }
    return nil
}

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &update.SourceAddress
    children["group-address"] = &update.GroupAddress
    return children
}

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-add"] = update.IsAdd
    leafs["weight"] = update.Weight
    leafs["received-time"] = update.ReceivedTime
    return leafs
}

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleName() string { return "cisco_ios_xr" }

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetYangName() string { return "update" }

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetParent(parent types.Entity) { update.parent = parent }

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParent() types.Entity { return update.parent }

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParentYangName() string { return "interface-unicast-qos-adjust" }

// Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParentYangName() string { return "update" }

// Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParentYangName() string { return "update" }

// Mld_Active_DefaultContext_Ranges
// Range table
type Mld_Active_DefaultContext_Ranges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Range information. The type is slice of
    // Mld_Active_DefaultContext_Ranges_Range.
    Range []Mld_Active_DefaultContext_Ranges_Range
}

func (ranges *Mld_Active_DefaultContext_Ranges) GetFilter() yfilter.YFilter { return ranges.YFilter }

func (ranges *Mld_Active_DefaultContext_Ranges) SetFilter(yf yfilter.YFilter) { ranges.YFilter = yf }

func (ranges *Mld_Active_DefaultContext_Ranges) GetGoName(yname string) string {
    if yname == "range" { return "Range" }
    return ""
}

func (ranges *Mld_Active_DefaultContext_Ranges) GetSegmentPath() string {
    return "ranges"
}

func (ranges *Mld_Active_DefaultContext_Ranges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "range" {
        for _, c := range ranges.Range {
            if ranges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_Ranges_Range{}
        ranges.Range = append(ranges.Range, child)
        return &ranges.Range[len(ranges.Range)-1]
    }
    return nil
}

func (ranges *Mld_Active_DefaultContext_Ranges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ranges.Range {
        children[ranges.Range[i].GetSegmentPath()] = &ranges.Range[i]
    }
    return children
}

func (ranges *Mld_Active_DefaultContext_Ranges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ranges *Mld_Active_DefaultContext_Ranges) GetBundleName() string { return "cisco_ios_xr" }

func (ranges *Mld_Active_DefaultContext_Ranges) GetYangName() string { return "ranges" }

func (ranges *Mld_Active_DefaultContext_Ranges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ranges *Mld_Active_DefaultContext_Ranges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ranges *Mld_Active_DefaultContext_Ranges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ranges *Mld_Active_DefaultContext_Ranges) SetParent(parent types.Entity) { ranges.parent = parent }

func (ranges *Mld_Active_DefaultContext_Ranges) GetParent() types.Entity { return ranges.parent }

func (ranges *Mld_Active_DefaultContext_Ranges) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_Ranges_Range
// Range information
type Mld_Active_DefaultContext_Ranges_Range struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: -2147483648..2147483647.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr
}

func (self *Mld_Active_DefaultContext_Ranges_Range) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Active_DefaultContext_Ranges_Range) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Active_DefaultContext_Ranges_Range) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "group-mask" { return "GroupMask" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "protocol" { return "Protocol" }
    if yname == "is-stale" { return "IsStale" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (self *Mld_Active_DefaultContext_Ranges_Range) GetSegmentPath() string {
    return "range"
}

func (self *Mld_Active_DefaultContext_Ranges_Range) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &self.GroupAddressXr
    }
    return nil
}

func (self *Mld_Active_DefaultContext_Ranges_Range) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &self.GroupAddressXr
    return children
}

func (self *Mld_Active_DefaultContext_Ranges_Range) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = self.GroupAddress
    leafs["group-mask"] = self.GroupMask
    leafs["prefix-length"] = self.PrefixLength
    leafs["protocol"] = self.Protocol
    leafs["is-stale"] = self.IsStale
    return leafs
}

func (self *Mld_Active_DefaultContext_Ranges_Range) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Active_DefaultContext_Ranges_Range) GetYangName() string { return "range" }

func (self *Mld_Active_DefaultContext_Ranges_Range) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Active_DefaultContext_Ranges_Range) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Active_DefaultContext_Ranges_Range) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Active_DefaultContext_Ranges_Range) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Active_DefaultContext_Ranges_Range) GetParent() types.Entity { return self.parent }

func (self *Mld_Active_DefaultContext_Ranges_Range) GetParentYangName() string { return "ranges" }

// Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr
// Group address
type Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetParentYangName() string { return "range" }

// Mld_Active_DefaultContext_IfrsInterfaces
// IGMP Interface specific
type Mld_Active_DefaultContext_IfrsInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface.
    IfrsInterface []Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetFilter() yfilter.YFilter { return ifrsInterfaces.YFilter }

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) SetFilter(yf yfilter.YFilter) { ifrsInterfaces.YFilter = yf }

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetGoName(yname string) string {
    if yname == "ifrs-interface" { return "IfrsInterface" }
    return ""
}

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetSegmentPath() string {
    return "ifrs-interfaces"
}

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ifrs-interface" {
        for _, c := range ifrsInterfaces.IfrsInterface {
            if ifrsInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface{}
        ifrsInterfaces.IfrsInterface = append(ifrsInterfaces.IfrsInterface, child)
        return &ifrsInterfaces.IfrsInterface[len(ifrsInterfaces.IfrsInterface)-1]
    }
    return nil
}

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ifrsInterfaces.IfrsInterface {
        children[ifrsInterfaces.IfrsInterface[i].GetSegmentPath()] = &ifrsInterfaces.IfrsInterface[i]
    }
    return children
}

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetYangName() string { return "ifrs-interfaces" }

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) SetParent(parent types.Entity) { ifrsInterfaces.parent = parent }

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetParent() types.Entity { return ifrsInterfaces.parent }

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetFilter() yfilter.YFilter { return ifrsInterface.YFilter }

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) SetFilter(yf yfilter.YFilter) { ifrsInterface.YFilter = yf }

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "join-group-count" { return "JoinGroupCount" }
    if yname == "igmp-interface-entry" { return "IgmpInterfaceEntry" }
    return ""
}

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetSegmentPath() string {
    return "ifrs-interface" + "[interface-name='" + fmt.Sprintf("%v", ifrsInterface.InterfaceName) + "']"
}

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "igmp-interface-entry" {
        return &ifrsInterface.IgmpInterfaceEntry
    }
    return nil
}

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["igmp-interface-entry"] = &ifrsInterface.IgmpInterfaceEntry
    return children
}

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ifrsInterface.InterfaceName
    leafs["join-group-count"] = ifrsInterface.JoinGroupCount
    return leafs
}

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetYangName() string { return "ifrs-interface" }

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) SetParent(parent types.Entity) { ifrsInterface.parent = parent }

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetParent() types.Entity { return ifrsInterface.parent }

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetParentYangName() string { return "ifrs-interfaces" }

// Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetFilter() yfilter.YFilter { return igmpInterfaceEntry.YFilter }

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetFilter(yf yfilter.YFilter) { igmpInterfaceEntry.YFilter = yf }

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetSegmentPath() string {
    return "igmp-interface-entry"
}

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &igmpInterfaceEntry.Address
    }
    if childYangName == "querier-address" {
        return &igmpInterfaceEntry.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &igmpInterfaceEntry.SubscriberAddress
    }
    return nil
}

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &igmpInterfaceEntry.Address
    children["querier-address"] = &igmpInterfaceEntry.QuerierAddress
    children["subscriber-address"] = &igmpInterfaceEntry.SubscriberAddress
    return children
}

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = igmpInterfaceEntry.InterfaceNameXr
    leafs["state"] = igmpInterfaceEntry.State
    leafs["prefix-length"] = igmpInterfaceEntry.PrefixLength
    leafs["is-interface-up"] = igmpInterfaceEntry.IsInterfaceUp
    leafs["is-ip-enabled"] = igmpInterfaceEntry.IsIpEnabled
    leafs["is-router-enabled"] = igmpInterfaceEntry.IsRouterEnabled
    leafs["igmp-version"] = igmpInterfaceEntry.IgmpVersion
    leafs["host-version"] = igmpInterfaceEntry.HostVersion
    leafs["query-interval"] = igmpInterfaceEntry.QueryInterval
    leafs["query-timeout"] = igmpInterfaceEntry.QueryTimeout
    leafs["query-maximum-response-time"] = igmpInterfaceEntry.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = igmpInterfaceEntry.LastMemberQueryInterval
    leafs["group-joins"] = igmpInterfaceEntry.GroupJoins
    leafs["group-leaves"] = igmpInterfaceEntry.GroupLeaves
    leafs["is-querier"] = igmpInterfaceEntry.IsQuerier
    leafs["total-active-groups"] = igmpInterfaceEntry.TotalActiveGroups
    leafs["robustness"] = igmpInterfaceEntry.Robustness
    leafs["proxy-interface"] = igmpInterfaceEntry.ProxyInterface
    leafs["querier-uptime"] = igmpInterfaceEntry.QuerierUptime
    leafs["las-ll-registration-count"] = igmpInterfaceEntry.LasLlRegistrationCount
    leafs["las-get-address-count"] = igmpInterfaceEntry.LasGetAddressCount
    leafs["las-update-count"] = igmpInterfaceEntry.LasUpdateCount
    leafs["las-ll-remove-update-count"] = igmpInterfaceEntry.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = igmpInterfaceEntry.LasLlAddUpdateCount
    leafs["las-null-update-count"] = igmpInterfaceEntry.LasNullUpdateCount
    leafs["las-unregistration-count"] = igmpInterfaceEntry.LasUnregistrationCount
    leafs["is-las-request"] = igmpInterfaceEntry.IsLasRequest
    leafs["is-las-registered"] = igmpInterfaceEntry.IsLasRegistered
    leafs["vrf-id"] = igmpInterfaceEntry.VrfId
    leafs["mte-vrf-id"] = igmpInterfaceEntry.MteVrfId
    leafs["location"] = igmpInterfaceEntry.Location
    leafs["mtu"] = igmpInterfaceEntry.Mtu
    leafs["vrf-state"] = igmpInterfaceEntry.VrfState
    leafs["is-configurationverify"] = igmpInterfaceEntry.IsConfigurationverify
    leafs["configurationvrf-set"] = igmpInterfaceEntry.ConfigurationvrfSet
    leafs["configurationvrf-error"] = igmpInterfaceEntry.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = igmpInterfaceEntry.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = igmpInterfaceEntry.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = igmpInterfaceEntry.IsImStateRegistered
    leafs["is-subscriber"] = igmpInterfaceEntry.IsSubscriber
    leafs["subscriber-mode"] = igmpInterfaceEntry.SubscriberMode
    leafs["is-identity-present"] = igmpInterfaceEntry.IsIdentityPresent
    leafs["subscriber-id"] = igmpInterfaceEntry.SubscriberId
    leafs["parent-ifhandle"] = igmpInterfaceEntry.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = igmpInterfaceEntry.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = igmpInterfaceEntry.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = igmpInterfaceEntry.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = igmpInterfaceEntry.MteTupleCount
    return leafs
}

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleName() string { return "cisco_ios_xr" }

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetYangName() string { return "igmp-interface-entry" }

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetParent(parent types.Entity) { igmpInterfaceEntry.parent = parent }

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParent() types.Entity { return igmpInterfaceEntry.parent }

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParentYangName() string { return "ifrs-interface" }

// Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetYangName() string { return "address" }

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParentYangName() string { return "igmp-interface-entry" }

// Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Mld_Active_DefaultContext_TrafficCounters
// IGMP Message Traffic Counters
type Mld_Active_DefaultContext_TrafficCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetFilter() yfilter.YFilter { return trafficCounters.YFilter }

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) SetFilter(yf yfilter.YFilter) { trafficCounters.YFilter = yf }

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetGoName(yname string) string {
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "packets-in" { return "PacketsIn" }
    if yname == "packets-out" { return "PacketsOut" }
    if yname == "format-errors" { return "FormatErrors" }
    if yname == "packet-manager-input-errors" { return "PacketManagerInputErrors" }
    if yname == "packet-manager-output-errors" { return "PacketManagerOutputErrors" }
    if yname == "checksum-errors" { return "ChecksumErrors" }
    if yname == "receive-socket-errors" { return "ReceiveSocketErrors" }
    if yname == "socket-errors" { return "SocketErrors" }
    if yname == "bad-scope-errors" { return "BadScopeErrors" }
    if yname == "auxillary-data-length-errors" { return "AuxillaryDataLengthErrors" }
    if yname == "invalid-source-address-errors" { return "InvalidSourceAddressErrors" }
    if yname == "no-socket-connection" { return "NoSocketConnection" }
    if yname == "miscellaneous-errors" { return "MiscellaneousErrors" }
    if yname == "input-queries" { return "InputQueries" }
    if yname == "input-reports" { return "InputReports" }
    if yname == "input-leaves" { return "InputLeaves" }
    if yname == "input-mtrace" { return "InputMtrace" }
    if yname == "input-dvmrp" { return "InputDvmrp" }
    if yname == "input-pim" { return "InputPim" }
    if yname == "output-queries" { return "OutputQueries" }
    if yname == "output-reports" { return "OutputReports" }
    if yname == "output-leaves" { return "OutputLeaves" }
    if yname == "output-mtrace" { return "OutputMtrace" }
    if yname == "output-dvmrp" { return "OutputDvmrp" }
    if yname == "output-pim" { return "OutputPim" }
    if yname == "get-packet-failure" { return "GetPacketFailure" }
    if yname == "output-no-parent-interface-handle" { return "OutputNoParentInterfaceHandle" }
    if yname == "input-no-idb" { return "InputNoIdb" }
    if yname == "input-no-vrf-in-idb" { return "InputNoVrfInIdb" }
    if yname == "input-disabled-idb" { return "InputDisabledIdb" }
    if yname == "input-martian-address" { return "InputMartianAddress" }
    if yname == "input-no-assigned-vrf-id" { return "InputNoAssignedVrfId" }
    if yname == "input-no-vrf-mtrace" { return "InputNoVrfMtrace" }
    if yname == "input-no-platform-support-mtrace" { return "InputNoPlatformSupportMtrace" }
    return ""
}

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetSegmentPath() string {
    return "traffic-counters"
}

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["elapsed-time"] = trafficCounters.ElapsedTime
    leafs["packets-in"] = trafficCounters.PacketsIn
    leafs["packets-out"] = trafficCounters.PacketsOut
    leafs["format-errors"] = trafficCounters.FormatErrors
    leafs["packet-manager-input-errors"] = trafficCounters.PacketManagerInputErrors
    leafs["packet-manager-output-errors"] = trafficCounters.PacketManagerOutputErrors
    leafs["checksum-errors"] = trafficCounters.ChecksumErrors
    leafs["receive-socket-errors"] = trafficCounters.ReceiveSocketErrors
    leafs["socket-errors"] = trafficCounters.SocketErrors
    leafs["bad-scope-errors"] = trafficCounters.BadScopeErrors
    leafs["auxillary-data-length-errors"] = trafficCounters.AuxillaryDataLengthErrors
    leafs["invalid-source-address-errors"] = trafficCounters.InvalidSourceAddressErrors
    leafs["no-socket-connection"] = trafficCounters.NoSocketConnection
    leafs["miscellaneous-errors"] = trafficCounters.MiscellaneousErrors
    leafs["input-queries"] = trafficCounters.InputQueries
    leafs["input-reports"] = trafficCounters.InputReports
    leafs["input-leaves"] = trafficCounters.InputLeaves
    leafs["input-mtrace"] = trafficCounters.InputMtrace
    leafs["input-dvmrp"] = trafficCounters.InputDvmrp
    leafs["input-pim"] = trafficCounters.InputPim
    leafs["output-queries"] = trafficCounters.OutputQueries
    leafs["output-reports"] = trafficCounters.OutputReports
    leafs["output-leaves"] = trafficCounters.OutputLeaves
    leafs["output-mtrace"] = trafficCounters.OutputMtrace
    leafs["output-dvmrp"] = trafficCounters.OutputDvmrp
    leafs["output-pim"] = trafficCounters.OutputPim
    leafs["get-packet-failure"] = trafficCounters.GetPacketFailure
    leafs["output-no-parent-interface-handle"] = trafficCounters.OutputNoParentInterfaceHandle
    leafs["input-no-idb"] = trafficCounters.InputNoIdb
    leafs["input-no-vrf-in-idb"] = trafficCounters.InputNoVrfInIdb
    leafs["input-disabled-idb"] = trafficCounters.InputDisabledIdb
    leafs["input-martian-address"] = trafficCounters.InputMartianAddress
    leafs["input-no-assigned-vrf-id"] = trafficCounters.InputNoAssignedVrfId
    leafs["input-no-vrf-mtrace"] = trafficCounters.InputNoVrfMtrace
    leafs["input-no-platform-support-mtrace"] = trafficCounters.InputNoPlatformSupportMtrace
    return leafs
}

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetBundleName() string { return "cisco_ios_xr" }

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetYangName() string { return "traffic-counters" }

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) SetParent(parent types.Entity) { trafficCounters.parent = parent }

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetParent() types.Entity { return trafficCounters.parent }

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_Groups
// IGMP Group Database Table
type Mld_Active_DefaultContext_Groups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Mld_Active_DefaultContext_Groups_Group.
    Group []Mld_Active_DefaultContext_Groups_Group
}

func (groups *Mld_Active_DefaultContext_Groups) GetFilter() yfilter.YFilter { return groups.YFilter }

func (groups *Mld_Active_DefaultContext_Groups) SetFilter(yf yfilter.YFilter) { groups.YFilter = yf }

func (groups *Mld_Active_DefaultContext_Groups) GetGoName(yname string) string {
    if yname == "group" { return "Group" }
    return ""
}

func (groups *Mld_Active_DefaultContext_Groups) GetSegmentPath() string {
    return "groups"
}

func (groups *Mld_Active_DefaultContext_Groups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group" {
        for _, c := range groups.Group {
            if groups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_Groups_Group{}
        groups.Group = append(groups.Group, child)
        return &groups.Group[len(groups.Group)-1]
    }
    return nil
}

func (groups *Mld_Active_DefaultContext_Groups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range groups.Group {
        children[groups.Group[i].GetSegmentPath()] = &groups.Group[i]
    }
    return children
}

func (groups *Mld_Active_DefaultContext_Groups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (groups *Mld_Active_DefaultContext_Groups) GetBundleName() string { return "cisco_ios_xr" }

func (groups *Mld_Active_DefaultContext_Groups) GetYangName() string { return "groups" }

func (groups *Mld_Active_DefaultContext_Groups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groups *Mld_Active_DefaultContext_Groups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groups *Mld_Active_DefaultContext_Groups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groups *Mld_Active_DefaultContext_Groups) SetParent(parent types.Entity) { groups.parent = parent }

func (groups *Mld_Active_DefaultContext_Groups) GetParent() types.Entity { return groups.parent }

func (groups *Mld_Active_DefaultContext_Groups) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_Groups_Group
// IGMP Group Entry Information
type Mld_Active_DefaultContext_Groups_Group struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Active_DefaultContext_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Active_DefaultContext_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Mld_Active_DefaultContext_Groups_Group_SourceAddress
}

func (group *Mld_Active_DefaultContext_Groups_Group) GetFilter() yfilter.YFilter { return group.YFilter }

func (group *Mld_Active_DefaultContext_Groups_Group) SetFilter(yf yfilter.YFilter) { group.YFilter = yf }

func (group *Mld_Active_DefaultContext_Groups_Group) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (group *Mld_Active_DefaultContext_Groups_Group) GetSegmentPath() string {
    return "group"
}

func (group *Mld_Active_DefaultContext_Groups_Group) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &group.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &group.LastReporter
    }
    if childYangName == "source-address" {
        return &group.SourceAddress
    }
    return nil
}

func (group *Mld_Active_DefaultContext_Groups_Group) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &group.GroupAddressXr
    children["last-reporter"] = &group.LastReporter
    children["source-address"] = &group.SourceAddress
    return children
}

func (group *Mld_Active_DefaultContext_Groups_Group) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = group.GroupAddress
    leafs["interface-name"] = group.InterfaceName
    leafs["interface-name-xr"] = group.InterfaceNameXr
    leafs["uptime"] = group.Uptime
    leafs["expiration-time"] = group.ExpirationTime
    leafs["explicit-tracking-enabled"] = group.ExplicitTrackingEnabled
    leafs["is-self-join"] = group.IsSelfJoin
    leafs["row-status"] = group.RowStatus
    leafs["is-low-memory"] = group.IsLowMemory
    leafs["router-filter-mode"] = group.RouterFilterMode
    leafs["older-host-version1-timer"] = group.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = group.OlderHostVersion2Timer
    leafs["is-added"] = group.IsAdded
    leafs["is-suppressed"] = group.IsSuppressed
    return leafs
}

func (group *Mld_Active_DefaultContext_Groups_Group) GetBundleName() string { return "cisco_ios_xr" }

func (group *Mld_Active_DefaultContext_Groups_Group) GetYangName() string { return "group" }

func (group *Mld_Active_DefaultContext_Groups_Group) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (group *Mld_Active_DefaultContext_Groups_Group) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (group *Mld_Active_DefaultContext_Groups_Group) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (group *Mld_Active_DefaultContext_Groups_Group) SetParent(parent types.Entity) { group.parent = parent }

func (group *Mld_Active_DefaultContext_Groups_Group) GetParent() types.Entity { return group.parent }

func (group *Mld_Active_DefaultContext_Groups_Group) GetParentYangName() string { return "groups" }

// Mld_Active_DefaultContext_Groups_Group_GroupAddressXr
// Group Address
type Mld_Active_DefaultContext_Groups_Group_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetParentYangName() string { return "group" }

// Mld_Active_DefaultContext_Groups_Group_LastReporter
// Last reporter address
type Mld_Active_DefaultContext_Groups_Group_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetParentYangName() string { return "group" }

// Mld_Active_DefaultContext_Groups_Group_SourceAddress
// Source Address
type Mld_Active_DefaultContext_Groups_Group_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetParentYangName() string { return "group" }

// Mld_Active_DefaultContext_GroupSummary
// IGMP Groups Summary
type Mld_Active_DefaultContext_GroupSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetFilter() yfilter.YFilter { return groupSummary.YFilter }

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) SetFilter(yf yfilter.YFilter) { groupSummary.YFilter = yf }

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetGoName(yname string) string {
    if yname == "groutes" { return "Groutes" }
    if yname == "sg-routes" { return "SgRoutes" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    return ""
}

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetSegmentPath() string {
    return "group-summary"
}

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["groutes"] = groupSummary.Groutes
    leafs["sg-routes"] = groupSummary.SgRoutes
    leafs["group-count"] = groupSummary.GroupCount
    leafs["is-low-memory"] = groupSummary.IsLowMemory
    return leafs
}

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetBundleName() string { return "cisco_ios_xr" }

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetYangName() string { return "group-summary" }

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) SetParent(parent types.Entity) { groupSummary.parent = parent }

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetParent() types.Entity { return groupSummary.parent }

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Mld_Active_DefaultContext_IfrsInterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetFilter() yfilter.YFilter { return ifrsInterfaceSummary.YFilter }

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) SetFilter(yf yfilter.YFilter) { ifrsInterfaceSummary.YFilter = yf }

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-count" { return "InterfaceCount" }
    if yname == "configuration-count" { return "ConfigurationCount" }
    return ""
}

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetSegmentPath() string {
    return "ifrs-interface-summary"
}

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-count"] = ifrsInterfaceSummary.InterfaceCount
    leafs["configuration-count"] = ifrsInterfaceSummary.ConfigurationCount
    return leafs
}

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetYangName() string { return "ifrs-interface-summary" }

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) SetParent(parent types.Entity) { ifrsInterfaceSummary.parent = parent }

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetParent() types.Entity { return ifrsInterfaceSummary.parent }

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_GlobalInterfaceTable
// IGMP Global Interface 
type Mld_Active_DefaultContext_GlobalInterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_DefaultContext_GlobalInterfaceTable_Interface.
    Interface []Mld_Active_DefaultContext_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetFilter() yfilter.YFilter { return globalInterfaceTable.YFilter }

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) SetFilter(yf yfilter.YFilter) { globalInterfaceTable.YFilter = yf }

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetSegmentPath() string {
    return "global-interface-table"
}

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range globalInterfaceTable.Interface {
            if globalInterfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_GlobalInterfaceTable_Interface{}
        globalInterfaceTable.Interface = append(globalInterfaceTable.Interface, child)
        return &globalInterfaceTable.Interface[len(globalInterfaceTable.Interface)-1]
    }
    return nil
}

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalInterfaceTable.Interface {
        children[globalInterfaceTable.Interface[i].GetSegmentPath()] = &globalInterfaceTable.Interface[i]
    }
    return children
}

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetYangName() string { return "global-interface-table" }

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) SetParent(parent types.Entity) { globalInterfaceTable.parent = parent }

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetParent() types.Entity { return globalInterfaceTable.parent }

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_GlobalInterfaceTable_Interface
// IGMP Interface
type Mld_Active_DefaultContext_GlobalInterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetParentYangName() string { return "global-interface-table" }

// Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address
// IP address
type Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Mld_Active_DefaultContext_SsmMapDetails
// SSM Map Detail
type Mld_Active_DefaultContext_SsmMapDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetFilter() yfilter.YFilter { return ssmMapDetails.YFilter }

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) SetFilter(yf yfilter.YFilter) { ssmMapDetails.YFilter = yf }

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetGoName(yname string) string {
    if yname == "ssm-map-detail" { return "SsmMapDetail" }
    return ""
}

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetSegmentPath() string {
    return "ssm-map-details"
}

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map-detail" {
        for _, c := range ssmMapDetails.SsmMapDetail {
            if ssmMapDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail{}
        ssmMapDetails.SsmMapDetail = append(ssmMapDetails.SsmMapDetail, child)
        return &ssmMapDetails.SsmMapDetail[len(ssmMapDetails.SsmMapDetail)-1]
    }
    return nil
}

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMapDetails.SsmMapDetail {
        children[ssmMapDetails.SsmMapDetail[i].GetSegmentPath()] = &ssmMapDetails.SsmMapDetail[i]
    }
    return children
}

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetYangName() string { return "ssm-map-details" }

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) SetParent(parent types.Entity) { ssmMapDetails.parent = parent }

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetParent() types.Entity { return ssmMapDetails.parent }

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources.
    Sources []Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetFilter() yfilter.YFilter { return ssmMapDetail.YFilter }

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) SetFilter(yf yfilter.YFilter) { ssmMapDetail.YFilter = yf }

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "response-pending" { return "ResponsePending" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "map-info" { return "MapInfo" }
    if yname == "sources" { return "Sources" }
    return ""
}

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetSegmentPath() string {
    return "ssm-map-detail"
}

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "map-info" {
        return &ssmMapDetail.MapInfo
    }
    if childYangName == "sources" {
        for _, c := range ssmMapDetail.Sources {
            if ssmMapDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources{}
        ssmMapDetail.Sources = append(ssmMapDetail.Sources, child)
        return &ssmMapDetail.Sources[len(ssmMapDetail.Sources)-1]
    }
    return nil
}

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["map-info"] = &ssmMapDetail.MapInfo
    for i := range ssmMapDetail.Sources {
        children[ssmMapDetail.Sources[i].GetSegmentPath()] = &ssmMapDetail.Sources[i]
    }
    return children
}

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMapDetail.SsmMapType
    leafs["group-address"] = ssmMapDetail.GroupAddress
    leafs["expiration-time"] = ssmMapDetail.ExpirationTime
    leafs["response-pending"] = ssmMapDetail.ResponsePending
    leafs["query-interval"] = ssmMapDetail.QueryInterval
    leafs["elapsed-time"] = ssmMapDetail.ElapsedTime
    return leafs
}

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetYangName() string { return "ssm-map-detail" }

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) SetParent(parent types.Entity) { ssmMapDetail.parent = parent }

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetParent() types.Entity { return ssmMapDetail.parent }

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetParentYangName() string { return "ssm-map-details" }

// Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetFilter() yfilter.YFilter { return mapInfo.YFilter }

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) SetFilter(yf yfilter.YFilter) { mapInfo.YFilter = yf }

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetGoName(yname string) string {
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetSegmentPath() string {
    return "map-info"
}

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &mapInfo.GroupAddressXr
    }
    return nil
}

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &mapInfo.GroupAddressXr
    return children
}

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["map-type"] = mapInfo.MapType
    leafs["source-counts"] = mapInfo.SourceCounts
    return leafs
}

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleName() string { return "cisco_ios_xr" }

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetYangName() string { return "map-info" }

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) SetParent(parent types.Entity) { mapInfo.parent = parent }

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetParent() types.Entity { return mapInfo.parent }

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetParentYangName() string { return "ssm-map-detail" }

// Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParentYangName() string { return "map-info" }

// Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetFilter() yfilter.YFilter { return sources.YFilter }

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) SetFilter(yf yfilter.YFilter) { sources.YFilter = yf }

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetSegmentPath() string {
    return "sources"
}

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sources.AfName
    leafs["ipv4-address"] = sources.Ipv4Address
    leafs["ipv6-address"] = sources.Ipv6Address
    return leafs
}

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetBundleName() string { return "cisco_ios_xr" }

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetYangName() string { return "sources" }

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) SetParent(parent types.Entity) { sources.parent = parent }

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetParent() types.Entity { return sources.parent }

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetParentYangName() string { return "ssm-map-detail" }

// Mld_Active_DefaultContext_InterfaceStateOffs
// IGMP Interface state off
type Mld_Active_DefaultContext_InterfaceStateOffs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetFilter() yfilter.YFilter { return interfaceStateOffs.YFilter }

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) SetFilter(yf yfilter.YFilter) { interfaceStateOffs.YFilter = yf }

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetGoName(yname string) string {
    if yname == "interface-state-off" { return "InterfaceStateOff" }
    return ""
}

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetSegmentPath() string {
    return "interface-state-offs"
}

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-off" {
        for _, c := range interfaceStateOffs.InterfaceStateOff {
            if interfaceStateOffs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff{}
        interfaceStateOffs.InterfaceStateOff = append(interfaceStateOffs.InterfaceStateOff, child)
        return &interfaceStateOffs.InterfaceStateOff[len(interfaceStateOffs.InterfaceStateOff)-1]
    }
    return nil
}

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOffs.InterfaceStateOff {
        children[interfaceStateOffs.InterfaceStateOff[i].GetSegmentPath()] = &interfaceStateOffs.InterfaceStateOff[i]
    }
    return children
}

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetYangName() string { return "interface-state-offs" }

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) SetParent(parent types.Entity) { interfaceStateOffs.parent = parent }

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetParent() types.Entity { return interfaceStateOffs.parent }

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetParentYangName() string { return "default-context" }

// Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetFilter() yfilter.YFilter { return interfaceStateOff.YFilter }

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) SetFilter(yf yfilter.YFilter) { interfaceStateOff.YFilter = yf }

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetSegmentPath() string {
    return "interface-state-off" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOff.InterfaceName) + "']"
}

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOff.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOff.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOff.SubscriberAddress
    }
    return nil
}

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOff.Address
    children["querier-address"] = &interfaceStateOff.QuerierAddress
    children["subscriber-address"] = &interfaceStateOff.SubscriberAddress
    return children
}

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOff.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOff.InterfaceNameXr
    leafs["state"] = interfaceStateOff.State
    leafs["prefix-length"] = interfaceStateOff.PrefixLength
    leafs["is-interface-up"] = interfaceStateOff.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOff.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOff.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOff.IgmpVersion
    leafs["host-version"] = interfaceStateOff.HostVersion
    leafs["query-interval"] = interfaceStateOff.QueryInterval
    leafs["query-timeout"] = interfaceStateOff.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOff.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOff.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOff.GroupJoins
    leafs["group-leaves"] = interfaceStateOff.GroupLeaves
    leafs["is-querier"] = interfaceStateOff.IsQuerier
    leafs["total-active-groups"] = interfaceStateOff.TotalActiveGroups
    leafs["robustness"] = interfaceStateOff.Robustness
    leafs["proxy-interface"] = interfaceStateOff.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOff.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOff.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOff.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOff.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOff.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOff.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOff.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOff.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOff.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOff.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOff.VrfId
    leafs["mte-vrf-id"] = interfaceStateOff.MteVrfId
    leafs["location"] = interfaceStateOff.Location
    leafs["mtu"] = interfaceStateOff.Mtu
    leafs["vrf-state"] = interfaceStateOff.VrfState
    leafs["is-configurationverify"] = interfaceStateOff.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOff.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOff.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOff.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOff.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOff.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOff.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOff.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOff.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOff.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOff.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOff.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOff.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOff.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOff.MteTupleCount
    return leafs
}

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetYangName() string { return "interface-state-off" }

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) SetParent(parent types.Entity) { interfaceStateOff.parent = parent }

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetParent() types.Entity { return interfaceStateOff.parent }

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetParentYangName() string { return "interface-state-offs" }

// Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetSegmentPath() string {
    return "address"
}

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetYangName() string { return "address" }

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetParent() types.Entity { return address.parent }

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetParentYangName() string { return "interface-state-off" }

// Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParentYangName() string { return "interface-state-off" }

// Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParentYangName() string { return "interface-state-off" }

// Igmp
// igmp
type Igmp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Standby Process.
    Standby Igmp_Standby

    // Active Process.
    Active Igmp_Active
}

func (igmp *Igmp) GetFilter() yfilter.YFilter { return igmp.YFilter }

func (igmp *Igmp) SetFilter(yf yfilter.YFilter) { igmp.YFilter = yf }

func (igmp *Igmp) GetGoName(yname string) string {
    if yname == "standby" { return "Standby" }
    if yname == "active" { return "Active" }
    return ""
}

func (igmp *Igmp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-igmp-oper:igmp"
}

func (igmp *Igmp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "standby" {
        return &igmp.Standby
    }
    if childYangName == "active" {
        return &igmp.Active
    }
    return nil
}

func (igmp *Igmp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["standby"] = &igmp.Standby
    children["active"] = &igmp.Active
    return children
}

func (igmp *Igmp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (igmp *Igmp) GetBundleName() string { return "cisco_ios_xr" }

func (igmp *Igmp) GetYangName() string { return "igmp" }

func (igmp *Igmp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (igmp *Igmp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (igmp *Igmp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (igmp *Igmp) SetParent(parent types.Entity) { igmp.parent = parent }

func (igmp *Igmp) GetParent() types.Entity { return igmp.parent }

func (igmp *Igmp) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-igmp-oper" }

// Igmp_Standby
// Standby Process
type Igmp_Standby struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF Table.
    Vrfs Igmp_Standby_Vrfs

    // Process.
    Process Igmp_Standby_Process

    // Default Context.
    DefaultContext Igmp_Standby_DefaultContext
}

func (standby *Igmp_Standby) GetFilter() yfilter.YFilter { return standby.YFilter }

func (standby *Igmp_Standby) SetFilter(yf yfilter.YFilter) { standby.YFilter = yf }

func (standby *Igmp_Standby) GetGoName(yname string) string {
    if yname == "vrfs" { return "Vrfs" }
    if yname == "process" { return "Process" }
    if yname == "default-context" { return "DefaultContext" }
    return ""
}

func (standby *Igmp_Standby) GetSegmentPath() string {
    return "standby"
}

func (standby *Igmp_Standby) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrfs" {
        return &standby.Vrfs
    }
    if childYangName == "process" {
        return &standby.Process
    }
    if childYangName == "default-context" {
        return &standby.DefaultContext
    }
    return nil
}

func (standby *Igmp_Standby) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vrfs"] = &standby.Vrfs
    children["process"] = &standby.Process
    children["default-context"] = &standby.DefaultContext
    return children
}

func (standby *Igmp_Standby) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (standby *Igmp_Standby) GetBundleName() string { return "cisco_ios_xr" }

func (standby *Igmp_Standby) GetYangName() string { return "standby" }

func (standby *Igmp_Standby) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standby *Igmp_Standby) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standby *Igmp_Standby) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standby *Igmp_Standby) SetParent(parent types.Entity) { standby.parent = parent }

func (standby *Igmp_Standby) GetParent() types.Entity { return standby.parent }

func (standby *Igmp_Standby) GetParentYangName() string { return "igmp" }

// Igmp_Standby_Vrfs
// VRF Table
type Igmp_Standby_Vrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table Names. The type is slice of Igmp_Standby_Vrfs_Vrf.
    Vrf []Igmp_Standby_Vrfs_Vrf
}

func (vrfs *Igmp_Standby_Vrfs) GetFilter() yfilter.YFilter { return vrfs.YFilter }

func (vrfs *Igmp_Standby_Vrfs) SetFilter(yf yfilter.YFilter) { vrfs.YFilter = yf }

func (vrfs *Igmp_Standby_Vrfs) GetGoName(yname string) string {
    if yname == "vrf" { return "Vrf" }
    return ""
}

func (vrfs *Igmp_Standby_Vrfs) GetSegmentPath() string {
    return "vrfs"
}

func (vrfs *Igmp_Standby_Vrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf" {
        for _, c := range vrfs.Vrf {
            if vrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf{}
        vrfs.Vrf = append(vrfs.Vrf, child)
        return &vrfs.Vrf[len(vrfs.Vrf)-1]
    }
    return nil
}

func (vrfs *Igmp_Standby_Vrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfs.Vrf {
        children[vrfs.Vrf[i].GetSegmentPath()] = &vrfs.Vrf[i]
    }
    return children
}

func (vrfs *Igmp_Standby_Vrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfs *Igmp_Standby_Vrfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfs *Igmp_Standby_Vrfs) GetYangName() string { return "vrfs" }

func (vrfs *Igmp_Standby_Vrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfs *Igmp_Standby_Vrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfs *Igmp_Standby_Vrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfs *Igmp_Standby_Vrfs) SetParent(parent types.Entity) { vrfs.parent = parent }

func (vrfs *Igmp_Standby_Vrfs) GetParent() types.Entity { return vrfs.parent }

func (vrfs *Igmp_Standby_Vrfs) GetParentYangName() string { return "standby" }

// Igmp_Standby_Vrfs_Vrf
// VRF table Names
type Igmp_Standby_Vrfs_Vrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with length: 1..32.
    VrfName interface{}

    // IGMP Summary Information.
    Summary Igmp_Standby_Vrfs_Vrf_Summary

    // IGMP Interface state on.
    InterfaceStateOns Igmp_Standby_Vrfs_Vrf_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Igmp_Standby_Vrfs_Vrf_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Igmp_Standby_Vrfs_Vrf_NonActiveGroups

    // SSM Map Table.
    SsmMaps Igmp_Standby_Vrfs_Vrf_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Igmp_Standby_Vrfs_Vrf_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Igmp_Standby_Vrfs_Vrf_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Igmp_Standby_Vrfs_Vrf_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Igmp_Standby_Vrfs_Vrf_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Igmp_Standby_Vrfs_Vrf_TrafficCounters

    // IGMP Group Database Table.
    Groups Igmp_Standby_Vrfs_Vrf_Groups

    // IGMP Groups Summary.
    GroupSummary Igmp_Standby_Vrfs_Vrf_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Igmp_Standby_Vrfs_Vrf_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs
}

func (vrf *Igmp_Standby_Vrfs_Vrf) GetFilter() yfilter.YFilter { return vrf.YFilter }

func (vrf *Igmp_Standby_Vrfs_Vrf) SetFilter(yf yfilter.YFilter) { vrf.YFilter = yf }

func (vrf *Igmp_Standby_Vrfs_Vrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "summary" { return "Summary" }
    if yname == "interface-state-ons" { return "InterfaceStateOns" }
    if yname == "detail-groups" { return "DetailGroups" }
    if yname == "non-active-groups" { return "NonActiveGroups" }
    if yname == "ssm-maps" { return "SsmMaps" }
    if yname == "explicit-groups" { return "ExplicitGroups" }
    if yname == "interface-table" { return "InterfaceTable" }
    if yname == "interface-unicast-qos-adjusts" { return "InterfaceUnicastQosAdjusts" }
    if yname == "ranges" { return "Ranges" }
    if yname == "ifrs-interfaces" { return "IfrsInterfaces" }
    if yname == "traffic-counters" { return "TrafficCounters" }
    if yname == "groups" { return "Groups" }
    if yname == "group-summary" { return "GroupSummary" }
    if yname == "ifrs-interface-summary" { return "IfrsInterfaceSummary" }
    if yname == "global-interface-table" { return "GlobalInterfaceTable" }
    if yname == "ssm-map-details" { return "SsmMapDetails" }
    if yname == "interface-state-offs" { return "InterfaceStateOffs" }
    return ""
}

func (vrf *Igmp_Standby_Vrfs_Vrf) GetSegmentPath() string {
    return "vrf" + "[vrf-name='" + fmt.Sprintf("%v", vrf.VrfName) + "']"
}

func (vrf *Igmp_Standby_Vrfs_Vrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &vrf.Summary
    }
    if childYangName == "interface-state-ons" {
        return &vrf.InterfaceStateOns
    }
    if childYangName == "detail-groups" {
        return &vrf.DetailGroups
    }
    if childYangName == "non-active-groups" {
        return &vrf.NonActiveGroups
    }
    if childYangName == "ssm-maps" {
        return &vrf.SsmMaps
    }
    if childYangName == "explicit-groups" {
        return &vrf.ExplicitGroups
    }
    if childYangName == "interface-table" {
        return &vrf.InterfaceTable
    }
    if childYangName == "interface-unicast-qos-adjusts" {
        return &vrf.InterfaceUnicastQosAdjusts
    }
    if childYangName == "ranges" {
        return &vrf.Ranges
    }
    if childYangName == "ifrs-interfaces" {
        return &vrf.IfrsInterfaces
    }
    if childYangName == "traffic-counters" {
        return &vrf.TrafficCounters
    }
    if childYangName == "groups" {
        return &vrf.Groups
    }
    if childYangName == "group-summary" {
        return &vrf.GroupSummary
    }
    if childYangName == "ifrs-interface-summary" {
        return &vrf.IfrsInterfaceSummary
    }
    if childYangName == "global-interface-table" {
        return &vrf.GlobalInterfaceTable
    }
    if childYangName == "ssm-map-details" {
        return &vrf.SsmMapDetails
    }
    if childYangName == "interface-state-offs" {
        return &vrf.InterfaceStateOffs
    }
    return nil
}

func (vrf *Igmp_Standby_Vrfs_Vrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &vrf.Summary
    children["interface-state-ons"] = &vrf.InterfaceStateOns
    children["detail-groups"] = &vrf.DetailGroups
    children["non-active-groups"] = &vrf.NonActiveGroups
    children["ssm-maps"] = &vrf.SsmMaps
    children["explicit-groups"] = &vrf.ExplicitGroups
    children["interface-table"] = &vrf.InterfaceTable
    children["interface-unicast-qos-adjusts"] = &vrf.InterfaceUnicastQosAdjusts
    children["ranges"] = &vrf.Ranges
    children["ifrs-interfaces"] = &vrf.IfrsInterfaces
    children["traffic-counters"] = &vrf.TrafficCounters
    children["groups"] = &vrf.Groups
    children["group-summary"] = &vrf.GroupSummary
    children["ifrs-interface-summary"] = &vrf.IfrsInterfaceSummary
    children["global-interface-table"] = &vrf.GlobalInterfaceTable
    children["ssm-map-details"] = &vrf.SsmMapDetails
    children["interface-state-offs"] = &vrf.InterfaceStateOffs
    return children
}

func (vrf *Igmp_Standby_Vrfs_Vrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = vrf.VrfName
    return leafs
}

func (vrf *Igmp_Standby_Vrfs_Vrf) GetBundleName() string { return "cisco_ios_xr" }

func (vrf *Igmp_Standby_Vrfs_Vrf) GetYangName() string { return "vrf" }

func (vrf *Igmp_Standby_Vrfs_Vrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrf *Igmp_Standby_Vrfs_Vrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrf *Igmp_Standby_Vrfs_Vrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrf *Igmp_Standby_Vrfs_Vrf) SetParent(parent types.Entity) { vrf.parent = parent }

func (vrf *Igmp_Standby_Vrfs_Vrf) GetParent() types.Entity { return vrf.parent }

func (vrf *Igmp_Standby_Vrfs_Vrf) GetParentYangName() string { return "vrfs" }

// Igmp_Standby_Vrfs_Vrf_Summary
// IGMP Summary Information
type Igmp_Standby_Vrfs_Vrf_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Igmp_Standby_Vrfs_Vrf_Summary_Interface.
    Interface []Igmp_Standby_Vrfs_Vrf_Summary_Interface
}

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetGoName(yname string) string {
    if yname == "robustness" { return "Robustness" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-disabled" { return "IsDisabled" }
    if yname == "supported-interfaces" { return "SupportedInterfaces" }
    if yname == "unsupported-interfaces" { return "UnsupportedInterfaces" }
    if yname == "enabled-interface-count" { return "EnabledInterfaceCount" }
    if yname == "disabled-interface-count" { return "DisabledInterfaceCount" }
    if yname == "tunnel-mte-config-count" { return "TunnelMteConfigCount" }
    if yname == "node-low-memory" { return "NodeLowMemory" }
    if yname == "interface" { return "Interface" }
    return ""
}

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range summary.Interface {
            if summary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_Summary_Interface{}
        summary.Interface = append(summary.Interface, child)
        return &summary.Interface[len(summary.Interface)-1]
    }
    return nil
}

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summary.Interface {
        children[summary.Interface[i].GetSegmentPath()] = &summary.Interface[i]
    }
    return children
}

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["robustness"] = summary.Robustness
    leafs["group-limit"] = summary.GroupLimit
    leafs["group-count"] = summary.GroupCount
    leafs["is-disabled"] = summary.IsDisabled
    leafs["supported-interfaces"] = summary.SupportedInterfaces
    leafs["unsupported-interfaces"] = summary.UnsupportedInterfaces
    leafs["enabled-interface-count"] = summary.EnabledInterfaceCount
    leafs["disabled-interface-count"] = summary.DisabledInterfaceCount
    leafs["tunnel-mte-config-count"] = summary.TunnelMteConfigCount
    leafs["node-low-memory"] = summary.NodeLowMemory
    return leafs
}

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetYangName() string { return "summary" }

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Igmp_Standby_Vrfs_Vrf_Summary_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "on-off" { return "OnOff" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    return ""
}

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetSegmentPath() string {
    return "interface"
}

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["group-limit"] = self.GroupLimit
    leafs["group-count"] = self.GroupCount
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["on-off"] = self.OnOff
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    return leafs
}

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetYangName() string { return "interface" }

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetParent() types.Entity { return self.parent }

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetParentYangName() string { return "summary" }

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOns
// IGMP Interface state on
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOns struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetFilter() yfilter.YFilter { return interfaceStateOns.YFilter }

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) SetFilter(yf yfilter.YFilter) { interfaceStateOns.YFilter = yf }

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetGoName(yname string) string {
    if yname == "interface-state-on" { return "InterfaceStateOn" }
    return ""
}

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetSegmentPath() string {
    return "interface-state-ons"
}

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-on" {
        for _, c := range interfaceStateOns.InterfaceStateOn {
            if interfaceStateOns.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn{}
        interfaceStateOns.InterfaceStateOn = append(interfaceStateOns.InterfaceStateOn, child)
        return &interfaceStateOns.InterfaceStateOn[len(interfaceStateOns.InterfaceStateOn)-1]
    }
    return nil
}

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOns.InterfaceStateOn {
        children[interfaceStateOns.InterfaceStateOn[i].GetSegmentPath()] = &interfaceStateOns.InterfaceStateOn[i]
    }
    return children
}

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetYangName() string { return "interface-state-ons" }

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) SetParent(parent types.Entity) { interfaceStateOns.parent = parent }

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetParent() types.Entity { return interfaceStateOns.parent }

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetFilter() yfilter.YFilter { return interfaceStateOn.YFilter }

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) SetFilter(yf yfilter.YFilter) { interfaceStateOn.YFilter = yf }

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetSegmentPath() string {
    return "interface-state-on" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOn.InterfaceName) + "']"
}

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOn.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOn.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOn.SubscriberAddress
    }
    return nil
}

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOn.Address
    children["querier-address"] = &interfaceStateOn.QuerierAddress
    children["subscriber-address"] = &interfaceStateOn.SubscriberAddress
    return children
}

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOn.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOn.InterfaceNameXr
    leafs["state"] = interfaceStateOn.State
    leafs["prefix-length"] = interfaceStateOn.PrefixLength
    leafs["is-interface-up"] = interfaceStateOn.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOn.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOn.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOn.IgmpVersion
    leafs["host-version"] = interfaceStateOn.HostVersion
    leafs["query-interval"] = interfaceStateOn.QueryInterval
    leafs["query-timeout"] = interfaceStateOn.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOn.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOn.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOn.GroupJoins
    leafs["group-leaves"] = interfaceStateOn.GroupLeaves
    leafs["is-querier"] = interfaceStateOn.IsQuerier
    leafs["total-active-groups"] = interfaceStateOn.TotalActiveGroups
    leafs["robustness"] = interfaceStateOn.Robustness
    leafs["proxy-interface"] = interfaceStateOn.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOn.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOn.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOn.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOn.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOn.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOn.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOn.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOn.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOn.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOn.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOn.VrfId
    leafs["mte-vrf-id"] = interfaceStateOn.MteVrfId
    leafs["location"] = interfaceStateOn.Location
    leafs["mtu"] = interfaceStateOn.Mtu
    leafs["vrf-state"] = interfaceStateOn.VrfState
    leafs["is-configurationverify"] = interfaceStateOn.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOn.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOn.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOn.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOn.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOn.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOn.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOn.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOn.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOn.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOn.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOn.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOn.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOn.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOn.MteTupleCount
    return leafs
}

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetYangName() string { return "interface-state-on" }

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) SetParent(parent types.Entity) { interfaceStateOn.parent = parent }

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetParent() types.Entity { return interfaceStateOn.parent }

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetParentYangName() string { return "interface-state-ons" }

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetYangName() string { return "address" }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetParentYangName() string { return "interface-state-on" }

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParentYangName() string { return "interface-state-on" }

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParentYangName() string { return "interface-state-on" }

// Igmp_Standby_Vrfs_Vrf_DetailGroups
// IGMP Detail Group Database
type Igmp_Standby_Vrfs_Vrf_DetailGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup.
    DetailGroup []Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup
}

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetFilter() yfilter.YFilter { return detailGroups.YFilter }

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) SetFilter(yf yfilter.YFilter) { detailGroups.YFilter = yf }

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetGoName(yname string) string {
    if yname == "detail-group" { return "DetailGroup" }
    return ""
}

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetSegmentPath() string {
    return "detail-groups"
}

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detail-group" {
        for _, c := range detailGroups.DetailGroup {
            if detailGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup{}
        detailGroups.DetailGroup = append(detailGroups.DetailGroup, child)
        return &detailGroups.DetailGroup[len(detailGroups.DetailGroup)-1]
    }
    return nil
}

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range detailGroups.DetailGroup {
        children[detailGroups.DetailGroup[i].GetSegmentPath()] = &detailGroups.DetailGroup[i]
    }
    return children
}

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetYangName() string { return "detail-groups" }

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) SetParent(parent types.Entity) { detailGroups.parent = parent }

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetParent() types.Entity { return detailGroups.parent }

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source.
    Source []Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source
}

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetFilter() yfilter.YFilter { return detailGroup.YFilter }

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) SetFilter(yf yfilter.YFilter) { detailGroup.YFilter = yf }

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "is-router-exclude-mode" { return "IsRouterExcludeMode" }
    if yname == "is-host-exclude-mode" { return "IsHostExcludeMode" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "source" { return "Source" }
    return ""
}

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetSegmentPath() string {
    return "detail-group"
}

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &detailGroup.GroupInfo
    }
    if childYangName == "source" {
        for _, c := range detailGroup.Source {
            if detailGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source{}
        detailGroup.Source = append(detailGroup.Source, child)
        return &detailGroup.Source[len(detailGroup.Source)-1]
    }
    return nil
}

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &detailGroup.GroupInfo
    for i := range detailGroup.Source {
        children[detailGroup.Source[i].GetSegmentPath()] = &detailGroup.Source[i]
    }
    return children
}

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = detailGroup.GroupAddress
    leafs["interface-name"] = detailGroup.InterfaceName
    leafs["source-address"] = detailGroup.SourceAddress
    leafs["is-router-exclude-mode"] = detailGroup.IsRouterExcludeMode
    leafs["is-host-exclude-mode"] = detailGroup.IsHostExcludeMode
    return leafs
}

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetYangName() string { return "detail-group" }

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) SetParent(parent types.Entity) { detailGroup.parent = parent }

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetParent() types.Entity { return detailGroup.parent }

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetParentYangName() string { return "detail-groups" }

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetParentYangName() string { return "detail-group" }

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source
// List of sources
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-remote" { return "IsRemote" }
    if yname == "is-forward" { return "IsForward" }
    if yname == "is-we-report" { return "IsWeReport" }
    if yname == "flags" { return "Flags" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetSegmentPath() string {
    return "source"
}

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &source.SourceAddress
    }
    return nil
}

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &source.SourceAddress
    return children
}

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = source.Uptime
    leafs["expiration-time"] = source.ExpirationTime
    leafs["is-local"] = source.IsLocal
    leafs["is-remote"] = source.IsRemote
    leafs["is-forward"] = source.IsForward
    leafs["is-we-report"] = source.IsWeReport
    leafs["flags"] = source.Flags
    leafs["is-added"] = source.IsAdded
    return leafs
}

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetYangName() string { return "source" }

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetParent() types.Entity { return source.parent }

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetParentYangName() string { return "detail-group" }

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetParentYangName() string { return "source" }

// Igmp_Standby_Vrfs_Vrf_NonActiveGroups
// IGMP Non-Active Groups Information
type Igmp_Standby_Vrfs_Vrf_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetGoName(yname string) string {
    if yname == "non-active-groups" { return "NonActiveGroups" }
    return ""
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-active-groups" {
        for _, c := range nonActiveGroups.NonActiveGroups {
            if nonActiveGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups{}
        nonActiveGroups.NonActiveGroups = append(nonActiveGroups.NonActiveGroups, child)
        return &nonActiveGroups.NonActiveGroups[len(nonActiveGroups.NonActiveGroups)-1]
    }
    return nil
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nonActiveGroups.NonActiveGroups {
        children[nonActiveGroups.NonActiveGroups[i].GetSegmentPath()] = &nonActiveGroups.NonActiveGroups[i]
    }
    return children
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    if yname == "reason-for-non-activity" { return "ReasonForNonActivity" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address" {
        return &nonActiveGroups.GroupAddress
    }
    if childYangName == "source-address" {
        return &nonActiveGroups.SourceAddress
    }
    return nil
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address"] = &nonActiveGroups.GroupAddress
    children["source-address"] = &nonActiveGroups.SourceAddress
    return children
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface"] = nonActiveGroups.Interface
    leafs["reason-for-non-activity"] = nonActiveGroups.ReasonForNonActivity
    return leafs
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetParentYangName() string { return "non-active-groups" }

// Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetParentYangName() string { return "non-active-groups" }

// Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetParentYangName() string { return "non-active-groups" }

// Igmp_Standby_Vrfs_Vrf_SsmMaps
// SSM Map Table
type Igmp_Standby_Vrfs_Vrf_SsmMaps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap.
    SsmMap []Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap
}

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetFilter() yfilter.YFilter { return ssmMaps.YFilter }

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) SetFilter(yf yfilter.YFilter) { ssmMaps.YFilter = yf }

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetGoName(yname string) string {
    if yname == "ssm-map" { return "SsmMap" }
    return ""
}

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetSegmentPath() string {
    return "ssm-maps"
}

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map" {
        for _, c := range ssmMaps.SsmMap {
            if ssmMaps.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap{}
        ssmMaps.SsmMap = append(ssmMaps.SsmMap, child)
        return &ssmMaps.SsmMap[len(ssmMaps.SsmMap)-1]
    }
    return nil
}

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMaps.SsmMap {
        children[ssmMaps.SsmMap[i].GetSegmentPath()] = &ssmMaps.SsmMap[i]
    }
    return children
}

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetYangName() string { return "ssm-maps" }

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) SetParent(parent types.Entity) { ssmMaps.parent = parent }

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetParent() types.Entity { return ssmMaps.parent }

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap
// SSM Map information
type Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetFilter() yfilter.YFilter { return ssmMap.YFilter }

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) SetFilter(yf yfilter.YFilter) { ssmMap.YFilter = yf }

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetSegmentPath() string {
    return "ssm-map"
}

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &ssmMap.GroupAddressXr
    }
    return nil
}

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &ssmMap.GroupAddressXr
    return children
}

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMap.SsmMapType
    leafs["group-address"] = ssmMap.GroupAddress
    leafs["map-type"] = ssmMap.MapType
    leafs["source-counts"] = ssmMap.SourceCounts
    return leafs
}

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetYangName() string { return "ssm-map" }

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) SetParent(parent types.Entity) { ssmMap.parent = parent }

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetParent() types.Entity { return ssmMap.parent }

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetParentYangName() string { return "ssm-maps" }

// Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetParentYangName() string { return "ssm-map" }

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups
// IGMP Explicit Group Database
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetFilter() yfilter.YFilter { return explicitGroups.YFilter }

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) SetFilter(yf yfilter.YFilter) { explicitGroups.YFilter = yf }

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetGoName(yname string) string {
    if yname == "explicit-group" { return "ExplicitGroup" }
    return ""
}

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetSegmentPath() string {
    return "explicit-groups"
}

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "explicit-group" {
        for _, c := range explicitGroups.ExplicitGroup {
            if explicitGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup{}
        explicitGroups.ExplicitGroup = append(explicitGroups.ExplicitGroup, child)
        return &explicitGroups.ExplicitGroup[len(explicitGroups.ExplicitGroup)-1]
    }
    return nil
}

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range explicitGroups.ExplicitGroup {
        children[explicitGroups.ExplicitGroup[i].GetSegmentPath()] = &explicitGroups.ExplicitGroup[i]
    }
    return children
}

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetYangName() string { return "explicit-groups" }

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) SetParent(parent types.Entity) { explicitGroups.parent = parent }

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetParent() types.Entity { return explicitGroups.parent }

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host.
    Host []Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetFilter() yfilter.YFilter { return explicitGroup.YFilter }

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) SetFilter(yf yfilter.YFilter) { explicitGroup.YFilter = yf }

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "include-hosts" { return "IncludeHosts" }
    if yname == "exclude-hosts" { return "ExcludeHosts" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "host" { return "Host" }
    return ""
}

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetSegmentPath() string {
    return "explicit-group"
}

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &explicitGroup.GroupInfo
    }
    if childYangName == "host" {
        for _, c := range explicitGroup.Host {
            if explicitGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host{}
        explicitGroup.Host = append(explicitGroup.Host, child)
        return &explicitGroup.Host[len(explicitGroup.Host)-1]
    }
    return nil
}

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &explicitGroup.GroupInfo
    for i := range explicitGroup.Host {
        children[explicitGroup.Host[i].GetSegmentPath()] = &explicitGroup.Host[i]
    }
    return children
}

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = explicitGroup.GroupAddress
    leafs["interface-name"] = explicitGroup.InterfaceName
    leafs["source-address"] = explicitGroup.SourceAddress
    leafs["include-hosts"] = explicitGroup.IncludeHosts
    leafs["exclude-hosts"] = explicitGroup.ExcludeHosts
    return leafs
}

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetYangName() string { return "explicit-group" }

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) SetParent(parent types.Entity) { explicitGroup.parent = parent }

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetParent() types.Entity { return explicitGroup.parent }

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetParentYangName() string { return "explicit-groups" }

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetParentYangName() string { return "explicit-group" }

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetFilter() yfilter.YFilter { return host.YFilter }

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) SetFilter(yf yfilter.YFilter) { host.YFilter = yf }

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "is-exclude" { return "IsExclude" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "source-count" { return "SourceCount" }
    if yname == "address" { return "Address" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetSegmentPath() string {
    return "host"
}

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &host.Address
    }
    if childYangName == "source-address" {
        for _, c := range host.SourceAddress {
            if host.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress{}
        host.SourceAddress = append(host.SourceAddress, child)
        return &host.SourceAddress[len(host.SourceAddress)-1]
    }
    return nil
}

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &host.Address
    for i := range host.SourceAddress {
        children[host.SourceAddress[i].GetSegmentPath()] = &host.SourceAddress[i]
    }
    return children
}

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = host.Uptime
    leafs["is-exclude"] = host.IsExclude
    leafs["expiration-time"] = host.ExpirationTime
    leafs["source-count"] = host.SourceCount
    return leafs
}

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetBundleName() string { return "cisco_ios_xr" }

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetYangName() string { return "host" }

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) SetParent(parent types.Entity) { host.parent = parent }

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetParent() types.Entity { return host.parent }

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetParentYangName() string { return "explicit-group" }

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetYangName() string { return "address" }

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetParentYangName() string { return "host" }

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParentYangName() string { return "host" }

// Igmp_Standby_Vrfs_Vrf_InterfaceTable
// IGMP Interface specific Table
type Igmp_Standby_Vrfs_Vrf_InterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface.
    Interface []Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface
}

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetFilter() yfilter.YFilter { return interfaceTable.YFilter }

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) SetFilter(yf yfilter.YFilter) { interfaceTable.YFilter = yf }

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetSegmentPath() string {
    return "interface-table"
}

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaceTable.Interface {
            if interfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface{}
        interfaceTable.Interface = append(interfaceTable.Interface, child)
        return &interfaceTable.Interface[len(interfaceTable.Interface)-1]
    }
    return nil
}

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceTable.Interface {
        children[interfaceTable.Interface[i].GetSegmentPath()] = &interfaceTable.Interface[i]
    }
    return children
}

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetYangName() string { return "interface-table" }

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) SetParent(parent types.Entity) { interfaceTable.parent = parent }

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetParent() types.Entity { return interfaceTable.parent }

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface
// IGMP Interface
type Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetParentYangName() string { return "interface-table" }

// Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address
// IP address
type Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjusts.YFilter }

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjusts.YFilter = yf }

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetGoName(yname string) string {
    if yname == "interface-unicast-qos-adjust" { return "InterfaceUnicastQosAdjust" }
    return ""
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetSegmentPath() string {
    return "interface-unicast-qos-adjusts"
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-unicast-qos-adjust" {
        for _, c := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
            if interfaceUnicastQosAdjusts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust{}
        interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust = append(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, child)
        return &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[len(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        children[interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i].GetSegmentPath()] = &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]
    }
    return children
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetYangName() string { return "interface-unicast-qos-adjusts" }

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) SetParent(parent types.Entity) { interfaceUnicastQosAdjusts.parent = parent }

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetParent() types.Entity { return interfaceUnicastQosAdjusts.parent }

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjust.YFilter }

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjust.YFilter = yf }

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-access" { return "IsVirtualAccess" }
    if yname == "rate" { return "Rate" }
    if yname == "rate-increments" { return "RateIncrements" }
    if yname == "rate-decrements" { return "RateDecrements" }
    if yname == "update" { return "Update" }
    return ""
}

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetSegmentPath() string {
    return "interface-unicast-qos-adjust" + "[interface-name='" + fmt.Sprintf("%v", interfaceUnicastQosAdjust.InterfaceName) + "']"
}

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update" {
        for _, c := range interfaceUnicastQosAdjust.Update {
            if interfaceUnicastQosAdjust.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update{}
        interfaceUnicastQosAdjust.Update = append(interfaceUnicastQosAdjust.Update, child)
        return &interfaceUnicastQosAdjust.Update[len(interfaceUnicastQosAdjust.Update)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjust.Update {
        children[interfaceUnicastQosAdjust.Update[i].GetSegmentPath()] = &interfaceUnicastQosAdjust.Update[i]
    }
    return children
}

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceUnicastQosAdjust.InterfaceName
    leafs["is-virtual-access"] = interfaceUnicastQosAdjust.IsVirtualAccess
    leafs["rate"] = interfaceUnicastQosAdjust.Rate
    leafs["rate-increments"] = interfaceUnicastQosAdjust.RateIncrements
    leafs["rate-decrements"] = interfaceUnicastQosAdjust.RateDecrements
    return leafs
}

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetYangName() string { return "interface-unicast-qos-adjust" }

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetParent(parent types.Entity) { interfaceUnicastQosAdjust.parent = parent }

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParent() types.Entity { return interfaceUnicastQosAdjust.parent }

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParentYangName() string { return "interface-unicast-qos-adjusts" }

// Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetFilter() yfilter.YFilter { return update.YFilter }

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetFilter(yf yfilter.YFilter) { update.YFilter = yf }

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetGoName(yname string) string {
    if yname == "is-add" { return "IsAdd" }
    if yname == "weight" { return "Weight" }
    if yname == "received-time" { return "ReceivedTime" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "group-address" { return "GroupAddress" }
    return ""
}

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetSegmentPath() string {
    return "update"
}

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &update.SourceAddress
    }
    if childYangName == "group-address" {
        return &update.GroupAddress
    }
    return nil
}

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &update.SourceAddress
    children["group-address"] = &update.GroupAddress
    return children
}

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-add"] = update.IsAdd
    leafs["weight"] = update.Weight
    leafs["received-time"] = update.ReceivedTime
    return leafs
}

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleName() string { return "cisco_ios_xr" }

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetYangName() string { return "update" }

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetParent(parent types.Entity) { update.parent = parent }

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParent() types.Entity { return update.parent }

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParentYangName() string { return "interface-unicast-qos-adjust" }

// Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParentYangName() string { return "update" }

// Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParentYangName() string { return "update" }

// Igmp_Standby_Vrfs_Vrf_Ranges
// Range table
type Igmp_Standby_Vrfs_Vrf_Ranges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Range information. The type is slice of Igmp_Standby_Vrfs_Vrf_Ranges_Range.
    Range []Igmp_Standby_Vrfs_Vrf_Ranges_Range
}

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetFilter() yfilter.YFilter { return ranges.YFilter }

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) SetFilter(yf yfilter.YFilter) { ranges.YFilter = yf }

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetGoName(yname string) string {
    if yname == "range" { return "Range" }
    return ""
}

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetSegmentPath() string {
    return "ranges"
}

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "range" {
        for _, c := range ranges.Range {
            if ranges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_Ranges_Range{}
        ranges.Range = append(ranges.Range, child)
        return &ranges.Range[len(ranges.Range)-1]
    }
    return nil
}

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ranges.Range {
        children[ranges.Range[i].GetSegmentPath()] = &ranges.Range[i]
    }
    return children
}

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetBundleName() string { return "cisco_ios_xr" }

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetYangName() string { return "ranges" }

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) SetParent(parent types.Entity) { ranges.parent = parent }

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetParent() types.Entity { return ranges.parent }

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_Ranges_Range
// Range information
type Igmp_Standby_Vrfs_Vrf_Ranges_Range struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: -2147483648..2147483647.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr
}

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "group-mask" { return "GroupMask" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "protocol" { return "Protocol" }
    if yname == "is-stale" { return "IsStale" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetSegmentPath() string {
    return "range"
}

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &self.GroupAddressXr
    }
    return nil
}

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &self.GroupAddressXr
    return children
}

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = self.GroupAddress
    leafs["group-mask"] = self.GroupMask
    leafs["prefix-length"] = self.PrefixLength
    leafs["protocol"] = self.Protocol
    leafs["is-stale"] = self.IsStale
    return leafs
}

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetYangName() string { return "range" }

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetParent() types.Entity { return self.parent }

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetParentYangName() string { return "ranges" }

// Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr
// Group address
type Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetParentYangName() string { return "range" }

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaces
// IGMP Interface specific
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface.
    IfrsInterface []Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetFilter() yfilter.YFilter { return ifrsInterfaces.YFilter }

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) SetFilter(yf yfilter.YFilter) { ifrsInterfaces.YFilter = yf }

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetGoName(yname string) string {
    if yname == "ifrs-interface" { return "IfrsInterface" }
    return ""
}

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetSegmentPath() string {
    return "ifrs-interfaces"
}

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ifrs-interface" {
        for _, c := range ifrsInterfaces.IfrsInterface {
            if ifrsInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface{}
        ifrsInterfaces.IfrsInterface = append(ifrsInterfaces.IfrsInterface, child)
        return &ifrsInterfaces.IfrsInterface[len(ifrsInterfaces.IfrsInterface)-1]
    }
    return nil
}

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ifrsInterfaces.IfrsInterface {
        children[ifrsInterfaces.IfrsInterface[i].GetSegmentPath()] = &ifrsInterfaces.IfrsInterface[i]
    }
    return children
}

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetYangName() string { return "ifrs-interfaces" }

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) SetParent(parent types.Entity) { ifrsInterfaces.parent = parent }

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetParent() types.Entity { return ifrsInterfaces.parent }

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetFilter() yfilter.YFilter { return ifrsInterface.YFilter }

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) SetFilter(yf yfilter.YFilter) { ifrsInterface.YFilter = yf }

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "join-group-count" { return "JoinGroupCount" }
    if yname == "igmp-interface-entry" { return "IgmpInterfaceEntry" }
    return ""
}

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetSegmentPath() string {
    return "ifrs-interface" + "[interface-name='" + fmt.Sprintf("%v", ifrsInterface.InterfaceName) + "']"
}

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "igmp-interface-entry" {
        return &ifrsInterface.IgmpInterfaceEntry
    }
    return nil
}

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["igmp-interface-entry"] = &ifrsInterface.IgmpInterfaceEntry
    return children
}

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ifrsInterface.InterfaceName
    leafs["join-group-count"] = ifrsInterface.JoinGroupCount
    return leafs
}

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetYangName() string { return "ifrs-interface" }

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) SetParent(parent types.Entity) { ifrsInterface.parent = parent }

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetParent() types.Entity { return ifrsInterface.parent }

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetParentYangName() string { return "ifrs-interfaces" }

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetFilter() yfilter.YFilter { return igmpInterfaceEntry.YFilter }

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetFilter(yf yfilter.YFilter) { igmpInterfaceEntry.YFilter = yf }

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetSegmentPath() string {
    return "igmp-interface-entry"
}

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &igmpInterfaceEntry.Address
    }
    if childYangName == "querier-address" {
        return &igmpInterfaceEntry.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &igmpInterfaceEntry.SubscriberAddress
    }
    return nil
}

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &igmpInterfaceEntry.Address
    children["querier-address"] = &igmpInterfaceEntry.QuerierAddress
    children["subscriber-address"] = &igmpInterfaceEntry.SubscriberAddress
    return children
}

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = igmpInterfaceEntry.InterfaceNameXr
    leafs["state"] = igmpInterfaceEntry.State
    leafs["prefix-length"] = igmpInterfaceEntry.PrefixLength
    leafs["is-interface-up"] = igmpInterfaceEntry.IsInterfaceUp
    leafs["is-ip-enabled"] = igmpInterfaceEntry.IsIpEnabled
    leafs["is-router-enabled"] = igmpInterfaceEntry.IsRouterEnabled
    leafs["igmp-version"] = igmpInterfaceEntry.IgmpVersion
    leafs["host-version"] = igmpInterfaceEntry.HostVersion
    leafs["query-interval"] = igmpInterfaceEntry.QueryInterval
    leafs["query-timeout"] = igmpInterfaceEntry.QueryTimeout
    leafs["query-maximum-response-time"] = igmpInterfaceEntry.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = igmpInterfaceEntry.LastMemberQueryInterval
    leafs["group-joins"] = igmpInterfaceEntry.GroupJoins
    leafs["group-leaves"] = igmpInterfaceEntry.GroupLeaves
    leafs["is-querier"] = igmpInterfaceEntry.IsQuerier
    leafs["total-active-groups"] = igmpInterfaceEntry.TotalActiveGroups
    leafs["robustness"] = igmpInterfaceEntry.Robustness
    leafs["proxy-interface"] = igmpInterfaceEntry.ProxyInterface
    leafs["querier-uptime"] = igmpInterfaceEntry.QuerierUptime
    leafs["las-ll-registration-count"] = igmpInterfaceEntry.LasLlRegistrationCount
    leafs["las-get-address-count"] = igmpInterfaceEntry.LasGetAddressCount
    leafs["las-update-count"] = igmpInterfaceEntry.LasUpdateCount
    leafs["las-ll-remove-update-count"] = igmpInterfaceEntry.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = igmpInterfaceEntry.LasLlAddUpdateCount
    leafs["las-null-update-count"] = igmpInterfaceEntry.LasNullUpdateCount
    leafs["las-unregistration-count"] = igmpInterfaceEntry.LasUnregistrationCount
    leafs["is-las-request"] = igmpInterfaceEntry.IsLasRequest
    leafs["is-las-registered"] = igmpInterfaceEntry.IsLasRegistered
    leafs["vrf-id"] = igmpInterfaceEntry.VrfId
    leafs["mte-vrf-id"] = igmpInterfaceEntry.MteVrfId
    leafs["location"] = igmpInterfaceEntry.Location
    leafs["mtu"] = igmpInterfaceEntry.Mtu
    leafs["vrf-state"] = igmpInterfaceEntry.VrfState
    leafs["is-configurationverify"] = igmpInterfaceEntry.IsConfigurationverify
    leafs["configurationvrf-set"] = igmpInterfaceEntry.ConfigurationvrfSet
    leafs["configurationvrf-error"] = igmpInterfaceEntry.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = igmpInterfaceEntry.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = igmpInterfaceEntry.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = igmpInterfaceEntry.IsImStateRegistered
    leafs["is-subscriber"] = igmpInterfaceEntry.IsSubscriber
    leafs["subscriber-mode"] = igmpInterfaceEntry.SubscriberMode
    leafs["is-identity-present"] = igmpInterfaceEntry.IsIdentityPresent
    leafs["subscriber-id"] = igmpInterfaceEntry.SubscriberId
    leafs["parent-ifhandle"] = igmpInterfaceEntry.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = igmpInterfaceEntry.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = igmpInterfaceEntry.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = igmpInterfaceEntry.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = igmpInterfaceEntry.MteTupleCount
    return leafs
}

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleName() string { return "cisco_ios_xr" }

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetYangName() string { return "igmp-interface-entry" }

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetParent(parent types.Entity) { igmpInterfaceEntry.parent = parent }

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParent() types.Entity { return igmpInterfaceEntry.parent }

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParentYangName() string { return "ifrs-interface" }

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetYangName() string { return "address" }

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParentYangName() string { return "igmp-interface-entry" }

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Igmp_Standby_Vrfs_Vrf_TrafficCounters
// IGMP Message Traffic Counters
type Igmp_Standby_Vrfs_Vrf_TrafficCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetFilter() yfilter.YFilter { return trafficCounters.YFilter }

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) SetFilter(yf yfilter.YFilter) { trafficCounters.YFilter = yf }

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetGoName(yname string) string {
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "packets-in" { return "PacketsIn" }
    if yname == "packets-out" { return "PacketsOut" }
    if yname == "format-errors" { return "FormatErrors" }
    if yname == "packet-manager-input-errors" { return "PacketManagerInputErrors" }
    if yname == "packet-manager-output-errors" { return "PacketManagerOutputErrors" }
    if yname == "checksum-errors" { return "ChecksumErrors" }
    if yname == "receive-socket-errors" { return "ReceiveSocketErrors" }
    if yname == "socket-errors" { return "SocketErrors" }
    if yname == "bad-scope-errors" { return "BadScopeErrors" }
    if yname == "auxillary-data-length-errors" { return "AuxillaryDataLengthErrors" }
    if yname == "invalid-source-address-errors" { return "InvalidSourceAddressErrors" }
    if yname == "no-socket-connection" { return "NoSocketConnection" }
    if yname == "miscellaneous-errors" { return "MiscellaneousErrors" }
    if yname == "input-queries" { return "InputQueries" }
    if yname == "input-reports" { return "InputReports" }
    if yname == "input-leaves" { return "InputLeaves" }
    if yname == "input-mtrace" { return "InputMtrace" }
    if yname == "input-dvmrp" { return "InputDvmrp" }
    if yname == "input-pim" { return "InputPim" }
    if yname == "output-queries" { return "OutputQueries" }
    if yname == "output-reports" { return "OutputReports" }
    if yname == "output-leaves" { return "OutputLeaves" }
    if yname == "output-mtrace" { return "OutputMtrace" }
    if yname == "output-dvmrp" { return "OutputDvmrp" }
    if yname == "output-pim" { return "OutputPim" }
    if yname == "get-packet-failure" { return "GetPacketFailure" }
    if yname == "output-no-parent-interface-handle" { return "OutputNoParentInterfaceHandle" }
    if yname == "input-no-idb" { return "InputNoIdb" }
    if yname == "input-no-vrf-in-idb" { return "InputNoVrfInIdb" }
    if yname == "input-disabled-idb" { return "InputDisabledIdb" }
    if yname == "input-martian-address" { return "InputMartianAddress" }
    if yname == "input-no-assigned-vrf-id" { return "InputNoAssignedVrfId" }
    if yname == "input-no-vrf-mtrace" { return "InputNoVrfMtrace" }
    if yname == "input-no-platform-support-mtrace" { return "InputNoPlatformSupportMtrace" }
    return ""
}

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetSegmentPath() string {
    return "traffic-counters"
}

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["elapsed-time"] = trafficCounters.ElapsedTime
    leafs["packets-in"] = trafficCounters.PacketsIn
    leafs["packets-out"] = trafficCounters.PacketsOut
    leafs["format-errors"] = trafficCounters.FormatErrors
    leafs["packet-manager-input-errors"] = trafficCounters.PacketManagerInputErrors
    leafs["packet-manager-output-errors"] = trafficCounters.PacketManagerOutputErrors
    leafs["checksum-errors"] = trafficCounters.ChecksumErrors
    leafs["receive-socket-errors"] = trafficCounters.ReceiveSocketErrors
    leafs["socket-errors"] = trafficCounters.SocketErrors
    leafs["bad-scope-errors"] = trafficCounters.BadScopeErrors
    leafs["auxillary-data-length-errors"] = trafficCounters.AuxillaryDataLengthErrors
    leafs["invalid-source-address-errors"] = trafficCounters.InvalidSourceAddressErrors
    leafs["no-socket-connection"] = trafficCounters.NoSocketConnection
    leafs["miscellaneous-errors"] = trafficCounters.MiscellaneousErrors
    leafs["input-queries"] = trafficCounters.InputQueries
    leafs["input-reports"] = trafficCounters.InputReports
    leafs["input-leaves"] = trafficCounters.InputLeaves
    leafs["input-mtrace"] = trafficCounters.InputMtrace
    leafs["input-dvmrp"] = trafficCounters.InputDvmrp
    leafs["input-pim"] = trafficCounters.InputPim
    leafs["output-queries"] = trafficCounters.OutputQueries
    leafs["output-reports"] = trafficCounters.OutputReports
    leafs["output-leaves"] = trafficCounters.OutputLeaves
    leafs["output-mtrace"] = trafficCounters.OutputMtrace
    leafs["output-dvmrp"] = trafficCounters.OutputDvmrp
    leafs["output-pim"] = trafficCounters.OutputPim
    leafs["get-packet-failure"] = trafficCounters.GetPacketFailure
    leafs["output-no-parent-interface-handle"] = trafficCounters.OutputNoParentInterfaceHandle
    leafs["input-no-idb"] = trafficCounters.InputNoIdb
    leafs["input-no-vrf-in-idb"] = trafficCounters.InputNoVrfInIdb
    leafs["input-disabled-idb"] = trafficCounters.InputDisabledIdb
    leafs["input-martian-address"] = trafficCounters.InputMartianAddress
    leafs["input-no-assigned-vrf-id"] = trafficCounters.InputNoAssignedVrfId
    leafs["input-no-vrf-mtrace"] = trafficCounters.InputNoVrfMtrace
    leafs["input-no-platform-support-mtrace"] = trafficCounters.InputNoPlatformSupportMtrace
    return leafs
}

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetBundleName() string { return "cisco_ios_xr" }

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetYangName() string { return "traffic-counters" }

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) SetParent(parent types.Entity) { trafficCounters.parent = parent }

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetParent() types.Entity { return trafficCounters.parent }

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_Groups
// IGMP Group Database Table
type Igmp_Standby_Vrfs_Vrf_Groups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_Groups_Group.
    Group []Igmp_Standby_Vrfs_Vrf_Groups_Group
}

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetFilter() yfilter.YFilter { return groups.YFilter }

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) SetFilter(yf yfilter.YFilter) { groups.YFilter = yf }

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetGoName(yname string) string {
    if yname == "group" { return "Group" }
    return ""
}

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetSegmentPath() string {
    return "groups"
}

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group" {
        for _, c := range groups.Group {
            if groups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_Groups_Group{}
        groups.Group = append(groups.Group, child)
        return &groups.Group[len(groups.Group)-1]
    }
    return nil
}

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range groups.Group {
        children[groups.Group[i].GetSegmentPath()] = &groups.Group[i]
    }
    return children
}

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetBundleName() string { return "cisco_ios_xr" }

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetYangName() string { return "groups" }

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) SetParent(parent types.Entity) { groups.parent = parent }

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetParent() types.Entity { return groups.parent }

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_Groups_Group
// IGMP Group Entry Information
type Igmp_Standby_Vrfs_Vrf_Groups_Group struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress
}

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetFilter() yfilter.YFilter { return group.YFilter }

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) SetFilter(yf yfilter.YFilter) { group.YFilter = yf }

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetSegmentPath() string {
    return "group"
}

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &group.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &group.LastReporter
    }
    if childYangName == "source-address" {
        return &group.SourceAddress
    }
    return nil
}

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &group.GroupAddressXr
    children["last-reporter"] = &group.LastReporter
    children["source-address"] = &group.SourceAddress
    return children
}

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = group.GroupAddress
    leafs["interface-name"] = group.InterfaceName
    leafs["interface-name-xr"] = group.InterfaceNameXr
    leafs["uptime"] = group.Uptime
    leafs["expiration-time"] = group.ExpirationTime
    leafs["explicit-tracking-enabled"] = group.ExplicitTrackingEnabled
    leafs["is-self-join"] = group.IsSelfJoin
    leafs["row-status"] = group.RowStatus
    leafs["is-low-memory"] = group.IsLowMemory
    leafs["router-filter-mode"] = group.RouterFilterMode
    leafs["older-host-version1-timer"] = group.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = group.OlderHostVersion2Timer
    leafs["is-added"] = group.IsAdded
    leafs["is-suppressed"] = group.IsSuppressed
    return leafs
}

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetBundleName() string { return "cisco_ios_xr" }

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetYangName() string { return "group" }

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) SetParent(parent types.Entity) { group.parent = parent }

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetParent() types.Entity { return group.parent }

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetParentYangName() string { return "groups" }

// Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr
// Group Address
type Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetParentYangName() string { return "group" }

// Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter
// Last reporter address
type Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetParentYangName() string { return "group" }

// Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress
// Source Address
type Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetParentYangName() string { return "group" }

// Igmp_Standby_Vrfs_Vrf_GroupSummary
// IGMP Groups Summary
type Igmp_Standby_Vrfs_Vrf_GroupSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetFilter() yfilter.YFilter { return groupSummary.YFilter }

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) SetFilter(yf yfilter.YFilter) { groupSummary.YFilter = yf }

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetGoName(yname string) string {
    if yname == "groutes" { return "Groutes" }
    if yname == "sg-routes" { return "SgRoutes" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    return ""
}

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetSegmentPath() string {
    return "group-summary"
}

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["groutes"] = groupSummary.Groutes
    leafs["sg-routes"] = groupSummary.SgRoutes
    leafs["group-count"] = groupSummary.GroupCount
    leafs["is-low-memory"] = groupSummary.IsLowMemory
    return leafs
}

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetBundleName() string { return "cisco_ios_xr" }

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetYangName() string { return "group-summary" }

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) SetParent(parent types.Entity) { groupSummary.parent = parent }

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetParent() types.Entity { return groupSummary.parent }

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetFilter() yfilter.YFilter { return ifrsInterfaceSummary.YFilter }

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) SetFilter(yf yfilter.YFilter) { ifrsInterfaceSummary.YFilter = yf }

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-count" { return "InterfaceCount" }
    if yname == "configuration-count" { return "ConfigurationCount" }
    return ""
}

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetSegmentPath() string {
    return "ifrs-interface-summary"
}

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-count"] = ifrsInterfaceSummary.InterfaceCount
    leafs["configuration-count"] = ifrsInterfaceSummary.ConfigurationCount
    return leafs
}

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetYangName() string { return "ifrs-interface-summary" }

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) SetParent(parent types.Entity) { ifrsInterfaceSummary.parent = parent }

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetParent() types.Entity { return ifrsInterfaceSummary.parent }

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable
// IGMP Global Interface 
type Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface.
    Interface []Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetFilter() yfilter.YFilter { return globalInterfaceTable.YFilter }

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) SetFilter(yf yfilter.YFilter) { globalInterfaceTable.YFilter = yf }

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetSegmentPath() string {
    return "global-interface-table"
}

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range globalInterfaceTable.Interface {
            if globalInterfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface{}
        globalInterfaceTable.Interface = append(globalInterfaceTable.Interface, child)
        return &globalInterfaceTable.Interface[len(globalInterfaceTable.Interface)-1]
    }
    return nil
}

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalInterfaceTable.Interface {
        children[globalInterfaceTable.Interface[i].GetSegmentPath()] = &globalInterfaceTable.Interface[i]
    }
    return children
}

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetYangName() string { return "global-interface-table" }

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) SetParent(parent types.Entity) { globalInterfaceTable.parent = parent }

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetParent() types.Entity { return globalInterfaceTable.parent }

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface
// IGMP Interface
type Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetParentYangName() string { return "global-interface-table" }

// Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address
// IP address
type Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Igmp_Standby_Vrfs_Vrf_SsmMapDetails
// SSM Map Detail
type Igmp_Standby_Vrfs_Vrf_SsmMapDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetFilter() yfilter.YFilter { return ssmMapDetails.YFilter }

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) SetFilter(yf yfilter.YFilter) { ssmMapDetails.YFilter = yf }

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetGoName(yname string) string {
    if yname == "ssm-map-detail" { return "SsmMapDetail" }
    return ""
}

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetSegmentPath() string {
    return "ssm-map-details"
}

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map-detail" {
        for _, c := range ssmMapDetails.SsmMapDetail {
            if ssmMapDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail{}
        ssmMapDetails.SsmMapDetail = append(ssmMapDetails.SsmMapDetail, child)
        return &ssmMapDetails.SsmMapDetail[len(ssmMapDetails.SsmMapDetail)-1]
    }
    return nil
}

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMapDetails.SsmMapDetail {
        children[ssmMapDetails.SsmMapDetail[i].GetSegmentPath()] = &ssmMapDetails.SsmMapDetail[i]
    }
    return children
}

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetYangName() string { return "ssm-map-details" }

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) SetParent(parent types.Entity) { ssmMapDetails.parent = parent }

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetParent() types.Entity { return ssmMapDetails.parent }

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources.
    Sources []Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetFilter() yfilter.YFilter { return ssmMapDetail.YFilter }

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) SetFilter(yf yfilter.YFilter) { ssmMapDetail.YFilter = yf }

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "response-pending" { return "ResponsePending" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "map-info" { return "MapInfo" }
    if yname == "sources" { return "Sources" }
    return ""
}

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetSegmentPath() string {
    return "ssm-map-detail"
}

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "map-info" {
        return &ssmMapDetail.MapInfo
    }
    if childYangName == "sources" {
        for _, c := range ssmMapDetail.Sources {
            if ssmMapDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources{}
        ssmMapDetail.Sources = append(ssmMapDetail.Sources, child)
        return &ssmMapDetail.Sources[len(ssmMapDetail.Sources)-1]
    }
    return nil
}

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["map-info"] = &ssmMapDetail.MapInfo
    for i := range ssmMapDetail.Sources {
        children[ssmMapDetail.Sources[i].GetSegmentPath()] = &ssmMapDetail.Sources[i]
    }
    return children
}

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMapDetail.SsmMapType
    leafs["group-address"] = ssmMapDetail.GroupAddress
    leafs["expiration-time"] = ssmMapDetail.ExpirationTime
    leafs["response-pending"] = ssmMapDetail.ResponsePending
    leafs["query-interval"] = ssmMapDetail.QueryInterval
    leafs["elapsed-time"] = ssmMapDetail.ElapsedTime
    return leafs
}

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetYangName() string { return "ssm-map-detail" }

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) SetParent(parent types.Entity) { ssmMapDetail.parent = parent }

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetParent() types.Entity { return ssmMapDetail.parent }

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetParentYangName() string { return "ssm-map-details" }

// Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetFilter() yfilter.YFilter { return mapInfo.YFilter }

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) SetFilter(yf yfilter.YFilter) { mapInfo.YFilter = yf }

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetGoName(yname string) string {
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetSegmentPath() string {
    return "map-info"
}

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &mapInfo.GroupAddressXr
    }
    return nil
}

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &mapInfo.GroupAddressXr
    return children
}

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["map-type"] = mapInfo.MapType
    leafs["source-counts"] = mapInfo.SourceCounts
    return leafs
}

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleName() string { return "cisco_ios_xr" }

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetYangName() string { return "map-info" }

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) SetParent(parent types.Entity) { mapInfo.parent = parent }

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetParent() types.Entity { return mapInfo.parent }

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetParentYangName() string { return "ssm-map-detail" }

// Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParentYangName() string { return "map-info" }

// Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetFilter() yfilter.YFilter { return sources.YFilter }

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) SetFilter(yf yfilter.YFilter) { sources.YFilter = yf }

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetSegmentPath() string {
    return "sources"
}

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sources.AfName
    leafs["ipv4-address"] = sources.Ipv4Address
    leafs["ipv6-address"] = sources.Ipv6Address
    return leafs
}

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetBundleName() string { return "cisco_ios_xr" }

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetYangName() string { return "sources" }

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) SetParent(parent types.Entity) { sources.parent = parent }

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetParent() types.Entity { return sources.parent }

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetParentYangName() string { return "ssm-map-detail" }

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs
// IGMP Interface state off
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetFilter() yfilter.YFilter { return interfaceStateOffs.YFilter }

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) SetFilter(yf yfilter.YFilter) { interfaceStateOffs.YFilter = yf }

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetGoName(yname string) string {
    if yname == "interface-state-off" { return "InterfaceStateOff" }
    return ""
}

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetSegmentPath() string {
    return "interface-state-offs"
}

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-off" {
        for _, c := range interfaceStateOffs.InterfaceStateOff {
            if interfaceStateOffs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff{}
        interfaceStateOffs.InterfaceStateOff = append(interfaceStateOffs.InterfaceStateOff, child)
        return &interfaceStateOffs.InterfaceStateOff[len(interfaceStateOffs.InterfaceStateOff)-1]
    }
    return nil
}

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOffs.InterfaceStateOff {
        children[interfaceStateOffs.InterfaceStateOff[i].GetSegmentPath()] = &interfaceStateOffs.InterfaceStateOff[i]
    }
    return children
}

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetYangName() string { return "interface-state-offs" }

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) SetParent(parent types.Entity) { interfaceStateOffs.parent = parent }

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetParent() types.Entity { return interfaceStateOffs.parent }

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetParentYangName() string { return "vrf" }

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetFilter() yfilter.YFilter { return interfaceStateOff.YFilter }

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) SetFilter(yf yfilter.YFilter) { interfaceStateOff.YFilter = yf }

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetSegmentPath() string {
    return "interface-state-off" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOff.InterfaceName) + "']"
}

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOff.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOff.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOff.SubscriberAddress
    }
    return nil
}

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOff.Address
    children["querier-address"] = &interfaceStateOff.QuerierAddress
    children["subscriber-address"] = &interfaceStateOff.SubscriberAddress
    return children
}

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOff.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOff.InterfaceNameXr
    leafs["state"] = interfaceStateOff.State
    leafs["prefix-length"] = interfaceStateOff.PrefixLength
    leafs["is-interface-up"] = interfaceStateOff.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOff.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOff.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOff.IgmpVersion
    leafs["host-version"] = interfaceStateOff.HostVersion
    leafs["query-interval"] = interfaceStateOff.QueryInterval
    leafs["query-timeout"] = interfaceStateOff.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOff.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOff.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOff.GroupJoins
    leafs["group-leaves"] = interfaceStateOff.GroupLeaves
    leafs["is-querier"] = interfaceStateOff.IsQuerier
    leafs["total-active-groups"] = interfaceStateOff.TotalActiveGroups
    leafs["robustness"] = interfaceStateOff.Robustness
    leafs["proxy-interface"] = interfaceStateOff.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOff.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOff.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOff.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOff.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOff.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOff.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOff.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOff.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOff.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOff.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOff.VrfId
    leafs["mte-vrf-id"] = interfaceStateOff.MteVrfId
    leafs["location"] = interfaceStateOff.Location
    leafs["mtu"] = interfaceStateOff.Mtu
    leafs["vrf-state"] = interfaceStateOff.VrfState
    leafs["is-configurationverify"] = interfaceStateOff.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOff.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOff.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOff.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOff.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOff.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOff.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOff.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOff.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOff.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOff.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOff.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOff.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOff.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOff.MteTupleCount
    return leafs
}

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetYangName() string { return "interface-state-off" }

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) SetParent(parent types.Entity) { interfaceStateOff.parent = parent }

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetParent() types.Entity { return interfaceStateOff.parent }

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetParentYangName() string { return "interface-state-offs" }

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetYangName() string { return "address" }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetParentYangName() string { return "interface-state-off" }

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParentYangName() string { return "interface-state-off" }

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParentYangName() string { return "interface-state-off" }

// Igmp_Standby_Process
// Process
type Igmp_Standby_Process struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MRIB RouteDB Expiry Information.
    AmtSummary Igmp_Standby_Process_AmtSummary

    // NSR Information.
    Nsr Igmp_Standby_Process_Nsr

    // Table containing AMT Gateway DataBase information.
    AmtGatewaies Igmp_Standby_Process_AmtGatewaies

    // IGMP Unicast-Qos-Adjust Statistics.
    UnicastQosAdjustStats Igmp_Standby_Process_UnicastQosAdjustStats

    // IGMP BVI Stats.
    BviStatistics Igmp_Standby_Process_BviStatistics

    // NSF Information.
    Nsf Igmp_Standby_Process_Nsf
}

func (process *Igmp_Standby_Process) GetFilter() yfilter.YFilter { return process.YFilter }

func (process *Igmp_Standby_Process) SetFilter(yf yfilter.YFilter) { process.YFilter = yf }

func (process *Igmp_Standby_Process) GetGoName(yname string) string {
    if yname == "amt-summary" { return "AmtSummary" }
    if yname == "nsr" { return "Nsr" }
    if yname == "amt-gatewaies" { return "AmtGatewaies" }
    if yname == "unicast-qos-adjust-stats" { return "UnicastQosAdjustStats" }
    if yname == "bvi-statistics" { return "BviStatistics" }
    if yname == "nsf" { return "Nsf" }
    return ""
}

func (process *Igmp_Standby_Process) GetSegmentPath() string {
    return "process"
}

func (process *Igmp_Standby_Process) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "amt-summary" {
        return &process.AmtSummary
    }
    if childYangName == "nsr" {
        return &process.Nsr
    }
    if childYangName == "amt-gatewaies" {
        return &process.AmtGatewaies
    }
    if childYangName == "unicast-qos-adjust-stats" {
        return &process.UnicastQosAdjustStats
    }
    if childYangName == "bvi-statistics" {
        return &process.BviStatistics
    }
    if childYangName == "nsf" {
        return &process.Nsf
    }
    return nil
}

func (process *Igmp_Standby_Process) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["amt-summary"] = &process.AmtSummary
    children["nsr"] = &process.Nsr
    children["amt-gatewaies"] = &process.AmtGatewaies
    children["unicast-qos-adjust-stats"] = &process.UnicastQosAdjustStats
    children["bvi-statistics"] = &process.BviStatistics
    children["nsf"] = &process.Nsf
    return children
}

func (process *Igmp_Standby_Process) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (process *Igmp_Standby_Process) GetBundleName() string { return "cisco_ios_xr" }

func (process *Igmp_Standby_Process) GetYangName() string { return "process" }

func (process *Igmp_Standby_Process) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (process *Igmp_Standby_Process) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (process *Igmp_Standby_Process) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (process *Igmp_Standby_Process) SetParent(parent types.Entity) { process.parent = parent }

func (process *Igmp_Standby_Process) GetParent() types.Entity { return process.parent }

func (process *Igmp_Standby_Process) GetParentYangName() string { return "standby" }

// Igmp_Standby_Process_AmtSummary
// MRIB RouteDB Expiry Information
type Igmp_Standby_Process_AmtSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Robustness variable. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AnycastPrefix interface{}

    // Advertize AMT prefix length. The type is interface{} with range:
    // 0..4294967295.
    PrefixLength interface{}

    // Advertaisment for AMT Relay address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RelayAddress interface{}

    // AMT Tunnel MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Type Of Service value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Tos interface{}

    // Time To Live value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Ttl interface{}

    // AMT Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Number of AMT Gateway. The type is interface{} with range: 0..4294967295.
    GatewayCount interface{}

    // Maximum Gateway allowed. The type is interface{} with range: 0..4294967295.
    MaxGateway interface{}

    // AMT Tunnel Count. The type is interface{} with range: 0..4294967295.
    TunnelCount interface{}

    // AMT Tunnel configured Maximum. The type is interface{} with range:
    // 0..4294967295.
    TunnelConfiguredMaximum interface{}

    // ACL configured under AMT. The type is bool.
    IsAclConfigured interface{}

    // AMT Gateway Simulation. The type is bool.
    IsGatewaySimulation interface{}

    // AMT Out Of Resource. The type is bool.
    IsOuOfResource interface{}
}

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetFilter() yfilter.YFilter { return amtSummary.YFilter }

func (amtSummary *Igmp_Standby_Process_AmtSummary) SetFilter(yf yfilter.YFilter) { amtSummary.YFilter = yf }

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetGoName(yname string) string {
    if yname == "anycast-prefix" { return "AnycastPrefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "relay-address" { return "RelayAddress" }
    if yname == "mtu" { return "Mtu" }
    if yname == "tos" { return "Tos" }
    if yname == "ttl" { return "Ttl" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "gateway-count" { return "GatewayCount" }
    if yname == "max-gateway" { return "MaxGateway" }
    if yname == "tunnel-count" { return "TunnelCount" }
    if yname == "tunnel-configured-maximum" { return "TunnelConfiguredMaximum" }
    if yname == "is-acl-configured" { return "IsAclConfigured" }
    if yname == "is-gateway-simulation" { return "IsGatewaySimulation" }
    if yname == "is-ou-of-resource" { return "IsOuOfResource" }
    return ""
}

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetSegmentPath() string {
    return "amt-summary"
}

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["anycast-prefix"] = amtSummary.AnycastPrefix
    leafs["prefix-length"] = amtSummary.PrefixLength
    leafs["relay-address"] = amtSummary.RelayAddress
    leafs["mtu"] = amtSummary.Mtu
    leafs["tos"] = amtSummary.Tos
    leafs["ttl"] = amtSummary.Ttl
    leafs["query-interval"] = amtSummary.QueryInterval
    leafs["gateway-count"] = amtSummary.GatewayCount
    leafs["max-gateway"] = amtSummary.MaxGateway
    leafs["tunnel-count"] = amtSummary.TunnelCount
    leafs["tunnel-configured-maximum"] = amtSummary.TunnelConfiguredMaximum
    leafs["is-acl-configured"] = amtSummary.IsAclConfigured
    leafs["is-gateway-simulation"] = amtSummary.IsGatewaySimulation
    leafs["is-ou-of-resource"] = amtSummary.IsOuOfResource
    return leafs
}

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetBundleName() string { return "cisco_ios_xr" }

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetYangName() string { return "amt-summary" }

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (amtSummary *Igmp_Standby_Process_AmtSummary) SetParent(parent types.Entity) { amtSummary.parent = parent }

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetParent() types.Entity { return amtSummary.parent }

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetParentYangName() string { return "process" }

// Igmp_Standby_Process_Nsr
// NSR Information
type Igmp_Standby_Process_Nsr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NSR state. The type is interface{} with range: 0..255.
    State interface{}

    // Partner process connected. The type is bool.
    PartnerProcConnected interface{}

    // Collaborators convergence done. The type is bool.
    CollabConvDone interface{}

    // RMF Notification done. The type is bool.
    RmfNotificationDone interface{}

    // Time when process came up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProc interface{}

    // Time when process connection went up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionUp interface{}

    // Time when process connection went down. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionDn interface{}

    // Time when RMF Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfReady interface{}

    // Time when RMF Not-Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfNotReady interface{}

    // No. of times process connection went up. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionUp interface{}

    // No. of times process connection went down. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionDn interface{}

    // No. of times RMF Ready notif was sent. The type is interface{} with range:
    // 0..4294967295.
    CountRmfReady interface{}

    // No. of times RMF Not Ready notif was sent. The type is interface{} with
    // range: 0..4294967295.
    CountRmfNotReady interface{}
}

func (nsr *Igmp_Standby_Process_Nsr) GetFilter() yfilter.YFilter { return nsr.YFilter }

func (nsr *Igmp_Standby_Process_Nsr) SetFilter(yf yfilter.YFilter) { nsr.YFilter = yf }

func (nsr *Igmp_Standby_Process_Nsr) GetGoName(yname string) string {
    if yname == "state" { return "State" }
    if yname == "partner-proc-connected" { return "PartnerProcConnected" }
    if yname == "collab-conv-done" { return "CollabConvDone" }
    if yname == "rmf-notification-done" { return "RmfNotificationDone" }
    if yname == "last-proc" { return "LastProc" }
    if yname == "last-proc-connection-up" { return "LastProcConnectionUp" }
    if yname == "last-proc-connection-dn" { return "LastProcConnectionDn" }
    if yname == "last-rmf-ready" { return "LastRmfReady" }
    if yname == "last-rmf-not-ready" { return "LastRmfNotReady" }
    if yname == "count-proc-connection-up" { return "CountProcConnectionUp" }
    if yname == "count-proc-connection-dn" { return "CountProcConnectionDn" }
    if yname == "count-rmf-ready" { return "CountRmfReady" }
    if yname == "count-rmf-not-ready" { return "CountRmfNotReady" }
    return ""
}

func (nsr *Igmp_Standby_Process_Nsr) GetSegmentPath() string {
    return "nsr"
}

func (nsr *Igmp_Standby_Process_Nsr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsr *Igmp_Standby_Process_Nsr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsr *Igmp_Standby_Process_Nsr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state"] = nsr.State
    leafs["partner-proc-connected"] = nsr.PartnerProcConnected
    leafs["collab-conv-done"] = nsr.CollabConvDone
    leafs["rmf-notification-done"] = nsr.RmfNotificationDone
    leafs["last-proc"] = nsr.LastProc
    leafs["last-proc-connection-up"] = nsr.LastProcConnectionUp
    leafs["last-proc-connection-dn"] = nsr.LastProcConnectionDn
    leafs["last-rmf-ready"] = nsr.LastRmfReady
    leafs["last-rmf-not-ready"] = nsr.LastRmfNotReady
    leafs["count-proc-connection-up"] = nsr.CountProcConnectionUp
    leafs["count-proc-connection-dn"] = nsr.CountProcConnectionDn
    leafs["count-rmf-ready"] = nsr.CountRmfReady
    leafs["count-rmf-not-ready"] = nsr.CountRmfNotReady
    return leafs
}

func (nsr *Igmp_Standby_Process_Nsr) GetBundleName() string { return "cisco_ios_xr" }

func (nsr *Igmp_Standby_Process_Nsr) GetYangName() string { return "nsr" }

func (nsr *Igmp_Standby_Process_Nsr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsr *Igmp_Standby_Process_Nsr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsr *Igmp_Standby_Process_Nsr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsr *Igmp_Standby_Process_Nsr) SetParent(parent types.Entity) { nsr.parent = parent }

func (nsr *Igmp_Standby_Process_Nsr) GetParent() types.Entity { return nsr.parent }

func (nsr *Igmp_Standby_Process_Nsr) GetParentYangName() string { return "process" }

// Igmp_Standby_Process_AmtGatewaies
// Table containing AMT Gateway DataBase
// information
type Igmp_Standby_Process_AmtGatewaies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AMT Gateway DataBase information. The type is slice of
    // Igmp_Standby_Process_AmtGatewaies_AmtGateway.
    AmtGateway []Igmp_Standby_Process_AmtGatewaies_AmtGateway
}

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetFilter() yfilter.YFilter { return amtGatewaies.YFilter }

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) SetFilter(yf yfilter.YFilter) { amtGatewaies.YFilter = yf }

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetGoName(yname string) string {
    if yname == "amt-gateway" { return "AmtGateway" }
    return ""
}

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetSegmentPath() string {
    return "amt-gatewaies"
}

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "amt-gateway" {
        for _, c := range amtGatewaies.AmtGateway {
            if amtGatewaies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_Process_AmtGatewaies_AmtGateway{}
        amtGatewaies.AmtGateway = append(amtGatewaies.AmtGateway, child)
        return &amtGatewaies.AmtGateway[len(amtGatewaies.AmtGateway)-1]
    }
    return nil
}

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range amtGatewaies.AmtGateway {
        children[amtGatewaies.AmtGateway[i].GetSegmentPath()] = &amtGatewaies.AmtGateway[i]
    }
    return children
}

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetBundleName() string { return "cisco_ios_xr" }

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetYangName() string { return "amt-gatewaies" }

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) SetParent(parent types.Entity) { amtGatewaies.parent = parent }

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetParent() types.Entity { return amtGatewaies.parent }

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetParentYangName() string { return "process" }

// Igmp_Standby_Process_AmtGatewaies_AmtGateway
// AMT Gateway DataBase information
type Igmp_Standby_Process_AmtGatewaies_AmtGateway struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Gateway Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GatewayAddress interface{}

    // Port. The type is interface{} with range: -2147483648..2147483647.
    Port interface{}

    // GW. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Amtgw interface{}

    // Port. The type is interface{} with range: 0..4294967295.
    AmtPort interface{}

    // Len. The type is interface{} with range: 0..4294967295.
    KeyLen interface{}

    // AMT NH. The type is interface{} with range: 0..4294967295.
    Amtnh interface{}

    // Nonce. The type is interface{} with range: 0..4294967295.
    AmtNonce interface{}

    // IDB. The type is interface{} with range: 0..18446744073709551615.
    Idb interface{}

    // UpdIn. The type is interface{} with range: 0..4294967295.
    MemUpdIn interface{}

    // UpdOut. The type is interface{} with range: 0..4294967295.
    MemUpdOut interface{}
}

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetFilter() yfilter.YFilter { return amtGateway.YFilter }

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) SetFilter(yf yfilter.YFilter) { amtGateway.YFilter = yf }

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetGoName(yname string) string {
    if yname == "gateway-address" { return "GatewayAddress" }
    if yname == "port" { return "Port" }
    if yname == "amtgw" { return "Amtgw" }
    if yname == "amt-port" { return "AmtPort" }
    if yname == "key-len" { return "KeyLen" }
    if yname == "amtnh" { return "Amtnh" }
    if yname == "amt-nonce" { return "AmtNonce" }
    if yname == "idb" { return "Idb" }
    if yname == "mem-upd-in" { return "MemUpdIn" }
    if yname == "mem-upd-out" { return "MemUpdOut" }
    return ""
}

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetSegmentPath() string {
    return "amt-gateway"
}

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gateway-address"] = amtGateway.GatewayAddress
    leafs["port"] = amtGateway.Port
    leafs["amtgw"] = amtGateway.Amtgw
    leafs["amt-port"] = amtGateway.AmtPort
    leafs["key-len"] = amtGateway.KeyLen
    leafs["amtnh"] = amtGateway.Amtnh
    leafs["amt-nonce"] = amtGateway.AmtNonce
    leafs["idb"] = amtGateway.Idb
    leafs["mem-upd-in"] = amtGateway.MemUpdIn
    leafs["mem-upd-out"] = amtGateway.MemUpdOut
    return leafs
}

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetBundleName() string { return "cisco_ios_xr" }

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetYangName() string { return "amt-gateway" }

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) SetParent(parent types.Entity) { amtGateway.parent = parent }

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetParent() types.Entity { return amtGateway.parent }

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetParentYangName() string { return "amt-gatewaies" }

// Igmp_Standby_Process_UnicastQosAdjustStats
// IGMP Unicast-Qos-Adjust Statistics
type Igmp_Standby_Process_UnicastQosAdjustStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // I2Q Queue count. The type is interface{} with range: 0..65535.
    Queues interface{}

    // I2Q Rate Batch count. The type is interface{} with range: 0..65535.
    Batches interface{}

    // Add to batch count. The type is interface{} with range: 0..4294967295.
    AddToBatches interface{}

    // Delete to batch count. The type is interface{} with range: 0..4294967295.
    DeleteToBatches interface{}

    // Send Success count. The type is interface{} with range: 0..4294967295.
    SendSuccess interface{}

    // Number of Send errors in batch. The type is interface{} with range:
    // 0..4294967295.
    SendErrors interface{}

    // Send Error due to comms count. The type is interface{} with range:
    // 0..4294967295.
    SendCommErrors interface{}

    // Send Error due to partial issue count. The type is interface{} with range:
    // 0..4294967295.
    SendPartialErrors interface{}

    // Number of Resync request received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedResyncRequests interface{}

    // Number of bulks sent for last resync received. The type is interface{} with
    // range: 0..4294967295.
    SentResyncBulks interface{}

    // Is Resync request received. The type is bool.
    IsResyncReceived interface{}

    // Is Resync required. The type is bool.
    IsResyncRequired interface{}

    // Is Resync Start message sent. The type is bool.
    IsResyncStartSent interface{}

    // Is QOS Sweeped once . The type is bool.
    IsQosSSweeped interface{}

    // Time elapsed since Last mark and sweep in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastSweepTime interface{}

    // Time elapsed since Last download to QOS in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastDownloadTime interface{}
}

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetFilter() yfilter.YFilter { return unicastQosAdjustStats.YFilter }

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) SetFilter(yf yfilter.YFilter) { unicastQosAdjustStats.YFilter = yf }

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetGoName(yname string) string {
    if yname == "queues" { return "Queues" }
    if yname == "batches" { return "Batches" }
    if yname == "add-to-batches" { return "AddToBatches" }
    if yname == "delete-to-batches" { return "DeleteToBatches" }
    if yname == "send-success" { return "SendSuccess" }
    if yname == "send-errors" { return "SendErrors" }
    if yname == "send-comm-errors" { return "SendCommErrors" }
    if yname == "send-partial-errors" { return "SendPartialErrors" }
    if yname == "received-resync-requests" { return "ReceivedResyncRequests" }
    if yname == "sent-resync-bulks" { return "SentResyncBulks" }
    if yname == "is-resync-received" { return "IsResyncReceived" }
    if yname == "is-resync-required" { return "IsResyncRequired" }
    if yname == "is-resync-start-sent" { return "IsResyncStartSent" }
    if yname == "is-qos-s-sweeped" { return "IsQosSSweeped" }
    if yname == "last-sweep-time" { return "LastSweepTime" }
    if yname == "last-download-time" { return "LastDownloadTime" }
    return ""
}

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetSegmentPath() string {
    return "unicast-qos-adjust-stats"
}

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["queues"] = unicastQosAdjustStats.Queues
    leafs["batches"] = unicastQosAdjustStats.Batches
    leafs["add-to-batches"] = unicastQosAdjustStats.AddToBatches
    leafs["delete-to-batches"] = unicastQosAdjustStats.DeleteToBatches
    leafs["send-success"] = unicastQosAdjustStats.SendSuccess
    leafs["send-errors"] = unicastQosAdjustStats.SendErrors
    leafs["send-comm-errors"] = unicastQosAdjustStats.SendCommErrors
    leafs["send-partial-errors"] = unicastQosAdjustStats.SendPartialErrors
    leafs["received-resync-requests"] = unicastQosAdjustStats.ReceivedResyncRequests
    leafs["sent-resync-bulks"] = unicastQosAdjustStats.SentResyncBulks
    leafs["is-resync-received"] = unicastQosAdjustStats.IsResyncReceived
    leafs["is-resync-required"] = unicastQosAdjustStats.IsResyncRequired
    leafs["is-resync-start-sent"] = unicastQosAdjustStats.IsResyncStartSent
    leafs["is-qos-s-sweeped"] = unicastQosAdjustStats.IsQosSSweeped
    leafs["last-sweep-time"] = unicastQosAdjustStats.LastSweepTime
    leafs["last-download-time"] = unicastQosAdjustStats.LastDownloadTime
    return leafs
}

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetBundleName() string { return "cisco_ios_xr" }

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetYangName() string { return "unicast-qos-adjust-stats" }

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) SetParent(parent types.Entity) { unicastQosAdjustStats.parent = parent }

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetParent() types.Entity { return unicastQosAdjustStats.parent }

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetParentYangName() string { return "process" }

// Igmp_Standby_Process_BviStatistics
// IGMP BVI Stats
type Igmp_Standby_Process_BviStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of AIPC buffers received. The type is interface{} with range:
    // 0..4294967295.
    ReceiveBuffers interface{}

    // Number of AIPC buffers released. The type is interface{} with range:
    // 0..4294967295.
    ReleaseBuffers interface{}

    // Number of AIPC buffers send blocked. The type is interface{} with range:
    // 0..4294967295.
    SendBlocks interface{}

    // Number of AIPC buffers release failed. The type is interface{} with range:
    // 0..4294967295.
    ReleaseFailBuffers interface{}

    // Number of AIPC NULL buffer handles. The type is interface{} with range:
    // 0..4294967295.
    NullBufferHandles interface{}

    // Number of AIPC open notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOpenNotif interface{}

    // Number of AIPC close notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcCloseNotif interface{}

    // Number of AIPC error notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcErrorNotif interface{}

    // Number of AIPC LWM notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcLwmNotif interface{}

    // Number of AIPC input waiting notifications received. The type is
    // interface{} with range: 0..4294967295.
    RxIpcInputWaitNotif interface{}

    // Number of AIPC send status notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcSendStatusNotif interface{}

    // Number of AIPC publish notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcPublishNotif interface{}

    // Number of AIPC queue full notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcQFullNotif interface{}

    // Number of AIPC output notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOutputNotif interface{}

    // Number of AIPC connect notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcConnectNotif interface{}

    // Number of IGMP protocol messages received. The type is interface{} with
    // range: 0..4294967295.
    RxIgmpPacketSuccess interface{}

    // Number of IGMP Mrouter Add messages received. The type is interface{} with
    // range: 0..4294967295.
    RxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages received. The type is interface{}
    // with range: 0..4294967295.
    RxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    RxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Add messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    TxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages received. The type is interface{}
    // with range: 0..4294967295.
    RxUnknownMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages transmitted. The type is
    // interface{} with range: 0..4294967295.
    TxUnknownMrouterMsg interface{}

    // Number of AIPC transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TxBufferErrors interface{}

    // Number of AIPC buffers transmited. The type is interface{} with range:
    // 0..4294967295.
    TxBuffers interface{}

    // Number of IGMP protocol buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxProtocolBuffers interface{}

    // Number of IGMP Mrouter buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxMrouterBuffers interface{}

    // Number of IGMP Unknown buffers transmited. The type is interface{} with
    // range: 0..4294967295.
    TxUnknownBuffers interface{}

    // Number of WTX messages received. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgRecvd interface{}

    // Number of WTX messages sent. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgSent interface{}

    // Number of WTX messages sent to Protocol. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgProtoSent interface{}

    // Number of WTX messages dropped due to disconnect. The type is interface{}
    // with range: 0..4294967295.
    WtxMsgDropDc interface{}

    // Number of WTX messages dropped to memory. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgDropNomem interface{}

    // Number of WTX messages freed. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgFreed interface{}
}

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetFilter() yfilter.YFilter { return bviStatistics.YFilter }

func (bviStatistics *Igmp_Standby_Process_BviStatistics) SetFilter(yf yfilter.YFilter) { bviStatistics.YFilter = yf }

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetGoName(yname string) string {
    if yname == "receive-buffers" { return "ReceiveBuffers" }
    if yname == "release-buffers" { return "ReleaseBuffers" }
    if yname == "send-blocks" { return "SendBlocks" }
    if yname == "release-fail-buffers" { return "ReleaseFailBuffers" }
    if yname == "null-buffer-handles" { return "NullBufferHandles" }
    if yname == "rx-ipc-open-notif" { return "RxIpcOpenNotif" }
    if yname == "rx-ipc-close-notif" { return "RxIpcCloseNotif" }
    if yname == "rx-ipc-error-notif" { return "RxIpcErrorNotif" }
    if yname == "rx-ipc-lwm-notif" { return "RxIpcLwmNotif" }
    if yname == "rx-ipc-input-wait-notif" { return "RxIpcInputWaitNotif" }
    if yname == "rx-ipc-send-status-notif" { return "RxIpcSendStatusNotif" }
    if yname == "rx-ipc-publish-notif" { return "RxIpcPublishNotif" }
    if yname == "rx-ipc-q-full-notif" { return "RxIpcQFullNotif" }
    if yname == "rx-ipc-output-notif" { return "RxIpcOutputNotif" }
    if yname == "rx-ipc-connect-notif" { return "RxIpcConnectNotif" }
    if yname == "rx-igmp-packet-success" { return "RxIgmpPacketSuccess" }
    if yname == "rx-add-mrouter-msg" { return "RxAddMrouterMsg" }
    if yname == "rx-delete-mrouter-msg" { return "RxDeleteMrouterMsg" }
    if yname == "rx-sweep-mrouter-msg" { return "RxSweepMrouterMsg" }
    if yname == "tx-add-mrouter-msg" { return "TxAddMrouterMsg" }
    if yname == "tx-delete-mrouter-msg" { return "TxDeleteMrouterMsg" }
    if yname == "tx-sweep-mrouter-msg" { return "TxSweepMrouterMsg" }
    if yname == "rx-unknown-mrouter-msg" { return "RxUnknownMrouterMsg" }
    if yname == "tx-unknown-mrouter-msg" { return "TxUnknownMrouterMsg" }
    if yname == "tx-buffer-errors" { return "TxBufferErrors" }
    if yname == "tx-buffers" { return "TxBuffers" }
    if yname == "tx-protocol-buffers" { return "TxProtocolBuffers" }
    if yname == "tx-mrouter-buffers" { return "TxMrouterBuffers" }
    if yname == "tx-unknown-buffers" { return "TxUnknownBuffers" }
    if yname == "wtx-msg-recvd" { return "WtxMsgRecvd" }
    if yname == "wtx-msg-sent" { return "WtxMsgSent" }
    if yname == "wtx-msg-proto-sent" { return "WtxMsgProtoSent" }
    if yname == "wtx-msg-drop-dc" { return "WtxMsgDropDc" }
    if yname == "wtx-msg-drop-nomem" { return "WtxMsgDropNomem" }
    if yname == "wtx-msg-freed" { return "WtxMsgFreed" }
    return ""
}

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetSegmentPath() string {
    return "bvi-statistics"
}

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["receive-buffers"] = bviStatistics.ReceiveBuffers
    leafs["release-buffers"] = bviStatistics.ReleaseBuffers
    leafs["send-blocks"] = bviStatistics.SendBlocks
    leafs["release-fail-buffers"] = bviStatistics.ReleaseFailBuffers
    leafs["null-buffer-handles"] = bviStatistics.NullBufferHandles
    leafs["rx-ipc-open-notif"] = bviStatistics.RxIpcOpenNotif
    leafs["rx-ipc-close-notif"] = bviStatistics.RxIpcCloseNotif
    leafs["rx-ipc-error-notif"] = bviStatistics.RxIpcErrorNotif
    leafs["rx-ipc-lwm-notif"] = bviStatistics.RxIpcLwmNotif
    leafs["rx-ipc-input-wait-notif"] = bviStatistics.RxIpcInputWaitNotif
    leafs["rx-ipc-send-status-notif"] = bviStatistics.RxIpcSendStatusNotif
    leafs["rx-ipc-publish-notif"] = bviStatistics.RxIpcPublishNotif
    leafs["rx-ipc-q-full-notif"] = bviStatistics.RxIpcQFullNotif
    leafs["rx-ipc-output-notif"] = bviStatistics.RxIpcOutputNotif
    leafs["rx-ipc-connect-notif"] = bviStatistics.RxIpcConnectNotif
    leafs["rx-igmp-packet-success"] = bviStatistics.RxIgmpPacketSuccess
    leafs["rx-add-mrouter-msg"] = bviStatistics.RxAddMrouterMsg
    leafs["rx-delete-mrouter-msg"] = bviStatistics.RxDeleteMrouterMsg
    leafs["rx-sweep-mrouter-msg"] = bviStatistics.RxSweepMrouterMsg
    leafs["tx-add-mrouter-msg"] = bviStatistics.TxAddMrouterMsg
    leafs["tx-delete-mrouter-msg"] = bviStatistics.TxDeleteMrouterMsg
    leafs["tx-sweep-mrouter-msg"] = bviStatistics.TxSweepMrouterMsg
    leafs["rx-unknown-mrouter-msg"] = bviStatistics.RxUnknownMrouterMsg
    leafs["tx-unknown-mrouter-msg"] = bviStatistics.TxUnknownMrouterMsg
    leafs["tx-buffer-errors"] = bviStatistics.TxBufferErrors
    leafs["tx-buffers"] = bviStatistics.TxBuffers
    leafs["tx-protocol-buffers"] = bviStatistics.TxProtocolBuffers
    leafs["tx-mrouter-buffers"] = bviStatistics.TxMrouterBuffers
    leafs["tx-unknown-buffers"] = bviStatistics.TxUnknownBuffers
    leafs["wtx-msg-recvd"] = bviStatistics.WtxMsgRecvd
    leafs["wtx-msg-sent"] = bviStatistics.WtxMsgSent
    leafs["wtx-msg-proto-sent"] = bviStatistics.WtxMsgProtoSent
    leafs["wtx-msg-drop-dc"] = bviStatistics.WtxMsgDropDc
    leafs["wtx-msg-drop-nomem"] = bviStatistics.WtxMsgDropNomem
    leafs["wtx-msg-freed"] = bviStatistics.WtxMsgFreed
    return leafs
}

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetYangName() string { return "bvi-statistics" }

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bviStatistics *Igmp_Standby_Process_BviStatistics) SetParent(parent types.Entity) { bviStatistics.parent = parent }

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetParent() types.Entity { return bviStatistics.parent }

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetParentYangName() string { return "process" }

// Igmp_Standby_Process_Nsf
// NSF Information
type Igmp_Standby_Process_Nsf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is Multicast NSF active. The type is bool.
    IsMulticastNsfActive interface{}

    // Multicast NSF timeout in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeout interface{}

    // Multicast NSF time remaining in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeLeft interface{}

    // Respawn Count. The type is interface{} with range: 0..4294967295.
    RespawnCount interface{}

    // Last NSF time ON. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOn interface{}

    // Last NSF time off. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOff interface{}

    // Last NSF time ON in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOnMin interface{}

    // Last NSF time OFF in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOffMin interface{}

    // Last ICD Notif Recv. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastIcdNotifRecv interface{}

    // Last ICD Notif Recv in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastIcdNotifRecvMin interface{}
}

func (nsf *Igmp_Standby_Process_Nsf) GetFilter() yfilter.YFilter { return nsf.YFilter }

func (nsf *Igmp_Standby_Process_Nsf) SetFilter(yf yfilter.YFilter) { nsf.YFilter = yf }

func (nsf *Igmp_Standby_Process_Nsf) GetGoName(yname string) string {
    if yname == "is-multicast-nsf-active" { return "IsMulticastNsfActive" }
    if yname == "multicast-nsf-timeout" { return "MulticastNsfTimeout" }
    if yname == "multicast-nsf-time-left" { return "MulticastNsfTimeLeft" }
    if yname == "respawn-count" { return "RespawnCount" }
    if yname == "last-nsf-on" { return "LastNsfOn" }
    if yname == "last-nsf-off" { return "LastNsfOff" }
    if yname == "last-nsf-on-min" { return "LastNsfOnMin" }
    if yname == "last-nsf-off-min" { return "LastNsfOffMin" }
    if yname == "last-icd-notif-recv" { return "LastIcdNotifRecv" }
    if yname == "last-icd-notif-recv-min" { return "LastIcdNotifRecvMin" }
    return ""
}

func (nsf *Igmp_Standby_Process_Nsf) GetSegmentPath() string {
    return "nsf"
}

func (nsf *Igmp_Standby_Process_Nsf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsf *Igmp_Standby_Process_Nsf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsf *Igmp_Standby_Process_Nsf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-multicast-nsf-active"] = nsf.IsMulticastNsfActive
    leafs["multicast-nsf-timeout"] = nsf.MulticastNsfTimeout
    leafs["multicast-nsf-time-left"] = nsf.MulticastNsfTimeLeft
    leafs["respawn-count"] = nsf.RespawnCount
    leafs["last-nsf-on"] = nsf.LastNsfOn
    leafs["last-nsf-off"] = nsf.LastNsfOff
    leafs["last-nsf-on-min"] = nsf.LastNsfOnMin
    leafs["last-nsf-off-min"] = nsf.LastNsfOffMin
    leafs["last-icd-notif-recv"] = nsf.LastIcdNotifRecv
    leafs["last-icd-notif-recv-min"] = nsf.LastIcdNotifRecvMin
    return leafs
}

func (nsf *Igmp_Standby_Process_Nsf) GetBundleName() string { return "cisco_ios_xr" }

func (nsf *Igmp_Standby_Process_Nsf) GetYangName() string { return "nsf" }

func (nsf *Igmp_Standby_Process_Nsf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsf *Igmp_Standby_Process_Nsf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsf *Igmp_Standby_Process_Nsf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsf *Igmp_Standby_Process_Nsf) SetParent(parent types.Entity) { nsf.parent = parent }

func (nsf *Igmp_Standby_Process_Nsf) GetParent() types.Entity { return nsf.parent }

func (nsf *Igmp_Standby_Process_Nsf) GetParentYangName() string { return "process" }

// Igmp_Standby_DefaultContext
// Default Context
type Igmp_Standby_DefaultContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Summary Information.
    Summary Igmp_Standby_DefaultContext_Summary

    // IGMP Interface state on.
    InterfaceStateOns Igmp_Standby_DefaultContext_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Igmp_Standby_DefaultContext_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Igmp_Standby_DefaultContext_NonActiveGroups

    // SSM Map Table.
    SsmMaps Igmp_Standby_DefaultContext_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Igmp_Standby_DefaultContext_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Igmp_Standby_DefaultContext_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Igmp_Standby_DefaultContext_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Igmp_Standby_DefaultContext_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Igmp_Standby_DefaultContext_TrafficCounters

    // IGMP Group Database Table.
    Groups Igmp_Standby_DefaultContext_Groups

    // IGMP Groups Summary.
    GroupSummary Igmp_Standby_DefaultContext_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Igmp_Standby_DefaultContext_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Igmp_Standby_DefaultContext_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Igmp_Standby_DefaultContext_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Igmp_Standby_DefaultContext_InterfaceStateOffs
}

func (defaultContext *Igmp_Standby_DefaultContext) GetFilter() yfilter.YFilter { return defaultContext.YFilter }

func (defaultContext *Igmp_Standby_DefaultContext) SetFilter(yf yfilter.YFilter) { defaultContext.YFilter = yf }

func (defaultContext *Igmp_Standby_DefaultContext) GetGoName(yname string) string {
    if yname == "summary" { return "Summary" }
    if yname == "interface-state-ons" { return "InterfaceStateOns" }
    if yname == "detail-groups" { return "DetailGroups" }
    if yname == "non-active-groups" { return "NonActiveGroups" }
    if yname == "ssm-maps" { return "SsmMaps" }
    if yname == "explicit-groups" { return "ExplicitGroups" }
    if yname == "interface-table" { return "InterfaceTable" }
    if yname == "interface-unicast-qos-adjusts" { return "InterfaceUnicastQosAdjusts" }
    if yname == "ranges" { return "Ranges" }
    if yname == "ifrs-interfaces" { return "IfrsInterfaces" }
    if yname == "traffic-counters" { return "TrafficCounters" }
    if yname == "groups" { return "Groups" }
    if yname == "group-summary" { return "GroupSummary" }
    if yname == "ifrs-interface-summary" { return "IfrsInterfaceSummary" }
    if yname == "global-interface-table" { return "GlobalInterfaceTable" }
    if yname == "ssm-map-details" { return "SsmMapDetails" }
    if yname == "interface-state-offs" { return "InterfaceStateOffs" }
    return ""
}

func (defaultContext *Igmp_Standby_DefaultContext) GetSegmentPath() string {
    return "default-context"
}

func (defaultContext *Igmp_Standby_DefaultContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &defaultContext.Summary
    }
    if childYangName == "interface-state-ons" {
        return &defaultContext.InterfaceStateOns
    }
    if childYangName == "detail-groups" {
        return &defaultContext.DetailGroups
    }
    if childYangName == "non-active-groups" {
        return &defaultContext.NonActiveGroups
    }
    if childYangName == "ssm-maps" {
        return &defaultContext.SsmMaps
    }
    if childYangName == "explicit-groups" {
        return &defaultContext.ExplicitGroups
    }
    if childYangName == "interface-table" {
        return &defaultContext.InterfaceTable
    }
    if childYangName == "interface-unicast-qos-adjusts" {
        return &defaultContext.InterfaceUnicastQosAdjusts
    }
    if childYangName == "ranges" {
        return &defaultContext.Ranges
    }
    if childYangName == "ifrs-interfaces" {
        return &defaultContext.IfrsInterfaces
    }
    if childYangName == "traffic-counters" {
        return &defaultContext.TrafficCounters
    }
    if childYangName == "groups" {
        return &defaultContext.Groups
    }
    if childYangName == "group-summary" {
        return &defaultContext.GroupSummary
    }
    if childYangName == "ifrs-interface-summary" {
        return &defaultContext.IfrsInterfaceSummary
    }
    if childYangName == "global-interface-table" {
        return &defaultContext.GlobalInterfaceTable
    }
    if childYangName == "ssm-map-details" {
        return &defaultContext.SsmMapDetails
    }
    if childYangName == "interface-state-offs" {
        return &defaultContext.InterfaceStateOffs
    }
    return nil
}

func (defaultContext *Igmp_Standby_DefaultContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &defaultContext.Summary
    children["interface-state-ons"] = &defaultContext.InterfaceStateOns
    children["detail-groups"] = &defaultContext.DetailGroups
    children["non-active-groups"] = &defaultContext.NonActiveGroups
    children["ssm-maps"] = &defaultContext.SsmMaps
    children["explicit-groups"] = &defaultContext.ExplicitGroups
    children["interface-table"] = &defaultContext.InterfaceTable
    children["interface-unicast-qos-adjusts"] = &defaultContext.InterfaceUnicastQosAdjusts
    children["ranges"] = &defaultContext.Ranges
    children["ifrs-interfaces"] = &defaultContext.IfrsInterfaces
    children["traffic-counters"] = &defaultContext.TrafficCounters
    children["groups"] = &defaultContext.Groups
    children["group-summary"] = &defaultContext.GroupSummary
    children["ifrs-interface-summary"] = &defaultContext.IfrsInterfaceSummary
    children["global-interface-table"] = &defaultContext.GlobalInterfaceTable
    children["ssm-map-details"] = &defaultContext.SsmMapDetails
    children["interface-state-offs"] = &defaultContext.InterfaceStateOffs
    return children
}

func (defaultContext *Igmp_Standby_DefaultContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (defaultContext *Igmp_Standby_DefaultContext) GetBundleName() string { return "cisco_ios_xr" }

func (defaultContext *Igmp_Standby_DefaultContext) GetYangName() string { return "default-context" }

func (defaultContext *Igmp_Standby_DefaultContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultContext *Igmp_Standby_DefaultContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultContext *Igmp_Standby_DefaultContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultContext *Igmp_Standby_DefaultContext) SetParent(parent types.Entity) { defaultContext.parent = parent }

func (defaultContext *Igmp_Standby_DefaultContext) GetParent() types.Entity { return defaultContext.parent }

func (defaultContext *Igmp_Standby_DefaultContext) GetParentYangName() string { return "standby" }

// Igmp_Standby_DefaultContext_Summary
// IGMP Summary Information
type Igmp_Standby_DefaultContext_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Igmp_Standby_DefaultContext_Summary_Interface.
    Interface []Igmp_Standby_DefaultContext_Summary_Interface
}

func (summary *Igmp_Standby_DefaultContext_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Igmp_Standby_DefaultContext_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Igmp_Standby_DefaultContext_Summary) GetGoName(yname string) string {
    if yname == "robustness" { return "Robustness" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-disabled" { return "IsDisabled" }
    if yname == "supported-interfaces" { return "SupportedInterfaces" }
    if yname == "unsupported-interfaces" { return "UnsupportedInterfaces" }
    if yname == "enabled-interface-count" { return "EnabledInterfaceCount" }
    if yname == "disabled-interface-count" { return "DisabledInterfaceCount" }
    if yname == "tunnel-mte-config-count" { return "TunnelMteConfigCount" }
    if yname == "node-low-memory" { return "NodeLowMemory" }
    if yname == "interface" { return "Interface" }
    return ""
}

func (summary *Igmp_Standby_DefaultContext_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Igmp_Standby_DefaultContext_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range summary.Interface {
            if summary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_Summary_Interface{}
        summary.Interface = append(summary.Interface, child)
        return &summary.Interface[len(summary.Interface)-1]
    }
    return nil
}

func (summary *Igmp_Standby_DefaultContext_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summary.Interface {
        children[summary.Interface[i].GetSegmentPath()] = &summary.Interface[i]
    }
    return children
}

func (summary *Igmp_Standby_DefaultContext_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["robustness"] = summary.Robustness
    leafs["group-limit"] = summary.GroupLimit
    leafs["group-count"] = summary.GroupCount
    leafs["is-disabled"] = summary.IsDisabled
    leafs["supported-interfaces"] = summary.SupportedInterfaces
    leafs["unsupported-interfaces"] = summary.UnsupportedInterfaces
    leafs["enabled-interface-count"] = summary.EnabledInterfaceCount
    leafs["disabled-interface-count"] = summary.DisabledInterfaceCount
    leafs["tunnel-mte-config-count"] = summary.TunnelMteConfigCount
    leafs["node-low-memory"] = summary.NodeLowMemory
    return leafs
}

func (summary *Igmp_Standby_DefaultContext_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Igmp_Standby_DefaultContext_Summary) GetYangName() string { return "summary" }

func (summary *Igmp_Standby_DefaultContext_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Igmp_Standby_DefaultContext_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Igmp_Standby_DefaultContext_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Igmp_Standby_DefaultContext_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Igmp_Standby_DefaultContext_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Igmp_Standby_DefaultContext_Summary) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Igmp_Standby_DefaultContext_Summary_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Standby_DefaultContext_Summary_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "on-off" { return "OnOff" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    return ""
}

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetSegmentPath() string {
    return "interface"
}

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["group-limit"] = self.GroupLimit
    leafs["group-count"] = self.GroupCount
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["on-off"] = self.OnOff
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    return leafs
}

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetYangName() string { return "interface" }

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Standby_DefaultContext_Summary_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetParent() types.Entity { return self.parent }

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetParentYangName() string { return "summary" }

// Igmp_Standby_DefaultContext_InterfaceStateOns
// IGMP Interface state on
type Igmp_Standby_DefaultContext_InterfaceStateOns struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetFilter() yfilter.YFilter { return interfaceStateOns.YFilter }

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) SetFilter(yf yfilter.YFilter) { interfaceStateOns.YFilter = yf }

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetGoName(yname string) string {
    if yname == "interface-state-on" { return "InterfaceStateOn" }
    return ""
}

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetSegmentPath() string {
    return "interface-state-ons"
}

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-on" {
        for _, c := range interfaceStateOns.InterfaceStateOn {
            if interfaceStateOns.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn{}
        interfaceStateOns.InterfaceStateOn = append(interfaceStateOns.InterfaceStateOn, child)
        return &interfaceStateOns.InterfaceStateOn[len(interfaceStateOns.InterfaceStateOn)-1]
    }
    return nil
}

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOns.InterfaceStateOn {
        children[interfaceStateOns.InterfaceStateOn[i].GetSegmentPath()] = &interfaceStateOns.InterfaceStateOn[i]
    }
    return children
}

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetYangName() string { return "interface-state-ons" }

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) SetParent(parent types.Entity) { interfaceStateOns.parent = parent }

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetParent() types.Entity { return interfaceStateOns.parent }

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetFilter() yfilter.YFilter { return interfaceStateOn.YFilter }

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) SetFilter(yf yfilter.YFilter) { interfaceStateOn.YFilter = yf }

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetSegmentPath() string {
    return "interface-state-on" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOn.InterfaceName) + "']"
}

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOn.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOn.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOn.SubscriberAddress
    }
    return nil
}

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOn.Address
    children["querier-address"] = &interfaceStateOn.QuerierAddress
    children["subscriber-address"] = &interfaceStateOn.SubscriberAddress
    return children
}

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOn.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOn.InterfaceNameXr
    leafs["state"] = interfaceStateOn.State
    leafs["prefix-length"] = interfaceStateOn.PrefixLength
    leafs["is-interface-up"] = interfaceStateOn.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOn.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOn.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOn.IgmpVersion
    leafs["host-version"] = interfaceStateOn.HostVersion
    leafs["query-interval"] = interfaceStateOn.QueryInterval
    leafs["query-timeout"] = interfaceStateOn.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOn.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOn.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOn.GroupJoins
    leafs["group-leaves"] = interfaceStateOn.GroupLeaves
    leafs["is-querier"] = interfaceStateOn.IsQuerier
    leafs["total-active-groups"] = interfaceStateOn.TotalActiveGroups
    leafs["robustness"] = interfaceStateOn.Robustness
    leafs["proxy-interface"] = interfaceStateOn.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOn.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOn.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOn.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOn.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOn.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOn.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOn.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOn.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOn.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOn.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOn.VrfId
    leafs["mte-vrf-id"] = interfaceStateOn.MteVrfId
    leafs["location"] = interfaceStateOn.Location
    leafs["mtu"] = interfaceStateOn.Mtu
    leafs["vrf-state"] = interfaceStateOn.VrfState
    leafs["is-configurationverify"] = interfaceStateOn.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOn.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOn.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOn.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOn.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOn.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOn.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOn.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOn.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOn.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOn.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOn.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOn.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOn.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOn.MteTupleCount
    return leafs
}

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetYangName() string { return "interface-state-on" }

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) SetParent(parent types.Entity) { interfaceStateOn.parent = parent }

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetParent() types.Entity { return interfaceStateOn.parent }

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetParentYangName() string { return "interface-state-ons" }

// Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetYangName() string { return "address" }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetParentYangName() string { return "interface-state-on" }

// Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParentYangName() string { return "interface-state-on" }

// Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParentYangName() string { return "interface-state-on" }

// Igmp_Standby_DefaultContext_DetailGroups
// IGMP Detail Group Database
type Igmp_Standby_DefaultContext_DetailGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Igmp_Standby_DefaultContext_DetailGroups_DetailGroup.
    DetailGroup []Igmp_Standby_DefaultContext_DetailGroups_DetailGroup
}

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetFilter() yfilter.YFilter { return detailGroups.YFilter }

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) SetFilter(yf yfilter.YFilter) { detailGroups.YFilter = yf }

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetGoName(yname string) string {
    if yname == "detail-group" { return "DetailGroup" }
    return ""
}

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetSegmentPath() string {
    return "detail-groups"
}

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detail-group" {
        for _, c := range detailGroups.DetailGroup {
            if detailGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_DetailGroups_DetailGroup{}
        detailGroups.DetailGroup = append(detailGroups.DetailGroup, child)
        return &detailGroups.DetailGroup[len(detailGroups.DetailGroup)-1]
    }
    return nil
}

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range detailGroups.DetailGroup {
        children[detailGroups.DetailGroup[i].GetSegmentPath()] = &detailGroups.DetailGroup[i]
    }
    return children
}

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetYangName() string { return "detail-groups" }

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) SetParent(parent types.Entity) { detailGroups.parent = parent }

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetParent() types.Entity { return detailGroups.parent }

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source.
    Source []Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source
}

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetFilter() yfilter.YFilter { return detailGroup.YFilter }

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) SetFilter(yf yfilter.YFilter) { detailGroup.YFilter = yf }

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "is-router-exclude-mode" { return "IsRouterExcludeMode" }
    if yname == "is-host-exclude-mode" { return "IsHostExcludeMode" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "source" { return "Source" }
    return ""
}

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetSegmentPath() string {
    return "detail-group"
}

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &detailGroup.GroupInfo
    }
    if childYangName == "source" {
        for _, c := range detailGroup.Source {
            if detailGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source{}
        detailGroup.Source = append(detailGroup.Source, child)
        return &detailGroup.Source[len(detailGroup.Source)-1]
    }
    return nil
}

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &detailGroup.GroupInfo
    for i := range detailGroup.Source {
        children[detailGroup.Source[i].GetSegmentPath()] = &detailGroup.Source[i]
    }
    return children
}

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = detailGroup.GroupAddress
    leafs["interface-name"] = detailGroup.InterfaceName
    leafs["source-address"] = detailGroup.SourceAddress
    leafs["is-router-exclude-mode"] = detailGroup.IsRouterExcludeMode
    leafs["is-host-exclude-mode"] = detailGroup.IsHostExcludeMode
    return leafs
}

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetYangName() string { return "detail-group" }

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) SetParent(parent types.Entity) { detailGroup.parent = parent }

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetParent() types.Entity { return detailGroup.parent }

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetParentYangName() string { return "detail-groups" }

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetParentYangName() string { return "detail-group" }

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source
// List of sources
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-remote" { return "IsRemote" }
    if yname == "is-forward" { return "IsForward" }
    if yname == "is-we-report" { return "IsWeReport" }
    if yname == "flags" { return "Flags" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetSegmentPath() string {
    return "source"
}

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &source.SourceAddress
    }
    return nil
}

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &source.SourceAddress
    return children
}

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = source.Uptime
    leafs["expiration-time"] = source.ExpirationTime
    leafs["is-local"] = source.IsLocal
    leafs["is-remote"] = source.IsRemote
    leafs["is-forward"] = source.IsForward
    leafs["is-we-report"] = source.IsWeReport
    leafs["flags"] = source.Flags
    leafs["is-added"] = source.IsAdded
    return leafs
}

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetYangName() string { return "source" }

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetParent() types.Entity { return source.parent }

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetParentYangName() string { return "detail-group" }

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetParentYangName() string { return "source" }

// Igmp_Standby_DefaultContext_NonActiveGroups
// IGMP Non-Active Groups Information
type Igmp_Standby_DefaultContext_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetGoName(yname string) string {
    if yname == "non-active-groups" { return "NonActiveGroups" }
    return ""
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-active-groups" {
        for _, c := range nonActiveGroups.NonActiveGroups {
            if nonActiveGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups{}
        nonActiveGroups.NonActiveGroups = append(nonActiveGroups.NonActiveGroups, child)
        return &nonActiveGroups.NonActiveGroups[len(nonActiveGroups.NonActiveGroups)-1]
    }
    return nil
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nonActiveGroups.NonActiveGroups {
        children[nonActiveGroups.NonActiveGroups[i].GetSegmentPath()] = &nonActiveGroups.NonActiveGroups[i]
    }
    return children
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    if yname == "reason-for-non-activity" { return "ReasonForNonActivity" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address" {
        return &nonActiveGroups.GroupAddress
    }
    if childYangName == "source-address" {
        return &nonActiveGroups.SourceAddress
    }
    return nil
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address"] = &nonActiveGroups.GroupAddress
    children["source-address"] = &nonActiveGroups.SourceAddress
    return children
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface"] = nonActiveGroups.Interface
    leafs["reason-for-non-activity"] = nonActiveGroups.ReasonForNonActivity
    return leafs
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetParentYangName() string { return "non-active-groups" }

// Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetParentYangName() string { return "non-active-groups" }

// Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetParentYangName() string { return "non-active-groups" }

// Igmp_Standby_DefaultContext_SsmMaps
// SSM Map Table
type Igmp_Standby_DefaultContext_SsmMaps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Igmp_Standby_DefaultContext_SsmMaps_SsmMap.
    SsmMap []Igmp_Standby_DefaultContext_SsmMaps_SsmMap
}

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetFilter() yfilter.YFilter { return ssmMaps.YFilter }

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) SetFilter(yf yfilter.YFilter) { ssmMaps.YFilter = yf }

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetGoName(yname string) string {
    if yname == "ssm-map" { return "SsmMap" }
    return ""
}

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetSegmentPath() string {
    return "ssm-maps"
}

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map" {
        for _, c := range ssmMaps.SsmMap {
            if ssmMaps.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_SsmMaps_SsmMap{}
        ssmMaps.SsmMap = append(ssmMaps.SsmMap, child)
        return &ssmMaps.SsmMap[len(ssmMaps.SsmMap)-1]
    }
    return nil
}

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMaps.SsmMap {
        children[ssmMaps.SsmMap[i].GetSegmentPath()] = &ssmMaps.SsmMap[i]
    }
    return children
}

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetYangName() string { return "ssm-maps" }

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) SetParent(parent types.Entity) { ssmMaps.parent = parent }

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetParent() types.Entity { return ssmMaps.parent }

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_SsmMaps_SsmMap
// SSM Map information
type Igmp_Standby_DefaultContext_SsmMaps_SsmMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetFilter() yfilter.YFilter { return ssmMap.YFilter }

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) SetFilter(yf yfilter.YFilter) { ssmMap.YFilter = yf }

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetSegmentPath() string {
    return "ssm-map"
}

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &ssmMap.GroupAddressXr
    }
    return nil
}

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &ssmMap.GroupAddressXr
    return children
}

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMap.SsmMapType
    leafs["group-address"] = ssmMap.GroupAddress
    leafs["map-type"] = ssmMap.MapType
    leafs["source-counts"] = ssmMap.SourceCounts
    return leafs
}

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetYangName() string { return "ssm-map" }

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) SetParent(parent types.Entity) { ssmMap.parent = parent }

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetParent() types.Entity { return ssmMap.parent }

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetParentYangName() string { return "ssm-maps" }

// Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetParentYangName() string { return "ssm-map" }

// Igmp_Standby_DefaultContext_ExplicitGroups
// IGMP Explicit Group Database
type Igmp_Standby_DefaultContext_ExplicitGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetFilter() yfilter.YFilter { return explicitGroups.YFilter }

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) SetFilter(yf yfilter.YFilter) { explicitGroups.YFilter = yf }

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetGoName(yname string) string {
    if yname == "explicit-group" { return "ExplicitGroup" }
    return ""
}

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetSegmentPath() string {
    return "explicit-groups"
}

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "explicit-group" {
        for _, c := range explicitGroups.ExplicitGroup {
            if explicitGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup{}
        explicitGroups.ExplicitGroup = append(explicitGroups.ExplicitGroup, child)
        return &explicitGroups.ExplicitGroup[len(explicitGroups.ExplicitGroup)-1]
    }
    return nil
}

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range explicitGroups.ExplicitGroup {
        children[explicitGroups.ExplicitGroup[i].GetSegmentPath()] = &explicitGroups.ExplicitGroup[i]
    }
    return children
}

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetYangName() string { return "explicit-groups" }

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) SetParent(parent types.Entity) { explicitGroups.parent = parent }

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetParent() types.Entity { return explicitGroups.parent }

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host.
    Host []Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetFilter() yfilter.YFilter { return explicitGroup.YFilter }

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) SetFilter(yf yfilter.YFilter) { explicitGroup.YFilter = yf }

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "include-hosts" { return "IncludeHosts" }
    if yname == "exclude-hosts" { return "ExcludeHosts" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "host" { return "Host" }
    return ""
}

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetSegmentPath() string {
    return "explicit-group"
}

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &explicitGroup.GroupInfo
    }
    if childYangName == "host" {
        for _, c := range explicitGroup.Host {
            if explicitGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host{}
        explicitGroup.Host = append(explicitGroup.Host, child)
        return &explicitGroup.Host[len(explicitGroup.Host)-1]
    }
    return nil
}

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &explicitGroup.GroupInfo
    for i := range explicitGroup.Host {
        children[explicitGroup.Host[i].GetSegmentPath()] = &explicitGroup.Host[i]
    }
    return children
}

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = explicitGroup.GroupAddress
    leafs["interface-name"] = explicitGroup.InterfaceName
    leafs["source-address"] = explicitGroup.SourceAddress
    leafs["include-hosts"] = explicitGroup.IncludeHosts
    leafs["exclude-hosts"] = explicitGroup.ExcludeHosts
    return leafs
}

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetYangName() string { return "explicit-group" }

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) SetParent(parent types.Entity) { explicitGroup.parent = parent }

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetParent() types.Entity { return explicitGroup.parent }

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetParentYangName() string { return "explicit-groups" }

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetParentYangName() string { return "explicit-group" }

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetFilter() yfilter.YFilter { return host.YFilter }

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) SetFilter(yf yfilter.YFilter) { host.YFilter = yf }

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "is-exclude" { return "IsExclude" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "source-count" { return "SourceCount" }
    if yname == "address" { return "Address" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetSegmentPath() string {
    return "host"
}

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &host.Address
    }
    if childYangName == "source-address" {
        for _, c := range host.SourceAddress {
            if host.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress{}
        host.SourceAddress = append(host.SourceAddress, child)
        return &host.SourceAddress[len(host.SourceAddress)-1]
    }
    return nil
}

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &host.Address
    for i := range host.SourceAddress {
        children[host.SourceAddress[i].GetSegmentPath()] = &host.SourceAddress[i]
    }
    return children
}

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = host.Uptime
    leafs["is-exclude"] = host.IsExclude
    leafs["expiration-time"] = host.ExpirationTime
    leafs["source-count"] = host.SourceCount
    return leafs
}

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetBundleName() string { return "cisco_ios_xr" }

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetYangName() string { return "host" }

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) SetParent(parent types.Entity) { host.parent = parent }

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetParent() types.Entity { return host.parent }

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetParentYangName() string { return "explicit-group" }

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetYangName() string { return "address" }

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetParentYangName() string { return "host" }

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParentYangName() string { return "host" }

// Igmp_Standby_DefaultContext_InterfaceTable
// IGMP Interface specific Table
type Igmp_Standby_DefaultContext_InterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_DefaultContext_InterfaceTable_Interface.
    Interface []Igmp_Standby_DefaultContext_InterfaceTable_Interface
}

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetFilter() yfilter.YFilter { return interfaceTable.YFilter }

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) SetFilter(yf yfilter.YFilter) { interfaceTable.YFilter = yf }

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetSegmentPath() string {
    return "interface-table"
}

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaceTable.Interface {
            if interfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_InterfaceTable_Interface{}
        interfaceTable.Interface = append(interfaceTable.Interface, child)
        return &interfaceTable.Interface[len(interfaceTable.Interface)-1]
    }
    return nil
}

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceTable.Interface {
        children[interfaceTable.Interface[i].GetSegmentPath()] = &interfaceTable.Interface[i]
    }
    return children
}

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetYangName() string { return "interface-table" }

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) SetParent(parent types.Entity) { interfaceTable.parent = parent }

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetParent() types.Entity { return interfaceTable.parent }

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_InterfaceTable_Interface
// IGMP Interface
type Igmp_Standby_DefaultContext_InterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetParentYangName() string { return "interface-table" }

// Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address
// IP address
type Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjusts.YFilter }

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjusts.YFilter = yf }

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetGoName(yname string) string {
    if yname == "interface-unicast-qos-adjust" { return "InterfaceUnicastQosAdjust" }
    return ""
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetSegmentPath() string {
    return "interface-unicast-qos-adjusts"
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-unicast-qos-adjust" {
        for _, c := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
            if interfaceUnicastQosAdjusts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust{}
        interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust = append(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, child)
        return &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[len(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        children[interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i].GetSegmentPath()] = &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]
    }
    return children
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetYangName() string { return "interface-unicast-qos-adjusts" }

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) SetParent(parent types.Entity) { interfaceUnicastQosAdjusts.parent = parent }

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetParent() types.Entity { return interfaceUnicastQosAdjusts.parent }

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjust.YFilter }

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjust.YFilter = yf }

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-access" { return "IsVirtualAccess" }
    if yname == "rate" { return "Rate" }
    if yname == "rate-increments" { return "RateIncrements" }
    if yname == "rate-decrements" { return "RateDecrements" }
    if yname == "update" { return "Update" }
    return ""
}

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetSegmentPath() string {
    return "interface-unicast-qos-adjust" + "[interface-name='" + fmt.Sprintf("%v", interfaceUnicastQosAdjust.InterfaceName) + "']"
}

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update" {
        for _, c := range interfaceUnicastQosAdjust.Update {
            if interfaceUnicastQosAdjust.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update{}
        interfaceUnicastQosAdjust.Update = append(interfaceUnicastQosAdjust.Update, child)
        return &interfaceUnicastQosAdjust.Update[len(interfaceUnicastQosAdjust.Update)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjust.Update {
        children[interfaceUnicastQosAdjust.Update[i].GetSegmentPath()] = &interfaceUnicastQosAdjust.Update[i]
    }
    return children
}

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceUnicastQosAdjust.InterfaceName
    leafs["is-virtual-access"] = interfaceUnicastQosAdjust.IsVirtualAccess
    leafs["rate"] = interfaceUnicastQosAdjust.Rate
    leafs["rate-increments"] = interfaceUnicastQosAdjust.RateIncrements
    leafs["rate-decrements"] = interfaceUnicastQosAdjust.RateDecrements
    return leafs
}

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetYangName() string { return "interface-unicast-qos-adjust" }

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetParent(parent types.Entity) { interfaceUnicastQosAdjust.parent = parent }

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParent() types.Entity { return interfaceUnicastQosAdjust.parent }

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParentYangName() string { return "interface-unicast-qos-adjusts" }

// Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetFilter() yfilter.YFilter { return update.YFilter }

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetFilter(yf yfilter.YFilter) { update.YFilter = yf }

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetGoName(yname string) string {
    if yname == "is-add" { return "IsAdd" }
    if yname == "weight" { return "Weight" }
    if yname == "received-time" { return "ReceivedTime" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "group-address" { return "GroupAddress" }
    return ""
}

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetSegmentPath() string {
    return "update"
}

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &update.SourceAddress
    }
    if childYangName == "group-address" {
        return &update.GroupAddress
    }
    return nil
}

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &update.SourceAddress
    children["group-address"] = &update.GroupAddress
    return children
}

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-add"] = update.IsAdd
    leafs["weight"] = update.Weight
    leafs["received-time"] = update.ReceivedTime
    return leafs
}

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleName() string { return "cisco_ios_xr" }

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetYangName() string { return "update" }

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetParent(parent types.Entity) { update.parent = parent }

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParent() types.Entity { return update.parent }

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParentYangName() string { return "interface-unicast-qos-adjust" }

// Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParentYangName() string { return "update" }

// Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParentYangName() string { return "update" }

// Igmp_Standby_DefaultContext_Ranges
// Range table
type Igmp_Standby_DefaultContext_Ranges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Range information. The type is slice of
    // Igmp_Standby_DefaultContext_Ranges_Range.
    Range []Igmp_Standby_DefaultContext_Ranges_Range
}

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetFilter() yfilter.YFilter { return ranges.YFilter }

func (ranges *Igmp_Standby_DefaultContext_Ranges) SetFilter(yf yfilter.YFilter) { ranges.YFilter = yf }

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetGoName(yname string) string {
    if yname == "range" { return "Range" }
    return ""
}

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetSegmentPath() string {
    return "ranges"
}

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "range" {
        for _, c := range ranges.Range {
            if ranges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_Ranges_Range{}
        ranges.Range = append(ranges.Range, child)
        return &ranges.Range[len(ranges.Range)-1]
    }
    return nil
}

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ranges.Range {
        children[ranges.Range[i].GetSegmentPath()] = &ranges.Range[i]
    }
    return children
}

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetBundleName() string { return "cisco_ios_xr" }

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetYangName() string { return "ranges" }

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ranges *Igmp_Standby_DefaultContext_Ranges) SetParent(parent types.Entity) { ranges.parent = parent }

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetParent() types.Entity { return ranges.parent }

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_Ranges_Range
// Range information
type Igmp_Standby_DefaultContext_Ranges_Range struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: -2147483648..2147483647.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr
}

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Standby_DefaultContext_Ranges_Range) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "group-mask" { return "GroupMask" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "protocol" { return "Protocol" }
    if yname == "is-stale" { return "IsStale" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetSegmentPath() string {
    return "range"
}

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &self.GroupAddressXr
    }
    return nil
}

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &self.GroupAddressXr
    return children
}

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = self.GroupAddress
    leafs["group-mask"] = self.GroupMask
    leafs["prefix-length"] = self.PrefixLength
    leafs["protocol"] = self.Protocol
    leafs["is-stale"] = self.IsStale
    return leafs
}

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetYangName() string { return "range" }

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Standby_DefaultContext_Ranges_Range) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetParent() types.Entity { return self.parent }

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetParentYangName() string { return "ranges" }

// Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr
// Group address
type Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetParentYangName() string { return "range" }

// Igmp_Standby_DefaultContext_IfrsInterfaces
// IGMP Interface specific
type Igmp_Standby_DefaultContext_IfrsInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface.
    IfrsInterface []Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetFilter() yfilter.YFilter { return ifrsInterfaces.YFilter }

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) SetFilter(yf yfilter.YFilter) { ifrsInterfaces.YFilter = yf }

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetGoName(yname string) string {
    if yname == "ifrs-interface" { return "IfrsInterface" }
    return ""
}

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetSegmentPath() string {
    return "ifrs-interfaces"
}

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ifrs-interface" {
        for _, c := range ifrsInterfaces.IfrsInterface {
            if ifrsInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface{}
        ifrsInterfaces.IfrsInterface = append(ifrsInterfaces.IfrsInterface, child)
        return &ifrsInterfaces.IfrsInterface[len(ifrsInterfaces.IfrsInterface)-1]
    }
    return nil
}

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ifrsInterfaces.IfrsInterface {
        children[ifrsInterfaces.IfrsInterface[i].GetSegmentPath()] = &ifrsInterfaces.IfrsInterface[i]
    }
    return children
}

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetYangName() string { return "ifrs-interfaces" }

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) SetParent(parent types.Entity) { ifrsInterfaces.parent = parent }

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetParent() types.Entity { return ifrsInterfaces.parent }

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetFilter() yfilter.YFilter { return ifrsInterface.YFilter }

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) SetFilter(yf yfilter.YFilter) { ifrsInterface.YFilter = yf }

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "join-group-count" { return "JoinGroupCount" }
    if yname == "igmp-interface-entry" { return "IgmpInterfaceEntry" }
    return ""
}

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetSegmentPath() string {
    return "ifrs-interface" + "[interface-name='" + fmt.Sprintf("%v", ifrsInterface.InterfaceName) + "']"
}

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "igmp-interface-entry" {
        return &ifrsInterface.IgmpInterfaceEntry
    }
    return nil
}

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["igmp-interface-entry"] = &ifrsInterface.IgmpInterfaceEntry
    return children
}

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ifrsInterface.InterfaceName
    leafs["join-group-count"] = ifrsInterface.JoinGroupCount
    return leafs
}

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetYangName() string { return "ifrs-interface" }

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) SetParent(parent types.Entity) { ifrsInterface.parent = parent }

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetParent() types.Entity { return ifrsInterface.parent }

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetParentYangName() string { return "ifrs-interfaces" }

// Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetFilter() yfilter.YFilter { return igmpInterfaceEntry.YFilter }

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetFilter(yf yfilter.YFilter) { igmpInterfaceEntry.YFilter = yf }

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetSegmentPath() string {
    return "igmp-interface-entry"
}

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &igmpInterfaceEntry.Address
    }
    if childYangName == "querier-address" {
        return &igmpInterfaceEntry.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &igmpInterfaceEntry.SubscriberAddress
    }
    return nil
}

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &igmpInterfaceEntry.Address
    children["querier-address"] = &igmpInterfaceEntry.QuerierAddress
    children["subscriber-address"] = &igmpInterfaceEntry.SubscriberAddress
    return children
}

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = igmpInterfaceEntry.InterfaceNameXr
    leafs["state"] = igmpInterfaceEntry.State
    leafs["prefix-length"] = igmpInterfaceEntry.PrefixLength
    leafs["is-interface-up"] = igmpInterfaceEntry.IsInterfaceUp
    leafs["is-ip-enabled"] = igmpInterfaceEntry.IsIpEnabled
    leafs["is-router-enabled"] = igmpInterfaceEntry.IsRouterEnabled
    leafs["igmp-version"] = igmpInterfaceEntry.IgmpVersion
    leafs["host-version"] = igmpInterfaceEntry.HostVersion
    leafs["query-interval"] = igmpInterfaceEntry.QueryInterval
    leafs["query-timeout"] = igmpInterfaceEntry.QueryTimeout
    leafs["query-maximum-response-time"] = igmpInterfaceEntry.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = igmpInterfaceEntry.LastMemberQueryInterval
    leafs["group-joins"] = igmpInterfaceEntry.GroupJoins
    leafs["group-leaves"] = igmpInterfaceEntry.GroupLeaves
    leafs["is-querier"] = igmpInterfaceEntry.IsQuerier
    leafs["total-active-groups"] = igmpInterfaceEntry.TotalActiveGroups
    leafs["robustness"] = igmpInterfaceEntry.Robustness
    leafs["proxy-interface"] = igmpInterfaceEntry.ProxyInterface
    leafs["querier-uptime"] = igmpInterfaceEntry.QuerierUptime
    leafs["las-ll-registration-count"] = igmpInterfaceEntry.LasLlRegistrationCount
    leafs["las-get-address-count"] = igmpInterfaceEntry.LasGetAddressCount
    leafs["las-update-count"] = igmpInterfaceEntry.LasUpdateCount
    leafs["las-ll-remove-update-count"] = igmpInterfaceEntry.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = igmpInterfaceEntry.LasLlAddUpdateCount
    leafs["las-null-update-count"] = igmpInterfaceEntry.LasNullUpdateCount
    leafs["las-unregistration-count"] = igmpInterfaceEntry.LasUnregistrationCount
    leafs["is-las-request"] = igmpInterfaceEntry.IsLasRequest
    leafs["is-las-registered"] = igmpInterfaceEntry.IsLasRegistered
    leafs["vrf-id"] = igmpInterfaceEntry.VrfId
    leafs["mte-vrf-id"] = igmpInterfaceEntry.MteVrfId
    leafs["location"] = igmpInterfaceEntry.Location
    leafs["mtu"] = igmpInterfaceEntry.Mtu
    leafs["vrf-state"] = igmpInterfaceEntry.VrfState
    leafs["is-configurationverify"] = igmpInterfaceEntry.IsConfigurationverify
    leafs["configurationvrf-set"] = igmpInterfaceEntry.ConfigurationvrfSet
    leafs["configurationvrf-error"] = igmpInterfaceEntry.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = igmpInterfaceEntry.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = igmpInterfaceEntry.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = igmpInterfaceEntry.IsImStateRegistered
    leafs["is-subscriber"] = igmpInterfaceEntry.IsSubscriber
    leafs["subscriber-mode"] = igmpInterfaceEntry.SubscriberMode
    leafs["is-identity-present"] = igmpInterfaceEntry.IsIdentityPresent
    leafs["subscriber-id"] = igmpInterfaceEntry.SubscriberId
    leafs["parent-ifhandle"] = igmpInterfaceEntry.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = igmpInterfaceEntry.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = igmpInterfaceEntry.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = igmpInterfaceEntry.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = igmpInterfaceEntry.MteTupleCount
    return leafs
}

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleName() string { return "cisco_ios_xr" }

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetYangName() string { return "igmp-interface-entry" }

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetParent(parent types.Entity) { igmpInterfaceEntry.parent = parent }

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParent() types.Entity { return igmpInterfaceEntry.parent }

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParentYangName() string { return "ifrs-interface" }

// Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetYangName() string { return "address" }

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParentYangName() string { return "igmp-interface-entry" }

// Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Igmp_Standby_DefaultContext_TrafficCounters
// IGMP Message Traffic Counters
type Igmp_Standby_DefaultContext_TrafficCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetFilter() yfilter.YFilter { return trafficCounters.YFilter }

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) SetFilter(yf yfilter.YFilter) { trafficCounters.YFilter = yf }

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetGoName(yname string) string {
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "packets-in" { return "PacketsIn" }
    if yname == "packets-out" { return "PacketsOut" }
    if yname == "format-errors" { return "FormatErrors" }
    if yname == "packet-manager-input-errors" { return "PacketManagerInputErrors" }
    if yname == "packet-manager-output-errors" { return "PacketManagerOutputErrors" }
    if yname == "checksum-errors" { return "ChecksumErrors" }
    if yname == "receive-socket-errors" { return "ReceiveSocketErrors" }
    if yname == "socket-errors" { return "SocketErrors" }
    if yname == "bad-scope-errors" { return "BadScopeErrors" }
    if yname == "auxillary-data-length-errors" { return "AuxillaryDataLengthErrors" }
    if yname == "invalid-source-address-errors" { return "InvalidSourceAddressErrors" }
    if yname == "no-socket-connection" { return "NoSocketConnection" }
    if yname == "miscellaneous-errors" { return "MiscellaneousErrors" }
    if yname == "input-queries" { return "InputQueries" }
    if yname == "input-reports" { return "InputReports" }
    if yname == "input-leaves" { return "InputLeaves" }
    if yname == "input-mtrace" { return "InputMtrace" }
    if yname == "input-dvmrp" { return "InputDvmrp" }
    if yname == "input-pim" { return "InputPim" }
    if yname == "output-queries" { return "OutputQueries" }
    if yname == "output-reports" { return "OutputReports" }
    if yname == "output-leaves" { return "OutputLeaves" }
    if yname == "output-mtrace" { return "OutputMtrace" }
    if yname == "output-dvmrp" { return "OutputDvmrp" }
    if yname == "output-pim" { return "OutputPim" }
    if yname == "get-packet-failure" { return "GetPacketFailure" }
    if yname == "output-no-parent-interface-handle" { return "OutputNoParentInterfaceHandle" }
    if yname == "input-no-idb" { return "InputNoIdb" }
    if yname == "input-no-vrf-in-idb" { return "InputNoVrfInIdb" }
    if yname == "input-disabled-idb" { return "InputDisabledIdb" }
    if yname == "input-martian-address" { return "InputMartianAddress" }
    if yname == "input-no-assigned-vrf-id" { return "InputNoAssignedVrfId" }
    if yname == "input-no-vrf-mtrace" { return "InputNoVrfMtrace" }
    if yname == "input-no-platform-support-mtrace" { return "InputNoPlatformSupportMtrace" }
    return ""
}

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetSegmentPath() string {
    return "traffic-counters"
}

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["elapsed-time"] = trafficCounters.ElapsedTime
    leafs["packets-in"] = trafficCounters.PacketsIn
    leafs["packets-out"] = trafficCounters.PacketsOut
    leafs["format-errors"] = trafficCounters.FormatErrors
    leafs["packet-manager-input-errors"] = trafficCounters.PacketManagerInputErrors
    leafs["packet-manager-output-errors"] = trafficCounters.PacketManagerOutputErrors
    leafs["checksum-errors"] = trafficCounters.ChecksumErrors
    leafs["receive-socket-errors"] = trafficCounters.ReceiveSocketErrors
    leafs["socket-errors"] = trafficCounters.SocketErrors
    leafs["bad-scope-errors"] = trafficCounters.BadScopeErrors
    leafs["auxillary-data-length-errors"] = trafficCounters.AuxillaryDataLengthErrors
    leafs["invalid-source-address-errors"] = trafficCounters.InvalidSourceAddressErrors
    leafs["no-socket-connection"] = trafficCounters.NoSocketConnection
    leafs["miscellaneous-errors"] = trafficCounters.MiscellaneousErrors
    leafs["input-queries"] = trafficCounters.InputQueries
    leafs["input-reports"] = trafficCounters.InputReports
    leafs["input-leaves"] = trafficCounters.InputLeaves
    leafs["input-mtrace"] = trafficCounters.InputMtrace
    leafs["input-dvmrp"] = trafficCounters.InputDvmrp
    leafs["input-pim"] = trafficCounters.InputPim
    leafs["output-queries"] = trafficCounters.OutputQueries
    leafs["output-reports"] = trafficCounters.OutputReports
    leafs["output-leaves"] = trafficCounters.OutputLeaves
    leafs["output-mtrace"] = trafficCounters.OutputMtrace
    leafs["output-dvmrp"] = trafficCounters.OutputDvmrp
    leafs["output-pim"] = trafficCounters.OutputPim
    leafs["get-packet-failure"] = trafficCounters.GetPacketFailure
    leafs["output-no-parent-interface-handle"] = trafficCounters.OutputNoParentInterfaceHandle
    leafs["input-no-idb"] = trafficCounters.InputNoIdb
    leafs["input-no-vrf-in-idb"] = trafficCounters.InputNoVrfInIdb
    leafs["input-disabled-idb"] = trafficCounters.InputDisabledIdb
    leafs["input-martian-address"] = trafficCounters.InputMartianAddress
    leafs["input-no-assigned-vrf-id"] = trafficCounters.InputNoAssignedVrfId
    leafs["input-no-vrf-mtrace"] = trafficCounters.InputNoVrfMtrace
    leafs["input-no-platform-support-mtrace"] = trafficCounters.InputNoPlatformSupportMtrace
    return leafs
}

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetBundleName() string { return "cisco_ios_xr" }

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetYangName() string { return "traffic-counters" }

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) SetParent(parent types.Entity) { trafficCounters.parent = parent }

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetParent() types.Entity { return trafficCounters.parent }

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_Groups
// IGMP Group Database Table
type Igmp_Standby_DefaultContext_Groups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Igmp_Standby_DefaultContext_Groups_Group.
    Group []Igmp_Standby_DefaultContext_Groups_Group
}

func (groups *Igmp_Standby_DefaultContext_Groups) GetFilter() yfilter.YFilter { return groups.YFilter }

func (groups *Igmp_Standby_DefaultContext_Groups) SetFilter(yf yfilter.YFilter) { groups.YFilter = yf }

func (groups *Igmp_Standby_DefaultContext_Groups) GetGoName(yname string) string {
    if yname == "group" { return "Group" }
    return ""
}

func (groups *Igmp_Standby_DefaultContext_Groups) GetSegmentPath() string {
    return "groups"
}

func (groups *Igmp_Standby_DefaultContext_Groups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group" {
        for _, c := range groups.Group {
            if groups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_Groups_Group{}
        groups.Group = append(groups.Group, child)
        return &groups.Group[len(groups.Group)-1]
    }
    return nil
}

func (groups *Igmp_Standby_DefaultContext_Groups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range groups.Group {
        children[groups.Group[i].GetSegmentPath()] = &groups.Group[i]
    }
    return children
}

func (groups *Igmp_Standby_DefaultContext_Groups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (groups *Igmp_Standby_DefaultContext_Groups) GetBundleName() string { return "cisco_ios_xr" }

func (groups *Igmp_Standby_DefaultContext_Groups) GetYangName() string { return "groups" }

func (groups *Igmp_Standby_DefaultContext_Groups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groups *Igmp_Standby_DefaultContext_Groups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groups *Igmp_Standby_DefaultContext_Groups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groups *Igmp_Standby_DefaultContext_Groups) SetParent(parent types.Entity) { groups.parent = parent }

func (groups *Igmp_Standby_DefaultContext_Groups) GetParent() types.Entity { return groups.parent }

func (groups *Igmp_Standby_DefaultContext_Groups) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_Groups_Group
// IGMP Group Entry Information
type Igmp_Standby_DefaultContext_Groups_Group struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Standby_DefaultContext_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Igmp_Standby_DefaultContext_Groups_Group_SourceAddress
}

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetFilter() yfilter.YFilter { return group.YFilter }

func (group *Igmp_Standby_DefaultContext_Groups_Group) SetFilter(yf yfilter.YFilter) { group.YFilter = yf }

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetSegmentPath() string {
    return "group"
}

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &group.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &group.LastReporter
    }
    if childYangName == "source-address" {
        return &group.SourceAddress
    }
    return nil
}

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &group.GroupAddressXr
    children["last-reporter"] = &group.LastReporter
    children["source-address"] = &group.SourceAddress
    return children
}

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = group.GroupAddress
    leafs["interface-name"] = group.InterfaceName
    leafs["interface-name-xr"] = group.InterfaceNameXr
    leafs["uptime"] = group.Uptime
    leafs["expiration-time"] = group.ExpirationTime
    leafs["explicit-tracking-enabled"] = group.ExplicitTrackingEnabled
    leafs["is-self-join"] = group.IsSelfJoin
    leafs["row-status"] = group.RowStatus
    leafs["is-low-memory"] = group.IsLowMemory
    leafs["router-filter-mode"] = group.RouterFilterMode
    leafs["older-host-version1-timer"] = group.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = group.OlderHostVersion2Timer
    leafs["is-added"] = group.IsAdded
    leafs["is-suppressed"] = group.IsSuppressed
    return leafs
}

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetBundleName() string { return "cisco_ios_xr" }

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetYangName() string { return "group" }

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (group *Igmp_Standby_DefaultContext_Groups_Group) SetParent(parent types.Entity) { group.parent = parent }

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetParent() types.Entity { return group.parent }

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetParentYangName() string { return "groups" }

// Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr
// Group Address
type Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetParentYangName() string { return "group" }

// Igmp_Standby_DefaultContext_Groups_Group_LastReporter
// Last reporter address
type Igmp_Standby_DefaultContext_Groups_Group_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetParentYangName() string { return "group" }

// Igmp_Standby_DefaultContext_Groups_Group_SourceAddress
// Source Address
type Igmp_Standby_DefaultContext_Groups_Group_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetParentYangName() string { return "group" }

// Igmp_Standby_DefaultContext_GroupSummary
// IGMP Groups Summary
type Igmp_Standby_DefaultContext_GroupSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetFilter() yfilter.YFilter { return groupSummary.YFilter }

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) SetFilter(yf yfilter.YFilter) { groupSummary.YFilter = yf }

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetGoName(yname string) string {
    if yname == "groutes" { return "Groutes" }
    if yname == "sg-routes" { return "SgRoutes" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    return ""
}

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetSegmentPath() string {
    return "group-summary"
}

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["groutes"] = groupSummary.Groutes
    leafs["sg-routes"] = groupSummary.SgRoutes
    leafs["group-count"] = groupSummary.GroupCount
    leafs["is-low-memory"] = groupSummary.IsLowMemory
    return leafs
}

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetBundleName() string { return "cisco_ios_xr" }

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetYangName() string { return "group-summary" }

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) SetParent(parent types.Entity) { groupSummary.parent = parent }

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetParent() types.Entity { return groupSummary.parent }

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Igmp_Standby_DefaultContext_IfrsInterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetFilter() yfilter.YFilter { return ifrsInterfaceSummary.YFilter }

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) SetFilter(yf yfilter.YFilter) { ifrsInterfaceSummary.YFilter = yf }

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-count" { return "InterfaceCount" }
    if yname == "configuration-count" { return "ConfigurationCount" }
    return ""
}

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetSegmentPath() string {
    return "ifrs-interface-summary"
}

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-count"] = ifrsInterfaceSummary.InterfaceCount
    leafs["configuration-count"] = ifrsInterfaceSummary.ConfigurationCount
    return leafs
}

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetYangName() string { return "ifrs-interface-summary" }

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) SetParent(parent types.Entity) { ifrsInterfaceSummary.parent = parent }

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetParent() types.Entity { return ifrsInterfaceSummary.parent }

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_GlobalInterfaceTable
// IGMP Global Interface 
type Igmp_Standby_DefaultContext_GlobalInterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface.
    Interface []Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetFilter() yfilter.YFilter { return globalInterfaceTable.YFilter }

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) SetFilter(yf yfilter.YFilter) { globalInterfaceTable.YFilter = yf }

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetSegmentPath() string {
    return "global-interface-table"
}

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range globalInterfaceTable.Interface {
            if globalInterfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface{}
        globalInterfaceTable.Interface = append(globalInterfaceTable.Interface, child)
        return &globalInterfaceTable.Interface[len(globalInterfaceTable.Interface)-1]
    }
    return nil
}

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalInterfaceTable.Interface {
        children[globalInterfaceTable.Interface[i].GetSegmentPath()] = &globalInterfaceTable.Interface[i]
    }
    return children
}

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetYangName() string { return "global-interface-table" }

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) SetParent(parent types.Entity) { globalInterfaceTable.parent = parent }

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetParent() types.Entity { return globalInterfaceTable.parent }

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface
// IGMP Interface
type Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetParentYangName() string { return "global-interface-table" }

// Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address
// IP address
type Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Igmp_Standby_DefaultContext_SsmMapDetails
// SSM Map Detail
type Igmp_Standby_DefaultContext_SsmMapDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetFilter() yfilter.YFilter { return ssmMapDetails.YFilter }

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) SetFilter(yf yfilter.YFilter) { ssmMapDetails.YFilter = yf }

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetGoName(yname string) string {
    if yname == "ssm-map-detail" { return "SsmMapDetail" }
    return ""
}

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetSegmentPath() string {
    return "ssm-map-details"
}

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map-detail" {
        for _, c := range ssmMapDetails.SsmMapDetail {
            if ssmMapDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail{}
        ssmMapDetails.SsmMapDetail = append(ssmMapDetails.SsmMapDetail, child)
        return &ssmMapDetails.SsmMapDetail[len(ssmMapDetails.SsmMapDetail)-1]
    }
    return nil
}

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMapDetails.SsmMapDetail {
        children[ssmMapDetails.SsmMapDetail[i].GetSegmentPath()] = &ssmMapDetails.SsmMapDetail[i]
    }
    return children
}

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetYangName() string { return "ssm-map-details" }

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) SetParent(parent types.Entity) { ssmMapDetails.parent = parent }

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetParent() types.Entity { return ssmMapDetails.parent }

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources.
    Sources []Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetFilter() yfilter.YFilter { return ssmMapDetail.YFilter }

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) SetFilter(yf yfilter.YFilter) { ssmMapDetail.YFilter = yf }

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "response-pending" { return "ResponsePending" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "map-info" { return "MapInfo" }
    if yname == "sources" { return "Sources" }
    return ""
}

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetSegmentPath() string {
    return "ssm-map-detail"
}

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "map-info" {
        return &ssmMapDetail.MapInfo
    }
    if childYangName == "sources" {
        for _, c := range ssmMapDetail.Sources {
            if ssmMapDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources{}
        ssmMapDetail.Sources = append(ssmMapDetail.Sources, child)
        return &ssmMapDetail.Sources[len(ssmMapDetail.Sources)-1]
    }
    return nil
}

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["map-info"] = &ssmMapDetail.MapInfo
    for i := range ssmMapDetail.Sources {
        children[ssmMapDetail.Sources[i].GetSegmentPath()] = &ssmMapDetail.Sources[i]
    }
    return children
}

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMapDetail.SsmMapType
    leafs["group-address"] = ssmMapDetail.GroupAddress
    leafs["expiration-time"] = ssmMapDetail.ExpirationTime
    leafs["response-pending"] = ssmMapDetail.ResponsePending
    leafs["query-interval"] = ssmMapDetail.QueryInterval
    leafs["elapsed-time"] = ssmMapDetail.ElapsedTime
    return leafs
}

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetYangName() string { return "ssm-map-detail" }

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) SetParent(parent types.Entity) { ssmMapDetail.parent = parent }

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetParent() types.Entity { return ssmMapDetail.parent }

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetParentYangName() string { return "ssm-map-details" }

// Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetFilter() yfilter.YFilter { return mapInfo.YFilter }

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) SetFilter(yf yfilter.YFilter) { mapInfo.YFilter = yf }

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetGoName(yname string) string {
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetSegmentPath() string {
    return "map-info"
}

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &mapInfo.GroupAddressXr
    }
    return nil
}

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &mapInfo.GroupAddressXr
    return children
}

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["map-type"] = mapInfo.MapType
    leafs["source-counts"] = mapInfo.SourceCounts
    return leafs
}

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleName() string { return "cisco_ios_xr" }

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetYangName() string { return "map-info" }

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) SetParent(parent types.Entity) { mapInfo.parent = parent }

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetParent() types.Entity { return mapInfo.parent }

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetParentYangName() string { return "ssm-map-detail" }

// Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParentYangName() string { return "map-info" }

// Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetFilter() yfilter.YFilter { return sources.YFilter }

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) SetFilter(yf yfilter.YFilter) { sources.YFilter = yf }

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetSegmentPath() string {
    return "sources"
}

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sources.AfName
    leafs["ipv4-address"] = sources.Ipv4Address
    leafs["ipv6-address"] = sources.Ipv6Address
    return leafs
}

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetBundleName() string { return "cisco_ios_xr" }

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetYangName() string { return "sources" }

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) SetParent(parent types.Entity) { sources.parent = parent }

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetParent() types.Entity { return sources.parent }

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetParentYangName() string { return "ssm-map-detail" }

// Igmp_Standby_DefaultContext_InterfaceStateOffs
// IGMP Interface state off
type Igmp_Standby_DefaultContext_InterfaceStateOffs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetFilter() yfilter.YFilter { return interfaceStateOffs.YFilter }

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) SetFilter(yf yfilter.YFilter) { interfaceStateOffs.YFilter = yf }

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetGoName(yname string) string {
    if yname == "interface-state-off" { return "InterfaceStateOff" }
    return ""
}

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetSegmentPath() string {
    return "interface-state-offs"
}

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-off" {
        for _, c := range interfaceStateOffs.InterfaceStateOff {
            if interfaceStateOffs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff{}
        interfaceStateOffs.InterfaceStateOff = append(interfaceStateOffs.InterfaceStateOff, child)
        return &interfaceStateOffs.InterfaceStateOff[len(interfaceStateOffs.InterfaceStateOff)-1]
    }
    return nil
}

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOffs.InterfaceStateOff {
        children[interfaceStateOffs.InterfaceStateOff[i].GetSegmentPath()] = &interfaceStateOffs.InterfaceStateOff[i]
    }
    return children
}

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetYangName() string { return "interface-state-offs" }

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) SetParent(parent types.Entity) { interfaceStateOffs.parent = parent }

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetParent() types.Entity { return interfaceStateOffs.parent }

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetParentYangName() string { return "default-context" }

// Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetFilter() yfilter.YFilter { return interfaceStateOff.YFilter }

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) SetFilter(yf yfilter.YFilter) { interfaceStateOff.YFilter = yf }

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetSegmentPath() string {
    return "interface-state-off" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOff.InterfaceName) + "']"
}

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOff.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOff.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOff.SubscriberAddress
    }
    return nil
}

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOff.Address
    children["querier-address"] = &interfaceStateOff.QuerierAddress
    children["subscriber-address"] = &interfaceStateOff.SubscriberAddress
    return children
}

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOff.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOff.InterfaceNameXr
    leafs["state"] = interfaceStateOff.State
    leafs["prefix-length"] = interfaceStateOff.PrefixLength
    leafs["is-interface-up"] = interfaceStateOff.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOff.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOff.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOff.IgmpVersion
    leafs["host-version"] = interfaceStateOff.HostVersion
    leafs["query-interval"] = interfaceStateOff.QueryInterval
    leafs["query-timeout"] = interfaceStateOff.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOff.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOff.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOff.GroupJoins
    leafs["group-leaves"] = interfaceStateOff.GroupLeaves
    leafs["is-querier"] = interfaceStateOff.IsQuerier
    leafs["total-active-groups"] = interfaceStateOff.TotalActiveGroups
    leafs["robustness"] = interfaceStateOff.Robustness
    leafs["proxy-interface"] = interfaceStateOff.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOff.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOff.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOff.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOff.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOff.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOff.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOff.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOff.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOff.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOff.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOff.VrfId
    leafs["mte-vrf-id"] = interfaceStateOff.MteVrfId
    leafs["location"] = interfaceStateOff.Location
    leafs["mtu"] = interfaceStateOff.Mtu
    leafs["vrf-state"] = interfaceStateOff.VrfState
    leafs["is-configurationverify"] = interfaceStateOff.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOff.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOff.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOff.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOff.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOff.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOff.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOff.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOff.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOff.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOff.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOff.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOff.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOff.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOff.MteTupleCount
    return leafs
}

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetYangName() string { return "interface-state-off" }

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) SetParent(parent types.Entity) { interfaceStateOff.parent = parent }

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetParent() types.Entity { return interfaceStateOff.parent }

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetParentYangName() string { return "interface-state-offs" }

// Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetYangName() string { return "address" }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetParentYangName() string { return "interface-state-off" }

// Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParentYangName() string { return "interface-state-off" }

// Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParentYangName() string { return "interface-state-off" }

// Igmp_Active
// Active Process
type Igmp_Active struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF Table.
    Vrfs Igmp_Active_Vrfs

    // Process.
    Process Igmp_Active_Process

    // Default Context.
    DefaultContext Igmp_Active_DefaultContext
}

func (active *Igmp_Active) GetFilter() yfilter.YFilter { return active.YFilter }

func (active *Igmp_Active) SetFilter(yf yfilter.YFilter) { active.YFilter = yf }

func (active *Igmp_Active) GetGoName(yname string) string {
    if yname == "vrfs" { return "Vrfs" }
    if yname == "process" { return "Process" }
    if yname == "default-context" { return "DefaultContext" }
    return ""
}

func (active *Igmp_Active) GetSegmentPath() string {
    return "active"
}

func (active *Igmp_Active) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrfs" {
        return &active.Vrfs
    }
    if childYangName == "process" {
        return &active.Process
    }
    if childYangName == "default-context" {
        return &active.DefaultContext
    }
    return nil
}

func (active *Igmp_Active) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vrfs"] = &active.Vrfs
    children["process"] = &active.Process
    children["default-context"] = &active.DefaultContext
    return children
}

func (active *Igmp_Active) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (active *Igmp_Active) GetBundleName() string { return "cisco_ios_xr" }

func (active *Igmp_Active) GetYangName() string { return "active" }

func (active *Igmp_Active) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (active *Igmp_Active) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (active *Igmp_Active) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (active *Igmp_Active) SetParent(parent types.Entity) { active.parent = parent }

func (active *Igmp_Active) GetParent() types.Entity { return active.parent }

func (active *Igmp_Active) GetParentYangName() string { return "igmp" }

// Igmp_Active_Vrfs
// VRF Table
type Igmp_Active_Vrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table Names. The type is slice of Igmp_Active_Vrfs_Vrf.
    Vrf []Igmp_Active_Vrfs_Vrf
}

func (vrfs *Igmp_Active_Vrfs) GetFilter() yfilter.YFilter { return vrfs.YFilter }

func (vrfs *Igmp_Active_Vrfs) SetFilter(yf yfilter.YFilter) { vrfs.YFilter = yf }

func (vrfs *Igmp_Active_Vrfs) GetGoName(yname string) string {
    if yname == "vrf" { return "Vrf" }
    return ""
}

func (vrfs *Igmp_Active_Vrfs) GetSegmentPath() string {
    return "vrfs"
}

func (vrfs *Igmp_Active_Vrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf" {
        for _, c := range vrfs.Vrf {
            if vrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf{}
        vrfs.Vrf = append(vrfs.Vrf, child)
        return &vrfs.Vrf[len(vrfs.Vrf)-1]
    }
    return nil
}

func (vrfs *Igmp_Active_Vrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfs.Vrf {
        children[vrfs.Vrf[i].GetSegmentPath()] = &vrfs.Vrf[i]
    }
    return children
}

func (vrfs *Igmp_Active_Vrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfs *Igmp_Active_Vrfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfs *Igmp_Active_Vrfs) GetYangName() string { return "vrfs" }

func (vrfs *Igmp_Active_Vrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfs *Igmp_Active_Vrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfs *Igmp_Active_Vrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfs *Igmp_Active_Vrfs) SetParent(parent types.Entity) { vrfs.parent = parent }

func (vrfs *Igmp_Active_Vrfs) GetParent() types.Entity { return vrfs.parent }

func (vrfs *Igmp_Active_Vrfs) GetParentYangName() string { return "active" }

// Igmp_Active_Vrfs_Vrf
// VRF table Names
type Igmp_Active_Vrfs_Vrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with length: 1..32.
    VrfName interface{}

    // IGMP Summary Information.
    Summary Igmp_Active_Vrfs_Vrf_Summary

    // IGMP Interface state on.
    InterfaceStateOns Igmp_Active_Vrfs_Vrf_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Igmp_Active_Vrfs_Vrf_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Igmp_Active_Vrfs_Vrf_NonActiveGroups

    // SSM Map Table.
    SsmMaps Igmp_Active_Vrfs_Vrf_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Igmp_Active_Vrfs_Vrf_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Igmp_Active_Vrfs_Vrf_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Igmp_Active_Vrfs_Vrf_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Igmp_Active_Vrfs_Vrf_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Igmp_Active_Vrfs_Vrf_TrafficCounters

    // IGMP Group Database Table.
    Groups Igmp_Active_Vrfs_Vrf_Groups

    // IGMP Groups Summary.
    GroupSummary Igmp_Active_Vrfs_Vrf_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Igmp_Active_Vrfs_Vrf_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Igmp_Active_Vrfs_Vrf_InterfaceStateOffs
}

func (vrf *Igmp_Active_Vrfs_Vrf) GetFilter() yfilter.YFilter { return vrf.YFilter }

func (vrf *Igmp_Active_Vrfs_Vrf) SetFilter(yf yfilter.YFilter) { vrf.YFilter = yf }

func (vrf *Igmp_Active_Vrfs_Vrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "summary" { return "Summary" }
    if yname == "interface-state-ons" { return "InterfaceStateOns" }
    if yname == "detail-groups" { return "DetailGroups" }
    if yname == "non-active-groups" { return "NonActiveGroups" }
    if yname == "ssm-maps" { return "SsmMaps" }
    if yname == "explicit-groups" { return "ExplicitGroups" }
    if yname == "interface-table" { return "InterfaceTable" }
    if yname == "interface-unicast-qos-adjusts" { return "InterfaceUnicastQosAdjusts" }
    if yname == "ranges" { return "Ranges" }
    if yname == "ifrs-interfaces" { return "IfrsInterfaces" }
    if yname == "traffic-counters" { return "TrafficCounters" }
    if yname == "groups" { return "Groups" }
    if yname == "group-summary" { return "GroupSummary" }
    if yname == "ifrs-interface-summary" { return "IfrsInterfaceSummary" }
    if yname == "global-interface-table" { return "GlobalInterfaceTable" }
    if yname == "ssm-map-details" { return "SsmMapDetails" }
    if yname == "interface-state-offs" { return "InterfaceStateOffs" }
    return ""
}

func (vrf *Igmp_Active_Vrfs_Vrf) GetSegmentPath() string {
    return "vrf" + "[vrf-name='" + fmt.Sprintf("%v", vrf.VrfName) + "']"
}

func (vrf *Igmp_Active_Vrfs_Vrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &vrf.Summary
    }
    if childYangName == "interface-state-ons" {
        return &vrf.InterfaceStateOns
    }
    if childYangName == "detail-groups" {
        return &vrf.DetailGroups
    }
    if childYangName == "non-active-groups" {
        return &vrf.NonActiveGroups
    }
    if childYangName == "ssm-maps" {
        return &vrf.SsmMaps
    }
    if childYangName == "explicit-groups" {
        return &vrf.ExplicitGroups
    }
    if childYangName == "interface-table" {
        return &vrf.InterfaceTable
    }
    if childYangName == "interface-unicast-qos-adjusts" {
        return &vrf.InterfaceUnicastQosAdjusts
    }
    if childYangName == "ranges" {
        return &vrf.Ranges
    }
    if childYangName == "ifrs-interfaces" {
        return &vrf.IfrsInterfaces
    }
    if childYangName == "traffic-counters" {
        return &vrf.TrafficCounters
    }
    if childYangName == "groups" {
        return &vrf.Groups
    }
    if childYangName == "group-summary" {
        return &vrf.GroupSummary
    }
    if childYangName == "ifrs-interface-summary" {
        return &vrf.IfrsInterfaceSummary
    }
    if childYangName == "global-interface-table" {
        return &vrf.GlobalInterfaceTable
    }
    if childYangName == "ssm-map-details" {
        return &vrf.SsmMapDetails
    }
    if childYangName == "interface-state-offs" {
        return &vrf.InterfaceStateOffs
    }
    return nil
}

func (vrf *Igmp_Active_Vrfs_Vrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &vrf.Summary
    children["interface-state-ons"] = &vrf.InterfaceStateOns
    children["detail-groups"] = &vrf.DetailGroups
    children["non-active-groups"] = &vrf.NonActiveGroups
    children["ssm-maps"] = &vrf.SsmMaps
    children["explicit-groups"] = &vrf.ExplicitGroups
    children["interface-table"] = &vrf.InterfaceTable
    children["interface-unicast-qos-adjusts"] = &vrf.InterfaceUnicastQosAdjusts
    children["ranges"] = &vrf.Ranges
    children["ifrs-interfaces"] = &vrf.IfrsInterfaces
    children["traffic-counters"] = &vrf.TrafficCounters
    children["groups"] = &vrf.Groups
    children["group-summary"] = &vrf.GroupSummary
    children["ifrs-interface-summary"] = &vrf.IfrsInterfaceSummary
    children["global-interface-table"] = &vrf.GlobalInterfaceTable
    children["ssm-map-details"] = &vrf.SsmMapDetails
    children["interface-state-offs"] = &vrf.InterfaceStateOffs
    return children
}

func (vrf *Igmp_Active_Vrfs_Vrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = vrf.VrfName
    return leafs
}

func (vrf *Igmp_Active_Vrfs_Vrf) GetBundleName() string { return "cisco_ios_xr" }

func (vrf *Igmp_Active_Vrfs_Vrf) GetYangName() string { return "vrf" }

func (vrf *Igmp_Active_Vrfs_Vrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrf *Igmp_Active_Vrfs_Vrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrf *Igmp_Active_Vrfs_Vrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrf *Igmp_Active_Vrfs_Vrf) SetParent(parent types.Entity) { vrf.parent = parent }

func (vrf *Igmp_Active_Vrfs_Vrf) GetParent() types.Entity { return vrf.parent }

func (vrf *Igmp_Active_Vrfs_Vrf) GetParentYangName() string { return "vrfs" }

// Igmp_Active_Vrfs_Vrf_Summary
// IGMP Summary Information
type Igmp_Active_Vrfs_Vrf_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Igmp_Active_Vrfs_Vrf_Summary_Interface.
    Interface []Igmp_Active_Vrfs_Vrf_Summary_Interface
}

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Igmp_Active_Vrfs_Vrf_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetGoName(yname string) string {
    if yname == "robustness" { return "Robustness" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-disabled" { return "IsDisabled" }
    if yname == "supported-interfaces" { return "SupportedInterfaces" }
    if yname == "unsupported-interfaces" { return "UnsupportedInterfaces" }
    if yname == "enabled-interface-count" { return "EnabledInterfaceCount" }
    if yname == "disabled-interface-count" { return "DisabledInterfaceCount" }
    if yname == "tunnel-mte-config-count" { return "TunnelMteConfigCount" }
    if yname == "node-low-memory" { return "NodeLowMemory" }
    if yname == "interface" { return "Interface" }
    return ""
}

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range summary.Interface {
            if summary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_Summary_Interface{}
        summary.Interface = append(summary.Interface, child)
        return &summary.Interface[len(summary.Interface)-1]
    }
    return nil
}

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summary.Interface {
        children[summary.Interface[i].GetSegmentPath()] = &summary.Interface[i]
    }
    return children
}

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["robustness"] = summary.Robustness
    leafs["group-limit"] = summary.GroupLimit
    leafs["group-count"] = summary.GroupCount
    leafs["is-disabled"] = summary.IsDisabled
    leafs["supported-interfaces"] = summary.SupportedInterfaces
    leafs["unsupported-interfaces"] = summary.UnsupportedInterfaces
    leafs["enabled-interface-count"] = summary.EnabledInterfaceCount
    leafs["disabled-interface-count"] = summary.DisabledInterfaceCount
    leafs["tunnel-mte-config-count"] = summary.TunnelMteConfigCount
    leafs["node-low-memory"] = summary.NodeLowMemory
    return leafs
}

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetYangName() string { return "summary" }

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Igmp_Active_Vrfs_Vrf_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Igmp_Active_Vrfs_Vrf_Summary_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "on-off" { return "OnOff" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    return ""
}

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetSegmentPath() string {
    return "interface"
}

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["group-limit"] = self.GroupLimit
    leafs["group-count"] = self.GroupCount
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["on-off"] = self.OnOff
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    return leafs
}

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetYangName() string { return "interface" }

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetParent() types.Entity { return self.parent }

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetParentYangName() string { return "summary" }

// Igmp_Active_Vrfs_Vrf_InterfaceStateOns
// IGMP Interface state on
type Igmp_Active_Vrfs_Vrf_InterfaceStateOns struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetFilter() yfilter.YFilter { return interfaceStateOns.YFilter }

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) SetFilter(yf yfilter.YFilter) { interfaceStateOns.YFilter = yf }

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetGoName(yname string) string {
    if yname == "interface-state-on" { return "InterfaceStateOn" }
    return ""
}

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetSegmentPath() string {
    return "interface-state-ons"
}

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-on" {
        for _, c := range interfaceStateOns.InterfaceStateOn {
            if interfaceStateOns.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn{}
        interfaceStateOns.InterfaceStateOn = append(interfaceStateOns.InterfaceStateOn, child)
        return &interfaceStateOns.InterfaceStateOn[len(interfaceStateOns.InterfaceStateOn)-1]
    }
    return nil
}

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOns.InterfaceStateOn {
        children[interfaceStateOns.InterfaceStateOn[i].GetSegmentPath()] = &interfaceStateOns.InterfaceStateOn[i]
    }
    return children
}

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetYangName() string { return "interface-state-ons" }

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) SetParent(parent types.Entity) { interfaceStateOns.parent = parent }

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetParent() types.Entity { return interfaceStateOns.parent }

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetFilter() yfilter.YFilter { return interfaceStateOn.YFilter }

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) SetFilter(yf yfilter.YFilter) { interfaceStateOn.YFilter = yf }

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetSegmentPath() string {
    return "interface-state-on" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOn.InterfaceName) + "']"
}

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOn.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOn.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOn.SubscriberAddress
    }
    return nil
}

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOn.Address
    children["querier-address"] = &interfaceStateOn.QuerierAddress
    children["subscriber-address"] = &interfaceStateOn.SubscriberAddress
    return children
}

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOn.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOn.InterfaceNameXr
    leafs["state"] = interfaceStateOn.State
    leafs["prefix-length"] = interfaceStateOn.PrefixLength
    leafs["is-interface-up"] = interfaceStateOn.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOn.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOn.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOn.IgmpVersion
    leafs["host-version"] = interfaceStateOn.HostVersion
    leafs["query-interval"] = interfaceStateOn.QueryInterval
    leafs["query-timeout"] = interfaceStateOn.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOn.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOn.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOn.GroupJoins
    leafs["group-leaves"] = interfaceStateOn.GroupLeaves
    leafs["is-querier"] = interfaceStateOn.IsQuerier
    leafs["total-active-groups"] = interfaceStateOn.TotalActiveGroups
    leafs["robustness"] = interfaceStateOn.Robustness
    leafs["proxy-interface"] = interfaceStateOn.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOn.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOn.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOn.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOn.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOn.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOn.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOn.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOn.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOn.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOn.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOn.VrfId
    leafs["mte-vrf-id"] = interfaceStateOn.MteVrfId
    leafs["location"] = interfaceStateOn.Location
    leafs["mtu"] = interfaceStateOn.Mtu
    leafs["vrf-state"] = interfaceStateOn.VrfState
    leafs["is-configurationverify"] = interfaceStateOn.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOn.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOn.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOn.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOn.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOn.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOn.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOn.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOn.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOn.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOn.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOn.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOn.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOn.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOn.MteTupleCount
    return leafs
}

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetYangName() string { return "interface-state-on" }

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) SetParent(parent types.Entity) { interfaceStateOn.parent = parent }

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetParent() types.Entity { return interfaceStateOn.parent }

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetParentYangName() string { return "interface-state-ons" }

// Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetYangName() string { return "address" }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetParentYangName() string { return "interface-state-on" }

// Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParentYangName() string { return "interface-state-on" }

// Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParentYangName() string { return "interface-state-on" }

// Igmp_Active_Vrfs_Vrf_DetailGroups
// IGMP Detail Group Database
type Igmp_Active_Vrfs_Vrf_DetailGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup.
    DetailGroup []Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup
}

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetFilter() yfilter.YFilter { return detailGroups.YFilter }

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) SetFilter(yf yfilter.YFilter) { detailGroups.YFilter = yf }

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetGoName(yname string) string {
    if yname == "detail-group" { return "DetailGroup" }
    return ""
}

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetSegmentPath() string {
    return "detail-groups"
}

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detail-group" {
        for _, c := range detailGroups.DetailGroup {
            if detailGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup{}
        detailGroups.DetailGroup = append(detailGroups.DetailGroup, child)
        return &detailGroups.DetailGroup[len(detailGroups.DetailGroup)-1]
    }
    return nil
}

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range detailGroups.DetailGroup {
        children[detailGroups.DetailGroup[i].GetSegmentPath()] = &detailGroups.DetailGroup[i]
    }
    return children
}

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetYangName() string { return "detail-groups" }

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) SetParent(parent types.Entity) { detailGroups.parent = parent }

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetParent() types.Entity { return detailGroups.parent }

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source.
    Source []Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source
}

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetFilter() yfilter.YFilter { return detailGroup.YFilter }

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) SetFilter(yf yfilter.YFilter) { detailGroup.YFilter = yf }

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "is-router-exclude-mode" { return "IsRouterExcludeMode" }
    if yname == "is-host-exclude-mode" { return "IsHostExcludeMode" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "source" { return "Source" }
    return ""
}

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetSegmentPath() string {
    return "detail-group"
}

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &detailGroup.GroupInfo
    }
    if childYangName == "source" {
        for _, c := range detailGroup.Source {
            if detailGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source{}
        detailGroup.Source = append(detailGroup.Source, child)
        return &detailGroup.Source[len(detailGroup.Source)-1]
    }
    return nil
}

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &detailGroup.GroupInfo
    for i := range detailGroup.Source {
        children[detailGroup.Source[i].GetSegmentPath()] = &detailGroup.Source[i]
    }
    return children
}

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = detailGroup.GroupAddress
    leafs["interface-name"] = detailGroup.InterfaceName
    leafs["source-address"] = detailGroup.SourceAddress
    leafs["is-router-exclude-mode"] = detailGroup.IsRouterExcludeMode
    leafs["is-host-exclude-mode"] = detailGroup.IsHostExcludeMode
    return leafs
}

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetYangName() string { return "detail-group" }

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) SetParent(parent types.Entity) { detailGroup.parent = parent }

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetParent() types.Entity { return detailGroup.parent }

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetParentYangName() string { return "detail-groups" }

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetParentYangName() string { return "detail-group" }

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source
// List of sources
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-remote" { return "IsRemote" }
    if yname == "is-forward" { return "IsForward" }
    if yname == "is-we-report" { return "IsWeReport" }
    if yname == "flags" { return "Flags" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetSegmentPath() string {
    return "source"
}

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &source.SourceAddress
    }
    return nil
}

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &source.SourceAddress
    return children
}

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = source.Uptime
    leafs["expiration-time"] = source.ExpirationTime
    leafs["is-local"] = source.IsLocal
    leafs["is-remote"] = source.IsRemote
    leafs["is-forward"] = source.IsForward
    leafs["is-we-report"] = source.IsWeReport
    leafs["flags"] = source.Flags
    leafs["is-added"] = source.IsAdded
    return leafs
}

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetYangName() string { return "source" }

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetParent() types.Entity { return source.parent }

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetParentYangName() string { return "detail-group" }

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetParentYangName() string { return "source" }

// Igmp_Active_Vrfs_Vrf_NonActiveGroups
// IGMP Non-Active Groups Information
type Igmp_Active_Vrfs_Vrf_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetGoName(yname string) string {
    if yname == "non-active-groups" { return "NonActiveGroups" }
    return ""
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-active-groups" {
        for _, c := range nonActiveGroups.NonActiveGroups {
            if nonActiveGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups{}
        nonActiveGroups.NonActiveGroups = append(nonActiveGroups.NonActiveGroups, child)
        return &nonActiveGroups.NonActiveGroups[len(nonActiveGroups.NonActiveGroups)-1]
    }
    return nil
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nonActiveGroups.NonActiveGroups {
        children[nonActiveGroups.NonActiveGroups[i].GetSegmentPath()] = &nonActiveGroups.NonActiveGroups[i]
    }
    return children
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    if yname == "reason-for-non-activity" { return "ReasonForNonActivity" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address" {
        return &nonActiveGroups.GroupAddress
    }
    if childYangName == "source-address" {
        return &nonActiveGroups.SourceAddress
    }
    return nil
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address"] = &nonActiveGroups.GroupAddress
    children["source-address"] = &nonActiveGroups.SourceAddress
    return children
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface"] = nonActiveGroups.Interface
    leafs["reason-for-non-activity"] = nonActiveGroups.ReasonForNonActivity
    return leafs
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetParentYangName() string { return "non-active-groups" }

// Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetParentYangName() string { return "non-active-groups" }

// Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetParentYangName() string { return "non-active-groups" }

// Igmp_Active_Vrfs_Vrf_SsmMaps
// SSM Map Table
type Igmp_Active_Vrfs_Vrf_SsmMaps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap.
    SsmMap []Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap
}

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetFilter() yfilter.YFilter { return ssmMaps.YFilter }

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) SetFilter(yf yfilter.YFilter) { ssmMaps.YFilter = yf }

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetGoName(yname string) string {
    if yname == "ssm-map" { return "SsmMap" }
    return ""
}

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetSegmentPath() string {
    return "ssm-maps"
}

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map" {
        for _, c := range ssmMaps.SsmMap {
            if ssmMaps.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap{}
        ssmMaps.SsmMap = append(ssmMaps.SsmMap, child)
        return &ssmMaps.SsmMap[len(ssmMaps.SsmMap)-1]
    }
    return nil
}

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMaps.SsmMap {
        children[ssmMaps.SsmMap[i].GetSegmentPath()] = &ssmMaps.SsmMap[i]
    }
    return children
}

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetYangName() string { return "ssm-maps" }

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) SetParent(parent types.Entity) { ssmMaps.parent = parent }

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetParent() types.Entity { return ssmMaps.parent }

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap
// SSM Map information
type Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetFilter() yfilter.YFilter { return ssmMap.YFilter }

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) SetFilter(yf yfilter.YFilter) { ssmMap.YFilter = yf }

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetSegmentPath() string {
    return "ssm-map"
}

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &ssmMap.GroupAddressXr
    }
    return nil
}

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &ssmMap.GroupAddressXr
    return children
}

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMap.SsmMapType
    leafs["group-address"] = ssmMap.GroupAddress
    leafs["map-type"] = ssmMap.MapType
    leafs["source-counts"] = ssmMap.SourceCounts
    return leafs
}

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetYangName() string { return "ssm-map" }

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) SetParent(parent types.Entity) { ssmMap.parent = parent }

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetParent() types.Entity { return ssmMap.parent }

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetParentYangName() string { return "ssm-maps" }

// Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetParentYangName() string { return "ssm-map" }

// Igmp_Active_Vrfs_Vrf_ExplicitGroups
// IGMP Explicit Group Database
type Igmp_Active_Vrfs_Vrf_ExplicitGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetFilter() yfilter.YFilter { return explicitGroups.YFilter }

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) SetFilter(yf yfilter.YFilter) { explicitGroups.YFilter = yf }

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetGoName(yname string) string {
    if yname == "explicit-group" { return "ExplicitGroup" }
    return ""
}

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetSegmentPath() string {
    return "explicit-groups"
}

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "explicit-group" {
        for _, c := range explicitGroups.ExplicitGroup {
            if explicitGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup{}
        explicitGroups.ExplicitGroup = append(explicitGroups.ExplicitGroup, child)
        return &explicitGroups.ExplicitGroup[len(explicitGroups.ExplicitGroup)-1]
    }
    return nil
}

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range explicitGroups.ExplicitGroup {
        children[explicitGroups.ExplicitGroup[i].GetSegmentPath()] = &explicitGroups.ExplicitGroup[i]
    }
    return children
}

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetYangName() string { return "explicit-groups" }

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) SetParent(parent types.Entity) { explicitGroups.parent = parent }

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetParent() types.Entity { return explicitGroups.parent }

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host.
    Host []Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetFilter() yfilter.YFilter { return explicitGroup.YFilter }

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) SetFilter(yf yfilter.YFilter) { explicitGroup.YFilter = yf }

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "include-hosts" { return "IncludeHosts" }
    if yname == "exclude-hosts" { return "ExcludeHosts" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "host" { return "Host" }
    return ""
}

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetSegmentPath() string {
    return "explicit-group"
}

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &explicitGroup.GroupInfo
    }
    if childYangName == "host" {
        for _, c := range explicitGroup.Host {
            if explicitGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host{}
        explicitGroup.Host = append(explicitGroup.Host, child)
        return &explicitGroup.Host[len(explicitGroup.Host)-1]
    }
    return nil
}

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &explicitGroup.GroupInfo
    for i := range explicitGroup.Host {
        children[explicitGroup.Host[i].GetSegmentPath()] = &explicitGroup.Host[i]
    }
    return children
}

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = explicitGroup.GroupAddress
    leafs["interface-name"] = explicitGroup.InterfaceName
    leafs["source-address"] = explicitGroup.SourceAddress
    leafs["include-hosts"] = explicitGroup.IncludeHosts
    leafs["exclude-hosts"] = explicitGroup.ExcludeHosts
    return leafs
}

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetYangName() string { return "explicit-group" }

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) SetParent(parent types.Entity) { explicitGroup.parent = parent }

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetParent() types.Entity { return explicitGroup.parent }

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetParentYangName() string { return "explicit-groups" }

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetParentYangName() string { return "explicit-group" }

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetFilter() yfilter.YFilter { return host.YFilter }

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) SetFilter(yf yfilter.YFilter) { host.YFilter = yf }

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "is-exclude" { return "IsExclude" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "source-count" { return "SourceCount" }
    if yname == "address" { return "Address" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetSegmentPath() string {
    return "host"
}

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &host.Address
    }
    if childYangName == "source-address" {
        for _, c := range host.SourceAddress {
            if host.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress{}
        host.SourceAddress = append(host.SourceAddress, child)
        return &host.SourceAddress[len(host.SourceAddress)-1]
    }
    return nil
}

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &host.Address
    for i := range host.SourceAddress {
        children[host.SourceAddress[i].GetSegmentPath()] = &host.SourceAddress[i]
    }
    return children
}

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = host.Uptime
    leafs["is-exclude"] = host.IsExclude
    leafs["expiration-time"] = host.ExpirationTime
    leafs["source-count"] = host.SourceCount
    return leafs
}

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetBundleName() string { return "cisco_ios_xr" }

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetYangName() string { return "host" }

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) SetParent(parent types.Entity) { host.parent = parent }

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetParent() types.Entity { return host.parent }

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetParentYangName() string { return "explicit-group" }

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetYangName() string { return "address" }

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetParentYangName() string { return "host" }

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParentYangName() string { return "host" }

// Igmp_Active_Vrfs_Vrf_InterfaceTable
// IGMP Interface specific Table
type Igmp_Active_Vrfs_Vrf_InterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface.
    Interface []Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface
}

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetFilter() yfilter.YFilter { return interfaceTable.YFilter }

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) SetFilter(yf yfilter.YFilter) { interfaceTable.YFilter = yf }

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetSegmentPath() string {
    return "interface-table"
}

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaceTable.Interface {
            if interfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface{}
        interfaceTable.Interface = append(interfaceTable.Interface, child)
        return &interfaceTable.Interface[len(interfaceTable.Interface)-1]
    }
    return nil
}

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceTable.Interface {
        children[interfaceTable.Interface[i].GetSegmentPath()] = &interfaceTable.Interface[i]
    }
    return children
}

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetYangName() string { return "interface-table" }

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) SetParent(parent types.Entity) { interfaceTable.parent = parent }

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetParent() types.Entity { return interfaceTable.parent }

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface
// IGMP Interface
type Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetParentYangName() string { return "interface-table" }

// Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address
// IP address
type Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjusts.YFilter }

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjusts.YFilter = yf }

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetGoName(yname string) string {
    if yname == "interface-unicast-qos-adjust" { return "InterfaceUnicastQosAdjust" }
    return ""
}

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetSegmentPath() string {
    return "interface-unicast-qos-adjusts"
}

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-unicast-qos-adjust" {
        for _, c := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
            if interfaceUnicastQosAdjusts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust{}
        interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust = append(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, child)
        return &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[len(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        children[interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i].GetSegmentPath()] = &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]
    }
    return children
}

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetYangName() string { return "interface-unicast-qos-adjusts" }

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) SetParent(parent types.Entity) { interfaceUnicastQosAdjusts.parent = parent }

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetParent() types.Entity { return interfaceUnicastQosAdjusts.parent }

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjust.YFilter }

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjust.YFilter = yf }

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-access" { return "IsVirtualAccess" }
    if yname == "rate" { return "Rate" }
    if yname == "rate-increments" { return "RateIncrements" }
    if yname == "rate-decrements" { return "RateDecrements" }
    if yname == "update" { return "Update" }
    return ""
}

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetSegmentPath() string {
    return "interface-unicast-qos-adjust" + "[interface-name='" + fmt.Sprintf("%v", interfaceUnicastQosAdjust.InterfaceName) + "']"
}

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update" {
        for _, c := range interfaceUnicastQosAdjust.Update {
            if interfaceUnicastQosAdjust.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update{}
        interfaceUnicastQosAdjust.Update = append(interfaceUnicastQosAdjust.Update, child)
        return &interfaceUnicastQosAdjust.Update[len(interfaceUnicastQosAdjust.Update)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjust.Update {
        children[interfaceUnicastQosAdjust.Update[i].GetSegmentPath()] = &interfaceUnicastQosAdjust.Update[i]
    }
    return children
}

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceUnicastQosAdjust.InterfaceName
    leafs["is-virtual-access"] = interfaceUnicastQosAdjust.IsVirtualAccess
    leafs["rate"] = interfaceUnicastQosAdjust.Rate
    leafs["rate-increments"] = interfaceUnicastQosAdjust.RateIncrements
    leafs["rate-decrements"] = interfaceUnicastQosAdjust.RateDecrements
    return leafs
}

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetYangName() string { return "interface-unicast-qos-adjust" }

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetParent(parent types.Entity) { interfaceUnicastQosAdjust.parent = parent }

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParent() types.Entity { return interfaceUnicastQosAdjust.parent }

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParentYangName() string { return "interface-unicast-qos-adjusts" }

// Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetFilter() yfilter.YFilter { return update.YFilter }

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetFilter(yf yfilter.YFilter) { update.YFilter = yf }

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetGoName(yname string) string {
    if yname == "is-add" { return "IsAdd" }
    if yname == "weight" { return "Weight" }
    if yname == "received-time" { return "ReceivedTime" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "group-address" { return "GroupAddress" }
    return ""
}

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetSegmentPath() string {
    return "update"
}

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &update.SourceAddress
    }
    if childYangName == "group-address" {
        return &update.GroupAddress
    }
    return nil
}

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &update.SourceAddress
    children["group-address"] = &update.GroupAddress
    return children
}

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-add"] = update.IsAdd
    leafs["weight"] = update.Weight
    leafs["received-time"] = update.ReceivedTime
    return leafs
}

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleName() string { return "cisco_ios_xr" }

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetYangName() string { return "update" }

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetParent(parent types.Entity) { update.parent = parent }

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParent() types.Entity { return update.parent }

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParentYangName() string { return "interface-unicast-qos-adjust" }

// Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParentYangName() string { return "update" }

// Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParentYangName() string { return "update" }

// Igmp_Active_Vrfs_Vrf_Ranges
// Range table
type Igmp_Active_Vrfs_Vrf_Ranges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Range information. The type is slice of Igmp_Active_Vrfs_Vrf_Ranges_Range.
    Range []Igmp_Active_Vrfs_Vrf_Ranges_Range
}

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetFilter() yfilter.YFilter { return ranges.YFilter }

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) SetFilter(yf yfilter.YFilter) { ranges.YFilter = yf }

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetGoName(yname string) string {
    if yname == "range" { return "Range" }
    return ""
}

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetSegmentPath() string {
    return "ranges"
}

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "range" {
        for _, c := range ranges.Range {
            if ranges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_Ranges_Range{}
        ranges.Range = append(ranges.Range, child)
        return &ranges.Range[len(ranges.Range)-1]
    }
    return nil
}

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ranges.Range {
        children[ranges.Range[i].GetSegmentPath()] = &ranges.Range[i]
    }
    return children
}

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetBundleName() string { return "cisco_ios_xr" }

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetYangName() string { return "ranges" }

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) SetParent(parent types.Entity) { ranges.parent = parent }

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetParent() types.Entity { return ranges.parent }

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_Ranges_Range
// Range information
type Igmp_Active_Vrfs_Vrf_Ranges_Range struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: -2147483648..2147483647.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr
}

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "group-mask" { return "GroupMask" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "protocol" { return "Protocol" }
    if yname == "is-stale" { return "IsStale" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetSegmentPath() string {
    return "range"
}

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &self.GroupAddressXr
    }
    return nil
}

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &self.GroupAddressXr
    return children
}

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = self.GroupAddress
    leafs["group-mask"] = self.GroupMask
    leafs["prefix-length"] = self.PrefixLength
    leafs["protocol"] = self.Protocol
    leafs["is-stale"] = self.IsStale
    return leafs
}

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetYangName() string { return "range" }

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetParent() types.Entity { return self.parent }

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetParentYangName() string { return "ranges" }

// Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr
// Group address
type Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetParentYangName() string { return "range" }

// Igmp_Active_Vrfs_Vrf_IfrsInterfaces
// IGMP Interface specific
type Igmp_Active_Vrfs_Vrf_IfrsInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface.
    IfrsInterface []Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetFilter() yfilter.YFilter { return ifrsInterfaces.YFilter }

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) SetFilter(yf yfilter.YFilter) { ifrsInterfaces.YFilter = yf }

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetGoName(yname string) string {
    if yname == "ifrs-interface" { return "IfrsInterface" }
    return ""
}

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetSegmentPath() string {
    return "ifrs-interfaces"
}

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ifrs-interface" {
        for _, c := range ifrsInterfaces.IfrsInterface {
            if ifrsInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface{}
        ifrsInterfaces.IfrsInterface = append(ifrsInterfaces.IfrsInterface, child)
        return &ifrsInterfaces.IfrsInterface[len(ifrsInterfaces.IfrsInterface)-1]
    }
    return nil
}

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ifrsInterfaces.IfrsInterface {
        children[ifrsInterfaces.IfrsInterface[i].GetSegmentPath()] = &ifrsInterfaces.IfrsInterface[i]
    }
    return children
}

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetYangName() string { return "ifrs-interfaces" }

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) SetParent(parent types.Entity) { ifrsInterfaces.parent = parent }

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetParent() types.Entity { return ifrsInterfaces.parent }

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetFilter() yfilter.YFilter { return ifrsInterface.YFilter }

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) SetFilter(yf yfilter.YFilter) { ifrsInterface.YFilter = yf }

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "join-group-count" { return "JoinGroupCount" }
    if yname == "igmp-interface-entry" { return "IgmpInterfaceEntry" }
    return ""
}

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetSegmentPath() string {
    return "ifrs-interface" + "[interface-name='" + fmt.Sprintf("%v", ifrsInterface.InterfaceName) + "']"
}

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "igmp-interface-entry" {
        return &ifrsInterface.IgmpInterfaceEntry
    }
    return nil
}

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["igmp-interface-entry"] = &ifrsInterface.IgmpInterfaceEntry
    return children
}

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ifrsInterface.InterfaceName
    leafs["join-group-count"] = ifrsInterface.JoinGroupCount
    return leafs
}

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetYangName() string { return "ifrs-interface" }

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) SetParent(parent types.Entity) { ifrsInterface.parent = parent }

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetParent() types.Entity { return ifrsInterface.parent }

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetParentYangName() string { return "ifrs-interfaces" }

// Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetFilter() yfilter.YFilter { return igmpInterfaceEntry.YFilter }

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetFilter(yf yfilter.YFilter) { igmpInterfaceEntry.YFilter = yf }

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetSegmentPath() string {
    return "igmp-interface-entry"
}

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &igmpInterfaceEntry.Address
    }
    if childYangName == "querier-address" {
        return &igmpInterfaceEntry.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &igmpInterfaceEntry.SubscriberAddress
    }
    return nil
}

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &igmpInterfaceEntry.Address
    children["querier-address"] = &igmpInterfaceEntry.QuerierAddress
    children["subscriber-address"] = &igmpInterfaceEntry.SubscriberAddress
    return children
}

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = igmpInterfaceEntry.InterfaceNameXr
    leafs["state"] = igmpInterfaceEntry.State
    leafs["prefix-length"] = igmpInterfaceEntry.PrefixLength
    leafs["is-interface-up"] = igmpInterfaceEntry.IsInterfaceUp
    leafs["is-ip-enabled"] = igmpInterfaceEntry.IsIpEnabled
    leafs["is-router-enabled"] = igmpInterfaceEntry.IsRouterEnabled
    leafs["igmp-version"] = igmpInterfaceEntry.IgmpVersion
    leafs["host-version"] = igmpInterfaceEntry.HostVersion
    leafs["query-interval"] = igmpInterfaceEntry.QueryInterval
    leafs["query-timeout"] = igmpInterfaceEntry.QueryTimeout
    leafs["query-maximum-response-time"] = igmpInterfaceEntry.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = igmpInterfaceEntry.LastMemberQueryInterval
    leafs["group-joins"] = igmpInterfaceEntry.GroupJoins
    leafs["group-leaves"] = igmpInterfaceEntry.GroupLeaves
    leafs["is-querier"] = igmpInterfaceEntry.IsQuerier
    leafs["total-active-groups"] = igmpInterfaceEntry.TotalActiveGroups
    leafs["robustness"] = igmpInterfaceEntry.Robustness
    leafs["proxy-interface"] = igmpInterfaceEntry.ProxyInterface
    leafs["querier-uptime"] = igmpInterfaceEntry.QuerierUptime
    leafs["las-ll-registration-count"] = igmpInterfaceEntry.LasLlRegistrationCount
    leafs["las-get-address-count"] = igmpInterfaceEntry.LasGetAddressCount
    leafs["las-update-count"] = igmpInterfaceEntry.LasUpdateCount
    leafs["las-ll-remove-update-count"] = igmpInterfaceEntry.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = igmpInterfaceEntry.LasLlAddUpdateCount
    leafs["las-null-update-count"] = igmpInterfaceEntry.LasNullUpdateCount
    leafs["las-unregistration-count"] = igmpInterfaceEntry.LasUnregistrationCount
    leafs["is-las-request"] = igmpInterfaceEntry.IsLasRequest
    leafs["is-las-registered"] = igmpInterfaceEntry.IsLasRegistered
    leafs["vrf-id"] = igmpInterfaceEntry.VrfId
    leafs["mte-vrf-id"] = igmpInterfaceEntry.MteVrfId
    leafs["location"] = igmpInterfaceEntry.Location
    leafs["mtu"] = igmpInterfaceEntry.Mtu
    leafs["vrf-state"] = igmpInterfaceEntry.VrfState
    leafs["is-configurationverify"] = igmpInterfaceEntry.IsConfigurationverify
    leafs["configurationvrf-set"] = igmpInterfaceEntry.ConfigurationvrfSet
    leafs["configurationvrf-error"] = igmpInterfaceEntry.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = igmpInterfaceEntry.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = igmpInterfaceEntry.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = igmpInterfaceEntry.IsImStateRegistered
    leafs["is-subscriber"] = igmpInterfaceEntry.IsSubscriber
    leafs["subscriber-mode"] = igmpInterfaceEntry.SubscriberMode
    leafs["is-identity-present"] = igmpInterfaceEntry.IsIdentityPresent
    leafs["subscriber-id"] = igmpInterfaceEntry.SubscriberId
    leafs["parent-ifhandle"] = igmpInterfaceEntry.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = igmpInterfaceEntry.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = igmpInterfaceEntry.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = igmpInterfaceEntry.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = igmpInterfaceEntry.MteTupleCount
    return leafs
}

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleName() string { return "cisco_ios_xr" }

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetYangName() string { return "igmp-interface-entry" }

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetParent(parent types.Entity) { igmpInterfaceEntry.parent = parent }

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParent() types.Entity { return igmpInterfaceEntry.parent }

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParentYangName() string { return "ifrs-interface" }

// Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetYangName() string { return "address" }

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParentYangName() string { return "igmp-interface-entry" }

// Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Igmp_Active_Vrfs_Vrf_TrafficCounters
// IGMP Message Traffic Counters
type Igmp_Active_Vrfs_Vrf_TrafficCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetFilter() yfilter.YFilter { return trafficCounters.YFilter }

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) SetFilter(yf yfilter.YFilter) { trafficCounters.YFilter = yf }

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetGoName(yname string) string {
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "packets-in" { return "PacketsIn" }
    if yname == "packets-out" { return "PacketsOut" }
    if yname == "format-errors" { return "FormatErrors" }
    if yname == "packet-manager-input-errors" { return "PacketManagerInputErrors" }
    if yname == "packet-manager-output-errors" { return "PacketManagerOutputErrors" }
    if yname == "checksum-errors" { return "ChecksumErrors" }
    if yname == "receive-socket-errors" { return "ReceiveSocketErrors" }
    if yname == "socket-errors" { return "SocketErrors" }
    if yname == "bad-scope-errors" { return "BadScopeErrors" }
    if yname == "auxillary-data-length-errors" { return "AuxillaryDataLengthErrors" }
    if yname == "invalid-source-address-errors" { return "InvalidSourceAddressErrors" }
    if yname == "no-socket-connection" { return "NoSocketConnection" }
    if yname == "miscellaneous-errors" { return "MiscellaneousErrors" }
    if yname == "input-queries" { return "InputQueries" }
    if yname == "input-reports" { return "InputReports" }
    if yname == "input-leaves" { return "InputLeaves" }
    if yname == "input-mtrace" { return "InputMtrace" }
    if yname == "input-dvmrp" { return "InputDvmrp" }
    if yname == "input-pim" { return "InputPim" }
    if yname == "output-queries" { return "OutputQueries" }
    if yname == "output-reports" { return "OutputReports" }
    if yname == "output-leaves" { return "OutputLeaves" }
    if yname == "output-mtrace" { return "OutputMtrace" }
    if yname == "output-dvmrp" { return "OutputDvmrp" }
    if yname == "output-pim" { return "OutputPim" }
    if yname == "get-packet-failure" { return "GetPacketFailure" }
    if yname == "output-no-parent-interface-handle" { return "OutputNoParentInterfaceHandle" }
    if yname == "input-no-idb" { return "InputNoIdb" }
    if yname == "input-no-vrf-in-idb" { return "InputNoVrfInIdb" }
    if yname == "input-disabled-idb" { return "InputDisabledIdb" }
    if yname == "input-martian-address" { return "InputMartianAddress" }
    if yname == "input-no-assigned-vrf-id" { return "InputNoAssignedVrfId" }
    if yname == "input-no-vrf-mtrace" { return "InputNoVrfMtrace" }
    if yname == "input-no-platform-support-mtrace" { return "InputNoPlatformSupportMtrace" }
    return ""
}

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetSegmentPath() string {
    return "traffic-counters"
}

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["elapsed-time"] = trafficCounters.ElapsedTime
    leafs["packets-in"] = trafficCounters.PacketsIn
    leafs["packets-out"] = trafficCounters.PacketsOut
    leafs["format-errors"] = trafficCounters.FormatErrors
    leafs["packet-manager-input-errors"] = trafficCounters.PacketManagerInputErrors
    leafs["packet-manager-output-errors"] = trafficCounters.PacketManagerOutputErrors
    leafs["checksum-errors"] = trafficCounters.ChecksumErrors
    leafs["receive-socket-errors"] = trafficCounters.ReceiveSocketErrors
    leafs["socket-errors"] = trafficCounters.SocketErrors
    leafs["bad-scope-errors"] = trafficCounters.BadScopeErrors
    leafs["auxillary-data-length-errors"] = trafficCounters.AuxillaryDataLengthErrors
    leafs["invalid-source-address-errors"] = trafficCounters.InvalidSourceAddressErrors
    leafs["no-socket-connection"] = trafficCounters.NoSocketConnection
    leafs["miscellaneous-errors"] = trafficCounters.MiscellaneousErrors
    leafs["input-queries"] = trafficCounters.InputQueries
    leafs["input-reports"] = trafficCounters.InputReports
    leafs["input-leaves"] = trafficCounters.InputLeaves
    leafs["input-mtrace"] = trafficCounters.InputMtrace
    leafs["input-dvmrp"] = trafficCounters.InputDvmrp
    leafs["input-pim"] = trafficCounters.InputPim
    leafs["output-queries"] = trafficCounters.OutputQueries
    leafs["output-reports"] = trafficCounters.OutputReports
    leafs["output-leaves"] = trafficCounters.OutputLeaves
    leafs["output-mtrace"] = trafficCounters.OutputMtrace
    leafs["output-dvmrp"] = trafficCounters.OutputDvmrp
    leafs["output-pim"] = trafficCounters.OutputPim
    leafs["get-packet-failure"] = trafficCounters.GetPacketFailure
    leafs["output-no-parent-interface-handle"] = trafficCounters.OutputNoParentInterfaceHandle
    leafs["input-no-idb"] = trafficCounters.InputNoIdb
    leafs["input-no-vrf-in-idb"] = trafficCounters.InputNoVrfInIdb
    leafs["input-disabled-idb"] = trafficCounters.InputDisabledIdb
    leafs["input-martian-address"] = trafficCounters.InputMartianAddress
    leafs["input-no-assigned-vrf-id"] = trafficCounters.InputNoAssignedVrfId
    leafs["input-no-vrf-mtrace"] = trafficCounters.InputNoVrfMtrace
    leafs["input-no-platform-support-mtrace"] = trafficCounters.InputNoPlatformSupportMtrace
    return leafs
}

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetBundleName() string { return "cisco_ios_xr" }

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetYangName() string { return "traffic-counters" }

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) SetParent(parent types.Entity) { trafficCounters.parent = parent }

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetParent() types.Entity { return trafficCounters.parent }

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_Groups
// IGMP Group Database Table
type Igmp_Active_Vrfs_Vrf_Groups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Igmp_Active_Vrfs_Vrf_Groups_Group.
    Group []Igmp_Active_Vrfs_Vrf_Groups_Group
}

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetFilter() yfilter.YFilter { return groups.YFilter }

func (groups *Igmp_Active_Vrfs_Vrf_Groups) SetFilter(yf yfilter.YFilter) { groups.YFilter = yf }

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetGoName(yname string) string {
    if yname == "group" { return "Group" }
    return ""
}

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetSegmentPath() string {
    return "groups"
}

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group" {
        for _, c := range groups.Group {
            if groups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_Groups_Group{}
        groups.Group = append(groups.Group, child)
        return &groups.Group[len(groups.Group)-1]
    }
    return nil
}

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range groups.Group {
        children[groups.Group[i].GetSegmentPath()] = &groups.Group[i]
    }
    return children
}

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetBundleName() string { return "cisco_ios_xr" }

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetYangName() string { return "groups" }

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groups *Igmp_Active_Vrfs_Vrf_Groups) SetParent(parent types.Entity) { groups.parent = parent }

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetParent() types.Entity { return groups.parent }

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_Groups_Group
// IGMP Group Entry Information
type Igmp_Active_Vrfs_Vrf_Groups_Group struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress
}

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetFilter() yfilter.YFilter { return group.YFilter }

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) SetFilter(yf yfilter.YFilter) { group.YFilter = yf }

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetSegmentPath() string {
    return "group"
}

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &group.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &group.LastReporter
    }
    if childYangName == "source-address" {
        return &group.SourceAddress
    }
    return nil
}

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &group.GroupAddressXr
    children["last-reporter"] = &group.LastReporter
    children["source-address"] = &group.SourceAddress
    return children
}

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = group.GroupAddress
    leafs["interface-name"] = group.InterfaceName
    leafs["interface-name-xr"] = group.InterfaceNameXr
    leafs["uptime"] = group.Uptime
    leafs["expiration-time"] = group.ExpirationTime
    leafs["explicit-tracking-enabled"] = group.ExplicitTrackingEnabled
    leafs["is-self-join"] = group.IsSelfJoin
    leafs["row-status"] = group.RowStatus
    leafs["is-low-memory"] = group.IsLowMemory
    leafs["router-filter-mode"] = group.RouterFilterMode
    leafs["older-host-version1-timer"] = group.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = group.OlderHostVersion2Timer
    leafs["is-added"] = group.IsAdded
    leafs["is-suppressed"] = group.IsSuppressed
    return leafs
}

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetBundleName() string { return "cisco_ios_xr" }

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetYangName() string { return "group" }

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) SetParent(parent types.Entity) { group.parent = parent }

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetParent() types.Entity { return group.parent }

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetParentYangName() string { return "groups" }

// Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr
// Group Address
type Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetParentYangName() string { return "group" }

// Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter
// Last reporter address
type Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetParentYangName() string { return "group" }

// Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress
// Source Address
type Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetParentYangName() string { return "group" }

// Igmp_Active_Vrfs_Vrf_GroupSummary
// IGMP Groups Summary
type Igmp_Active_Vrfs_Vrf_GroupSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetFilter() yfilter.YFilter { return groupSummary.YFilter }

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) SetFilter(yf yfilter.YFilter) { groupSummary.YFilter = yf }

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetGoName(yname string) string {
    if yname == "groutes" { return "Groutes" }
    if yname == "sg-routes" { return "SgRoutes" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    return ""
}

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetSegmentPath() string {
    return "group-summary"
}

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["groutes"] = groupSummary.Groutes
    leafs["sg-routes"] = groupSummary.SgRoutes
    leafs["group-count"] = groupSummary.GroupCount
    leafs["is-low-memory"] = groupSummary.IsLowMemory
    return leafs
}

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetBundleName() string { return "cisco_ios_xr" }

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetYangName() string { return "group-summary" }

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) SetParent(parent types.Entity) { groupSummary.parent = parent }

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetParent() types.Entity { return groupSummary.parent }

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetFilter() yfilter.YFilter { return ifrsInterfaceSummary.YFilter }

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) SetFilter(yf yfilter.YFilter) { ifrsInterfaceSummary.YFilter = yf }

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-count" { return "InterfaceCount" }
    if yname == "configuration-count" { return "ConfigurationCount" }
    return ""
}

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetSegmentPath() string {
    return "ifrs-interface-summary"
}

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-count"] = ifrsInterfaceSummary.InterfaceCount
    leafs["configuration-count"] = ifrsInterfaceSummary.ConfigurationCount
    return leafs
}

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetYangName() string { return "ifrs-interface-summary" }

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) SetParent(parent types.Entity) { ifrsInterfaceSummary.parent = parent }

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetParent() types.Entity { return ifrsInterfaceSummary.parent }

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable
// IGMP Global Interface 
type Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface.
    Interface []Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetFilter() yfilter.YFilter { return globalInterfaceTable.YFilter }

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) SetFilter(yf yfilter.YFilter) { globalInterfaceTable.YFilter = yf }

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetSegmentPath() string {
    return "global-interface-table"
}

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range globalInterfaceTable.Interface {
            if globalInterfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface{}
        globalInterfaceTable.Interface = append(globalInterfaceTable.Interface, child)
        return &globalInterfaceTable.Interface[len(globalInterfaceTable.Interface)-1]
    }
    return nil
}

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalInterfaceTable.Interface {
        children[globalInterfaceTable.Interface[i].GetSegmentPath()] = &globalInterfaceTable.Interface[i]
    }
    return children
}

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetYangName() string { return "global-interface-table" }

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) SetParent(parent types.Entity) { globalInterfaceTable.parent = parent }

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetParent() types.Entity { return globalInterfaceTable.parent }

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface
// IGMP Interface
type Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetParentYangName() string { return "global-interface-table" }

// Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address
// IP address
type Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Igmp_Active_Vrfs_Vrf_SsmMapDetails
// SSM Map Detail
type Igmp_Active_Vrfs_Vrf_SsmMapDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetFilter() yfilter.YFilter { return ssmMapDetails.YFilter }

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) SetFilter(yf yfilter.YFilter) { ssmMapDetails.YFilter = yf }

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetGoName(yname string) string {
    if yname == "ssm-map-detail" { return "SsmMapDetail" }
    return ""
}

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetSegmentPath() string {
    return "ssm-map-details"
}

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map-detail" {
        for _, c := range ssmMapDetails.SsmMapDetail {
            if ssmMapDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail{}
        ssmMapDetails.SsmMapDetail = append(ssmMapDetails.SsmMapDetail, child)
        return &ssmMapDetails.SsmMapDetail[len(ssmMapDetails.SsmMapDetail)-1]
    }
    return nil
}

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMapDetails.SsmMapDetail {
        children[ssmMapDetails.SsmMapDetail[i].GetSegmentPath()] = &ssmMapDetails.SsmMapDetail[i]
    }
    return children
}

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetYangName() string { return "ssm-map-details" }

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) SetParent(parent types.Entity) { ssmMapDetails.parent = parent }

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetParent() types.Entity { return ssmMapDetails.parent }

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources.
    Sources []Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetFilter() yfilter.YFilter { return ssmMapDetail.YFilter }

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) SetFilter(yf yfilter.YFilter) { ssmMapDetail.YFilter = yf }

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "response-pending" { return "ResponsePending" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "map-info" { return "MapInfo" }
    if yname == "sources" { return "Sources" }
    return ""
}

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetSegmentPath() string {
    return "ssm-map-detail"
}

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "map-info" {
        return &ssmMapDetail.MapInfo
    }
    if childYangName == "sources" {
        for _, c := range ssmMapDetail.Sources {
            if ssmMapDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources{}
        ssmMapDetail.Sources = append(ssmMapDetail.Sources, child)
        return &ssmMapDetail.Sources[len(ssmMapDetail.Sources)-1]
    }
    return nil
}

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["map-info"] = &ssmMapDetail.MapInfo
    for i := range ssmMapDetail.Sources {
        children[ssmMapDetail.Sources[i].GetSegmentPath()] = &ssmMapDetail.Sources[i]
    }
    return children
}

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMapDetail.SsmMapType
    leafs["group-address"] = ssmMapDetail.GroupAddress
    leafs["expiration-time"] = ssmMapDetail.ExpirationTime
    leafs["response-pending"] = ssmMapDetail.ResponsePending
    leafs["query-interval"] = ssmMapDetail.QueryInterval
    leafs["elapsed-time"] = ssmMapDetail.ElapsedTime
    return leafs
}

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetYangName() string { return "ssm-map-detail" }

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) SetParent(parent types.Entity) { ssmMapDetail.parent = parent }

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetParent() types.Entity { return ssmMapDetail.parent }

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetParentYangName() string { return "ssm-map-details" }

// Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetFilter() yfilter.YFilter { return mapInfo.YFilter }

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) SetFilter(yf yfilter.YFilter) { mapInfo.YFilter = yf }

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetGoName(yname string) string {
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetSegmentPath() string {
    return "map-info"
}

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &mapInfo.GroupAddressXr
    }
    return nil
}

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &mapInfo.GroupAddressXr
    return children
}

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["map-type"] = mapInfo.MapType
    leafs["source-counts"] = mapInfo.SourceCounts
    return leafs
}

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleName() string { return "cisco_ios_xr" }

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetYangName() string { return "map-info" }

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) SetParent(parent types.Entity) { mapInfo.parent = parent }

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetParent() types.Entity { return mapInfo.parent }

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetParentYangName() string { return "ssm-map-detail" }

// Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParentYangName() string { return "map-info" }

// Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetFilter() yfilter.YFilter { return sources.YFilter }

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) SetFilter(yf yfilter.YFilter) { sources.YFilter = yf }

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetSegmentPath() string {
    return "sources"
}

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sources.AfName
    leafs["ipv4-address"] = sources.Ipv4Address
    leafs["ipv6-address"] = sources.Ipv6Address
    return leafs
}

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetBundleName() string { return "cisco_ios_xr" }

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetYangName() string { return "sources" }

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) SetParent(parent types.Entity) { sources.parent = parent }

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetParent() types.Entity { return sources.parent }

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetParentYangName() string { return "ssm-map-detail" }

// Igmp_Active_Vrfs_Vrf_InterfaceStateOffs
// IGMP Interface state off
type Igmp_Active_Vrfs_Vrf_InterfaceStateOffs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetFilter() yfilter.YFilter { return interfaceStateOffs.YFilter }

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) SetFilter(yf yfilter.YFilter) { interfaceStateOffs.YFilter = yf }

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetGoName(yname string) string {
    if yname == "interface-state-off" { return "InterfaceStateOff" }
    return ""
}

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetSegmentPath() string {
    return "interface-state-offs"
}

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-off" {
        for _, c := range interfaceStateOffs.InterfaceStateOff {
            if interfaceStateOffs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff{}
        interfaceStateOffs.InterfaceStateOff = append(interfaceStateOffs.InterfaceStateOff, child)
        return &interfaceStateOffs.InterfaceStateOff[len(interfaceStateOffs.InterfaceStateOff)-1]
    }
    return nil
}

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOffs.InterfaceStateOff {
        children[interfaceStateOffs.InterfaceStateOff[i].GetSegmentPath()] = &interfaceStateOffs.InterfaceStateOff[i]
    }
    return children
}

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetYangName() string { return "interface-state-offs" }

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) SetParent(parent types.Entity) { interfaceStateOffs.parent = parent }

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetParent() types.Entity { return interfaceStateOffs.parent }

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetParentYangName() string { return "vrf" }

// Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetFilter() yfilter.YFilter { return interfaceStateOff.YFilter }

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) SetFilter(yf yfilter.YFilter) { interfaceStateOff.YFilter = yf }

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetSegmentPath() string {
    return "interface-state-off" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOff.InterfaceName) + "']"
}

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOff.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOff.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOff.SubscriberAddress
    }
    return nil
}

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOff.Address
    children["querier-address"] = &interfaceStateOff.QuerierAddress
    children["subscriber-address"] = &interfaceStateOff.SubscriberAddress
    return children
}

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOff.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOff.InterfaceNameXr
    leafs["state"] = interfaceStateOff.State
    leafs["prefix-length"] = interfaceStateOff.PrefixLength
    leafs["is-interface-up"] = interfaceStateOff.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOff.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOff.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOff.IgmpVersion
    leafs["host-version"] = interfaceStateOff.HostVersion
    leafs["query-interval"] = interfaceStateOff.QueryInterval
    leafs["query-timeout"] = interfaceStateOff.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOff.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOff.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOff.GroupJoins
    leafs["group-leaves"] = interfaceStateOff.GroupLeaves
    leafs["is-querier"] = interfaceStateOff.IsQuerier
    leafs["total-active-groups"] = interfaceStateOff.TotalActiveGroups
    leafs["robustness"] = interfaceStateOff.Robustness
    leafs["proxy-interface"] = interfaceStateOff.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOff.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOff.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOff.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOff.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOff.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOff.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOff.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOff.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOff.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOff.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOff.VrfId
    leafs["mte-vrf-id"] = interfaceStateOff.MteVrfId
    leafs["location"] = interfaceStateOff.Location
    leafs["mtu"] = interfaceStateOff.Mtu
    leafs["vrf-state"] = interfaceStateOff.VrfState
    leafs["is-configurationverify"] = interfaceStateOff.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOff.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOff.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOff.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOff.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOff.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOff.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOff.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOff.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOff.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOff.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOff.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOff.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOff.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOff.MteTupleCount
    return leafs
}

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetYangName() string { return "interface-state-off" }

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) SetParent(parent types.Entity) { interfaceStateOff.parent = parent }

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetParent() types.Entity { return interfaceStateOff.parent }

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetParentYangName() string { return "interface-state-offs" }

// Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetYangName() string { return "address" }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetParentYangName() string { return "interface-state-off" }

// Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParentYangName() string { return "interface-state-off" }

// Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParentYangName() string { return "interface-state-off" }

// Igmp_Active_Process
// Process
type Igmp_Active_Process struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MRIB RouteDB Expiry Information.
    AmtSummary Igmp_Active_Process_AmtSummary

    // NSR Information.
    Nsr Igmp_Active_Process_Nsr

    // Table containing AMT Gateway DataBase information.
    AmtGatewaies Igmp_Active_Process_AmtGatewaies

    // IGMP Unicast-Qos-Adjust Statistics.
    UnicastQosAdjustStats Igmp_Active_Process_UnicastQosAdjustStats

    // IGMP BVI Stats.
    BviStatistics Igmp_Active_Process_BviStatistics

    // NSF Information.
    Nsf Igmp_Active_Process_Nsf
}

func (process *Igmp_Active_Process) GetFilter() yfilter.YFilter { return process.YFilter }

func (process *Igmp_Active_Process) SetFilter(yf yfilter.YFilter) { process.YFilter = yf }

func (process *Igmp_Active_Process) GetGoName(yname string) string {
    if yname == "amt-summary" { return "AmtSummary" }
    if yname == "nsr" { return "Nsr" }
    if yname == "amt-gatewaies" { return "AmtGatewaies" }
    if yname == "unicast-qos-adjust-stats" { return "UnicastQosAdjustStats" }
    if yname == "bvi-statistics" { return "BviStatistics" }
    if yname == "nsf" { return "Nsf" }
    return ""
}

func (process *Igmp_Active_Process) GetSegmentPath() string {
    return "process"
}

func (process *Igmp_Active_Process) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "amt-summary" {
        return &process.AmtSummary
    }
    if childYangName == "nsr" {
        return &process.Nsr
    }
    if childYangName == "amt-gatewaies" {
        return &process.AmtGatewaies
    }
    if childYangName == "unicast-qos-adjust-stats" {
        return &process.UnicastQosAdjustStats
    }
    if childYangName == "bvi-statistics" {
        return &process.BviStatistics
    }
    if childYangName == "nsf" {
        return &process.Nsf
    }
    return nil
}

func (process *Igmp_Active_Process) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["amt-summary"] = &process.AmtSummary
    children["nsr"] = &process.Nsr
    children["amt-gatewaies"] = &process.AmtGatewaies
    children["unicast-qos-adjust-stats"] = &process.UnicastQosAdjustStats
    children["bvi-statistics"] = &process.BviStatistics
    children["nsf"] = &process.Nsf
    return children
}

func (process *Igmp_Active_Process) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (process *Igmp_Active_Process) GetBundleName() string { return "cisco_ios_xr" }

func (process *Igmp_Active_Process) GetYangName() string { return "process" }

func (process *Igmp_Active_Process) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (process *Igmp_Active_Process) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (process *Igmp_Active_Process) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (process *Igmp_Active_Process) SetParent(parent types.Entity) { process.parent = parent }

func (process *Igmp_Active_Process) GetParent() types.Entity { return process.parent }

func (process *Igmp_Active_Process) GetParentYangName() string { return "active" }

// Igmp_Active_Process_AmtSummary
// MRIB RouteDB Expiry Information
type Igmp_Active_Process_AmtSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Robustness variable. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AnycastPrefix interface{}

    // Advertize AMT prefix length. The type is interface{} with range:
    // 0..4294967295.
    PrefixLength interface{}

    // Advertaisment for AMT Relay address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RelayAddress interface{}

    // AMT Tunnel MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Type Of Service value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Tos interface{}

    // Time To Live value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Ttl interface{}

    // AMT Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Number of AMT Gateway. The type is interface{} with range: 0..4294967295.
    GatewayCount interface{}

    // Maximum Gateway allowed. The type is interface{} with range: 0..4294967295.
    MaxGateway interface{}

    // AMT Tunnel Count. The type is interface{} with range: 0..4294967295.
    TunnelCount interface{}

    // AMT Tunnel configured Maximum. The type is interface{} with range:
    // 0..4294967295.
    TunnelConfiguredMaximum interface{}

    // ACL configured under AMT. The type is bool.
    IsAclConfigured interface{}

    // AMT Gateway Simulation. The type is bool.
    IsGatewaySimulation interface{}

    // AMT Out Of Resource. The type is bool.
    IsOuOfResource interface{}
}

func (amtSummary *Igmp_Active_Process_AmtSummary) GetFilter() yfilter.YFilter { return amtSummary.YFilter }

func (amtSummary *Igmp_Active_Process_AmtSummary) SetFilter(yf yfilter.YFilter) { amtSummary.YFilter = yf }

func (amtSummary *Igmp_Active_Process_AmtSummary) GetGoName(yname string) string {
    if yname == "anycast-prefix" { return "AnycastPrefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "relay-address" { return "RelayAddress" }
    if yname == "mtu" { return "Mtu" }
    if yname == "tos" { return "Tos" }
    if yname == "ttl" { return "Ttl" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "gateway-count" { return "GatewayCount" }
    if yname == "max-gateway" { return "MaxGateway" }
    if yname == "tunnel-count" { return "TunnelCount" }
    if yname == "tunnel-configured-maximum" { return "TunnelConfiguredMaximum" }
    if yname == "is-acl-configured" { return "IsAclConfigured" }
    if yname == "is-gateway-simulation" { return "IsGatewaySimulation" }
    if yname == "is-ou-of-resource" { return "IsOuOfResource" }
    return ""
}

func (amtSummary *Igmp_Active_Process_AmtSummary) GetSegmentPath() string {
    return "amt-summary"
}

func (amtSummary *Igmp_Active_Process_AmtSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (amtSummary *Igmp_Active_Process_AmtSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (amtSummary *Igmp_Active_Process_AmtSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["anycast-prefix"] = amtSummary.AnycastPrefix
    leafs["prefix-length"] = amtSummary.PrefixLength
    leafs["relay-address"] = amtSummary.RelayAddress
    leafs["mtu"] = amtSummary.Mtu
    leafs["tos"] = amtSummary.Tos
    leafs["ttl"] = amtSummary.Ttl
    leafs["query-interval"] = amtSummary.QueryInterval
    leafs["gateway-count"] = amtSummary.GatewayCount
    leafs["max-gateway"] = amtSummary.MaxGateway
    leafs["tunnel-count"] = amtSummary.TunnelCount
    leafs["tunnel-configured-maximum"] = amtSummary.TunnelConfiguredMaximum
    leafs["is-acl-configured"] = amtSummary.IsAclConfigured
    leafs["is-gateway-simulation"] = amtSummary.IsGatewaySimulation
    leafs["is-ou-of-resource"] = amtSummary.IsOuOfResource
    return leafs
}

func (amtSummary *Igmp_Active_Process_AmtSummary) GetBundleName() string { return "cisco_ios_xr" }

func (amtSummary *Igmp_Active_Process_AmtSummary) GetYangName() string { return "amt-summary" }

func (amtSummary *Igmp_Active_Process_AmtSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (amtSummary *Igmp_Active_Process_AmtSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (amtSummary *Igmp_Active_Process_AmtSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (amtSummary *Igmp_Active_Process_AmtSummary) SetParent(parent types.Entity) { amtSummary.parent = parent }

func (amtSummary *Igmp_Active_Process_AmtSummary) GetParent() types.Entity { return amtSummary.parent }

func (amtSummary *Igmp_Active_Process_AmtSummary) GetParentYangName() string { return "process" }

// Igmp_Active_Process_Nsr
// NSR Information
type Igmp_Active_Process_Nsr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NSR state. The type is interface{} with range: 0..255.
    State interface{}

    // Partner process connected. The type is bool.
    PartnerProcConnected interface{}

    // Collaborators convergence done. The type is bool.
    CollabConvDone interface{}

    // RMF Notification done. The type is bool.
    RmfNotificationDone interface{}

    // Time when process came up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProc interface{}

    // Time when process connection went up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionUp interface{}

    // Time when process connection went down. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionDn interface{}

    // Time when RMF Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfReady interface{}

    // Time when RMF Not-Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfNotReady interface{}

    // No. of times process connection went up. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionUp interface{}

    // No. of times process connection went down. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionDn interface{}

    // No. of times RMF Ready notif was sent. The type is interface{} with range:
    // 0..4294967295.
    CountRmfReady interface{}

    // No. of times RMF Not Ready notif was sent. The type is interface{} with
    // range: 0..4294967295.
    CountRmfNotReady interface{}
}

func (nsr *Igmp_Active_Process_Nsr) GetFilter() yfilter.YFilter { return nsr.YFilter }

func (nsr *Igmp_Active_Process_Nsr) SetFilter(yf yfilter.YFilter) { nsr.YFilter = yf }

func (nsr *Igmp_Active_Process_Nsr) GetGoName(yname string) string {
    if yname == "state" { return "State" }
    if yname == "partner-proc-connected" { return "PartnerProcConnected" }
    if yname == "collab-conv-done" { return "CollabConvDone" }
    if yname == "rmf-notification-done" { return "RmfNotificationDone" }
    if yname == "last-proc" { return "LastProc" }
    if yname == "last-proc-connection-up" { return "LastProcConnectionUp" }
    if yname == "last-proc-connection-dn" { return "LastProcConnectionDn" }
    if yname == "last-rmf-ready" { return "LastRmfReady" }
    if yname == "last-rmf-not-ready" { return "LastRmfNotReady" }
    if yname == "count-proc-connection-up" { return "CountProcConnectionUp" }
    if yname == "count-proc-connection-dn" { return "CountProcConnectionDn" }
    if yname == "count-rmf-ready" { return "CountRmfReady" }
    if yname == "count-rmf-not-ready" { return "CountRmfNotReady" }
    return ""
}

func (nsr *Igmp_Active_Process_Nsr) GetSegmentPath() string {
    return "nsr"
}

func (nsr *Igmp_Active_Process_Nsr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsr *Igmp_Active_Process_Nsr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsr *Igmp_Active_Process_Nsr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state"] = nsr.State
    leafs["partner-proc-connected"] = nsr.PartnerProcConnected
    leafs["collab-conv-done"] = nsr.CollabConvDone
    leafs["rmf-notification-done"] = nsr.RmfNotificationDone
    leafs["last-proc"] = nsr.LastProc
    leafs["last-proc-connection-up"] = nsr.LastProcConnectionUp
    leafs["last-proc-connection-dn"] = nsr.LastProcConnectionDn
    leafs["last-rmf-ready"] = nsr.LastRmfReady
    leafs["last-rmf-not-ready"] = nsr.LastRmfNotReady
    leafs["count-proc-connection-up"] = nsr.CountProcConnectionUp
    leafs["count-proc-connection-dn"] = nsr.CountProcConnectionDn
    leafs["count-rmf-ready"] = nsr.CountRmfReady
    leafs["count-rmf-not-ready"] = nsr.CountRmfNotReady
    return leafs
}

func (nsr *Igmp_Active_Process_Nsr) GetBundleName() string { return "cisco_ios_xr" }

func (nsr *Igmp_Active_Process_Nsr) GetYangName() string { return "nsr" }

func (nsr *Igmp_Active_Process_Nsr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsr *Igmp_Active_Process_Nsr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsr *Igmp_Active_Process_Nsr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsr *Igmp_Active_Process_Nsr) SetParent(parent types.Entity) { nsr.parent = parent }

func (nsr *Igmp_Active_Process_Nsr) GetParent() types.Entity { return nsr.parent }

func (nsr *Igmp_Active_Process_Nsr) GetParentYangName() string { return "process" }

// Igmp_Active_Process_AmtGatewaies
// Table containing AMT Gateway DataBase
// information
type Igmp_Active_Process_AmtGatewaies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AMT Gateway DataBase information. The type is slice of
    // Igmp_Active_Process_AmtGatewaies_AmtGateway.
    AmtGateway []Igmp_Active_Process_AmtGatewaies_AmtGateway
}

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetFilter() yfilter.YFilter { return amtGatewaies.YFilter }

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) SetFilter(yf yfilter.YFilter) { amtGatewaies.YFilter = yf }

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetGoName(yname string) string {
    if yname == "amt-gateway" { return "AmtGateway" }
    return ""
}

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetSegmentPath() string {
    return "amt-gatewaies"
}

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "amt-gateway" {
        for _, c := range amtGatewaies.AmtGateway {
            if amtGatewaies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_Process_AmtGatewaies_AmtGateway{}
        amtGatewaies.AmtGateway = append(amtGatewaies.AmtGateway, child)
        return &amtGatewaies.AmtGateway[len(amtGatewaies.AmtGateway)-1]
    }
    return nil
}

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range amtGatewaies.AmtGateway {
        children[amtGatewaies.AmtGateway[i].GetSegmentPath()] = &amtGatewaies.AmtGateway[i]
    }
    return children
}

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetBundleName() string { return "cisco_ios_xr" }

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetYangName() string { return "amt-gatewaies" }

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) SetParent(parent types.Entity) { amtGatewaies.parent = parent }

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetParent() types.Entity { return amtGatewaies.parent }

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetParentYangName() string { return "process" }

// Igmp_Active_Process_AmtGatewaies_AmtGateway
// AMT Gateway DataBase information
type Igmp_Active_Process_AmtGatewaies_AmtGateway struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Gateway Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GatewayAddress interface{}

    // Port. The type is interface{} with range: -2147483648..2147483647.
    Port interface{}

    // GW. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Amtgw interface{}

    // Port. The type is interface{} with range: 0..4294967295.
    AmtPort interface{}

    // Len. The type is interface{} with range: 0..4294967295.
    KeyLen interface{}

    // AMT NH. The type is interface{} with range: 0..4294967295.
    Amtnh interface{}

    // Nonce. The type is interface{} with range: 0..4294967295.
    AmtNonce interface{}

    // IDB. The type is interface{} with range: 0..18446744073709551615.
    Idb interface{}

    // UpdIn. The type is interface{} with range: 0..4294967295.
    MemUpdIn interface{}

    // UpdOut. The type is interface{} with range: 0..4294967295.
    MemUpdOut interface{}
}

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetFilter() yfilter.YFilter { return amtGateway.YFilter }

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) SetFilter(yf yfilter.YFilter) { amtGateway.YFilter = yf }

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetGoName(yname string) string {
    if yname == "gateway-address" { return "GatewayAddress" }
    if yname == "port" { return "Port" }
    if yname == "amtgw" { return "Amtgw" }
    if yname == "amt-port" { return "AmtPort" }
    if yname == "key-len" { return "KeyLen" }
    if yname == "amtnh" { return "Amtnh" }
    if yname == "amt-nonce" { return "AmtNonce" }
    if yname == "idb" { return "Idb" }
    if yname == "mem-upd-in" { return "MemUpdIn" }
    if yname == "mem-upd-out" { return "MemUpdOut" }
    return ""
}

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetSegmentPath() string {
    return "amt-gateway"
}

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gateway-address"] = amtGateway.GatewayAddress
    leafs["port"] = amtGateway.Port
    leafs["amtgw"] = amtGateway.Amtgw
    leafs["amt-port"] = amtGateway.AmtPort
    leafs["key-len"] = amtGateway.KeyLen
    leafs["amtnh"] = amtGateway.Amtnh
    leafs["amt-nonce"] = amtGateway.AmtNonce
    leafs["idb"] = amtGateway.Idb
    leafs["mem-upd-in"] = amtGateway.MemUpdIn
    leafs["mem-upd-out"] = amtGateway.MemUpdOut
    return leafs
}

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetBundleName() string { return "cisco_ios_xr" }

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetYangName() string { return "amt-gateway" }

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) SetParent(parent types.Entity) { amtGateway.parent = parent }

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetParent() types.Entity { return amtGateway.parent }

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetParentYangName() string { return "amt-gatewaies" }

// Igmp_Active_Process_UnicastQosAdjustStats
// IGMP Unicast-Qos-Adjust Statistics
type Igmp_Active_Process_UnicastQosAdjustStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // I2Q Queue count. The type is interface{} with range: 0..65535.
    Queues interface{}

    // I2Q Rate Batch count. The type is interface{} with range: 0..65535.
    Batches interface{}

    // Add to batch count. The type is interface{} with range: 0..4294967295.
    AddToBatches interface{}

    // Delete to batch count. The type is interface{} with range: 0..4294967295.
    DeleteToBatches interface{}

    // Send Success count. The type is interface{} with range: 0..4294967295.
    SendSuccess interface{}

    // Number of Send errors in batch. The type is interface{} with range:
    // 0..4294967295.
    SendErrors interface{}

    // Send Error due to comms count. The type is interface{} with range:
    // 0..4294967295.
    SendCommErrors interface{}

    // Send Error due to partial issue count. The type is interface{} with range:
    // 0..4294967295.
    SendPartialErrors interface{}

    // Number of Resync request received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedResyncRequests interface{}

    // Number of bulks sent for last resync received. The type is interface{} with
    // range: 0..4294967295.
    SentResyncBulks interface{}

    // Is Resync request received. The type is bool.
    IsResyncReceived interface{}

    // Is Resync required. The type is bool.
    IsResyncRequired interface{}

    // Is Resync Start message sent. The type is bool.
    IsResyncStartSent interface{}

    // Is QOS Sweeped once . The type is bool.
    IsQosSSweeped interface{}

    // Time elapsed since Last mark and sweep in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastSweepTime interface{}

    // Time elapsed since Last download to QOS in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastDownloadTime interface{}
}

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetFilter() yfilter.YFilter { return unicastQosAdjustStats.YFilter }

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) SetFilter(yf yfilter.YFilter) { unicastQosAdjustStats.YFilter = yf }

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetGoName(yname string) string {
    if yname == "queues" { return "Queues" }
    if yname == "batches" { return "Batches" }
    if yname == "add-to-batches" { return "AddToBatches" }
    if yname == "delete-to-batches" { return "DeleteToBatches" }
    if yname == "send-success" { return "SendSuccess" }
    if yname == "send-errors" { return "SendErrors" }
    if yname == "send-comm-errors" { return "SendCommErrors" }
    if yname == "send-partial-errors" { return "SendPartialErrors" }
    if yname == "received-resync-requests" { return "ReceivedResyncRequests" }
    if yname == "sent-resync-bulks" { return "SentResyncBulks" }
    if yname == "is-resync-received" { return "IsResyncReceived" }
    if yname == "is-resync-required" { return "IsResyncRequired" }
    if yname == "is-resync-start-sent" { return "IsResyncStartSent" }
    if yname == "is-qos-s-sweeped" { return "IsQosSSweeped" }
    if yname == "last-sweep-time" { return "LastSweepTime" }
    if yname == "last-download-time" { return "LastDownloadTime" }
    return ""
}

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetSegmentPath() string {
    return "unicast-qos-adjust-stats"
}

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["queues"] = unicastQosAdjustStats.Queues
    leafs["batches"] = unicastQosAdjustStats.Batches
    leafs["add-to-batches"] = unicastQosAdjustStats.AddToBatches
    leafs["delete-to-batches"] = unicastQosAdjustStats.DeleteToBatches
    leafs["send-success"] = unicastQosAdjustStats.SendSuccess
    leafs["send-errors"] = unicastQosAdjustStats.SendErrors
    leafs["send-comm-errors"] = unicastQosAdjustStats.SendCommErrors
    leafs["send-partial-errors"] = unicastQosAdjustStats.SendPartialErrors
    leafs["received-resync-requests"] = unicastQosAdjustStats.ReceivedResyncRequests
    leafs["sent-resync-bulks"] = unicastQosAdjustStats.SentResyncBulks
    leafs["is-resync-received"] = unicastQosAdjustStats.IsResyncReceived
    leafs["is-resync-required"] = unicastQosAdjustStats.IsResyncRequired
    leafs["is-resync-start-sent"] = unicastQosAdjustStats.IsResyncStartSent
    leafs["is-qos-s-sweeped"] = unicastQosAdjustStats.IsQosSSweeped
    leafs["last-sweep-time"] = unicastQosAdjustStats.LastSweepTime
    leafs["last-download-time"] = unicastQosAdjustStats.LastDownloadTime
    return leafs
}

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetBundleName() string { return "cisco_ios_xr" }

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetYangName() string { return "unicast-qos-adjust-stats" }

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) SetParent(parent types.Entity) { unicastQosAdjustStats.parent = parent }

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetParent() types.Entity { return unicastQosAdjustStats.parent }

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetParentYangName() string { return "process" }

// Igmp_Active_Process_BviStatistics
// IGMP BVI Stats
type Igmp_Active_Process_BviStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of AIPC buffers received. The type is interface{} with range:
    // 0..4294967295.
    ReceiveBuffers interface{}

    // Number of AIPC buffers released. The type is interface{} with range:
    // 0..4294967295.
    ReleaseBuffers interface{}

    // Number of AIPC buffers send blocked. The type is interface{} with range:
    // 0..4294967295.
    SendBlocks interface{}

    // Number of AIPC buffers release failed. The type is interface{} with range:
    // 0..4294967295.
    ReleaseFailBuffers interface{}

    // Number of AIPC NULL buffer handles. The type is interface{} with range:
    // 0..4294967295.
    NullBufferHandles interface{}

    // Number of AIPC open notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOpenNotif interface{}

    // Number of AIPC close notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcCloseNotif interface{}

    // Number of AIPC error notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcErrorNotif interface{}

    // Number of AIPC LWM notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcLwmNotif interface{}

    // Number of AIPC input waiting notifications received. The type is
    // interface{} with range: 0..4294967295.
    RxIpcInputWaitNotif interface{}

    // Number of AIPC send status notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcSendStatusNotif interface{}

    // Number of AIPC publish notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcPublishNotif interface{}

    // Number of AIPC queue full notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcQFullNotif interface{}

    // Number of AIPC output notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOutputNotif interface{}

    // Number of AIPC connect notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcConnectNotif interface{}

    // Number of IGMP protocol messages received. The type is interface{} with
    // range: 0..4294967295.
    RxIgmpPacketSuccess interface{}

    // Number of IGMP Mrouter Add messages received. The type is interface{} with
    // range: 0..4294967295.
    RxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages received. The type is interface{}
    // with range: 0..4294967295.
    RxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    RxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Add messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    TxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages received. The type is interface{}
    // with range: 0..4294967295.
    RxUnknownMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages transmitted. The type is
    // interface{} with range: 0..4294967295.
    TxUnknownMrouterMsg interface{}

    // Number of AIPC transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TxBufferErrors interface{}

    // Number of AIPC buffers transmited. The type is interface{} with range:
    // 0..4294967295.
    TxBuffers interface{}

    // Number of IGMP protocol buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxProtocolBuffers interface{}

    // Number of IGMP Mrouter buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxMrouterBuffers interface{}

    // Number of IGMP Unknown buffers transmited. The type is interface{} with
    // range: 0..4294967295.
    TxUnknownBuffers interface{}

    // Number of WTX messages received. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgRecvd interface{}

    // Number of WTX messages sent. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgSent interface{}

    // Number of WTX messages sent to Protocol. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgProtoSent interface{}

    // Number of WTX messages dropped due to disconnect. The type is interface{}
    // with range: 0..4294967295.
    WtxMsgDropDc interface{}

    // Number of WTX messages dropped to memory. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgDropNomem interface{}

    // Number of WTX messages freed. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgFreed interface{}
}

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetFilter() yfilter.YFilter { return bviStatistics.YFilter }

func (bviStatistics *Igmp_Active_Process_BviStatistics) SetFilter(yf yfilter.YFilter) { bviStatistics.YFilter = yf }

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetGoName(yname string) string {
    if yname == "receive-buffers" { return "ReceiveBuffers" }
    if yname == "release-buffers" { return "ReleaseBuffers" }
    if yname == "send-blocks" { return "SendBlocks" }
    if yname == "release-fail-buffers" { return "ReleaseFailBuffers" }
    if yname == "null-buffer-handles" { return "NullBufferHandles" }
    if yname == "rx-ipc-open-notif" { return "RxIpcOpenNotif" }
    if yname == "rx-ipc-close-notif" { return "RxIpcCloseNotif" }
    if yname == "rx-ipc-error-notif" { return "RxIpcErrorNotif" }
    if yname == "rx-ipc-lwm-notif" { return "RxIpcLwmNotif" }
    if yname == "rx-ipc-input-wait-notif" { return "RxIpcInputWaitNotif" }
    if yname == "rx-ipc-send-status-notif" { return "RxIpcSendStatusNotif" }
    if yname == "rx-ipc-publish-notif" { return "RxIpcPublishNotif" }
    if yname == "rx-ipc-q-full-notif" { return "RxIpcQFullNotif" }
    if yname == "rx-ipc-output-notif" { return "RxIpcOutputNotif" }
    if yname == "rx-ipc-connect-notif" { return "RxIpcConnectNotif" }
    if yname == "rx-igmp-packet-success" { return "RxIgmpPacketSuccess" }
    if yname == "rx-add-mrouter-msg" { return "RxAddMrouterMsg" }
    if yname == "rx-delete-mrouter-msg" { return "RxDeleteMrouterMsg" }
    if yname == "rx-sweep-mrouter-msg" { return "RxSweepMrouterMsg" }
    if yname == "tx-add-mrouter-msg" { return "TxAddMrouterMsg" }
    if yname == "tx-delete-mrouter-msg" { return "TxDeleteMrouterMsg" }
    if yname == "tx-sweep-mrouter-msg" { return "TxSweepMrouterMsg" }
    if yname == "rx-unknown-mrouter-msg" { return "RxUnknownMrouterMsg" }
    if yname == "tx-unknown-mrouter-msg" { return "TxUnknownMrouterMsg" }
    if yname == "tx-buffer-errors" { return "TxBufferErrors" }
    if yname == "tx-buffers" { return "TxBuffers" }
    if yname == "tx-protocol-buffers" { return "TxProtocolBuffers" }
    if yname == "tx-mrouter-buffers" { return "TxMrouterBuffers" }
    if yname == "tx-unknown-buffers" { return "TxUnknownBuffers" }
    if yname == "wtx-msg-recvd" { return "WtxMsgRecvd" }
    if yname == "wtx-msg-sent" { return "WtxMsgSent" }
    if yname == "wtx-msg-proto-sent" { return "WtxMsgProtoSent" }
    if yname == "wtx-msg-drop-dc" { return "WtxMsgDropDc" }
    if yname == "wtx-msg-drop-nomem" { return "WtxMsgDropNomem" }
    if yname == "wtx-msg-freed" { return "WtxMsgFreed" }
    return ""
}

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetSegmentPath() string {
    return "bvi-statistics"
}

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["receive-buffers"] = bviStatistics.ReceiveBuffers
    leafs["release-buffers"] = bviStatistics.ReleaseBuffers
    leafs["send-blocks"] = bviStatistics.SendBlocks
    leafs["release-fail-buffers"] = bviStatistics.ReleaseFailBuffers
    leafs["null-buffer-handles"] = bviStatistics.NullBufferHandles
    leafs["rx-ipc-open-notif"] = bviStatistics.RxIpcOpenNotif
    leafs["rx-ipc-close-notif"] = bviStatistics.RxIpcCloseNotif
    leafs["rx-ipc-error-notif"] = bviStatistics.RxIpcErrorNotif
    leafs["rx-ipc-lwm-notif"] = bviStatistics.RxIpcLwmNotif
    leafs["rx-ipc-input-wait-notif"] = bviStatistics.RxIpcInputWaitNotif
    leafs["rx-ipc-send-status-notif"] = bviStatistics.RxIpcSendStatusNotif
    leafs["rx-ipc-publish-notif"] = bviStatistics.RxIpcPublishNotif
    leafs["rx-ipc-q-full-notif"] = bviStatistics.RxIpcQFullNotif
    leafs["rx-ipc-output-notif"] = bviStatistics.RxIpcOutputNotif
    leafs["rx-ipc-connect-notif"] = bviStatistics.RxIpcConnectNotif
    leafs["rx-igmp-packet-success"] = bviStatistics.RxIgmpPacketSuccess
    leafs["rx-add-mrouter-msg"] = bviStatistics.RxAddMrouterMsg
    leafs["rx-delete-mrouter-msg"] = bviStatistics.RxDeleteMrouterMsg
    leafs["rx-sweep-mrouter-msg"] = bviStatistics.RxSweepMrouterMsg
    leafs["tx-add-mrouter-msg"] = bviStatistics.TxAddMrouterMsg
    leafs["tx-delete-mrouter-msg"] = bviStatistics.TxDeleteMrouterMsg
    leafs["tx-sweep-mrouter-msg"] = bviStatistics.TxSweepMrouterMsg
    leafs["rx-unknown-mrouter-msg"] = bviStatistics.RxUnknownMrouterMsg
    leafs["tx-unknown-mrouter-msg"] = bviStatistics.TxUnknownMrouterMsg
    leafs["tx-buffer-errors"] = bviStatistics.TxBufferErrors
    leafs["tx-buffers"] = bviStatistics.TxBuffers
    leafs["tx-protocol-buffers"] = bviStatistics.TxProtocolBuffers
    leafs["tx-mrouter-buffers"] = bviStatistics.TxMrouterBuffers
    leafs["tx-unknown-buffers"] = bviStatistics.TxUnknownBuffers
    leafs["wtx-msg-recvd"] = bviStatistics.WtxMsgRecvd
    leafs["wtx-msg-sent"] = bviStatistics.WtxMsgSent
    leafs["wtx-msg-proto-sent"] = bviStatistics.WtxMsgProtoSent
    leafs["wtx-msg-drop-dc"] = bviStatistics.WtxMsgDropDc
    leafs["wtx-msg-drop-nomem"] = bviStatistics.WtxMsgDropNomem
    leafs["wtx-msg-freed"] = bviStatistics.WtxMsgFreed
    return leafs
}

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetYangName() string { return "bvi-statistics" }

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bviStatistics *Igmp_Active_Process_BviStatistics) SetParent(parent types.Entity) { bviStatistics.parent = parent }

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetParent() types.Entity { return bviStatistics.parent }

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetParentYangName() string { return "process" }

// Igmp_Active_Process_Nsf
// NSF Information
type Igmp_Active_Process_Nsf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is Multicast NSF active. The type is bool.
    IsMulticastNsfActive interface{}

    // Multicast NSF timeout in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeout interface{}

    // Multicast NSF time remaining in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeLeft interface{}

    // Respawn Count. The type is interface{} with range: 0..4294967295.
    RespawnCount interface{}

    // Last NSF time ON. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOn interface{}

    // Last NSF time off. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOff interface{}

    // Last NSF time ON in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOnMin interface{}

    // Last NSF time OFF in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOffMin interface{}

    // Last ICD Notif Recv. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastIcdNotifRecv interface{}

    // Last ICD Notif Recv in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastIcdNotifRecvMin interface{}
}

func (nsf *Igmp_Active_Process_Nsf) GetFilter() yfilter.YFilter { return nsf.YFilter }

func (nsf *Igmp_Active_Process_Nsf) SetFilter(yf yfilter.YFilter) { nsf.YFilter = yf }

func (nsf *Igmp_Active_Process_Nsf) GetGoName(yname string) string {
    if yname == "is-multicast-nsf-active" { return "IsMulticastNsfActive" }
    if yname == "multicast-nsf-timeout" { return "MulticastNsfTimeout" }
    if yname == "multicast-nsf-time-left" { return "MulticastNsfTimeLeft" }
    if yname == "respawn-count" { return "RespawnCount" }
    if yname == "last-nsf-on" { return "LastNsfOn" }
    if yname == "last-nsf-off" { return "LastNsfOff" }
    if yname == "last-nsf-on-min" { return "LastNsfOnMin" }
    if yname == "last-nsf-off-min" { return "LastNsfOffMin" }
    if yname == "last-icd-notif-recv" { return "LastIcdNotifRecv" }
    if yname == "last-icd-notif-recv-min" { return "LastIcdNotifRecvMin" }
    return ""
}

func (nsf *Igmp_Active_Process_Nsf) GetSegmentPath() string {
    return "nsf"
}

func (nsf *Igmp_Active_Process_Nsf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsf *Igmp_Active_Process_Nsf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsf *Igmp_Active_Process_Nsf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-multicast-nsf-active"] = nsf.IsMulticastNsfActive
    leafs["multicast-nsf-timeout"] = nsf.MulticastNsfTimeout
    leafs["multicast-nsf-time-left"] = nsf.MulticastNsfTimeLeft
    leafs["respawn-count"] = nsf.RespawnCount
    leafs["last-nsf-on"] = nsf.LastNsfOn
    leafs["last-nsf-off"] = nsf.LastNsfOff
    leafs["last-nsf-on-min"] = nsf.LastNsfOnMin
    leafs["last-nsf-off-min"] = nsf.LastNsfOffMin
    leafs["last-icd-notif-recv"] = nsf.LastIcdNotifRecv
    leafs["last-icd-notif-recv-min"] = nsf.LastIcdNotifRecvMin
    return leafs
}

func (nsf *Igmp_Active_Process_Nsf) GetBundleName() string { return "cisco_ios_xr" }

func (nsf *Igmp_Active_Process_Nsf) GetYangName() string { return "nsf" }

func (nsf *Igmp_Active_Process_Nsf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsf *Igmp_Active_Process_Nsf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsf *Igmp_Active_Process_Nsf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsf *Igmp_Active_Process_Nsf) SetParent(parent types.Entity) { nsf.parent = parent }

func (nsf *Igmp_Active_Process_Nsf) GetParent() types.Entity { return nsf.parent }

func (nsf *Igmp_Active_Process_Nsf) GetParentYangName() string { return "process" }

// Igmp_Active_DefaultContext
// Default Context
type Igmp_Active_DefaultContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Summary Information.
    Summary Igmp_Active_DefaultContext_Summary

    // IGMP Interface state on.
    InterfaceStateOns Igmp_Active_DefaultContext_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Igmp_Active_DefaultContext_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Igmp_Active_DefaultContext_NonActiveGroups

    // SSM Map Table.
    SsmMaps Igmp_Active_DefaultContext_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Igmp_Active_DefaultContext_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Igmp_Active_DefaultContext_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Igmp_Active_DefaultContext_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Igmp_Active_DefaultContext_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Igmp_Active_DefaultContext_TrafficCounters

    // IGMP Group Database Table.
    Groups Igmp_Active_DefaultContext_Groups

    // IGMP Groups Summary.
    GroupSummary Igmp_Active_DefaultContext_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Igmp_Active_DefaultContext_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Igmp_Active_DefaultContext_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Igmp_Active_DefaultContext_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Igmp_Active_DefaultContext_InterfaceStateOffs
}

func (defaultContext *Igmp_Active_DefaultContext) GetFilter() yfilter.YFilter { return defaultContext.YFilter }

func (defaultContext *Igmp_Active_DefaultContext) SetFilter(yf yfilter.YFilter) { defaultContext.YFilter = yf }

func (defaultContext *Igmp_Active_DefaultContext) GetGoName(yname string) string {
    if yname == "summary" { return "Summary" }
    if yname == "interface-state-ons" { return "InterfaceStateOns" }
    if yname == "detail-groups" { return "DetailGroups" }
    if yname == "non-active-groups" { return "NonActiveGroups" }
    if yname == "ssm-maps" { return "SsmMaps" }
    if yname == "explicit-groups" { return "ExplicitGroups" }
    if yname == "interface-table" { return "InterfaceTable" }
    if yname == "interface-unicast-qos-adjusts" { return "InterfaceUnicastQosAdjusts" }
    if yname == "ranges" { return "Ranges" }
    if yname == "ifrs-interfaces" { return "IfrsInterfaces" }
    if yname == "traffic-counters" { return "TrafficCounters" }
    if yname == "groups" { return "Groups" }
    if yname == "group-summary" { return "GroupSummary" }
    if yname == "ifrs-interface-summary" { return "IfrsInterfaceSummary" }
    if yname == "global-interface-table" { return "GlobalInterfaceTable" }
    if yname == "ssm-map-details" { return "SsmMapDetails" }
    if yname == "interface-state-offs" { return "InterfaceStateOffs" }
    return ""
}

func (defaultContext *Igmp_Active_DefaultContext) GetSegmentPath() string {
    return "default-context"
}

func (defaultContext *Igmp_Active_DefaultContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &defaultContext.Summary
    }
    if childYangName == "interface-state-ons" {
        return &defaultContext.InterfaceStateOns
    }
    if childYangName == "detail-groups" {
        return &defaultContext.DetailGroups
    }
    if childYangName == "non-active-groups" {
        return &defaultContext.NonActiveGroups
    }
    if childYangName == "ssm-maps" {
        return &defaultContext.SsmMaps
    }
    if childYangName == "explicit-groups" {
        return &defaultContext.ExplicitGroups
    }
    if childYangName == "interface-table" {
        return &defaultContext.InterfaceTable
    }
    if childYangName == "interface-unicast-qos-adjusts" {
        return &defaultContext.InterfaceUnicastQosAdjusts
    }
    if childYangName == "ranges" {
        return &defaultContext.Ranges
    }
    if childYangName == "ifrs-interfaces" {
        return &defaultContext.IfrsInterfaces
    }
    if childYangName == "traffic-counters" {
        return &defaultContext.TrafficCounters
    }
    if childYangName == "groups" {
        return &defaultContext.Groups
    }
    if childYangName == "group-summary" {
        return &defaultContext.GroupSummary
    }
    if childYangName == "ifrs-interface-summary" {
        return &defaultContext.IfrsInterfaceSummary
    }
    if childYangName == "global-interface-table" {
        return &defaultContext.GlobalInterfaceTable
    }
    if childYangName == "ssm-map-details" {
        return &defaultContext.SsmMapDetails
    }
    if childYangName == "interface-state-offs" {
        return &defaultContext.InterfaceStateOffs
    }
    return nil
}

func (defaultContext *Igmp_Active_DefaultContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &defaultContext.Summary
    children["interface-state-ons"] = &defaultContext.InterfaceStateOns
    children["detail-groups"] = &defaultContext.DetailGroups
    children["non-active-groups"] = &defaultContext.NonActiveGroups
    children["ssm-maps"] = &defaultContext.SsmMaps
    children["explicit-groups"] = &defaultContext.ExplicitGroups
    children["interface-table"] = &defaultContext.InterfaceTable
    children["interface-unicast-qos-adjusts"] = &defaultContext.InterfaceUnicastQosAdjusts
    children["ranges"] = &defaultContext.Ranges
    children["ifrs-interfaces"] = &defaultContext.IfrsInterfaces
    children["traffic-counters"] = &defaultContext.TrafficCounters
    children["groups"] = &defaultContext.Groups
    children["group-summary"] = &defaultContext.GroupSummary
    children["ifrs-interface-summary"] = &defaultContext.IfrsInterfaceSummary
    children["global-interface-table"] = &defaultContext.GlobalInterfaceTable
    children["ssm-map-details"] = &defaultContext.SsmMapDetails
    children["interface-state-offs"] = &defaultContext.InterfaceStateOffs
    return children
}

func (defaultContext *Igmp_Active_DefaultContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (defaultContext *Igmp_Active_DefaultContext) GetBundleName() string { return "cisco_ios_xr" }

func (defaultContext *Igmp_Active_DefaultContext) GetYangName() string { return "default-context" }

func (defaultContext *Igmp_Active_DefaultContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultContext *Igmp_Active_DefaultContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultContext *Igmp_Active_DefaultContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultContext *Igmp_Active_DefaultContext) SetParent(parent types.Entity) { defaultContext.parent = parent }

func (defaultContext *Igmp_Active_DefaultContext) GetParent() types.Entity { return defaultContext.parent }

func (defaultContext *Igmp_Active_DefaultContext) GetParentYangName() string { return "active" }

// Igmp_Active_DefaultContext_Summary
// IGMP Summary Information
type Igmp_Active_DefaultContext_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Igmp_Active_DefaultContext_Summary_Interface.
    Interface []Igmp_Active_DefaultContext_Summary_Interface
}

func (summary *Igmp_Active_DefaultContext_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Igmp_Active_DefaultContext_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Igmp_Active_DefaultContext_Summary) GetGoName(yname string) string {
    if yname == "robustness" { return "Robustness" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-disabled" { return "IsDisabled" }
    if yname == "supported-interfaces" { return "SupportedInterfaces" }
    if yname == "unsupported-interfaces" { return "UnsupportedInterfaces" }
    if yname == "enabled-interface-count" { return "EnabledInterfaceCount" }
    if yname == "disabled-interface-count" { return "DisabledInterfaceCount" }
    if yname == "tunnel-mte-config-count" { return "TunnelMteConfigCount" }
    if yname == "node-low-memory" { return "NodeLowMemory" }
    if yname == "interface" { return "Interface" }
    return ""
}

func (summary *Igmp_Active_DefaultContext_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Igmp_Active_DefaultContext_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range summary.Interface {
            if summary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_Summary_Interface{}
        summary.Interface = append(summary.Interface, child)
        return &summary.Interface[len(summary.Interface)-1]
    }
    return nil
}

func (summary *Igmp_Active_DefaultContext_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summary.Interface {
        children[summary.Interface[i].GetSegmentPath()] = &summary.Interface[i]
    }
    return children
}

func (summary *Igmp_Active_DefaultContext_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["robustness"] = summary.Robustness
    leafs["group-limit"] = summary.GroupLimit
    leafs["group-count"] = summary.GroupCount
    leafs["is-disabled"] = summary.IsDisabled
    leafs["supported-interfaces"] = summary.SupportedInterfaces
    leafs["unsupported-interfaces"] = summary.UnsupportedInterfaces
    leafs["enabled-interface-count"] = summary.EnabledInterfaceCount
    leafs["disabled-interface-count"] = summary.DisabledInterfaceCount
    leafs["tunnel-mte-config-count"] = summary.TunnelMteConfigCount
    leafs["node-low-memory"] = summary.NodeLowMemory
    return leafs
}

func (summary *Igmp_Active_DefaultContext_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Igmp_Active_DefaultContext_Summary) GetYangName() string { return "summary" }

func (summary *Igmp_Active_DefaultContext_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Igmp_Active_DefaultContext_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Igmp_Active_DefaultContext_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Igmp_Active_DefaultContext_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Igmp_Active_DefaultContext_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Igmp_Active_DefaultContext_Summary) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Igmp_Active_DefaultContext_Summary_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Active_DefaultContext_Summary_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "group-limit" { return "GroupLimit" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "on-off" { return "OnOff" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    return ""
}

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetSegmentPath() string {
    return "interface"
}

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["group-limit"] = self.GroupLimit
    leafs["group-count"] = self.GroupCount
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["on-off"] = self.OnOff
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    return leafs
}

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetYangName() string { return "interface" }

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Active_DefaultContext_Summary_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetParent() types.Entity { return self.parent }

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetParentYangName() string { return "summary" }

// Igmp_Active_DefaultContext_InterfaceStateOns
// IGMP Interface state on
type Igmp_Active_DefaultContext_InterfaceStateOns struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetFilter() yfilter.YFilter { return interfaceStateOns.YFilter }

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) SetFilter(yf yfilter.YFilter) { interfaceStateOns.YFilter = yf }

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetGoName(yname string) string {
    if yname == "interface-state-on" { return "InterfaceStateOn" }
    return ""
}

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetSegmentPath() string {
    return "interface-state-ons"
}

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-on" {
        for _, c := range interfaceStateOns.InterfaceStateOn {
            if interfaceStateOns.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn{}
        interfaceStateOns.InterfaceStateOn = append(interfaceStateOns.InterfaceStateOn, child)
        return &interfaceStateOns.InterfaceStateOn[len(interfaceStateOns.InterfaceStateOn)-1]
    }
    return nil
}

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOns.InterfaceStateOn {
        children[interfaceStateOns.InterfaceStateOn[i].GetSegmentPath()] = &interfaceStateOns.InterfaceStateOn[i]
    }
    return children
}

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetYangName() string { return "interface-state-ons" }

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) SetParent(parent types.Entity) { interfaceStateOns.parent = parent }

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetParent() types.Entity { return interfaceStateOns.parent }

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetFilter() yfilter.YFilter { return interfaceStateOn.YFilter }

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) SetFilter(yf yfilter.YFilter) { interfaceStateOn.YFilter = yf }

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetSegmentPath() string {
    return "interface-state-on" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOn.InterfaceName) + "']"
}

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOn.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOn.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOn.SubscriberAddress
    }
    return nil
}

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOn.Address
    children["querier-address"] = &interfaceStateOn.QuerierAddress
    children["subscriber-address"] = &interfaceStateOn.SubscriberAddress
    return children
}

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOn.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOn.InterfaceNameXr
    leafs["state"] = interfaceStateOn.State
    leafs["prefix-length"] = interfaceStateOn.PrefixLength
    leafs["is-interface-up"] = interfaceStateOn.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOn.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOn.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOn.IgmpVersion
    leafs["host-version"] = interfaceStateOn.HostVersion
    leafs["query-interval"] = interfaceStateOn.QueryInterval
    leafs["query-timeout"] = interfaceStateOn.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOn.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOn.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOn.GroupJoins
    leafs["group-leaves"] = interfaceStateOn.GroupLeaves
    leafs["is-querier"] = interfaceStateOn.IsQuerier
    leafs["total-active-groups"] = interfaceStateOn.TotalActiveGroups
    leafs["robustness"] = interfaceStateOn.Robustness
    leafs["proxy-interface"] = interfaceStateOn.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOn.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOn.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOn.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOn.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOn.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOn.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOn.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOn.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOn.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOn.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOn.VrfId
    leafs["mte-vrf-id"] = interfaceStateOn.MteVrfId
    leafs["location"] = interfaceStateOn.Location
    leafs["mtu"] = interfaceStateOn.Mtu
    leafs["vrf-state"] = interfaceStateOn.VrfState
    leafs["is-configurationverify"] = interfaceStateOn.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOn.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOn.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOn.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOn.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOn.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOn.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOn.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOn.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOn.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOn.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOn.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOn.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOn.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOn.MteTupleCount
    return leafs
}

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetYangName() string { return "interface-state-on" }

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) SetParent(parent types.Entity) { interfaceStateOn.parent = parent }

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetParent() types.Entity { return interfaceStateOn.parent }

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetParentYangName() string { return "interface-state-ons" }

// Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetYangName() string { return "address" }

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetParentYangName() string { return "interface-state-on" }

// Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetParentYangName() string { return "interface-state-on" }

// Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetParentYangName() string { return "interface-state-on" }

// Igmp_Active_DefaultContext_DetailGroups
// IGMP Detail Group Database
type Igmp_Active_DefaultContext_DetailGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Igmp_Active_DefaultContext_DetailGroups_DetailGroup.
    DetailGroup []Igmp_Active_DefaultContext_DetailGroups_DetailGroup
}

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetFilter() yfilter.YFilter { return detailGroups.YFilter }

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) SetFilter(yf yfilter.YFilter) { detailGroups.YFilter = yf }

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetGoName(yname string) string {
    if yname == "detail-group" { return "DetailGroup" }
    return ""
}

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetSegmentPath() string {
    return "detail-groups"
}

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "detail-group" {
        for _, c := range detailGroups.DetailGroup {
            if detailGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_DetailGroups_DetailGroup{}
        detailGroups.DetailGroup = append(detailGroups.DetailGroup, child)
        return &detailGroups.DetailGroup[len(detailGroups.DetailGroup)-1]
    }
    return nil
}

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range detailGroups.DetailGroup {
        children[detailGroups.DetailGroup[i].GetSegmentPath()] = &detailGroups.DetailGroup[i]
    }
    return children
}

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetYangName() string { return "detail-groups" }

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) SetParent(parent types.Entity) { detailGroups.parent = parent }

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetParent() types.Entity { return detailGroups.parent }

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source.
    Source []Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source
}

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetFilter() yfilter.YFilter { return detailGroup.YFilter }

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) SetFilter(yf yfilter.YFilter) { detailGroup.YFilter = yf }

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "is-router-exclude-mode" { return "IsRouterExcludeMode" }
    if yname == "is-host-exclude-mode" { return "IsHostExcludeMode" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "source" { return "Source" }
    return ""
}

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetSegmentPath() string {
    return "detail-group"
}

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &detailGroup.GroupInfo
    }
    if childYangName == "source" {
        for _, c := range detailGroup.Source {
            if detailGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source{}
        detailGroup.Source = append(detailGroup.Source, child)
        return &detailGroup.Source[len(detailGroup.Source)-1]
    }
    return nil
}

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &detailGroup.GroupInfo
    for i := range detailGroup.Source {
        children[detailGroup.Source[i].GetSegmentPath()] = &detailGroup.Source[i]
    }
    return children
}

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = detailGroup.GroupAddress
    leafs["interface-name"] = detailGroup.InterfaceName
    leafs["source-address"] = detailGroup.SourceAddress
    leafs["is-router-exclude-mode"] = detailGroup.IsRouterExcludeMode
    leafs["is-host-exclude-mode"] = detailGroup.IsHostExcludeMode
    return leafs
}

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetBundleName() string { return "cisco_ios_xr" }

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetYangName() string { return "detail-group" }

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) SetParent(parent types.Entity) { detailGroup.parent = parent }

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetParent() types.Entity { return detailGroup.parent }

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetParentYangName() string { return "detail-groups" }

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetParentYangName() string { return "detail-group" }

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source
// List of sources
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-remote" { return "IsRemote" }
    if yname == "is-forward" { return "IsForward" }
    if yname == "is-we-report" { return "IsWeReport" }
    if yname == "flags" { return "Flags" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetSegmentPath() string {
    return "source"
}

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &source.SourceAddress
    }
    return nil
}

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &source.SourceAddress
    return children
}

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = source.Uptime
    leafs["expiration-time"] = source.ExpirationTime
    leafs["is-local"] = source.IsLocal
    leafs["is-remote"] = source.IsRemote
    leafs["is-forward"] = source.IsForward
    leafs["is-we-report"] = source.IsWeReport
    leafs["flags"] = source.Flags
    leafs["is-added"] = source.IsAdded
    return leafs
}

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetYangName() string { return "source" }

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetParent() types.Entity { return source.parent }

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetParentYangName() string { return "detail-group" }

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetParentYangName() string { return "source" }

// Igmp_Active_DefaultContext_NonActiveGroups
// IGMP Non-Active Groups Information
type Igmp_Active_DefaultContext_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetGoName(yname string) string {
    if yname == "non-active-groups" { return "NonActiveGroups" }
    return ""
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-active-groups" {
        for _, c := range nonActiveGroups.NonActiveGroups {
            if nonActiveGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups{}
        nonActiveGroups.NonActiveGroups = append(nonActiveGroups.NonActiveGroups, child)
        return &nonActiveGroups.NonActiveGroups[len(nonActiveGroups.NonActiveGroups)-1]
    }
    return nil
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nonActiveGroups.NonActiveGroups {
        children[nonActiveGroups.NonActiveGroups[i].GetSegmentPath()] = &nonActiveGroups.NonActiveGroups[i]
    }
    return children
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetFilter() yfilter.YFilter { return nonActiveGroups.YFilter }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) SetFilter(yf yfilter.YFilter) { nonActiveGroups.YFilter = yf }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    if yname == "reason-for-non-activity" { return "ReasonForNonActivity" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetSegmentPath() string {
    return "non-active-groups"
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address" {
        return &nonActiveGroups.GroupAddress
    }
    if childYangName == "source-address" {
        return &nonActiveGroups.SourceAddress
    }
    return nil
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address"] = &nonActiveGroups.GroupAddress
    children["source-address"] = &nonActiveGroups.SourceAddress
    return children
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface"] = nonActiveGroups.Interface
    leafs["reason-for-non-activity"] = nonActiveGroups.ReasonForNonActivity
    return leafs
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetBundleName() string { return "cisco_ios_xr" }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetYangName() string { return "non-active-groups" }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) SetParent(parent types.Entity) { nonActiveGroups.parent = parent }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetParent() types.Entity { return nonActiveGroups.parent }

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetParentYangName() string { return "non-active-groups" }

// Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetParentYangName() string { return "non-active-groups" }

// Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetParentYangName() string { return "non-active-groups" }

// Igmp_Active_DefaultContext_SsmMaps
// SSM Map Table
type Igmp_Active_DefaultContext_SsmMaps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Igmp_Active_DefaultContext_SsmMaps_SsmMap.
    SsmMap []Igmp_Active_DefaultContext_SsmMaps_SsmMap
}

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetFilter() yfilter.YFilter { return ssmMaps.YFilter }

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) SetFilter(yf yfilter.YFilter) { ssmMaps.YFilter = yf }

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetGoName(yname string) string {
    if yname == "ssm-map" { return "SsmMap" }
    return ""
}

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetSegmentPath() string {
    return "ssm-maps"
}

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map" {
        for _, c := range ssmMaps.SsmMap {
            if ssmMaps.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_SsmMaps_SsmMap{}
        ssmMaps.SsmMap = append(ssmMaps.SsmMap, child)
        return &ssmMaps.SsmMap[len(ssmMaps.SsmMap)-1]
    }
    return nil
}

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMaps.SsmMap {
        children[ssmMaps.SsmMap[i].GetSegmentPath()] = &ssmMaps.SsmMap[i]
    }
    return children
}

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetYangName() string { return "ssm-maps" }

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) SetParent(parent types.Entity) { ssmMaps.parent = parent }

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetParent() types.Entity { return ssmMaps.parent }

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_SsmMaps_SsmMap
// SSM Map information
type Igmp_Active_DefaultContext_SsmMaps_SsmMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetFilter() yfilter.YFilter { return ssmMap.YFilter }

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) SetFilter(yf yfilter.YFilter) { ssmMap.YFilter = yf }

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetSegmentPath() string {
    return "ssm-map"
}

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &ssmMap.GroupAddressXr
    }
    return nil
}

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &ssmMap.GroupAddressXr
    return children
}

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMap.SsmMapType
    leafs["group-address"] = ssmMap.GroupAddress
    leafs["map-type"] = ssmMap.MapType
    leafs["source-counts"] = ssmMap.SourceCounts
    return leafs
}

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetYangName() string { return "ssm-map" }

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) SetParent(parent types.Entity) { ssmMap.parent = parent }

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetParent() types.Entity { return ssmMap.parent }

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetParentYangName() string { return "ssm-maps" }

// Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetParentYangName() string { return "ssm-map" }

// Igmp_Active_DefaultContext_ExplicitGroups
// IGMP Explicit Group Database
type Igmp_Active_DefaultContext_ExplicitGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetFilter() yfilter.YFilter { return explicitGroups.YFilter }

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) SetFilter(yf yfilter.YFilter) { explicitGroups.YFilter = yf }

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetGoName(yname string) string {
    if yname == "explicit-group" { return "ExplicitGroup" }
    return ""
}

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetSegmentPath() string {
    return "explicit-groups"
}

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "explicit-group" {
        for _, c := range explicitGroups.ExplicitGroup {
            if explicitGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup{}
        explicitGroups.ExplicitGroup = append(explicitGroups.ExplicitGroup, child)
        return &explicitGroups.ExplicitGroup[len(explicitGroups.ExplicitGroup)-1]
    }
    return nil
}

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range explicitGroups.ExplicitGroup {
        children[explicitGroups.ExplicitGroup[i].GetSegmentPath()] = &explicitGroups.ExplicitGroup[i]
    }
    return children
}

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetYangName() string { return "explicit-groups" }

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) SetParent(parent types.Entity) { explicitGroups.parent = parent }

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetParent() types.Entity { return explicitGroups.parent }

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host.
    Host []Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetFilter() yfilter.YFilter { return explicitGroup.YFilter }

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) SetFilter(yf yfilter.YFilter) { explicitGroup.YFilter = yf }

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "include-hosts" { return "IncludeHosts" }
    if yname == "exclude-hosts" { return "ExcludeHosts" }
    if yname == "group-info" { return "GroupInfo" }
    if yname == "host" { return "Host" }
    return ""
}

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetSegmentPath() string {
    return "explicit-group"
}

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-info" {
        return &explicitGroup.GroupInfo
    }
    if childYangName == "host" {
        for _, c := range explicitGroup.Host {
            if explicitGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host{}
        explicitGroup.Host = append(explicitGroup.Host, child)
        return &explicitGroup.Host[len(explicitGroup.Host)-1]
    }
    return nil
}

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-info"] = &explicitGroup.GroupInfo
    for i := range explicitGroup.Host {
        children[explicitGroup.Host[i].GetSegmentPath()] = &explicitGroup.Host[i]
    }
    return children
}

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = explicitGroup.GroupAddress
    leafs["interface-name"] = explicitGroup.InterfaceName
    leafs["source-address"] = explicitGroup.SourceAddress
    leafs["include-hosts"] = explicitGroup.IncludeHosts
    leafs["exclude-hosts"] = explicitGroup.ExcludeHosts
    return leafs
}

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetBundleName() string { return "cisco_ios_xr" }

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetYangName() string { return "explicit-group" }

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) SetParent(parent types.Entity) { explicitGroup.parent = parent }

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetParent() types.Entity { return explicitGroup.parent }

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetParentYangName() string { return "explicit-groups" }

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetFilter() yfilter.YFilter { return groupInfo.YFilter }

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) SetFilter(yf yfilter.YFilter) { groupInfo.YFilter = yf }

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetSegmentPath() string {
    return "group-info"
}

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &groupInfo.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &groupInfo.LastReporter
    }
    if childYangName == "source-address" {
        return &groupInfo.SourceAddress
    }
    return nil
}

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &groupInfo.GroupAddressXr
    children["last-reporter"] = &groupInfo.LastReporter
    children["source-address"] = &groupInfo.SourceAddress
    return children
}

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = groupInfo.InterfaceNameXr
    leafs["uptime"] = groupInfo.Uptime
    leafs["expiration-time"] = groupInfo.ExpirationTime
    leafs["explicit-tracking-enabled"] = groupInfo.ExplicitTrackingEnabled
    leafs["is-self-join"] = groupInfo.IsSelfJoin
    leafs["row-status"] = groupInfo.RowStatus
    leafs["is-low-memory"] = groupInfo.IsLowMemory
    leafs["router-filter-mode"] = groupInfo.RouterFilterMode
    leafs["older-host-version1-timer"] = groupInfo.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = groupInfo.OlderHostVersion2Timer
    leafs["is-added"] = groupInfo.IsAdded
    leafs["is-suppressed"] = groupInfo.IsSuppressed
    return leafs
}

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleName() string { return "cisco_ios_xr" }

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetYangName() string { return "group-info" }

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) SetParent(parent types.Entity) { groupInfo.parent = parent }

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetParent() types.Entity { return groupInfo.parent }

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetParentYangName() string { return "explicit-group" }

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetParentYangName() string { return "group-info" }

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetParentYangName() string { return "group-info" }

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetParentYangName() string { return "group-info" }

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetFilter() yfilter.YFilter { return host.YFilter }

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) SetFilter(yf yfilter.YFilter) { host.YFilter = yf }

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetGoName(yname string) string {
    if yname == "uptime" { return "Uptime" }
    if yname == "is-exclude" { return "IsExclude" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "source-count" { return "SourceCount" }
    if yname == "address" { return "Address" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetSegmentPath() string {
    return "host"
}

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &host.Address
    }
    if childYangName == "source-address" {
        for _, c := range host.SourceAddress {
            if host.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress{}
        host.SourceAddress = append(host.SourceAddress, child)
        return &host.SourceAddress[len(host.SourceAddress)-1]
    }
    return nil
}

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &host.Address
    for i := range host.SourceAddress {
        children[host.SourceAddress[i].GetSegmentPath()] = &host.SourceAddress[i]
    }
    return children
}

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["uptime"] = host.Uptime
    leafs["is-exclude"] = host.IsExclude
    leafs["expiration-time"] = host.ExpirationTime
    leafs["source-count"] = host.SourceCount
    return leafs
}

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetBundleName() string { return "cisco_ios_xr" }

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetYangName() string { return "host" }

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) SetParent(parent types.Entity) { host.parent = parent }

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetParent() types.Entity { return host.parent }

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetParentYangName() string { return "explicit-group" }

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetYangName() string { return "address" }

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetParentYangName() string { return "host" }

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetParentYangName() string { return "host" }

// Igmp_Active_DefaultContext_InterfaceTable
// IGMP Interface specific Table
type Igmp_Active_DefaultContext_InterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_DefaultContext_InterfaceTable_Interface.
    Interface []Igmp_Active_DefaultContext_InterfaceTable_Interface
}

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetFilter() yfilter.YFilter { return interfaceTable.YFilter }

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) SetFilter(yf yfilter.YFilter) { interfaceTable.YFilter = yf }

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetSegmentPath() string {
    return "interface-table"
}

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaceTable.Interface {
            if interfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_InterfaceTable_Interface{}
        interfaceTable.Interface = append(interfaceTable.Interface, child)
        return &interfaceTable.Interface[len(interfaceTable.Interface)-1]
    }
    return nil
}

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceTable.Interface {
        children[interfaceTable.Interface[i].GetSegmentPath()] = &interfaceTable.Interface[i]
    }
    return children
}

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetYangName() string { return "interface-table" }

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) SetParent(parent types.Entity) { interfaceTable.parent = parent }

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetParent() types.Entity { return interfaceTable.parent }

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_InterfaceTable_Interface
// IGMP Interface
type Igmp_Active_DefaultContext_InterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_DefaultContext_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetParentYangName() string { return "interface-table" }

// Igmp_Active_DefaultContext_InterfaceTable_Interface_Address
// IP address
type Igmp_Active_DefaultContext_InterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjusts.YFilter }

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjusts.YFilter = yf }

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetGoName(yname string) string {
    if yname == "interface-unicast-qos-adjust" { return "InterfaceUnicastQosAdjust" }
    return ""
}

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetSegmentPath() string {
    return "interface-unicast-qos-adjusts"
}

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-unicast-qos-adjust" {
        for _, c := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
            if interfaceUnicastQosAdjusts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust{}
        interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust = append(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, child)
        return &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[len(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        children[interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i].GetSegmentPath()] = &interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]
    }
    return children
}

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetYangName() string { return "interface-unicast-qos-adjusts" }

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) SetParent(parent types.Entity) { interfaceUnicastQosAdjusts.parent = parent }

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetParent() types.Entity { return interfaceUnicastQosAdjusts.parent }

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetFilter() yfilter.YFilter { return interfaceUnicastQosAdjust.YFilter }

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetFilter(yf yfilter.YFilter) { interfaceUnicastQosAdjust.YFilter = yf }

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-access" { return "IsVirtualAccess" }
    if yname == "rate" { return "Rate" }
    if yname == "rate-increments" { return "RateIncrements" }
    if yname == "rate-decrements" { return "RateDecrements" }
    if yname == "update" { return "Update" }
    return ""
}

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetSegmentPath() string {
    return "interface-unicast-qos-adjust" + "[interface-name='" + fmt.Sprintf("%v", interfaceUnicastQosAdjust.InterfaceName) + "']"
}

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update" {
        for _, c := range interfaceUnicastQosAdjust.Update {
            if interfaceUnicastQosAdjust.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update{}
        interfaceUnicastQosAdjust.Update = append(interfaceUnicastQosAdjust.Update, child)
        return &interfaceUnicastQosAdjust.Update[len(interfaceUnicastQosAdjust.Update)-1]
    }
    return nil
}

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceUnicastQosAdjust.Update {
        children[interfaceUnicastQosAdjust.Update[i].GetSegmentPath()] = &interfaceUnicastQosAdjust.Update[i]
    }
    return children
}

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceUnicastQosAdjust.InterfaceName
    leafs["is-virtual-access"] = interfaceUnicastQosAdjust.IsVirtualAccess
    leafs["rate"] = interfaceUnicastQosAdjust.Rate
    leafs["rate-increments"] = interfaceUnicastQosAdjust.RateIncrements
    leafs["rate-decrements"] = interfaceUnicastQosAdjust.RateDecrements
    return leafs
}

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetYangName() string { return "interface-unicast-qos-adjust" }

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) SetParent(parent types.Entity) { interfaceUnicastQosAdjust.parent = parent }

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParent() types.Entity { return interfaceUnicastQosAdjust.parent }

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetParentYangName() string { return "interface-unicast-qos-adjusts" }

// Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetFilter() yfilter.YFilter { return update.YFilter }

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetFilter(yf yfilter.YFilter) { update.YFilter = yf }

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetGoName(yname string) string {
    if yname == "is-add" { return "IsAdd" }
    if yname == "weight" { return "Weight" }
    if yname == "received-time" { return "ReceivedTime" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "group-address" { return "GroupAddress" }
    return ""
}

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetSegmentPath() string {
    return "update"
}

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &update.SourceAddress
    }
    if childYangName == "group-address" {
        return &update.GroupAddress
    }
    return nil
}

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &update.SourceAddress
    children["group-address"] = &update.GroupAddress
    return children
}

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-add"] = update.IsAdd
    leafs["weight"] = update.Weight
    leafs["received-time"] = update.ReceivedTime
    return leafs
}

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleName() string { return "cisco_ios_xr" }

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetYangName() string { return "update" }

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) SetParent(parent types.Entity) { update.parent = parent }

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParent() types.Entity { return update.parent }

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetParentYangName() string { return "interface-unicast-qos-adjust" }

// Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetParentYangName() string { return "update" }

// Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetFilter() yfilter.YFilter { return groupAddress.YFilter }

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetFilter(yf yfilter.YFilter) { groupAddress.YFilter = yf }

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetSegmentPath() string {
    return "group-address"
}

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddress.AfName
    leafs["ipv4-address"] = groupAddress.Ipv4Address
    leafs["ipv6-address"] = groupAddress.Ipv6Address
    return leafs
}

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetYangName() string { return "group-address" }

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) SetParent(parent types.Entity) { groupAddress.parent = parent }

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParent() types.Entity { return groupAddress.parent }

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetParentYangName() string { return "update" }

// Igmp_Active_DefaultContext_Ranges
// Range table
type Igmp_Active_DefaultContext_Ranges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Range information. The type is slice of
    // Igmp_Active_DefaultContext_Ranges_Range.
    Range []Igmp_Active_DefaultContext_Ranges_Range
}

func (ranges *Igmp_Active_DefaultContext_Ranges) GetFilter() yfilter.YFilter { return ranges.YFilter }

func (ranges *Igmp_Active_DefaultContext_Ranges) SetFilter(yf yfilter.YFilter) { ranges.YFilter = yf }

func (ranges *Igmp_Active_DefaultContext_Ranges) GetGoName(yname string) string {
    if yname == "range" { return "Range" }
    return ""
}

func (ranges *Igmp_Active_DefaultContext_Ranges) GetSegmentPath() string {
    return "ranges"
}

func (ranges *Igmp_Active_DefaultContext_Ranges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "range" {
        for _, c := range ranges.Range {
            if ranges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_Ranges_Range{}
        ranges.Range = append(ranges.Range, child)
        return &ranges.Range[len(ranges.Range)-1]
    }
    return nil
}

func (ranges *Igmp_Active_DefaultContext_Ranges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ranges.Range {
        children[ranges.Range[i].GetSegmentPath()] = &ranges.Range[i]
    }
    return children
}

func (ranges *Igmp_Active_DefaultContext_Ranges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ranges *Igmp_Active_DefaultContext_Ranges) GetBundleName() string { return "cisco_ios_xr" }

func (ranges *Igmp_Active_DefaultContext_Ranges) GetYangName() string { return "ranges" }

func (ranges *Igmp_Active_DefaultContext_Ranges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ranges *Igmp_Active_DefaultContext_Ranges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ranges *Igmp_Active_DefaultContext_Ranges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ranges *Igmp_Active_DefaultContext_Ranges) SetParent(parent types.Entity) { ranges.parent = parent }

func (ranges *Igmp_Active_DefaultContext_Ranges) GetParent() types.Entity { return ranges.parent }

func (ranges *Igmp_Active_DefaultContext_Ranges) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_Ranges_Range
// Range information
type Igmp_Active_DefaultContext_Ranges_Range struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: -2147483648..2147483647.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr
}

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Active_DefaultContext_Ranges_Range) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "group-mask" { return "GroupMask" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "protocol" { return "Protocol" }
    if yname == "is-stale" { return "IsStale" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetSegmentPath() string {
    return "range"
}

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &self.GroupAddressXr
    }
    return nil
}

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &self.GroupAddressXr
    return children
}

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = self.GroupAddress
    leafs["group-mask"] = self.GroupMask
    leafs["prefix-length"] = self.PrefixLength
    leafs["protocol"] = self.Protocol
    leafs["is-stale"] = self.IsStale
    return leafs
}

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetYangName() string { return "range" }

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Active_DefaultContext_Ranges_Range) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetParent() types.Entity { return self.parent }

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetParentYangName() string { return "ranges" }

// Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr
// Group address
type Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetParentYangName() string { return "range" }

// Igmp_Active_DefaultContext_IfrsInterfaces
// IGMP Interface specific
type Igmp_Active_DefaultContext_IfrsInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface.
    IfrsInterface []Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetFilter() yfilter.YFilter { return ifrsInterfaces.YFilter }

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) SetFilter(yf yfilter.YFilter) { ifrsInterfaces.YFilter = yf }

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetGoName(yname string) string {
    if yname == "ifrs-interface" { return "IfrsInterface" }
    return ""
}

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetSegmentPath() string {
    return "ifrs-interfaces"
}

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ifrs-interface" {
        for _, c := range ifrsInterfaces.IfrsInterface {
            if ifrsInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface{}
        ifrsInterfaces.IfrsInterface = append(ifrsInterfaces.IfrsInterface, child)
        return &ifrsInterfaces.IfrsInterface[len(ifrsInterfaces.IfrsInterface)-1]
    }
    return nil
}

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ifrsInterfaces.IfrsInterface {
        children[ifrsInterfaces.IfrsInterface[i].GetSegmentPath()] = &ifrsInterfaces.IfrsInterface[i]
    }
    return children
}

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetYangName() string { return "ifrs-interfaces" }

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) SetParent(parent types.Entity) { ifrsInterfaces.parent = parent }

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetParent() types.Entity { return ifrsInterfaces.parent }

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetFilter() yfilter.YFilter { return ifrsInterface.YFilter }

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) SetFilter(yf yfilter.YFilter) { ifrsInterface.YFilter = yf }

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "join-group-count" { return "JoinGroupCount" }
    if yname == "igmp-interface-entry" { return "IgmpInterfaceEntry" }
    return ""
}

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetSegmentPath() string {
    return "ifrs-interface" + "[interface-name='" + fmt.Sprintf("%v", ifrsInterface.InterfaceName) + "']"
}

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "igmp-interface-entry" {
        return &ifrsInterface.IgmpInterfaceEntry
    }
    return nil
}

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["igmp-interface-entry"] = &ifrsInterface.IgmpInterfaceEntry
    return children
}

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ifrsInterface.InterfaceName
    leafs["join-group-count"] = ifrsInterface.JoinGroupCount
    return leafs
}

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetYangName() string { return "ifrs-interface" }

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) SetParent(parent types.Entity) { ifrsInterface.parent = parent }

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetParent() types.Entity { return ifrsInterface.parent }

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetParentYangName() string { return "ifrs-interfaces" }

// Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetFilter() yfilter.YFilter { return igmpInterfaceEntry.YFilter }

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetFilter(yf yfilter.YFilter) { igmpInterfaceEntry.YFilter = yf }

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetGoName(yname string) string {
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetSegmentPath() string {
    return "igmp-interface-entry"
}

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &igmpInterfaceEntry.Address
    }
    if childYangName == "querier-address" {
        return &igmpInterfaceEntry.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &igmpInterfaceEntry.SubscriberAddress
    }
    return nil
}

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &igmpInterfaceEntry.Address
    children["querier-address"] = &igmpInterfaceEntry.QuerierAddress
    children["subscriber-address"] = &igmpInterfaceEntry.SubscriberAddress
    return children
}

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name-xr"] = igmpInterfaceEntry.InterfaceNameXr
    leafs["state"] = igmpInterfaceEntry.State
    leafs["prefix-length"] = igmpInterfaceEntry.PrefixLength
    leafs["is-interface-up"] = igmpInterfaceEntry.IsInterfaceUp
    leafs["is-ip-enabled"] = igmpInterfaceEntry.IsIpEnabled
    leafs["is-router-enabled"] = igmpInterfaceEntry.IsRouterEnabled
    leafs["igmp-version"] = igmpInterfaceEntry.IgmpVersion
    leafs["host-version"] = igmpInterfaceEntry.HostVersion
    leafs["query-interval"] = igmpInterfaceEntry.QueryInterval
    leafs["query-timeout"] = igmpInterfaceEntry.QueryTimeout
    leafs["query-maximum-response-time"] = igmpInterfaceEntry.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = igmpInterfaceEntry.LastMemberQueryInterval
    leafs["group-joins"] = igmpInterfaceEntry.GroupJoins
    leafs["group-leaves"] = igmpInterfaceEntry.GroupLeaves
    leafs["is-querier"] = igmpInterfaceEntry.IsQuerier
    leafs["total-active-groups"] = igmpInterfaceEntry.TotalActiveGroups
    leafs["robustness"] = igmpInterfaceEntry.Robustness
    leafs["proxy-interface"] = igmpInterfaceEntry.ProxyInterface
    leafs["querier-uptime"] = igmpInterfaceEntry.QuerierUptime
    leafs["las-ll-registration-count"] = igmpInterfaceEntry.LasLlRegistrationCount
    leafs["las-get-address-count"] = igmpInterfaceEntry.LasGetAddressCount
    leafs["las-update-count"] = igmpInterfaceEntry.LasUpdateCount
    leafs["las-ll-remove-update-count"] = igmpInterfaceEntry.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = igmpInterfaceEntry.LasLlAddUpdateCount
    leafs["las-null-update-count"] = igmpInterfaceEntry.LasNullUpdateCount
    leafs["las-unregistration-count"] = igmpInterfaceEntry.LasUnregistrationCount
    leafs["is-las-request"] = igmpInterfaceEntry.IsLasRequest
    leafs["is-las-registered"] = igmpInterfaceEntry.IsLasRegistered
    leafs["vrf-id"] = igmpInterfaceEntry.VrfId
    leafs["mte-vrf-id"] = igmpInterfaceEntry.MteVrfId
    leafs["location"] = igmpInterfaceEntry.Location
    leafs["mtu"] = igmpInterfaceEntry.Mtu
    leafs["vrf-state"] = igmpInterfaceEntry.VrfState
    leafs["is-configurationverify"] = igmpInterfaceEntry.IsConfigurationverify
    leafs["configurationvrf-set"] = igmpInterfaceEntry.ConfigurationvrfSet
    leafs["configurationvrf-error"] = igmpInterfaceEntry.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = igmpInterfaceEntry.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = igmpInterfaceEntry.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = igmpInterfaceEntry.IsImStateRegistered
    leafs["is-subscriber"] = igmpInterfaceEntry.IsSubscriber
    leafs["subscriber-mode"] = igmpInterfaceEntry.SubscriberMode
    leafs["is-identity-present"] = igmpInterfaceEntry.IsIdentityPresent
    leafs["subscriber-id"] = igmpInterfaceEntry.SubscriberId
    leafs["parent-ifhandle"] = igmpInterfaceEntry.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = igmpInterfaceEntry.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = igmpInterfaceEntry.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = igmpInterfaceEntry.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = igmpInterfaceEntry.MteTupleCount
    return leafs
}

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleName() string { return "cisco_ios_xr" }

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetYangName() string { return "igmp-interface-entry" }

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) SetParent(parent types.Entity) { igmpInterfaceEntry.parent = parent }

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParent() types.Entity { return igmpInterfaceEntry.parent }

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetParentYangName() string { return "ifrs-interface" }

// Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetYangName() string { return "address" }

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetParentYangName() string { return "igmp-interface-entry" }

// Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetParentYangName() string { return "igmp-interface-entry" }

// Igmp_Active_DefaultContext_TrafficCounters
// IGMP Message Traffic Counters
type Igmp_Active_DefaultContext_TrafficCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetFilter() yfilter.YFilter { return trafficCounters.YFilter }

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) SetFilter(yf yfilter.YFilter) { trafficCounters.YFilter = yf }

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetGoName(yname string) string {
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "packets-in" { return "PacketsIn" }
    if yname == "packets-out" { return "PacketsOut" }
    if yname == "format-errors" { return "FormatErrors" }
    if yname == "packet-manager-input-errors" { return "PacketManagerInputErrors" }
    if yname == "packet-manager-output-errors" { return "PacketManagerOutputErrors" }
    if yname == "checksum-errors" { return "ChecksumErrors" }
    if yname == "receive-socket-errors" { return "ReceiveSocketErrors" }
    if yname == "socket-errors" { return "SocketErrors" }
    if yname == "bad-scope-errors" { return "BadScopeErrors" }
    if yname == "auxillary-data-length-errors" { return "AuxillaryDataLengthErrors" }
    if yname == "invalid-source-address-errors" { return "InvalidSourceAddressErrors" }
    if yname == "no-socket-connection" { return "NoSocketConnection" }
    if yname == "miscellaneous-errors" { return "MiscellaneousErrors" }
    if yname == "input-queries" { return "InputQueries" }
    if yname == "input-reports" { return "InputReports" }
    if yname == "input-leaves" { return "InputLeaves" }
    if yname == "input-mtrace" { return "InputMtrace" }
    if yname == "input-dvmrp" { return "InputDvmrp" }
    if yname == "input-pim" { return "InputPim" }
    if yname == "output-queries" { return "OutputQueries" }
    if yname == "output-reports" { return "OutputReports" }
    if yname == "output-leaves" { return "OutputLeaves" }
    if yname == "output-mtrace" { return "OutputMtrace" }
    if yname == "output-dvmrp" { return "OutputDvmrp" }
    if yname == "output-pim" { return "OutputPim" }
    if yname == "get-packet-failure" { return "GetPacketFailure" }
    if yname == "output-no-parent-interface-handle" { return "OutputNoParentInterfaceHandle" }
    if yname == "input-no-idb" { return "InputNoIdb" }
    if yname == "input-no-vrf-in-idb" { return "InputNoVrfInIdb" }
    if yname == "input-disabled-idb" { return "InputDisabledIdb" }
    if yname == "input-martian-address" { return "InputMartianAddress" }
    if yname == "input-no-assigned-vrf-id" { return "InputNoAssignedVrfId" }
    if yname == "input-no-vrf-mtrace" { return "InputNoVrfMtrace" }
    if yname == "input-no-platform-support-mtrace" { return "InputNoPlatformSupportMtrace" }
    return ""
}

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetSegmentPath() string {
    return "traffic-counters"
}

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["elapsed-time"] = trafficCounters.ElapsedTime
    leafs["packets-in"] = trafficCounters.PacketsIn
    leafs["packets-out"] = trafficCounters.PacketsOut
    leafs["format-errors"] = trafficCounters.FormatErrors
    leafs["packet-manager-input-errors"] = trafficCounters.PacketManagerInputErrors
    leafs["packet-manager-output-errors"] = trafficCounters.PacketManagerOutputErrors
    leafs["checksum-errors"] = trafficCounters.ChecksumErrors
    leafs["receive-socket-errors"] = trafficCounters.ReceiveSocketErrors
    leafs["socket-errors"] = trafficCounters.SocketErrors
    leafs["bad-scope-errors"] = trafficCounters.BadScopeErrors
    leafs["auxillary-data-length-errors"] = trafficCounters.AuxillaryDataLengthErrors
    leafs["invalid-source-address-errors"] = trafficCounters.InvalidSourceAddressErrors
    leafs["no-socket-connection"] = trafficCounters.NoSocketConnection
    leafs["miscellaneous-errors"] = trafficCounters.MiscellaneousErrors
    leafs["input-queries"] = trafficCounters.InputQueries
    leafs["input-reports"] = trafficCounters.InputReports
    leafs["input-leaves"] = trafficCounters.InputLeaves
    leafs["input-mtrace"] = trafficCounters.InputMtrace
    leafs["input-dvmrp"] = trafficCounters.InputDvmrp
    leafs["input-pim"] = trafficCounters.InputPim
    leafs["output-queries"] = trafficCounters.OutputQueries
    leafs["output-reports"] = trafficCounters.OutputReports
    leafs["output-leaves"] = trafficCounters.OutputLeaves
    leafs["output-mtrace"] = trafficCounters.OutputMtrace
    leafs["output-dvmrp"] = trafficCounters.OutputDvmrp
    leafs["output-pim"] = trafficCounters.OutputPim
    leafs["get-packet-failure"] = trafficCounters.GetPacketFailure
    leafs["output-no-parent-interface-handle"] = trafficCounters.OutputNoParentInterfaceHandle
    leafs["input-no-idb"] = trafficCounters.InputNoIdb
    leafs["input-no-vrf-in-idb"] = trafficCounters.InputNoVrfInIdb
    leafs["input-disabled-idb"] = trafficCounters.InputDisabledIdb
    leafs["input-martian-address"] = trafficCounters.InputMartianAddress
    leafs["input-no-assigned-vrf-id"] = trafficCounters.InputNoAssignedVrfId
    leafs["input-no-vrf-mtrace"] = trafficCounters.InputNoVrfMtrace
    leafs["input-no-platform-support-mtrace"] = trafficCounters.InputNoPlatformSupportMtrace
    return leafs
}

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetBundleName() string { return "cisco_ios_xr" }

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetYangName() string { return "traffic-counters" }

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) SetParent(parent types.Entity) { trafficCounters.parent = parent }

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetParent() types.Entity { return trafficCounters.parent }

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_Groups
// IGMP Group Database Table
type Igmp_Active_DefaultContext_Groups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Igmp_Active_DefaultContext_Groups_Group.
    Group []Igmp_Active_DefaultContext_Groups_Group
}

func (groups *Igmp_Active_DefaultContext_Groups) GetFilter() yfilter.YFilter { return groups.YFilter }

func (groups *Igmp_Active_DefaultContext_Groups) SetFilter(yf yfilter.YFilter) { groups.YFilter = yf }

func (groups *Igmp_Active_DefaultContext_Groups) GetGoName(yname string) string {
    if yname == "group" { return "Group" }
    return ""
}

func (groups *Igmp_Active_DefaultContext_Groups) GetSegmentPath() string {
    return "groups"
}

func (groups *Igmp_Active_DefaultContext_Groups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group" {
        for _, c := range groups.Group {
            if groups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_Groups_Group{}
        groups.Group = append(groups.Group, child)
        return &groups.Group[len(groups.Group)-1]
    }
    return nil
}

func (groups *Igmp_Active_DefaultContext_Groups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range groups.Group {
        children[groups.Group[i].GetSegmentPath()] = &groups.Group[i]
    }
    return children
}

func (groups *Igmp_Active_DefaultContext_Groups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (groups *Igmp_Active_DefaultContext_Groups) GetBundleName() string { return "cisco_ios_xr" }

func (groups *Igmp_Active_DefaultContext_Groups) GetYangName() string { return "groups" }

func (groups *Igmp_Active_DefaultContext_Groups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groups *Igmp_Active_DefaultContext_Groups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groups *Igmp_Active_DefaultContext_Groups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groups *Igmp_Active_DefaultContext_Groups) SetParent(parent types.Entity) { groups.parent = parent }

func (groups *Igmp_Active_DefaultContext_Groups) GetParent() types.Entity { return groups.parent }

func (groups *Igmp_Active_DefaultContext_Groups) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_Groups_Group
// IGMP Group Entry Information
type Igmp_Active_DefaultContext_Groups_Group struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Active_DefaultContext_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Igmp_Active_DefaultContext_Groups_Group_SourceAddress
}

func (group *Igmp_Active_DefaultContext_Groups_Group) GetFilter() yfilter.YFilter { return group.YFilter }

func (group *Igmp_Active_DefaultContext_Groups_Group) SetFilter(yf yfilter.YFilter) { group.YFilter = yf }

func (group *Igmp_Active_DefaultContext_Groups_Group) GetGoName(yname string) string {
    if yname == "group-address" { return "GroupAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "uptime" { return "Uptime" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "explicit-tracking-enabled" { return "ExplicitTrackingEnabled" }
    if yname == "is-self-join" { return "IsSelfJoin" }
    if yname == "row-status" { return "RowStatus" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    if yname == "router-filter-mode" { return "RouterFilterMode" }
    if yname == "older-host-version1-timer" { return "OlderHostVersion1Timer" }
    if yname == "older-host-version2-timer" { return "OlderHostVersion2Timer" }
    if yname == "is-added" { return "IsAdded" }
    if yname == "is-suppressed" { return "IsSuppressed" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    if yname == "last-reporter" { return "LastReporter" }
    if yname == "source-address" { return "SourceAddress" }
    return ""
}

func (group *Igmp_Active_DefaultContext_Groups_Group) GetSegmentPath() string {
    return "group"
}

func (group *Igmp_Active_DefaultContext_Groups_Group) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &group.GroupAddressXr
    }
    if childYangName == "last-reporter" {
        return &group.LastReporter
    }
    if childYangName == "source-address" {
        return &group.SourceAddress
    }
    return nil
}

func (group *Igmp_Active_DefaultContext_Groups_Group) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &group.GroupAddressXr
    children["last-reporter"] = &group.LastReporter
    children["source-address"] = &group.SourceAddress
    return children
}

func (group *Igmp_Active_DefaultContext_Groups_Group) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-address"] = group.GroupAddress
    leafs["interface-name"] = group.InterfaceName
    leafs["interface-name-xr"] = group.InterfaceNameXr
    leafs["uptime"] = group.Uptime
    leafs["expiration-time"] = group.ExpirationTime
    leafs["explicit-tracking-enabled"] = group.ExplicitTrackingEnabled
    leafs["is-self-join"] = group.IsSelfJoin
    leafs["row-status"] = group.RowStatus
    leafs["is-low-memory"] = group.IsLowMemory
    leafs["router-filter-mode"] = group.RouterFilterMode
    leafs["older-host-version1-timer"] = group.OlderHostVersion1Timer
    leafs["older-host-version2-timer"] = group.OlderHostVersion2Timer
    leafs["is-added"] = group.IsAdded
    leafs["is-suppressed"] = group.IsSuppressed
    return leafs
}

func (group *Igmp_Active_DefaultContext_Groups_Group) GetBundleName() string { return "cisco_ios_xr" }

func (group *Igmp_Active_DefaultContext_Groups_Group) GetYangName() string { return "group" }

func (group *Igmp_Active_DefaultContext_Groups_Group) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (group *Igmp_Active_DefaultContext_Groups_Group) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (group *Igmp_Active_DefaultContext_Groups_Group) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (group *Igmp_Active_DefaultContext_Groups_Group) SetParent(parent types.Entity) { group.parent = parent }

func (group *Igmp_Active_DefaultContext_Groups_Group) GetParent() types.Entity { return group.parent }

func (group *Igmp_Active_DefaultContext_Groups_Group) GetParentYangName() string { return "groups" }

// Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr
// Group Address
type Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetParentYangName() string { return "group" }

// Igmp_Active_DefaultContext_Groups_Group_LastReporter
// Last reporter address
type Igmp_Active_DefaultContext_Groups_Group_LastReporter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetFilter() yfilter.YFilter { return lastReporter.YFilter }

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) SetFilter(yf yfilter.YFilter) { lastReporter.YFilter = yf }

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetSegmentPath() string {
    return "last-reporter"
}

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = lastReporter.AfName
    leafs["ipv4-address"] = lastReporter.Ipv4Address
    leafs["ipv6-address"] = lastReporter.Ipv6Address
    return leafs
}

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetBundleName() string { return "cisco_ios_xr" }

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetYangName() string { return "last-reporter" }

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) SetParent(parent types.Entity) { lastReporter.parent = parent }

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetParent() types.Entity { return lastReporter.parent }

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetParentYangName() string { return "group" }

// Igmp_Active_DefaultContext_Groups_Group_SourceAddress
// Source Address
type Igmp_Active_DefaultContext_Groups_Group_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sourceAddress.AfName
    leafs["ipv4-address"] = sourceAddress.Ipv4Address
    leafs["ipv6-address"] = sourceAddress.Ipv6Address
    return leafs
}

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetParentYangName() string { return "group" }

// Igmp_Active_DefaultContext_GroupSummary
// IGMP Groups Summary
type Igmp_Active_DefaultContext_GroupSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetFilter() yfilter.YFilter { return groupSummary.YFilter }

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) SetFilter(yf yfilter.YFilter) { groupSummary.YFilter = yf }

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetGoName(yname string) string {
    if yname == "groutes" { return "Groutes" }
    if yname == "sg-routes" { return "SgRoutes" }
    if yname == "group-count" { return "GroupCount" }
    if yname == "is-low-memory" { return "IsLowMemory" }
    return ""
}

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetSegmentPath() string {
    return "group-summary"
}

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["groutes"] = groupSummary.Groutes
    leafs["sg-routes"] = groupSummary.SgRoutes
    leafs["group-count"] = groupSummary.GroupCount
    leafs["is-low-memory"] = groupSummary.IsLowMemory
    return leafs
}

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetBundleName() string { return "cisco_ios_xr" }

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetYangName() string { return "group-summary" }

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) SetParent(parent types.Entity) { groupSummary.parent = parent }

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetParent() types.Entity { return groupSummary.parent }

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Igmp_Active_DefaultContext_IfrsInterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetFilter() yfilter.YFilter { return ifrsInterfaceSummary.YFilter }

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) SetFilter(yf yfilter.YFilter) { ifrsInterfaceSummary.YFilter = yf }

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-count" { return "InterfaceCount" }
    if yname == "configuration-count" { return "ConfigurationCount" }
    return ""
}

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetSegmentPath() string {
    return "ifrs-interface-summary"
}

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-count"] = ifrsInterfaceSummary.InterfaceCount
    leafs["configuration-count"] = ifrsInterfaceSummary.ConfigurationCount
    return leafs
}

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetYangName() string { return "ifrs-interface-summary" }

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) SetParent(parent types.Entity) { ifrsInterfaceSummary.parent = parent }

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetParent() types.Entity { return ifrsInterfaceSummary.parent }

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_GlobalInterfaceTable
// IGMP Global Interface 
type Igmp_Active_DefaultContext_GlobalInterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface.
    Interface []Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetFilter() yfilter.YFilter { return globalInterfaceTable.YFilter }

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) SetFilter(yf yfilter.YFilter) { globalInterfaceTable.YFilter = yf }

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetSegmentPath() string {
    return "global-interface-table"
}

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range globalInterfaceTable.Interface {
            if globalInterfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface{}
        globalInterfaceTable.Interface = append(globalInterfaceTable.Interface, child)
        return &globalInterfaceTable.Interface[len(globalInterfaceTable.Interface)-1]
    }
    return nil
}

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalInterfaceTable.Interface {
        children[globalInterfaceTable.Interface[i].GetSegmentPath()] = &globalInterfaceTable.Interface[i]
    }
    return children
}

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetYangName() string { return "global-interface-table" }

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) SetParent(parent types.Entity) { globalInterfaceTable.parent = parent }

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetParent() types.Entity { return globalInterfaceTable.parent }

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface
// IGMP Interface
type Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &self.Address
    }
    if childYangName == "querier-address" {
        return &self.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &self.SubscriberAddress
    }
    return nil
}

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &self.Address
    children["querier-address"] = &self.QuerierAddress
    children["subscriber-address"] = &self.SubscriberAddress
    return children
}

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-name-xr"] = self.InterfaceNameXr
    leafs["state"] = self.State
    leafs["prefix-length"] = self.PrefixLength
    leafs["is-interface-up"] = self.IsInterfaceUp
    leafs["is-ip-enabled"] = self.IsIpEnabled
    leafs["is-router-enabled"] = self.IsRouterEnabled
    leafs["igmp-version"] = self.IgmpVersion
    leafs["host-version"] = self.HostVersion
    leafs["query-interval"] = self.QueryInterval
    leafs["query-timeout"] = self.QueryTimeout
    leafs["query-maximum-response-time"] = self.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = self.LastMemberQueryInterval
    leafs["group-joins"] = self.GroupJoins
    leafs["group-leaves"] = self.GroupLeaves
    leafs["is-querier"] = self.IsQuerier
    leafs["total-active-groups"] = self.TotalActiveGroups
    leafs["robustness"] = self.Robustness
    leafs["proxy-interface"] = self.ProxyInterface
    leafs["querier-uptime"] = self.QuerierUptime
    leafs["las-ll-registration-count"] = self.LasLlRegistrationCount
    leafs["las-get-address-count"] = self.LasGetAddressCount
    leafs["las-update-count"] = self.LasUpdateCount
    leafs["las-ll-remove-update-count"] = self.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = self.LasLlAddUpdateCount
    leafs["las-null-update-count"] = self.LasNullUpdateCount
    leafs["las-unregistration-count"] = self.LasUnregistrationCount
    leafs["is-las-request"] = self.IsLasRequest
    leafs["is-las-registered"] = self.IsLasRegistered
    leafs["vrf-id"] = self.VrfId
    leafs["mte-vrf-id"] = self.MteVrfId
    leafs["location"] = self.Location
    leafs["mtu"] = self.Mtu
    leafs["vrf-state"] = self.VrfState
    leafs["is-configurationverify"] = self.IsConfigurationverify
    leafs["configurationvrf-set"] = self.ConfigurationvrfSet
    leafs["configurationvrf-error"] = self.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = self.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = self.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = self.IsImStateRegistered
    leafs["is-subscriber"] = self.IsSubscriber
    leafs["subscriber-mode"] = self.SubscriberMode
    leafs["is-identity-present"] = self.IsIdentityPresent
    leafs["subscriber-id"] = self.SubscriberId
    leafs["parent-ifhandle"] = self.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = self.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = self.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = self.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = self.MteTupleCount
    return leafs
}

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetParentYangName() string { return "global-interface-table" }

// Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address
// IP address
type Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetYangName() string { return "address" }

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetParentYangName() string { return "interface" }

// Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetParentYangName() string { return "interface" }

// Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetParentYangName() string { return "interface" }

// Igmp_Active_DefaultContext_SsmMapDetails
// SSM Map Detail
type Igmp_Active_DefaultContext_SsmMapDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetFilter() yfilter.YFilter { return ssmMapDetails.YFilter }

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) SetFilter(yf yfilter.YFilter) { ssmMapDetails.YFilter = yf }

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetGoName(yname string) string {
    if yname == "ssm-map-detail" { return "SsmMapDetail" }
    return ""
}

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetSegmentPath() string {
    return "ssm-map-details"
}

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ssm-map-detail" {
        for _, c := range ssmMapDetails.SsmMapDetail {
            if ssmMapDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail{}
        ssmMapDetails.SsmMapDetail = append(ssmMapDetails.SsmMapDetail, child)
        return &ssmMapDetails.SsmMapDetail[len(ssmMapDetails.SsmMapDetail)-1]
    }
    return nil
}

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ssmMapDetails.SsmMapDetail {
        children[ssmMapDetails.SsmMapDetail[i].GetSegmentPath()] = &ssmMapDetails.SsmMapDetail[i]
    }
    return children
}

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetYangName() string { return "ssm-map-details" }

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) SetParent(parent types.Entity) { ssmMapDetails.parent = parent }

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetParent() types.Entity { return ssmMapDetails.parent }

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources.
    Sources []Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetFilter() yfilter.YFilter { return ssmMapDetail.YFilter }

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) SetFilter(yf yfilter.YFilter) { ssmMapDetail.YFilter = yf }

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetGoName(yname string) string {
    if yname == "ssm-map-type" { return "SsmMapType" }
    if yname == "group-address" { return "GroupAddress" }
    if yname == "expiration-time" { return "ExpirationTime" }
    if yname == "response-pending" { return "ResponsePending" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "elapsed-time" { return "ElapsedTime" }
    if yname == "map-info" { return "MapInfo" }
    if yname == "sources" { return "Sources" }
    return ""
}

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetSegmentPath() string {
    return "ssm-map-detail"
}

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "map-info" {
        return &ssmMapDetail.MapInfo
    }
    if childYangName == "sources" {
        for _, c := range ssmMapDetail.Sources {
            if ssmMapDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources{}
        ssmMapDetail.Sources = append(ssmMapDetail.Sources, child)
        return &ssmMapDetail.Sources[len(ssmMapDetail.Sources)-1]
    }
    return nil
}

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["map-info"] = &ssmMapDetail.MapInfo
    for i := range ssmMapDetail.Sources {
        children[ssmMapDetail.Sources[i].GetSegmentPath()] = &ssmMapDetail.Sources[i]
    }
    return children
}

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-map-type"] = ssmMapDetail.SsmMapType
    leafs["group-address"] = ssmMapDetail.GroupAddress
    leafs["expiration-time"] = ssmMapDetail.ExpirationTime
    leafs["response-pending"] = ssmMapDetail.ResponsePending
    leafs["query-interval"] = ssmMapDetail.QueryInterval
    leafs["elapsed-time"] = ssmMapDetail.ElapsedTime
    return leafs
}

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetYangName() string { return "ssm-map-detail" }

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) SetParent(parent types.Entity) { ssmMapDetail.parent = parent }

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetParent() types.Entity { return ssmMapDetail.parent }

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetParentYangName() string { return "ssm-map-details" }

// Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetFilter() yfilter.YFilter { return mapInfo.YFilter }

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) SetFilter(yf yfilter.YFilter) { mapInfo.YFilter = yf }

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetGoName(yname string) string {
    if yname == "map-type" { return "MapType" }
    if yname == "source-counts" { return "SourceCounts" }
    if yname == "group-address-xr" { return "GroupAddressXr" }
    return ""
}

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetSegmentPath() string {
    return "map-info"
}

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-address-xr" {
        return &mapInfo.GroupAddressXr
    }
    return nil
}

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-address-xr"] = &mapInfo.GroupAddressXr
    return children
}

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["map-type"] = mapInfo.MapType
    leafs["source-counts"] = mapInfo.SourceCounts
    return leafs
}

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleName() string { return "cisco_ios_xr" }

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetYangName() string { return "map-info" }

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) SetParent(parent types.Entity) { mapInfo.parent = parent }

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetParent() types.Entity { return mapInfo.parent }

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetParentYangName() string { return "ssm-map-detail" }

// Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetFilter() yfilter.YFilter { return groupAddressXr.YFilter }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetFilter(yf yfilter.YFilter) { groupAddressXr.YFilter = yf }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetSegmentPath() string {
    return "group-address-xr"
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = groupAddressXr.AfName
    leafs["ipv4-address"] = groupAddressXr.Ipv4Address
    leafs["ipv6-address"] = groupAddressXr.Ipv6Address
    return leafs
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleName() string { return "cisco_ios_xr" }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetYangName() string { return "group-address-xr" }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) SetParent(parent types.Entity) { groupAddressXr.parent = parent }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParent() types.Entity { return groupAddressXr.parent }

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetParentYangName() string { return "map-info" }

// Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetFilter() yfilter.YFilter { return sources.YFilter }

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) SetFilter(yf yfilter.YFilter) { sources.YFilter = yf }

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetSegmentPath() string {
    return "sources"
}

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = sources.AfName
    leafs["ipv4-address"] = sources.Ipv4Address
    leafs["ipv6-address"] = sources.Ipv6Address
    return leafs
}

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetBundleName() string { return "cisco_ios_xr" }

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetYangName() string { return "sources" }

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) SetParent(parent types.Entity) { sources.parent = parent }

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetParent() types.Entity { return sources.parent }

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetParentYangName() string { return "ssm-map-detail" }

// Igmp_Active_DefaultContext_InterfaceStateOffs
// IGMP Interface state off
type Igmp_Active_DefaultContext_InterfaceStateOffs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetFilter() yfilter.YFilter { return interfaceStateOffs.YFilter }

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) SetFilter(yf yfilter.YFilter) { interfaceStateOffs.YFilter = yf }

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetGoName(yname string) string {
    if yname == "interface-state-off" { return "InterfaceStateOff" }
    return ""
}

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetSegmentPath() string {
    return "interface-state-offs"
}

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-state-off" {
        for _, c := range interfaceStateOffs.InterfaceStateOff {
            if interfaceStateOffs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff{}
        interfaceStateOffs.InterfaceStateOff = append(interfaceStateOffs.InterfaceStateOff, child)
        return &interfaceStateOffs.InterfaceStateOff[len(interfaceStateOffs.InterfaceStateOff)-1]
    }
    return nil
}

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceStateOffs.InterfaceStateOff {
        children[interfaceStateOffs.InterfaceStateOff[i].GetSegmentPath()] = &interfaceStateOffs.InterfaceStateOff[i]
    }
    return children
}

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetYangName() string { return "interface-state-offs" }

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) SetParent(parent types.Entity) { interfaceStateOffs.parent = parent }

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetParent() types.Entity { return interfaceStateOffs.parent }

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetParentYangName() string { return "default-context" }

// Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetFilter() yfilter.YFilter { return interfaceStateOff.YFilter }

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) SetFilter(yf yfilter.YFilter) { interfaceStateOff.YFilter = yf }

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "state" { return "State" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "is-interface-up" { return "IsInterfaceUp" }
    if yname == "is-ip-enabled" { return "IsIpEnabled" }
    if yname == "is-router-enabled" { return "IsRouterEnabled" }
    if yname == "igmp-version" { return "IgmpVersion" }
    if yname == "host-version" { return "HostVersion" }
    if yname == "query-interval" { return "QueryInterval" }
    if yname == "query-timeout" { return "QueryTimeout" }
    if yname == "query-maximum-response-time" { return "QueryMaximumResponseTime" }
    if yname == "last-member-query-interval" { return "LastMemberQueryInterval" }
    if yname == "group-joins" { return "GroupJoins" }
    if yname == "group-leaves" { return "GroupLeaves" }
    if yname == "is-querier" { return "IsQuerier" }
    if yname == "total-active-groups" { return "TotalActiveGroups" }
    if yname == "robustness" { return "Robustness" }
    if yname == "proxy-interface" { return "ProxyInterface" }
    if yname == "querier-uptime" { return "QuerierUptime" }
    if yname == "las-ll-registration-count" { return "LasLlRegistrationCount" }
    if yname == "las-get-address-count" { return "LasGetAddressCount" }
    if yname == "las-update-count" { return "LasUpdateCount" }
    if yname == "las-ll-remove-update-count" { return "LasLlRemoveUpdateCount" }
    if yname == "las-ll-add-update-count" { return "LasLlAddUpdateCount" }
    if yname == "las-null-update-count" { return "LasNullUpdateCount" }
    if yname == "las-unregistration-count" { return "LasUnregistrationCount" }
    if yname == "is-las-request" { return "IsLasRequest" }
    if yname == "is-las-registered" { return "IsLasRegistered" }
    if yname == "vrf-id" { return "VrfId" }
    if yname == "mte-vrf-id" { return "MteVrfId" }
    if yname == "location" { return "Location" }
    if yname == "mtu" { return "Mtu" }
    if yname == "vrf-state" { return "VrfState" }
    if yname == "is-configurationverify" { return "IsConfigurationverify" }
    if yname == "configurationvrf-set" { return "ConfigurationvrfSet" }
    if yname == "configurationvrf-error" { return "ConfigurationvrfError" }
    if yname == "configuration-mcast-vrf-set" { return "ConfigurationMcastVrfSet" }
    if yname == "configuration-mcast-vrf-error" { return "ConfigurationMcastVrfError" }
    if yname == "is-im-state-registered" { return "IsImStateRegistered" }
    if yname == "is-subscriber" { return "IsSubscriber" }
    if yname == "subscriber-mode" { return "SubscriberMode" }
    if yname == "is-identity-present" { return "IsIdentityPresent" }
    if yname == "subscriber-id" { return "SubscriberId" }
    if yname == "parent-ifhandle" { return "ParentIfhandle" }
    if yname == "time-since-last-query-in-seconds" { return "TimeSinceLastQueryInSeconds" }
    if yname == "time-since-last-report-in-seconds" { return "TimeSinceLastReportInSeconds" }
    if yname == "router-uptime-in-seconds" { return "RouterUptimeInSeconds" }
    if yname == "mte-tuple-count" { return "MteTupleCount" }
    if yname == "address" { return "Address" }
    if yname == "querier-address" { return "QuerierAddress" }
    if yname == "subscriber-address" { return "SubscriberAddress" }
    return ""
}

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetSegmentPath() string {
    return "interface-state-off" + "[interface-name='" + fmt.Sprintf("%v", interfaceStateOff.InterfaceName) + "']"
}

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address" {
        return &interfaceStateOff.Address
    }
    if childYangName == "querier-address" {
        return &interfaceStateOff.QuerierAddress
    }
    if childYangName == "subscriber-address" {
        return &interfaceStateOff.SubscriberAddress
    }
    return nil
}

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address"] = &interfaceStateOff.Address
    children["querier-address"] = &interfaceStateOff.QuerierAddress
    children["subscriber-address"] = &interfaceStateOff.SubscriberAddress
    return children
}

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceStateOff.InterfaceName
    leafs["interface-name-xr"] = interfaceStateOff.InterfaceNameXr
    leafs["state"] = interfaceStateOff.State
    leafs["prefix-length"] = interfaceStateOff.PrefixLength
    leafs["is-interface-up"] = interfaceStateOff.IsInterfaceUp
    leafs["is-ip-enabled"] = interfaceStateOff.IsIpEnabled
    leafs["is-router-enabled"] = interfaceStateOff.IsRouterEnabled
    leafs["igmp-version"] = interfaceStateOff.IgmpVersion
    leafs["host-version"] = interfaceStateOff.HostVersion
    leafs["query-interval"] = interfaceStateOff.QueryInterval
    leafs["query-timeout"] = interfaceStateOff.QueryTimeout
    leafs["query-maximum-response-time"] = interfaceStateOff.QueryMaximumResponseTime
    leafs["last-member-query-interval"] = interfaceStateOff.LastMemberQueryInterval
    leafs["group-joins"] = interfaceStateOff.GroupJoins
    leafs["group-leaves"] = interfaceStateOff.GroupLeaves
    leafs["is-querier"] = interfaceStateOff.IsQuerier
    leafs["total-active-groups"] = interfaceStateOff.TotalActiveGroups
    leafs["robustness"] = interfaceStateOff.Robustness
    leafs["proxy-interface"] = interfaceStateOff.ProxyInterface
    leafs["querier-uptime"] = interfaceStateOff.QuerierUptime
    leafs["las-ll-registration-count"] = interfaceStateOff.LasLlRegistrationCount
    leafs["las-get-address-count"] = interfaceStateOff.LasGetAddressCount
    leafs["las-update-count"] = interfaceStateOff.LasUpdateCount
    leafs["las-ll-remove-update-count"] = interfaceStateOff.LasLlRemoveUpdateCount
    leafs["las-ll-add-update-count"] = interfaceStateOff.LasLlAddUpdateCount
    leafs["las-null-update-count"] = interfaceStateOff.LasNullUpdateCount
    leafs["las-unregistration-count"] = interfaceStateOff.LasUnregistrationCount
    leafs["is-las-request"] = interfaceStateOff.IsLasRequest
    leafs["is-las-registered"] = interfaceStateOff.IsLasRegistered
    leafs["vrf-id"] = interfaceStateOff.VrfId
    leafs["mte-vrf-id"] = interfaceStateOff.MteVrfId
    leafs["location"] = interfaceStateOff.Location
    leafs["mtu"] = interfaceStateOff.Mtu
    leafs["vrf-state"] = interfaceStateOff.VrfState
    leafs["is-configurationverify"] = interfaceStateOff.IsConfigurationverify
    leafs["configurationvrf-set"] = interfaceStateOff.ConfigurationvrfSet
    leafs["configurationvrf-error"] = interfaceStateOff.ConfigurationvrfError
    leafs["configuration-mcast-vrf-set"] = interfaceStateOff.ConfigurationMcastVrfSet
    leafs["configuration-mcast-vrf-error"] = interfaceStateOff.ConfigurationMcastVrfError
    leafs["is-im-state-registered"] = interfaceStateOff.IsImStateRegistered
    leafs["is-subscriber"] = interfaceStateOff.IsSubscriber
    leafs["subscriber-mode"] = interfaceStateOff.SubscriberMode
    leafs["is-identity-present"] = interfaceStateOff.IsIdentityPresent
    leafs["subscriber-id"] = interfaceStateOff.SubscriberId
    leafs["parent-ifhandle"] = interfaceStateOff.ParentIfhandle
    leafs["time-since-last-query-in-seconds"] = interfaceStateOff.TimeSinceLastQueryInSeconds
    leafs["time-since-last-report-in-seconds"] = interfaceStateOff.TimeSinceLastReportInSeconds
    leafs["router-uptime-in-seconds"] = interfaceStateOff.RouterUptimeInSeconds
    leafs["mte-tuple-count"] = interfaceStateOff.MteTupleCount
    return leafs
}

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetYangName() string { return "interface-state-off" }

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) SetParent(parent types.Entity) { interfaceStateOff.parent = parent }

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetParent() types.Entity { return interfaceStateOff.parent }

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetParentYangName() string { return "interface-state-offs" }

// Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetFilter() yfilter.YFilter { return address.YFilter }

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) SetFilter(yf yfilter.YFilter) { address.YFilter = yf }

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetSegmentPath() string {
    return "address"
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = address.AfName
    leafs["ipv4-address"] = address.Ipv4Address
    leafs["ipv6-address"] = address.Ipv6Address
    return leafs
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleName() string { return "cisco_ios_xr" }

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetYangName() string { return "address" }

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) SetParent(parent types.Entity) { address.parent = parent }

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetParent() types.Entity { return address.parent }

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetParentYangName() string { return "interface-state-off" }

// Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetFilter() yfilter.YFilter { return querierAddress.YFilter }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetFilter(yf yfilter.YFilter) { querierAddress.YFilter = yf }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetSegmentPath() string {
    return "querier-address"
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = querierAddress.AfName
    leafs["ipv4-address"] = querierAddress.Ipv4Address
    leafs["ipv6-address"] = querierAddress.Ipv6Address
    return leafs
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleName() string { return "cisco_ios_xr" }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetYangName() string { return "querier-address" }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) SetParent(parent types.Entity) { querierAddress.parent = parent }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParent() types.Entity { return querierAddress.parent }

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetParentYangName() string { return "interface-state-off" }

// Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetFilter() yfilter.YFilter { return subscriberAddress.YFilter }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetFilter(yf yfilter.YFilter) { subscriberAddress.YFilter = yf }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetSegmentPath() string {
    return "subscriber-address"
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = subscriberAddress.AfName
    leafs["ipv4-address"] = subscriberAddress.Ipv4Address
    leafs["ipv6-address"] = subscriberAddress.Ipv6Address
    return leafs
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetYangName() string { return "subscriber-address" }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) SetParent(parent types.Entity) { subscriberAddress.parent = parent }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParent() types.Entity { return subscriberAddress.parent }

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetParentYangName() string { return "interface-state-off" }

