// This module contains a collection of YANG definitions
// for Cisco IOS-XR ipv4-igmp package operational data.
// 
// This module contains definitions
// for the following management objects:
//   mld: MLD operational data
//   igmp: igmp
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ipv4_igmp_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ipv4_igmp_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-igmp-oper mld}", reflect.TypeOf(Mld{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-igmp-oper:mld", reflect.TypeOf(Mld{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-igmp-oper igmp}", reflect.TypeOf(Igmp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-igmp-oper:igmp", reflect.TypeOf(Igmp{}))
}

// IgmpEdmProtocol represents IGMP Protocol
type IgmpEdmProtocol string

const (
    // no route
    IgmpEdmProtocol_no_route IgmpEdmProtocol = "no-route"

    // sm
    IgmpEdmProtocol_sm IgmpEdmProtocol = "sm"

    // dm
    IgmpEdmProtocol_dm IgmpEdmProtocol = "dm"

    // bidir
    IgmpEdmProtocol_bidir IgmpEdmProtocol = "bidir"

    // ssm
    IgmpEdmProtocol_ssm IgmpEdmProtocol = "ssm"

    // any
    IgmpEdmProtocol_any IgmpEdmProtocol = "any"
)

// IgmpAfi represents Address family
type IgmpAfi string

const (
    // IP v4 unicast
    IgmpAfi_ipv4_unicast IgmpAfi = "ipv4-unicast"

    // IP v6 unicast
    IgmpAfi_ipv6_unicast IgmpAfi = "ipv6-unicast"
)

// IgmpssmMap represents Igmpssm map
type IgmpssmMap string

const (
    // Static
    IgmpssmMap_static IgmpssmMap = "static"

    // Dns
    IgmpssmMap_dns IgmpssmMap = "dns"

    // All
    IgmpssmMap_all IgmpssmMap = "all"
)

// Mld
// MLD operational data
type Mld struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Standby Process.
    Standby Mld_Standby

    // Active Process.
    Active Mld_Active
}

func (mld *Mld) GetEntityData() *types.CommonEntityData {
    mld.EntityData.YFilter = mld.YFilter
    mld.EntityData.YangName = "mld"
    mld.EntityData.BundleName = "cisco_ios_xr"
    mld.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-igmp-oper"
    mld.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-igmp-oper:mld"
    mld.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mld.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mld.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mld.EntityData.Children = types.NewOrderedMap()
    mld.EntityData.Children.Append("standby", types.YChild{"Standby", &mld.Standby})
    mld.EntityData.Children.Append("active", types.YChild{"Active", &mld.Active})
    mld.EntityData.Leafs = types.NewOrderedMap()

    mld.EntityData.YListKeys = []string {}

    return &(mld.EntityData)
}

// Mld_Standby
// Standby Process
type Mld_Standby struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Table.
    Vrfs Mld_Standby_Vrfs

    // Process.
    Process Mld_Standby_Process

    // Default Context.
    DefaultContext Mld_Standby_DefaultContext
}

func (standby *Mld_Standby) GetEntityData() *types.CommonEntityData {
    standby.EntityData.YFilter = standby.YFilter
    standby.EntityData.YangName = "standby"
    standby.EntityData.BundleName = "cisco_ios_xr"
    standby.EntityData.ParentYangName = "mld"
    standby.EntityData.SegmentPath = "standby"
    standby.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standby.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standby.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standby.EntityData.Children = types.NewOrderedMap()
    standby.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &standby.Vrfs})
    standby.EntityData.Children.Append("process", types.YChild{"Process", &standby.Process})
    standby.EntityData.Children.Append("default-context", types.YChild{"DefaultContext", &standby.DefaultContext})
    standby.EntityData.Leafs = types.NewOrderedMap()

    standby.EntityData.YListKeys = []string {}

    return &(standby.EntityData)
}

// Mld_Standby_Vrfs
// VRF Table
type Mld_Standby_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table Names. The type is slice of Mld_Standby_Vrfs_Vrf.
    Vrf []*Mld_Standby_Vrfs_Vrf
}

func (vrfs *Mld_Standby_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "standby"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// Mld_Standby_Vrfs_Vrf
// VRF table Names
type Mld_Standby_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with length: 1..32.
    VrfName interface{}

    // IGMP Summary Information.
    Summary Mld_Standby_Vrfs_Vrf_Summary

    // IGMP Interface state on.
    InterfaceStateOns Mld_Standby_Vrfs_Vrf_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Mld_Standby_Vrfs_Vrf_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Mld_Standby_Vrfs_Vrf_NonActiveGroups

    // SSM Map Table.
    SsmMaps Mld_Standby_Vrfs_Vrf_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Mld_Standby_Vrfs_Vrf_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Mld_Standby_Vrfs_Vrf_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Mld_Standby_Vrfs_Vrf_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Mld_Standby_Vrfs_Vrf_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Mld_Standby_Vrfs_Vrf_TrafficCounters

    // IGMP Group Database Table.
    Groups Mld_Standby_Vrfs_Vrf_Groups

    // IGMP Groups Summary.
    GroupSummary Mld_Standby_Vrfs_Vrf_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Mld_Standby_Vrfs_Vrf_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Mld_Standby_Vrfs_Vrf_InterfaceStateOffs
}

func (vrf *Mld_Standby_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("summary", types.YChild{"Summary", &vrf.Summary})
    vrf.EntityData.Children.Append("interface-state-ons", types.YChild{"InterfaceStateOns", &vrf.InterfaceStateOns})
    vrf.EntityData.Children.Append("detail-groups", types.YChild{"DetailGroups", &vrf.DetailGroups})
    vrf.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", &vrf.NonActiveGroups})
    vrf.EntityData.Children.Append("ssm-maps", types.YChild{"SsmMaps", &vrf.SsmMaps})
    vrf.EntityData.Children.Append("explicit-groups", types.YChild{"ExplicitGroups", &vrf.ExplicitGroups})
    vrf.EntityData.Children.Append("interface-table", types.YChild{"InterfaceTable", &vrf.InterfaceTable})
    vrf.EntityData.Children.Append("interface-unicast-qos-adjusts", types.YChild{"InterfaceUnicastQosAdjusts", &vrf.InterfaceUnicastQosAdjusts})
    vrf.EntityData.Children.Append("ranges", types.YChild{"Ranges", &vrf.Ranges})
    vrf.EntityData.Children.Append("ifrs-interfaces", types.YChild{"IfrsInterfaces", &vrf.IfrsInterfaces})
    vrf.EntityData.Children.Append("traffic-counters", types.YChild{"TrafficCounters", &vrf.TrafficCounters})
    vrf.EntityData.Children.Append("groups", types.YChild{"Groups", &vrf.Groups})
    vrf.EntityData.Children.Append("group-summary", types.YChild{"GroupSummary", &vrf.GroupSummary})
    vrf.EntityData.Children.Append("ifrs-interface-summary", types.YChild{"IfrsInterfaceSummary", &vrf.IfrsInterfaceSummary})
    vrf.EntityData.Children.Append("global-interface-table", types.YChild{"GlobalInterfaceTable", &vrf.GlobalInterfaceTable})
    vrf.EntityData.Children.Append("ssm-map-details", types.YChild{"SsmMapDetails", &vrf.SsmMapDetails})
    vrf.EntityData.Children.Append("interface-state-offs", types.YChild{"InterfaceStateOffs", &vrf.InterfaceStateOffs})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// Mld_Standby_Vrfs_Vrf_Summary
// IGMP Summary Information
type Mld_Standby_Vrfs_Vrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Mld_Standby_Vrfs_Vrf_Summary_Interface.
    Interface []*Mld_Standby_Vrfs_Vrf_Summary_Interface
}

func (summary *Mld_Standby_Vrfs_Vrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range summary.Interface {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.Interface[i]), types.YChild{"Interface", summary.Interface[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", summary.Robustness})
    summary.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", summary.GroupLimit})
    summary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", summary.GroupCount})
    summary.EntityData.Leafs.Append("is-disabled", types.YLeaf{"IsDisabled", summary.IsDisabled})
    summary.EntityData.Leafs.Append("supported-interfaces", types.YLeaf{"SupportedInterfaces", summary.SupportedInterfaces})
    summary.EntityData.Leafs.Append("unsupported-interfaces", types.YLeaf{"UnsupportedInterfaces", summary.UnsupportedInterfaces})
    summary.EntityData.Leafs.Append("enabled-interface-count", types.YLeaf{"EnabledInterfaceCount", summary.EnabledInterfaceCount})
    summary.EntityData.Leafs.Append("disabled-interface-count", types.YLeaf{"DisabledInterfaceCount", summary.DisabledInterfaceCount})
    summary.EntityData.Leafs.Append("tunnel-mte-config-count", types.YLeaf{"TunnelMteConfigCount", summary.TunnelMteConfigCount})
    summary.EntityData.Leafs.Append("node-low-memory", types.YLeaf{"NodeLowMemory", summary.NodeLowMemory})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Mld_Standby_Vrfs_Vrf_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Mld_Standby_Vrfs_Vrf_Summary_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Mld_Standby_Vrfs_Vrf_Summary_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "summary"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", self.GroupLimit})
    self.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", self.GroupCount})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("on-off", types.YLeaf{"OnOff", self.OnOff})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceStateOns
// IGMP Interface state on
type Mld_Standby_Vrfs_Vrf_InterfaceStateOns struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []*Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Mld_Standby_Vrfs_Vrf_InterfaceStateOns) GetEntityData() *types.CommonEntityData {
    interfaceStateOns.EntityData.YFilter = interfaceStateOns.YFilter
    interfaceStateOns.EntityData.YangName = "interface-state-ons"
    interfaceStateOns.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOns.EntityData.ParentYangName = "vrf"
    interfaceStateOns.EntityData.SegmentPath = "interface-state-ons"
    interfaceStateOns.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOns.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOns.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOns.EntityData.Children = types.NewOrderedMap()
    interfaceStateOns.EntityData.Children.Append("interface-state-on", types.YChild{"InterfaceStateOn", nil})
    for i := range interfaceStateOns.InterfaceStateOn {
        interfaceStateOns.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOns.InterfaceStateOn[i]), types.YChild{"InterfaceStateOn", interfaceStateOns.InterfaceStateOn[i]})
    }
    interfaceStateOns.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOns.EntityData.YListKeys = []string {}

    return &(interfaceStateOns.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetEntityData() *types.CommonEntityData {
    interfaceStateOn.EntityData.YFilter = interfaceStateOn.YFilter
    interfaceStateOn.EntityData.YangName = "interface-state-on"
    interfaceStateOn.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOn.EntityData.ParentYangName = "interface-state-ons"
    interfaceStateOn.EntityData.SegmentPath = "interface-state-on" + types.AddKeyToken(interfaceStateOn.InterfaceName, "interface-name")
    interfaceStateOn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOn.EntityData.Children = types.NewOrderedMap()
    interfaceStateOn.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOn.Address})
    interfaceStateOn.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOn.QuerierAddress})
    interfaceStateOn.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOn.SubscriberAddress})
    interfaceStateOn.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOn.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOn.InterfaceName})
    interfaceStateOn.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOn.InterfaceNameXr})
    interfaceStateOn.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOn.State})
    interfaceStateOn.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOn.PrefixLength})
    interfaceStateOn.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOn.IsInterfaceUp})
    interfaceStateOn.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOn.IsIpEnabled})
    interfaceStateOn.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOn.IsRouterEnabled})
    interfaceStateOn.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOn.IgmpVersion})
    interfaceStateOn.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOn.HostVersion})
    interfaceStateOn.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOn.QueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOn.QueryTimeout})
    interfaceStateOn.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOn.QueryMaximumResponseTime})
    interfaceStateOn.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOn.LastMemberQueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOn.GroupJoins})
    interfaceStateOn.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOn.GroupLeaves})
    interfaceStateOn.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOn.IsQuerier})
    interfaceStateOn.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOn.TotalActiveGroups})
    interfaceStateOn.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOn.Robustness})
    interfaceStateOn.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOn.ProxyInterface})
    interfaceStateOn.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOn.QuerierUptime})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOn.LasLlRegistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOn.LasGetAddressCount})
    interfaceStateOn.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOn.LasUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOn.LasLlRemoveUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOn.LasLlAddUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOn.LasNullUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOn.LasUnregistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOn.IsLasRequest})
    interfaceStateOn.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOn.IsLasRegistered})
    interfaceStateOn.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOn.VrfId})
    interfaceStateOn.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOn.MteVrfId})
    interfaceStateOn.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOn.Location})
    interfaceStateOn.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOn.Mtu})
    interfaceStateOn.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOn.VrfState})
    interfaceStateOn.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOn.IsConfigurationverify})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOn.ConfigurationvrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOn.ConfigurationvrfError})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOn.ConfigurationMcastVrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOn.ConfigurationMcastVrfError})
    interfaceStateOn.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOn.IsImStateRegistered})
    interfaceStateOn.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOn.IsSubscriber})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOn.SubscriberMode})
    interfaceStateOn.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOn.IsIdentityPresent})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOn.SubscriberId})
    interfaceStateOn.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOn.ParentIfhandle})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOn.TimeSinceLastQueryInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOn.TimeSinceLastReportInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOn.RouterUptimeInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOn.MteTupleCount})

    interfaceStateOn.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOn.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-on"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-on"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-on"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_DetailGroups
// IGMP Detail Group Database
type Mld_Standby_Vrfs_Vrf_DetailGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup.
    DetailGroup []*Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup
}

func (detailGroups *Mld_Standby_Vrfs_Vrf_DetailGroups) GetEntityData() *types.CommonEntityData {
    detailGroups.EntityData.YFilter = detailGroups.YFilter
    detailGroups.EntityData.YangName = "detail-groups"
    detailGroups.EntityData.BundleName = "cisco_ios_xr"
    detailGroups.EntityData.ParentYangName = "vrf"
    detailGroups.EntityData.SegmentPath = "detail-groups"
    detailGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroups.EntityData.Children = types.NewOrderedMap()
    detailGroups.EntityData.Children.Append("detail-group", types.YChild{"DetailGroup", nil})
    for i := range detailGroups.DetailGroup {
        detailGroups.EntityData.Children.Append(types.GetSegmentPath(detailGroups.DetailGroup[i]), types.YChild{"DetailGroup", detailGroups.DetailGroup[i]})
    }
    detailGroups.EntityData.Leafs = types.NewOrderedMap()

    detailGroups.EntityData.YListKeys = []string {}

    return &(detailGroups.EntityData)
}

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source.
    Source []*Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source
}

func (detailGroup *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetEntityData() *types.CommonEntityData {
    detailGroup.EntityData.YFilter = detailGroup.YFilter
    detailGroup.EntityData.YangName = "detail-group"
    detailGroup.EntityData.BundleName = "cisco_ios_xr"
    detailGroup.EntityData.ParentYangName = "detail-groups"
    detailGroup.EntityData.SegmentPath = "detail-group"
    detailGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroup.EntityData.Children = types.NewOrderedMap()
    detailGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &detailGroup.GroupInfo})
    detailGroup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range detailGroup.Source {
        detailGroup.EntityData.Children.Append(types.GetSegmentPath(detailGroup.Source[i]), types.YChild{"Source", detailGroup.Source[i]})
    }
    detailGroup.EntityData.Leafs = types.NewOrderedMap()
    detailGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", detailGroup.GroupAddress})
    detailGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", detailGroup.InterfaceName})
    detailGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", detailGroup.SourceAddress})
    detailGroup.EntityData.Leafs.Append("is-router-exclude-mode", types.YLeaf{"IsRouterExcludeMode", detailGroup.IsRouterExcludeMode})
    detailGroup.EntityData.Leafs.Append("is-host-exclude-mode", types.YLeaf{"IsHostExcludeMode", detailGroup.IsHostExcludeMode})

    detailGroup.EntityData.YListKeys = []string {}

    return &(detailGroup.EntityData)
}

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "detail-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source
// List of sources
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "detail-group"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &source.SourceAddress})
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", source.Uptime})
    source.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", source.ExpirationTime})
    source.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", source.IsLocal})
    source.EntityData.Leafs.Append("is-remote", types.YLeaf{"IsRemote", source.IsRemote})
    source.EntityData.Leafs.Append("is-forward", types.YLeaf{"IsForward", source.IsForward})
    source.EntityData.Leafs.Append("is-we-report", types.YLeaf{"IsWeReport", source.IsWeReport})
    source.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", source.Flags})
    source.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", source.IsAdded})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "source"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_NonActiveGroups
// IGMP Non-Active Groups Information
type Mld_Standby_Vrfs_Vrf_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []*Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "vrf"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", nil})
    for i := range nonActiveGroups.NonActiveGroups {
        nonActiveGroups.EntityData.Children.Append(types.GetSegmentPath(nonActiveGroups.NonActiveGroups[i]), types.YChild{"NonActiveGroups", nonActiveGroups.NonActiveGroups[i]})
    }
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "non-active-groups"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &nonActiveGroups.GroupAddress})
    nonActiveGroups.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &nonActiveGroups.SourceAddress})
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()
    nonActiveGroups.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", nonActiveGroups.Interface})
    nonActiveGroups.EntityData.Leafs.Append("reason-for-non-activity", types.YLeaf{"ReasonForNonActivity", nonActiveGroups.ReasonForNonActivity})

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "non-active-groups"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "non-active-groups"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_SsmMaps
// SSM Map Table
type Mld_Standby_Vrfs_Vrf_SsmMaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap.
    SsmMap []*Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap
}

func (ssmMaps *Mld_Standby_Vrfs_Vrf_SsmMaps) GetEntityData() *types.CommonEntityData {
    ssmMaps.EntityData.YFilter = ssmMaps.YFilter
    ssmMaps.EntityData.YangName = "ssm-maps"
    ssmMaps.EntityData.BundleName = "cisco_ios_xr"
    ssmMaps.EntityData.ParentYangName = "vrf"
    ssmMaps.EntityData.SegmentPath = "ssm-maps"
    ssmMaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMaps.EntityData.Children = types.NewOrderedMap()
    ssmMaps.EntityData.Children.Append("ssm-map", types.YChild{"SsmMap", nil})
    for i := range ssmMaps.SsmMap {
        ssmMaps.EntityData.Children.Append(types.GetSegmentPath(ssmMaps.SsmMap[i]), types.YChild{"SsmMap", ssmMaps.SsmMap[i]})
    }
    ssmMaps.EntityData.Leafs = types.NewOrderedMap()

    ssmMaps.EntityData.YListKeys = []string {}

    return &(ssmMaps.EntityData)
}

// Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap
// SSM Map information
type Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetEntityData() *types.CommonEntityData {
    ssmMap.EntityData.YFilter = ssmMap.YFilter
    ssmMap.EntityData.YangName = "ssm-map"
    ssmMap.EntityData.BundleName = "cisco_ios_xr"
    ssmMap.EntityData.ParentYangName = "ssm-maps"
    ssmMap.EntityData.SegmentPath = "ssm-map"
    ssmMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMap.EntityData.Children = types.NewOrderedMap()
    ssmMap.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &ssmMap.GroupAddressXr})
    ssmMap.EntityData.Leafs = types.NewOrderedMap()
    ssmMap.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMap.SsmMapType})
    ssmMap.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMap.GroupAddress})
    ssmMap.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", ssmMap.MapType})
    ssmMap.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", ssmMap.SourceCounts})

    ssmMap.EntityData.YListKeys = []string {}

    return &(ssmMap.EntityData)
}

// Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "ssm-map"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Standby_Vrfs_Vrf_ExplicitGroups
// IGMP Explicit Group Database
type Mld_Standby_Vrfs_Vrf_ExplicitGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []*Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Mld_Standby_Vrfs_Vrf_ExplicitGroups) GetEntityData() *types.CommonEntityData {
    explicitGroups.EntityData.YFilter = explicitGroups.YFilter
    explicitGroups.EntityData.YangName = "explicit-groups"
    explicitGroups.EntityData.BundleName = "cisco_ios_xr"
    explicitGroups.EntityData.ParentYangName = "vrf"
    explicitGroups.EntityData.SegmentPath = "explicit-groups"
    explicitGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroups.EntityData.Children = types.NewOrderedMap()
    explicitGroups.EntityData.Children.Append("explicit-group", types.YChild{"ExplicitGroup", nil})
    for i := range explicitGroups.ExplicitGroup {
        explicitGroups.EntityData.Children.Append(types.GetSegmentPath(explicitGroups.ExplicitGroup[i]), types.YChild{"ExplicitGroup", explicitGroups.ExplicitGroup[i]})
    }
    explicitGroups.EntityData.Leafs = types.NewOrderedMap()

    explicitGroups.EntityData.YListKeys = []string {}

    return &(explicitGroups.EntityData)
}

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host.
    Host []*Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetEntityData() *types.CommonEntityData {
    explicitGroup.EntityData.YFilter = explicitGroup.YFilter
    explicitGroup.EntityData.YangName = "explicit-group"
    explicitGroup.EntityData.BundleName = "cisco_ios_xr"
    explicitGroup.EntityData.ParentYangName = "explicit-groups"
    explicitGroup.EntityData.SegmentPath = "explicit-group"
    explicitGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroup.EntityData.Children = types.NewOrderedMap()
    explicitGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &explicitGroup.GroupInfo})
    explicitGroup.EntityData.Children.Append("host", types.YChild{"Host", nil})
    for i := range explicitGroup.Host {
        explicitGroup.EntityData.Children.Append(types.GetSegmentPath(explicitGroup.Host[i]), types.YChild{"Host", explicitGroup.Host[i]})
    }
    explicitGroup.EntityData.Leafs = types.NewOrderedMap()
    explicitGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", explicitGroup.GroupAddress})
    explicitGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", explicitGroup.InterfaceName})
    explicitGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", explicitGroup.SourceAddress})
    explicitGroup.EntityData.Leafs.Append("include-hosts", types.YLeaf{"IncludeHosts", explicitGroup.IncludeHosts})
    explicitGroup.EntityData.Leafs.Append("exclude-hosts", types.YLeaf{"ExcludeHosts", explicitGroup.ExcludeHosts})

    explicitGroup.EntityData.YListKeys = []string {}

    return &(explicitGroup.EntityData)
}

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "explicit-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []*Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetEntityData() *types.CommonEntityData {
    host.EntityData.YFilter = host.YFilter
    host.EntityData.YangName = "host"
    host.EntityData.BundleName = "cisco_ios_xr"
    host.EntityData.ParentYangName = "explicit-group"
    host.EntityData.SegmentPath = "host"
    host.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    host.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    host.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    host.EntityData.Children = types.NewOrderedMap()
    host.EntityData.Children.Append("address", types.YChild{"Address", &host.Address})
    host.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", nil})
    for i := range host.SourceAddress {
        host.EntityData.Children.Append(types.GetSegmentPath(host.SourceAddress[i]), types.YChild{"SourceAddress", host.SourceAddress[i]})
    }
    host.EntityData.Leafs = types.NewOrderedMap()
    host.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", host.Uptime})
    host.EntityData.Leafs.Append("is-exclude", types.YLeaf{"IsExclude", host.IsExclude})
    host.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", host.ExpirationTime})
    host.EntityData.Leafs.Append("source-count", types.YLeaf{"SourceCount", host.SourceCount})

    host.EntityData.YListKeys = []string {}

    return &(host.EntityData)
}

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "host"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "host"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceTable
// IGMP Interface specific Table
type Mld_Standby_Vrfs_Vrf_InterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface.
    Interface []*Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface
}

func (interfaceTable *Mld_Standby_Vrfs_Vrf_InterfaceTable) GetEntityData() *types.CommonEntityData {
    interfaceTable.EntityData.YFilter = interfaceTable.YFilter
    interfaceTable.EntityData.YangName = "interface-table"
    interfaceTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceTable.EntityData.ParentYangName = "vrf"
    interfaceTable.EntityData.SegmentPath = "interface-table"
    interfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceTable.EntityData.Children = types.NewOrderedMap()
    interfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceTable.Interface {
        interfaceTable.EntityData.Children.Append(types.GetSegmentPath(interfaceTable.Interface[i]), types.YChild{"Interface", interfaceTable.Interface[i]})
    }
    interfaceTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceTable.EntityData.YListKeys = []string {}

    return &(interfaceTable.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface
// IGMP Interface
type Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address
// IP address
type Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []*Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjusts.EntityData.YFilter = interfaceUnicastQosAdjusts.YFilter
    interfaceUnicastQosAdjusts.EntityData.YangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjusts.EntityData.ParentYangName = "vrf"
    interfaceUnicastQosAdjusts.EntityData.SegmentPath = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjusts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjusts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjusts.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjusts.EntityData.Children.Append("interface-unicast-qos-adjust", types.YChild{"InterfaceUnicastQosAdjust", nil})
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        interfaceUnicastQosAdjusts.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]), types.YChild{"InterfaceUnicastQosAdjust", interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]})
    }
    interfaceUnicastQosAdjusts.EntityData.Leafs = types.NewOrderedMap()

    interfaceUnicastQosAdjusts.EntityData.YListKeys = []string {}

    return &(interfaceUnicastQosAdjusts.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []*Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjust.EntityData.YFilter = interfaceUnicastQosAdjust.YFilter
    interfaceUnicastQosAdjust.EntityData.YangName = "interface-unicast-qos-adjust"
    interfaceUnicastQosAdjust.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjust.EntityData.ParentYangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjust.EntityData.SegmentPath = "interface-unicast-qos-adjust" + types.AddKeyToken(interfaceUnicastQosAdjust.InterfaceName, "interface-name")
    interfaceUnicastQosAdjust.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjust.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjust.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjust.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Children.Append("update", types.YChild{"Update", nil})
    for i := range interfaceUnicastQosAdjust.Update {
        interfaceUnicastQosAdjust.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjust.Update[i]), types.YChild{"Update", interfaceUnicastQosAdjust.Update[i]})
    }
    interfaceUnicastQosAdjust.EntityData.Leafs = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceUnicastQosAdjust.InterfaceName})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("is-virtual-access", types.YLeaf{"IsVirtualAccess", interfaceUnicastQosAdjust.IsVirtualAccess})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate", types.YLeaf{"Rate", interfaceUnicastQosAdjust.Rate})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-increments", types.YLeaf{"RateIncrements", interfaceUnicastQosAdjust.RateIncrements})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-decrements", types.YLeaf{"RateDecrements", interfaceUnicastQosAdjust.RateDecrements})

    interfaceUnicastQosAdjust.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceUnicastQosAdjust.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetEntityData() *types.CommonEntityData {
    update.EntityData.YFilter = update.YFilter
    update.EntityData.YangName = "update"
    update.EntityData.BundleName = "cisco_ios_xr"
    update.EntityData.ParentYangName = "interface-unicast-qos-adjust"
    update.EntityData.SegmentPath = "update"
    update.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    update.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    update.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    update.EntityData.Children = types.NewOrderedMap()
    update.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &update.SourceAddress})
    update.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &update.GroupAddress})
    update.EntityData.Leafs = types.NewOrderedMap()
    update.EntityData.Leafs.Append("is-add", types.YLeaf{"IsAdd", update.IsAdd})
    update.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", update.Weight})
    update.EntityData.Leafs.Append("received-time", types.YLeaf{"ReceivedTime", update.ReceivedTime})

    update.EntityData.YListKeys = []string {}

    return &(update.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "update"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "update"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_Ranges
// Range table
type Mld_Standby_Vrfs_Vrf_Ranges struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Range information. The type is slice of Mld_Standby_Vrfs_Vrf_Ranges_Range.
    Range []*Mld_Standby_Vrfs_Vrf_Ranges_Range
}

func (ranges *Mld_Standby_Vrfs_Vrf_Ranges) GetEntityData() *types.CommonEntityData {
    ranges.EntityData.YFilter = ranges.YFilter
    ranges.EntityData.YangName = "ranges"
    ranges.EntityData.BundleName = "cisco_ios_xr"
    ranges.EntityData.ParentYangName = "vrf"
    ranges.EntityData.SegmentPath = "ranges"
    ranges.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ranges.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ranges.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ranges.EntityData.Children = types.NewOrderedMap()
    ranges.EntityData.Children.Append("range", types.YChild{"Range", nil})
    for i := range ranges.Range {
        ranges.EntityData.Children.Append(types.GetSegmentPath(ranges.Range[i]), types.YChild{"Range", ranges.Range[i]})
    }
    ranges.EntityData.Leafs = types.NewOrderedMap()

    ranges.EntityData.YListKeys = []string {}

    return &(ranges.EntityData)
}

// Mld_Standby_Vrfs_Vrf_Ranges_Range
// Range information
type Mld_Standby_Vrfs_Vrf_Ranges_Range struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: 0..4294967295.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr
}

func (self *Mld_Standby_Vrfs_Vrf_Ranges_Range) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "range"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "ranges"
    self.EntityData.SegmentPath = "range"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &self.GroupAddressXr})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", self.GroupAddress})
    self.EntityData.Leafs.Append("group-mask", types.YLeaf{"GroupMask", self.GroupMask})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", self.Protocol})
    self.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", self.IsStale})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr
// Group address
type Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "range"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Standby_Vrfs_Vrf_IfrsInterfaces
// IGMP Interface specific
type Mld_Standby_Vrfs_Vrf_IfrsInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface.
    IfrsInterface []*Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Mld_Standby_Vrfs_Vrf_IfrsInterfaces) GetEntityData() *types.CommonEntityData {
    ifrsInterfaces.EntityData.YFilter = ifrsInterfaces.YFilter
    ifrsInterfaces.EntityData.YangName = "ifrs-interfaces"
    ifrsInterfaces.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaces.EntityData.ParentYangName = "vrf"
    ifrsInterfaces.EntityData.SegmentPath = "ifrs-interfaces"
    ifrsInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaces.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaces.EntityData.Children.Append("ifrs-interface", types.YChild{"IfrsInterface", nil})
    for i := range ifrsInterfaces.IfrsInterface {
        ifrsInterfaces.EntityData.Children.Append(types.GetSegmentPath(ifrsInterfaces.IfrsInterface[i]), types.YChild{"IfrsInterface", ifrsInterfaces.IfrsInterface[i]})
    }
    ifrsInterfaces.EntityData.Leafs = types.NewOrderedMap()

    ifrsInterfaces.EntityData.YListKeys = []string {}

    return &(ifrsInterfaces.EntityData)
}

// Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetEntityData() *types.CommonEntityData {
    ifrsInterface.EntityData.YFilter = ifrsInterface.YFilter
    ifrsInterface.EntityData.YangName = "ifrs-interface"
    ifrsInterface.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterface.EntityData.ParentYangName = "ifrs-interfaces"
    ifrsInterface.EntityData.SegmentPath = "ifrs-interface" + types.AddKeyToken(ifrsInterface.InterfaceName, "interface-name")
    ifrsInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterface.EntityData.Children = types.NewOrderedMap()
    ifrsInterface.EntityData.Children.Append("igmp-interface-entry", types.YChild{"IgmpInterfaceEntry", &ifrsInterface.IgmpInterfaceEntry})
    ifrsInterface.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ifrsInterface.InterfaceName})
    ifrsInterface.EntityData.Leafs.Append("join-group-count", types.YLeaf{"JoinGroupCount", ifrsInterface.JoinGroupCount})

    ifrsInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(ifrsInterface.EntityData)
}

// Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetEntityData() *types.CommonEntityData {
    igmpInterfaceEntry.EntityData.YFilter = igmpInterfaceEntry.YFilter
    igmpInterfaceEntry.EntityData.YangName = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.BundleName = "cisco_ios_xr"
    igmpInterfaceEntry.EntityData.ParentYangName = "ifrs-interface"
    igmpInterfaceEntry.EntityData.SegmentPath = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igmpInterfaceEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igmpInterfaceEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igmpInterfaceEntry.EntityData.Children = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Children.Append("address", types.YChild{"Address", &igmpInterfaceEntry.Address})
    igmpInterfaceEntry.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &igmpInterfaceEntry.QuerierAddress})
    igmpInterfaceEntry.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &igmpInterfaceEntry.SubscriberAddress})
    igmpInterfaceEntry.EntityData.Leafs = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", igmpInterfaceEntry.InterfaceNameXr})
    igmpInterfaceEntry.EntityData.Leafs.Append("state", types.YLeaf{"State", igmpInterfaceEntry.State})
    igmpInterfaceEntry.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", igmpInterfaceEntry.PrefixLength})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", igmpInterfaceEntry.IsInterfaceUp})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", igmpInterfaceEntry.IsIpEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", igmpInterfaceEntry.IsRouterEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", igmpInterfaceEntry.IgmpVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", igmpInterfaceEntry.HostVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", igmpInterfaceEntry.QueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", igmpInterfaceEntry.QueryTimeout})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", igmpInterfaceEntry.QueryMaximumResponseTime})
    igmpInterfaceEntry.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", igmpInterfaceEntry.LastMemberQueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", igmpInterfaceEntry.GroupJoins})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", igmpInterfaceEntry.GroupLeaves})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", igmpInterfaceEntry.IsQuerier})
    igmpInterfaceEntry.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", igmpInterfaceEntry.TotalActiveGroups})
    igmpInterfaceEntry.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", igmpInterfaceEntry.Robustness})
    igmpInterfaceEntry.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", igmpInterfaceEntry.ProxyInterface})
    igmpInterfaceEntry.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", igmpInterfaceEntry.QuerierUptime})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", igmpInterfaceEntry.LasLlRegistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", igmpInterfaceEntry.LasGetAddressCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", igmpInterfaceEntry.LasUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", igmpInterfaceEntry.LasLlRemoveUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", igmpInterfaceEntry.LasLlAddUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", igmpInterfaceEntry.LasNullUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", igmpInterfaceEntry.LasUnregistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", igmpInterfaceEntry.IsLasRequest})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", igmpInterfaceEntry.IsLasRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", igmpInterfaceEntry.VrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", igmpInterfaceEntry.MteVrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("location", types.YLeaf{"Location", igmpInterfaceEntry.Location})
    igmpInterfaceEntry.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", igmpInterfaceEntry.Mtu})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", igmpInterfaceEntry.VrfState})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", igmpInterfaceEntry.IsConfigurationverify})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", igmpInterfaceEntry.ConfigurationvrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", igmpInterfaceEntry.ConfigurationvrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", igmpInterfaceEntry.ConfigurationMcastVrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", igmpInterfaceEntry.ConfigurationMcastVrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", igmpInterfaceEntry.IsImStateRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", igmpInterfaceEntry.IsSubscriber})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", igmpInterfaceEntry.SubscriberMode})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", igmpInterfaceEntry.IsIdentityPresent})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", igmpInterfaceEntry.SubscriberId})
    igmpInterfaceEntry.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", igmpInterfaceEntry.ParentIfhandle})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", igmpInterfaceEntry.TimeSinceLastQueryInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", igmpInterfaceEntry.TimeSinceLastReportInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", igmpInterfaceEntry.RouterUptimeInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", igmpInterfaceEntry.MteTupleCount})

    igmpInterfaceEntry.EntityData.YListKeys = []string {}

    return &(igmpInterfaceEntry.EntityData)
}

// Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "igmp-interface-entry"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "igmp-interface-entry"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "igmp-interface-entry"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_TrafficCounters
// IGMP Message Traffic Counters
type Mld_Standby_Vrfs_Vrf_TrafficCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Mld_Standby_Vrfs_Vrf_TrafficCounters) GetEntityData() *types.CommonEntityData {
    trafficCounters.EntityData.YFilter = trafficCounters.YFilter
    trafficCounters.EntityData.YangName = "traffic-counters"
    trafficCounters.EntityData.BundleName = "cisco_ios_xr"
    trafficCounters.EntityData.ParentYangName = "vrf"
    trafficCounters.EntityData.SegmentPath = "traffic-counters"
    trafficCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficCounters.EntityData.Children = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", trafficCounters.ElapsedTime})
    trafficCounters.EntityData.Leafs.Append("packets-in", types.YLeaf{"PacketsIn", trafficCounters.PacketsIn})
    trafficCounters.EntityData.Leafs.Append("packets-out", types.YLeaf{"PacketsOut", trafficCounters.PacketsOut})
    trafficCounters.EntityData.Leafs.Append("format-errors", types.YLeaf{"FormatErrors", trafficCounters.FormatErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-input-errors", types.YLeaf{"PacketManagerInputErrors", trafficCounters.PacketManagerInputErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-output-errors", types.YLeaf{"PacketManagerOutputErrors", trafficCounters.PacketManagerOutputErrors})
    trafficCounters.EntityData.Leafs.Append("checksum-errors", types.YLeaf{"ChecksumErrors", trafficCounters.ChecksumErrors})
    trafficCounters.EntityData.Leafs.Append("receive-socket-errors", types.YLeaf{"ReceiveSocketErrors", trafficCounters.ReceiveSocketErrors})
    trafficCounters.EntityData.Leafs.Append("socket-errors", types.YLeaf{"SocketErrors", trafficCounters.SocketErrors})
    trafficCounters.EntityData.Leafs.Append("bad-scope-errors", types.YLeaf{"BadScopeErrors", trafficCounters.BadScopeErrors})
    trafficCounters.EntityData.Leafs.Append("auxillary-data-length-errors", types.YLeaf{"AuxillaryDataLengthErrors", trafficCounters.AuxillaryDataLengthErrors})
    trafficCounters.EntityData.Leafs.Append("invalid-source-address-errors", types.YLeaf{"InvalidSourceAddressErrors", trafficCounters.InvalidSourceAddressErrors})
    trafficCounters.EntityData.Leafs.Append("no-socket-connection", types.YLeaf{"NoSocketConnection", trafficCounters.NoSocketConnection})
    trafficCounters.EntityData.Leafs.Append("miscellaneous-errors", types.YLeaf{"MiscellaneousErrors", trafficCounters.MiscellaneousErrors})
    trafficCounters.EntityData.Leafs.Append("input-queries", types.YLeaf{"InputQueries", trafficCounters.InputQueries})
    trafficCounters.EntityData.Leafs.Append("input-reports", types.YLeaf{"InputReports", trafficCounters.InputReports})
    trafficCounters.EntityData.Leafs.Append("input-leaves", types.YLeaf{"InputLeaves", trafficCounters.InputLeaves})
    trafficCounters.EntityData.Leafs.Append("input-mtrace", types.YLeaf{"InputMtrace", trafficCounters.InputMtrace})
    trafficCounters.EntityData.Leafs.Append("input-dvmrp", types.YLeaf{"InputDvmrp", trafficCounters.InputDvmrp})
    trafficCounters.EntityData.Leafs.Append("input-pim", types.YLeaf{"InputPim", trafficCounters.InputPim})
    trafficCounters.EntityData.Leafs.Append("output-queries", types.YLeaf{"OutputQueries", trafficCounters.OutputQueries})
    trafficCounters.EntityData.Leafs.Append("output-reports", types.YLeaf{"OutputReports", trafficCounters.OutputReports})
    trafficCounters.EntityData.Leafs.Append("output-leaves", types.YLeaf{"OutputLeaves", trafficCounters.OutputLeaves})
    trafficCounters.EntityData.Leafs.Append("output-mtrace", types.YLeaf{"OutputMtrace", trafficCounters.OutputMtrace})
    trafficCounters.EntityData.Leafs.Append("output-dvmrp", types.YLeaf{"OutputDvmrp", trafficCounters.OutputDvmrp})
    trafficCounters.EntityData.Leafs.Append("output-pim", types.YLeaf{"OutputPim", trafficCounters.OutputPim})
    trafficCounters.EntityData.Leafs.Append("get-packet-failure", types.YLeaf{"GetPacketFailure", trafficCounters.GetPacketFailure})
    trafficCounters.EntityData.Leafs.Append("output-no-parent-interface-handle", types.YLeaf{"OutputNoParentInterfaceHandle", trafficCounters.OutputNoParentInterfaceHandle})
    trafficCounters.EntityData.Leafs.Append("input-no-idb", types.YLeaf{"InputNoIdb", trafficCounters.InputNoIdb})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-in-idb", types.YLeaf{"InputNoVrfInIdb", trafficCounters.InputNoVrfInIdb})
    trafficCounters.EntityData.Leafs.Append("input-disabled-idb", types.YLeaf{"InputDisabledIdb", trafficCounters.InputDisabledIdb})
    trafficCounters.EntityData.Leafs.Append("input-martian-address", types.YLeaf{"InputMartianAddress", trafficCounters.InputMartianAddress})
    trafficCounters.EntityData.Leafs.Append("input-no-assigned-vrf-id", types.YLeaf{"InputNoAssignedVrfId", trafficCounters.InputNoAssignedVrfId})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-mtrace", types.YLeaf{"InputNoVrfMtrace", trafficCounters.InputNoVrfMtrace})
    trafficCounters.EntityData.Leafs.Append("input-no-platform-support-mtrace", types.YLeaf{"InputNoPlatformSupportMtrace", trafficCounters.InputNoPlatformSupportMtrace})

    trafficCounters.EntityData.YListKeys = []string {}

    return &(trafficCounters.EntityData)
}

// Mld_Standby_Vrfs_Vrf_Groups
// IGMP Group Database Table
type Mld_Standby_Vrfs_Vrf_Groups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Mld_Standby_Vrfs_Vrf_Groups_Group.
    Group []*Mld_Standby_Vrfs_Vrf_Groups_Group
}

func (groups *Mld_Standby_Vrfs_Vrf_Groups) GetEntityData() *types.CommonEntityData {
    groups.EntityData.YFilter = groups.YFilter
    groups.EntityData.YangName = "groups"
    groups.EntityData.BundleName = "cisco_ios_xr"
    groups.EntityData.ParentYangName = "vrf"
    groups.EntityData.SegmentPath = "groups"
    groups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groups.EntityData.Children = types.NewOrderedMap()
    groups.EntityData.Children.Append("group", types.YChild{"Group", nil})
    for i := range groups.Group {
        groups.EntityData.Children.Append(types.GetSegmentPath(groups.Group[i]), types.YChild{"Group", groups.Group[i]})
    }
    groups.EntityData.Leafs = types.NewOrderedMap()

    groups.EntityData.YListKeys = []string {}

    return &(groups.EntityData)
}

// Mld_Standby_Vrfs_Vrf_Groups_Group
// IGMP Group Entry Information
type Mld_Standby_Vrfs_Vrf_Groups_Group struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress
}

func (group *Mld_Standby_Vrfs_Vrf_Groups_Group) GetEntityData() *types.CommonEntityData {
    group.EntityData.YFilter = group.YFilter
    group.EntityData.YangName = "group"
    group.EntityData.BundleName = "cisco_ios_xr"
    group.EntityData.ParentYangName = "groups"
    group.EntityData.SegmentPath = "group"
    group.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    group.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    group.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    group.EntityData.Children = types.NewOrderedMap()
    group.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &group.GroupAddressXr})
    group.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &group.LastReporter})
    group.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &group.SourceAddress})
    group.EntityData.Leafs = types.NewOrderedMap()
    group.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", group.GroupAddress})
    group.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", group.InterfaceName})
    group.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", group.InterfaceNameXr})
    group.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", group.Uptime})
    group.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", group.ExpirationTime})
    group.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", group.ExplicitTrackingEnabled})
    group.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", group.IsSelfJoin})
    group.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", group.RowStatus})
    group.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", group.IsLowMemory})
    group.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", group.RouterFilterMode})
    group.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", group.OlderHostVersion1Timer})
    group.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", group.OlderHostVersion2Timer})
    group.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", group.IsAdded})
    group.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", group.IsSuppressed})

    group.EntityData.YListKeys = []string {}

    return &(group.EntityData)
}

// Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr
// Group Address
type Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter
// Last reporter address
type Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress
// Source Address
type Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_GroupSummary
// IGMP Groups Summary
type Mld_Standby_Vrfs_Vrf_GroupSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Mld_Standby_Vrfs_Vrf_GroupSummary) GetEntityData() *types.CommonEntityData {
    groupSummary.EntityData.YFilter = groupSummary.YFilter
    groupSummary.EntityData.YangName = "group-summary"
    groupSummary.EntityData.BundleName = "cisco_ios_xr"
    groupSummary.EntityData.ParentYangName = "vrf"
    groupSummary.EntityData.SegmentPath = "group-summary"
    groupSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupSummary.EntityData.Children = types.NewOrderedMap()
    groupSummary.EntityData.Leafs = types.NewOrderedMap()
    groupSummary.EntityData.Leafs.Append("groutes", types.YLeaf{"Groutes", groupSummary.Groutes})
    groupSummary.EntityData.Leafs.Append("sg-routes", types.YLeaf{"SgRoutes", groupSummary.SgRoutes})
    groupSummary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", groupSummary.GroupCount})
    groupSummary.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupSummary.IsLowMemory})

    groupSummary.EntityData.YListKeys = []string {}

    return &(groupSummary.EntityData)
}

// Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Mld_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetEntityData() *types.CommonEntityData {
    ifrsInterfaceSummary.EntityData.YFilter = ifrsInterfaceSummary.YFilter
    ifrsInterfaceSummary.EntityData.YangName = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaceSummary.EntityData.ParentYangName = "vrf"
    ifrsInterfaceSummary.EntityData.SegmentPath = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaceSummary.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs.Append("interface-count", types.YLeaf{"InterfaceCount", ifrsInterfaceSummary.InterfaceCount})
    ifrsInterfaceSummary.EntityData.Leafs.Append("configuration-count", types.YLeaf{"ConfigurationCount", ifrsInterfaceSummary.ConfigurationCount})

    ifrsInterfaceSummary.EntityData.YListKeys = []string {}

    return &(ifrsInterfaceSummary.EntityData)
}

// Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable
// IGMP Global Interface 
type Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface.
    Interface []*Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetEntityData() *types.CommonEntityData {
    globalInterfaceTable.EntityData.YFilter = globalInterfaceTable.YFilter
    globalInterfaceTable.EntityData.YangName = "global-interface-table"
    globalInterfaceTable.EntityData.BundleName = "cisco_ios_xr"
    globalInterfaceTable.EntityData.ParentYangName = "vrf"
    globalInterfaceTable.EntityData.SegmentPath = "global-interface-table"
    globalInterfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalInterfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalInterfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalInterfaceTable.EntityData.Children = types.NewOrderedMap()
    globalInterfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range globalInterfaceTable.Interface {
        globalInterfaceTable.EntityData.Children.Append(types.GetSegmentPath(globalInterfaceTable.Interface[i]), types.YChild{"Interface", globalInterfaceTable.Interface[i]})
    }
    globalInterfaceTable.EntityData.Leafs = types.NewOrderedMap()

    globalInterfaceTable.EntityData.YListKeys = []string {}

    return &(globalInterfaceTable.EntityData)
}

// Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface
// IGMP Interface
type Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "global-interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address
// IP address
type Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_SsmMapDetails
// SSM Map Detail
type Mld_Standby_Vrfs_Vrf_SsmMapDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []*Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Mld_Standby_Vrfs_Vrf_SsmMapDetails) GetEntityData() *types.CommonEntityData {
    ssmMapDetails.EntityData.YFilter = ssmMapDetails.YFilter
    ssmMapDetails.EntityData.YangName = "ssm-map-details"
    ssmMapDetails.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetails.EntityData.ParentYangName = "vrf"
    ssmMapDetails.EntityData.SegmentPath = "ssm-map-details"
    ssmMapDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetails.EntityData.Children = types.NewOrderedMap()
    ssmMapDetails.EntityData.Children.Append("ssm-map-detail", types.YChild{"SsmMapDetail", nil})
    for i := range ssmMapDetails.SsmMapDetail {
        ssmMapDetails.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetails.SsmMapDetail[i]), types.YChild{"SsmMapDetail", ssmMapDetails.SsmMapDetail[i]})
    }
    ssmMapDetails.EntityData.Leafs = types.NewOrderedMap()

    ssmMapDetails.EntityData.YListKeys = []string {}

    return &(ssmMapDetails.EntityData)
}

// Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources.
    Sources []*Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetEntityData() *types.CommonEntityData {
    ssmMapDetail.EntityData.YFilter = ssmMapDetail.YFilter
    ssmMapDetail.EntityData.YangName = "ssm-map-detail"
    ssmMapDetail.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetail.EntityData.ParentYangName = "ssm-map-details"
    ssmMapDetail.EntityData.SegmentPath = "ssm-map-detail"
    ssmMapDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetail.EntityData.Children = types.NewOrderedMap()
    ssmMapDetail.EntityData.Children.Append("map-info", types.YChild{"MapInfo", &ssmMapDetail.MapInfo})
    ssmMapDetail.EntityData.Children.Append("sources", types.YChild{"Sources", nil})
    for i := range ssmMapDetail.Sources {
        ssmMapDetail.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetail.Sources[i]), types.YChild{"Sources", ssmMapDetail.Sources[i]})
    }
    ssmMapDetail.EntityData.Leafs = types.NewOrderedMap()
    ssmMapDetail.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMapDetail.SsmMapType})
    ssmMapDetail.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMapDetail.GroupAddress})
    ssmMapDetail.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", ssmMapDetail.ExpirationTime})
    ssmMapDetail.EntityData.Leafs.Append("response-pending", types.YLeaf{"ResponsePending", ssmMapDetail.ResponsePending})
    ssmMapDetail.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", ssmMapDetail.QueryInterval})
    ssmMapDetail.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", ssmMapDetail.ElapsedTime})

    ssmMapDetail.EntityData.YListKeys = []string {}

    return &(ssmMapDetail.EntityData)
}

// Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetEntityData() *types.CommonEntityData {
    mapInfo.EntityData.YFilter = mapInfo.YFilter
    mapInfo.EntityData.YangName = "map-info"
    mapInfo.EntityData.BundleName = "cisco_ios_xr"
    mapInfo.EntityData.ParentYangName = "ssm-map-detail"
    mapInfo.EntityData.SegmentPath = "map-info"
    mapInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mapInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mapInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mapInfo.EntityData.Children = types.NewOrderedMap()
    mapInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &mapInfo.GroupAddressXr})
    mapInfo.EntityData.Leafs = types.NewOrderedMap()
    mapInfo.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", mapInfo.MapType})
    mapInfo.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", mapInfo.SourceCounts})

    mapInfo.EntityData.YListKeys = []string {}

    return &(mapInfo.EntityData)
}

// Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "map-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Mld_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetEntityData() *types.CommonEntityData {
    sources.EntityData.YFilter = sources.YFilter
    sources.EntityData.YangName = "sources"
    sources.EntityData.BundleName = "cisco_ios_xr"
    sources.EntityData.ParentYangName = "ssm-map-detail"
    sources.EntityData.SegmentPath = "sources"
    sources.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sources.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sources.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sources.EntityData.Children = types.NewOrderedMap()
    sources.EntityData.Leafs = types.NewOrderedMap()
    sources.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sources.AfName})
    sources.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sources.Ipv4Address})
    sources.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sources.Ipv6Address})

    sources.EntityData.YListKeys = []string {}

    return &(sources.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceStateOffs
// IGMP Interface state off
type Mld_Standby_Vrfs_Vrf_InterfaceStateOffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []*Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs) GetEntityData() *types.CommonEntityData {
    interfaceStateOffs.EntityData.YFilter = interfaceStateOffs.YFilter
    interfaceStateOffs.EntityData.YangName = "interface-state-offs"
    interfaceStateOffs.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOffs.EntityData.ParentYangName = "vrf"
    interfaceStateOffs.EntityData.SegmentPath = "interface-state-offs"
    interfaceStateOffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOffs.EntityData.Children = types.NewOrderedMap()
    interfaceStateOffs.EntityData.Children.Append("interface-state-off", types.YChild{"InterfaceStateOff", nil})
    for i := range interfaceStateOffs.InterfaceStateOff {
        interfaceStateOffs.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOffs.InterfaceStateOff[i]), types.YChild{"InterfaceStateOff", interfaceStateOffs.InterfaceStateOff[i]})
    }
    interfaceStateOffs.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOffs.EntityData.YListKeys = []string {}

    return &(interfaceStateOffs.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetEntityData() *types.CommonEntityData {
    interfaceStateOff.EntityData.YFilter = interfaceStateOff.YFilter
    interfaceStateOff.EntityData.YangName = "interface-state-off"
    interfaceStateOff.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOff.EntityData.ParentYangName = "interface-state-offs"
    interfaceStateOff.EntityData.SegmentPath = "interface-state-off" + types.AddKeyToken(interfaceStateOff.InterfaceName, "interface-name")
    interfaceStateOff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOff.EntityData.Children = types.NewOrderedMap()
    interfaceStateOff.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOff.Address})
    interfaceStateOff.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOff.QuerierAddress})
    interfaceStateOff.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOff.SubscriberAddress})
    interfaceStateOff.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOff.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOff.InterfaceName})
    interfaceStateOff.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOff.InterfaceNameXr})
    interfaceStateOff.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOff.State})
    interfaceStateOff.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOff.PrefixLength})
    interfaceStateOff.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOff.IsInterfaceUp})
    interfaceStateOff.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOff.IsIpEnabled})
    interfaceStateOff.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOff.IsRouterEnabled})
    interfaceStateOff.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOff.IgmpVersion})
    interfaceStateOff.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOff.HostVersion})
    interfaceStateOff.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOff.QueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOff.QueryTimeout})
    interfaceStateOff.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOff.QueryMaximumResponseTime})
    interfaceStateOff.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOff.LastMemberQueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOff.GroupJoins})
    interfaceStateOff.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOff.GroupLeaves})
    interfaceStateOff.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOff.IsQuerier})
    interfaceStateOff.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOff.TotalActiveGroups})
    interfaceStateOff.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOff.Robustness})
    interfaceStateOff.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOff.ProxyInterface})
    interfaceStateOff.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOff.QuerierUptime})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOff.LasLlRegistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOff.LasGetAddressCount})
    interfaceStateOff.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOff.LasUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOff.LasLlRemoveUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOff.LasLlAddUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOff.LasNullUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOff.LasUnregistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOff.IsLasRequest})
    interfaceStateOff.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOff.IsLasRegistered})
    interfaceStateOff.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOff.VrfId})
    interfaceStateOff.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOff.MteVrfId})
    interfaceStateOff.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOff.Location})
    interfaceStateOff.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOff.Mtu})
    interfaceStateOff.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOff.VrfState})
    interfaceStateOff.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOff.IsConfigurationverify})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOff.ConfigurationvrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOff.ConfigurationvrfError})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOff.ConfigurationMcastVrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOff.ConfigurationMcastVrfError})
    interfaceStateOff.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOff.IsImStateRegistered})
    interfaceStateOff.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOff.IsSubscriber})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOff.SubscriberMode})
    interfaceStateOff.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOff.IsIdentityPresent})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOff.SubscriberId})
    interfaceStateOff.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOff.ParentIfhandle})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOff.TimeSinceLastQueryInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOff.TimeSinceLastReportInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOff.RouterUptimeInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOff.MteTupleCount})

    interfaceStateOff.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOff.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-off"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-off"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-off"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Standby_Process
// Process
type Mld_Standby_Process struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MRIB RouteDB Expiry Information.
    AmtSummary Mld_Standby_Process_AmtSummary

    // NSR Information.
    Nsr Mld_Standby_Process_Nsr

    // Table containing AMT Gateway DataBase information.
    AmtGatewaies Mld_Standby_Process_AmtGatewaies

    // IGMP Unicast-Qos-Adjust Statistics.
    UnicastQosAdjustStats Mld_Standby_Process_UnicastQosAdjustStats

    // IGMP BVI Stats.
    BviStatistics Mld_Standby_Process_BviStatistics

    // NSF Information.
    Nsf Mld_Standby_Process_Nsf
}

func (process *Mld_Standby_Process) GetEntityData() *types.CommonEntityData {
    process.EntityData.YFilter = process.YFilter
    process.EntityData.YangName = "process"
    process.EntityData.BundleName = "cisco_ios_xr"
    process.EntityData.ParentYangName = "standby"
    process.EntityData.SegmentPath = "process"
    process.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    process.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    process.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    process.EntityData.Children = types.NewOrderedMap()
    process.EntityData.Children.Append("amt-summary", types.YChild{"AmtSummary", &process.AmtSummary})
    process.EntityData.Children.Append("nsr", types.YChild{"Nsr", &process.Nsr})
    process.EntityData.Children.Append("amt-gatewaies", types.YChild{"AmtGatewaies", &process.AmtGatewaies})
    process.EntityData.Children.Append("unicast-qos-adjust-stats", types.YChild{"UnicastQosAdjustStats", &process.UnicastQosAdjustStats})
    process.EntityData.Children.Append("bvi-statistics", types.YChild{"BviStatistics", &process.BviStatistics})
    process.EntityData.Children.Append("nsf", types.YChild{"Nsf", &process.Nsf})
    process.EntityData.Leafs = types.NewOrderedMap()

    process.EntityData.YListKeys = []string {}

    return &(process.EntityData)
}

// Mld_Standby_Process_AmtSummary
// MRIB RouteDB Expiry Information
type Mld_Standby_Process_AmtSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Robustness variable. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AnycastPrefix interface{}

    // Advertize AMT prefix length. The type is interface{} with range:
    // 0..4294967295.
    PrefixLength interface{}

    // Advertaisment for AMT Relay address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RelayAddress interface{}

    // AMT Tunnel MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Type Of Service value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Tos interface{}

    // Time To Live value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Ttl interface{}

    // AMT Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Number of AMT Gateway. The type is interface{} with range: 0..4294967295.
    GatewayCount interface{}

    // Maximum Gateway allowed. The type is interface{} with range: 0..4294967295.
    MaxGateway interface{}

    // AMT Tunnel Count. The type is interface{} with range: 0..4294967295.
    TunnelCount interface{}

    // AMT Tunnel configured Maximum. The type is interface{} with range:
    // 0..4294967295.
    TunnelConfiguredMaximum interface{}

    // ACL configured under AMT. The type is bool.
    IsAclConfigured interface{}

    // AMT Gateway Simulation. The type is bool.
    IsGatewaySimulation interface{}

    // AMT Out Of Resource. The type is bool.
    IsOuOfResource interface{}
}

func (amtSummary *Mld_Standby_Process_AmtSummary) GetEntityData() *types.CommonEntityData {
    amtSummary.EntityData.YFilter = amtSummary.YFilter
    amtSummary.EntityData.YangName = "amt-summary"
    amtSummary.EntityData.BundleName = "cisco_ios_xr"
    amtSummary.EntityData.ParentYangName = "process"
    amtSummary.EntityData.SegmentPath = "amt-summary"
    amtSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    amtSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    amtSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    amtSummary.EntityData.Children = types.NewOrderedMap()
    amtSummary.EntityData.Leafs = types.NewOrderedMap()
    amtSummary.EntityData.Leafs.Append("anycast-prefix", types.YLeaf{"AnycastPrefix", amtSummary.AnycastPrefix})
    amtSummary.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", amtSummary.PrefixLength})
    amtSummary.EntityData.Leafs.Append("relay-address", types.YLeaf{"RelayAddress", amtSummary.RelayAddress})
    amtSummary.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", amtSummary.Mtu})
    amtSummary.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", amtSummary.Tos})
    amtSummary.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", amtSummary.Ttl})
    amtSummary.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", amtSummary.QueryInterval})
    amtSummary.EntityData.Leafs.Append("gateway-count", types.YLeaf{"GatewayCount", amtSummary.GatewayCount})
    amtSummary.EntityData.Leafs.Append("max-gateway", types.YLeaf{"MaxGateway", amtSummary.MaxGateway})
    amtSummary.EntityData.Leafs.Append("tunnel-count", types.YLeaf{"TunnelCount", amtSummary.TunnelCount})
    amtSummary.EntityData.Leafs.Append("tunnel-configured-maximum", types.YLeaf{"TunnelConfiguredMaximum", amtSummary.TunnelConfiguredMaximum})
    amtSummary.EntityData.Leafs.Append("is-acl-configured", types.YLeaf{"IsAclConfigured", amtSummary.IsAclConfigured})
    amtSummary.EntityData.Leafs.Append("is-gateway-simulation", types.YLeaf{"IsGatewaySimulation", amtSummary.IsGatewaySimulation})
    amtSummary.EntityData.Leafs.Append("is-ou-of-resource", types.YLeaf{"IsOuOfResource", amtSummary.IsOuOfResource})

    amtSummary.EntityData.YListKeys = []string {}

    return &(amtSummary.EntityData)
}

// Mld_Standby_Process_Nsr
// NSR Information
type Mld_Standby_Process_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NSR state. The type is interface{} with range: 0..255.
    State interface{}

    // Partner process connected. The type is bool.
    PartnerProcConnected interface{}

    // Collaborators convergence done. The type is bool.
    CollabConvDone interface{}

    // RMF Notification done. The type is bool.
    RmfNotificationDone interface{}

    // Time when process came up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProc interface{}

    // Time when process connection went up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionUp interface{}

    // Time when process connection went down. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionDn interface{}

    // Time when RMF Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfReady interface{}

    // Time when RMF Not-Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfNotReady interface{}

    // No. of times process connection went up. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionUp interface{}

    // No. of times process connection went down. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionDn interface{}

    // No. of times RMF Ready notif was sent. The type is interface{} with range:
    // 0..4294967295.
    CountRmfReady interface{}

    // No. of times RMF Not Ready notif was sent. The type is interface{} with
    // range: 0..4294967295.
    CountRmfNotReady interface{}
}

func (nsr *Mld_Standby_Process_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "process"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Leafs = types.NewOrderedMap()
    nsr.EntityData.Leafs.Append("state", types.YLeaf{"State", nsr.State})
    nsr.EntityData.Leafs.Append("partner-proc-connected", types.YLeaf{"PartnerProcConnected", nsr.PartnerProcConnected})
    nsr.EntityData.Leafs.Append("collab-conv-done", types.YLeaf{"CollabConvDone", nsr.CollabConvDone})
    nsr.EntityData.Leafs.Append("rmf-notification-done", types.YLeaf{"RmfNotificationDone", nsr.RmfNotificationDone})
    nsr.EntityData.Leafs.Append("last-proc", types.YLeaf{"LastProc", nsr.LastProc})
    nsr.EntityData.Leafs.Append("last-proc-connection-up", types.YLeaf{"LastProcConnectionUp", nsr.LastProcConnectionUp})
    nsr.EntityData.Leafs.Append("last-proc-connection-dn", types.YLeaf{"LastProcConnectionDn", nsr.LastProcConnectionDn})
    nsr.EntityData.Leafs.Append("last-rmf-ready", types.YLeaf{"LastRmfReady", nsr.LastRmfReady})
    nsr.EntityData.Leafs.Append("last-rmf-not-ready", types.YLeaf{"LastRmfNotReady", nsr.LastRmfNotReady})
    nsr.EntityData.Leafs.Append("count-proc-connection-up", types.YLeaf{"CountProcConnectionUp", nsr.CountProcConnectionUp})
    nsr.EntityData.Leafs.Append("count-proc-connection-dn", types.YLeaf{"CountProcConnectionDn", nsr.CountProcConnectionDn})
    nsr.EntityData.Leafs.Append("count-rmf-ready", types.YLeaf{"CountRmfReady", nsr.CountRmfReady})
    nsr.EntityData.Leafs.Append("count-rmf-not-ready", types.YLeaf{"CountRmfNotReady", nsr.CountRmfNotReady})

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// Mld_Standby_Process_AmtGatewaies
// Table containing AMT Gateway DataBase
// information
type Mld_Standby_Process_AmtGatewaies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AMT Gateway DataBase information. The type is slice of
    // Mld_Standby_Process_AmtGatewaies_AmtGateway.
    AmtGateway []*Mld_Standby_Process_AmtGatewaies_AmtGateway
}

func (amtGatewaies *Mld_Standby_Process_AmtGatewaies) GetEntityData() *types.CommonEntityData {
    amtGatewaies.EntityData.YFilter = amtGatewaies.YFilter
    amtGatewaies.EntityData.YangName = "amt-gatewaies"
    amtGatewaies.EntityData.BundleName = "cisco_ios_xr"
    amtGatewaies.EntityData.ParentYangName = "process"
    amtGatewaies.EntityData.SegmentPath = "amt-gatewaies"
    amtGatewaies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    amtGatewaies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    amtGatewaies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    amtGatewaies.EntityData.Children = types.NewOrderedMap()
    amtGatewaies.EntityData.Children.Append("amt-gateway", types.YChild{"AmtGateway", nil})
    for i := range amtGatewaies.AmtGateway {
        amtGatewaies.EntityData.Children.Append(types.GetSegmentPath(amtGatewaies.AmtGateway[i]), types.YChild{"AmtGateway", amtGatewaies.AmtGateway[i]})
    }
    amtGatewaies.EntityData.Leafs = types.NewOrderedMap()

    amtGatewaies.EntityData.YListKeys = []string {}

    return &(amtGatewaies.EntityData)
}

// Mld_Standby_Process_AmtGatewaies_AmtGateway
// AMT Gateway DataBase information
type Mld_Standby_Process_AmtGatewaies_AmtGateway struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Gateway Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GatewayAddress interface{}

    // Port. The type is interface{} with range: 0..4294967295.
    Port interface{}

    // GW. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Amtgw interface{}

    // Port. The type is interface{} with range: 0..4294967295.
    AmtPort interface{}

    // Len. The type is interface{} with range: 0..4294967295.
    KeyLen interface{}

    // AMT NH. The type is interface{} with range: 0..4294967295.
    Amtnh interface{}

    // Nonce. The type is interface{} with range: 0..4294967295.
    AmtNonce interface{}

    // IDB. The type is interface{} with range: 0..18446744073709551615.
    Idb interface{}

    // UpdIn. The type is interface{} with range: 0..4294967295.
    MemUpdIn interface{}

    // UpdOut. The type is interface{} with range: 0..4294967295.
    MemUpdOut interface{}
}

func (amtGateway *Mld_Standby_Process_AmtGatewaies_AmtGateway) GetEntityData() *types.CommonEntityData {
    amtGateway.EntityData.YFilter = amtGateway.YFilter
    amtGateway.EntityData.YangName = "amt-gateway"
    amtGateway.EntityData.BundleName = "cisco_ios_xr"
    amtGateway.EntityData.ParentYangName = "amt-gatewaies"
    amtGateway.EntityData.SegmentPath = "amt-gateway"
    amtGateway.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    amtGateway.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    amtGateway.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    amtGateway.EntityData.Children = types.NewOrderedMap()
    amtGateway.EntityData.Leafs = types.NewOrderedMap()
    amtGateway.EntityData.Leafs.Append("gateway-address", types.YLeaf{"GatewayAddress", amtGateway.GatewayAddress})
    amtGateway.EntityData.Leafs.Append("port", types.YLeaf{"Port", amtGateway.Port})
    amtGateway.EntityData.Leafs.Append("amtgw", types.YLeaf{"Amtgw", amtGateway.Amtgw})
    amtGateway.EntityData.Leafs.Append("amt-port", types.YLeaf{"AmtPort", amtGateway.AmtPort})
    amtGateway.EntityData.Leafs.Append("key-len", types.YLeaf{"KeyLen", amtGateway.KeyLen})
    amtGateway.EntityData.Leafs.Append("amtnh", types.YLeaf{"Amtnh", amtGateway.Amtnh})
    amtGateway.EntityData.Leafs.Append("amt-nonce", types.YLeaf{"AmtNonce", amtGateway.AmtNonce})
    amtGateway.EntityData.Leafs.Append("idb", types.YLeaf{"Idb", amtGateway.Idb})
    amtGateway.EntityData.Leafs.Append("mem-upd-in", types.YLeaf{"MemUpdIn", amtGateway.MemUpdIn})
    amtGateway.EntityData.Leafs.Append("mem-upd-out", types.YLeaf{"MemUpdOut", amtGateway.MemUpdOut})

    amtGateway.EntityData.YListKeys = []string {}

    return &(amtGateway.EntityData)
}

// Mld_Standby_Process_UnicastQosAdjustStats
// IGMP Unicast-Qos-Adjust Statistics
type Mld_Standby_Process_UnicastQosAdjustStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // I2Q Queue count. The type is interface{} with range: 0..65535.
    Queues interface{}

    // I2Q Rate Batch count. The type is interface{} with range: 0..65535.
    Batches interface{}

    // Add to batch count. The type is interface{} with range: 0..4294967295.
    AddToBatches interface{}

    // Delete to batch count. The type is interface{} with range: 0..4294967295.
    DeleteToBatches interface{}

    // Send Success count. The type is interface{} with range: 0..4294967295.
    SendSuccess interface{}

    // Number of Send errors in batch. The type is interface{} with range:
    // 0..4294967295.
    SendErrors interface{}

    // Send Error due to comms count. The type is interface{} with range:
    // 0..4294967295.
    SendCommErrors interface{}

    // Send Error due to partial issue count. The type is interface{} with range:
    // 0..4294967295.
    SendPartialErrors interface{}

    // Number of Resync request received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedResyncRequests interface{}

    // Number of bulks sent for last resync received. The type is interface{} with
    // range: 0..4294967295.
    SentResyncBulks interface{}

    // Is Resync request received. The type is bool.
    IsResyncReceived interface{}

    // Is Resync required. The type is bool.
    IsResyncRequired interface{}

    // Is Resync Start message sent. The type is bool.
    IsResyncStartSent interface{}

    // Is QOS Sweeped once . The type is bool.
    IsQosSSweeped interface{}

    // Time elapsed since Last mark and sweep in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastSweepTime interface{}

    // Time elapsed since Last download to QOS in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastDownloadTime interface{}
}

func (unicastQosAdjustStats *Mld_Standby_Process_UnicastQosAdjustStats) GetEntityData() *types.CommonEntityData {
    unicastQosAdjustStats.EntityData.YFilter = unicastQosAdjustStats.YFilter
    unicastQosAdjustStats.EntityData.YangName = "unicast-qos-adjust-stats"
    unicastQosAdjustStats.EntityData.BundleName = "cisco_ios_xr"
    unicastQosAdjustStats.EntityData.ParentYangName = "process"
    unicastQosAdjustStats.EntityData.SegmentPath = "unicast-qos-adjust-stats"
    unicastQosAdjustStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unicastQosAdjustStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unicastQosAdjustStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unicastQosAdjustStats.EntityData.Children = types.NewOrderedMap()
    unicastQosAdjustStats.EntityData.Leafs = types.NewOrderedMap()
    unicastQosAdjustStats.EntityData.Leafs.Append("queues", types.YLeaf{"Queues", unicastQosAdjustStats.Queues})
    unicastQosAdjustStats.EntityData.Leafs.Append("batches", types.YLeaf{"Batches", unicastQosAdjustStats.Batches})
    unicastQosAdjustStats.EntityData.Leafs.Append("add-to-batches", types.YLeaf{"AddToBatches", unicastQosAdjustStats.AddToBatches})
    unicastQosAdjustStats.EntityData.Leafs.Append("delete-to-batches", types.YLeaf{"DeleteToBatches", unicastQosAdjustStats.DeleteToBatches})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-success", types.YLeaf{"SendSuccess", unicastQosAdjustStats.SendSuccess})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-errors", types.YLeaf{"SendErrors", unicastQosAdjustStats.SendErrors})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-comm-errors", types.YLeaf{"SendCommErrors", unicastQosAdjustStats.SendCommErrors})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-partial-errors", types.YLeaf{"SendPartialErrors", unicastQosAdjustStats.SendPartialErrors})
    unicastQosAdjustStats.EntityData.Leafs.Append("received-resync-requests", types.YLeaf{"ReceivedResyncRequests", unicastQosAdjustStats.ReceivedResyncRequests})
    unicastQosAdjustStats.EntityData.Leafs.Append("sent-resync-bulks", types.YLeaf{"SentResyncBulks", unicastQosAdjustStats.SentResyncBulks})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-resync-received", types.YLeaf{"IsResyncReceived", unicastQosAdjustStats.IsResyncReceived})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-resync-required", types.YLeaf{"IsResyncRequired", unicastQosAdjustStats.IsResyncRequired})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-resync-start-sent", types.YLeaf{"IsResyncStartSent", unicastQosAdjustStats.IsResyncStartSent})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-qos-s-sweeped", types.YLeaf{"IsQosSSweeped", unicastQosAdjustStats.IsQosSSweeped})
    unicastQosAdjustStats.EntityData.Leafs.Append("last-sweep-time", types.YLeaf{"LastSweepTime", unicastQosAdjustStats.LastSweepTime})
    unicastQosAdjustStats.EntityData.Leafs.Append("last-download-time", types.YLeaf{"LastDownloadTime", unicastQosAdjustStats.LastDownloadTime})

    unicastQosAdjustStats.EntityData.YListKeys = []string {}

    return &(unicastQosAdjustStats.EntityData)
}

// Mld_Standby_Process_BviStatistics
// IGMP BVI Stats
type Mld_Standby_Process_BviStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of AIPC buffers received. The type is interface{} with range:
    // 0..4294967295.
    ReceiveBuffers interface{}

    // Number of AIPC buffers released. The type is interface{} with range:
    // 0..4294967295.
    ReleaseBuffers interface{}

    // Number of AIPC buffers send blocked. The type is interface{} with range:
    // 0..4294967295.
    SendBlocks interface{}

    // Number of AIPC buffers release failed. The type is interface{} with range:
    // 0..4294967295.
    ReleaseFailBuffers interface{}

    // Number of AIPC NULL buffer handles. The type is interface{} with range:
    // 0..4294967295.
    NullBufferHandles interface{}

    // Number of AIPC open notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOpenNotif interface{}

    // Number of AIPC close notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcCloseNotif interface{}

    // Number of AIPC error notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcErrorNotif interface{}

    // Number of AIPC LWM notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcLwmNotif interface{}

    // Number of AIPC input waiting notifications received. The type is
    // interface{} with range: 0..4294967295.
    RxIpcInputWaitNotif interface{}

    // Number of AIPC send status notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcSendStatusNotif interface{}

    // Number of AIPC publish notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcPublishNotif interface{}

    // Number of AIPC queue full notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcQFullNotif interface{}

    // Number of AIPC output notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOutputNotif interface{}

    // Number of AIPC connect notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcConnectNotif interface{}

    // Number of IGMP protocol messages received. The type is interface{} with
    // range: 0..4294967295.
    RxIgmpPacketSuccess interface{}

    // Number of IGMP Mrouter Add messages received. The type is interface{} with
    // range: 0..4294967295.
    RxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages received. The type is interface{}
    // with range: 0..4294967295.
    RxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    RxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Add messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    TxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages received. The type is interface{}
    // with range: 0..4294967295.
    RxUnknownMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages transmitted. The type is
    // interface{} with range: 0..4294967295.
    TxUnknownMrouterMsg interface{}

    // Number of AIPC transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TxBufferErrors interface{}

    // Number of AIPC buffers transmited. The type is interface{} with range:
    // 0..4294967295.
    TxBuffers interface{}

    // Number of IGMP protocol buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxProtocolBuffers interface{}

    // Number of IGMP Mrouter buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxMrouterBuffers interface{}

    // Number of IGMP Unknown buffers transmited. The type is interface{} with
    // range: 0..4294967295.
    TxUnknownBuffers interface{}

    // Number of WTX messages received. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgRecvd interface{}

    // Number of WTX messages sent. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgSent interface{}

    // Number of WTX messages sent to Protocol. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgProtoSent interface{}

    // Number of WTX messages dropped due to disconnect. The type is interface{}
    // with range: 0..4294967295.
    WtxMsgDropDc interface{}

    // Number of WTX messages dropped to memory. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgDropNomem interface{}

    // Number of WTX messages freed. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgFreed interface{}
}

func (bviStatistics *Mld_Standby_Process_BviStatistics) GetEntityData() *types.CommonEntityData {
    bviStatistics.EntityData.YFilter = bviStatistics.YFilter
    bviStatistics.EntityData.YangName = "bvi-statistics"
    bviStatistics.EntityData.BundleName = "cisco_ios_xr"
    bviStatistics.EntityData.ParentYangName = "process"
    bviStatistics.EntityData.SegmentPath = "bvi-statistics"
    bviStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bviStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bviStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bviStatistics.EntityData.Children = types.NewOrderedMap()
    bviStatistics.EntityData.Leafs = types.NewOrderedMap()
    bviStatistics.EntityData.Leafs.Append("receive-buffers", types.YLeaf{"ReceiveBuffers", bviStatistics.ReceiveBuffers})
    bviStatistics.EntityData.Leafs.Append("release-buffers", types.YLeaf{"ReleaseBuffers", bviStatistics.ReleaseBuffers})
    bviStatistics.EntityData.Leafs.Append("send-blocks", types.YLeaf{"SendBlocks", bviStatistics.SendBlocks})
    bviStatistics.EntityData.Leafs.Append("release-fail-buffers", types.YLeaf{"ReleaseFailBuffers", bviStatistics.ReleaseFailBuffers})
    bviStatistics.EntityData.Leafs.Append("null-buffer-handles", types.YLeaf{"NullBufferHandles", bviStatistics.NullBufferHandles})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-open-notif", types.YLeaf{"RxIpcOpenNotif", bviStatistics.RxIpcOpenNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-close-notif", types.YLeaf{"RxIpcCloseNotif", bviStatistics.RxIpcCloseNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-error-notif", types.YLeaf{"RxIpcErrorNotif", bviStatistics.RxIpcErrorNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-lwm-notif", types.YLeaf{"RxIpcLwmNotif", bviStatistics.RxIpcLwmNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-input-wait-notif", types.YLeaf{"RxIpcInputWaitNotif", bviStatistics.RxIpcInputWaitNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-send-status-notif", types.YLeaf{"RxIpcSendStatusNotif", bviStatistics.RxIpcSendStatusNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-publish-notif", types.YLeaf{"RxIpcPublishNotif", bviStatistics.RxIpcPublishNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-q-full-notif", types.YLeaf{"RxIpcQFullNotif", bviStatistics.RxIpcQFullNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-output-notif", types.YLeaf{"RxIpcOutputNotif", bviStatistics.RxIpcOutputNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-connect-notif", types.YLeaf{"RxIpcConnectNotif", bviStatistics.RxIpcConnectNotif})
    bviStatistics.EntityData.Leafs.Append("rx-igmp-packet-success", types.YLeaf{"RxIgmpPacketSuccess", bviStatistics.RxIgmpPacketSuccess})
    bviStatistics.EntityData.Leafs.Append("rx-add-mrouter-msg", types.YLeaf{"RxAddMrouterMsg", bviStatistics.RxAddMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("rx-delete-mrouter-msg", types.YLeaf{"RxDeleteMrouterMsg", bviStatistics.RxDeleteMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("rx-sweep-mrouter-msg", types.YLeaf{"RxSweepMrouterMsg", bviStatistics.RxSweepMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-add-mrouter-msg", types.YLeaf{"TxAddMrouterMsg", bviStatistics.TxAddMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-delete-mrouter-msg", types.YLeaf{"TxDeleteMrouterMsg", bviStatistics.TxDeleteMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-sweep-mrouter-msg", types.YLeaf{"TxSweepMrouterMsg", bviStatistics.TxSweepMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("rx-unknown-mrouter-msg", types.YLeaf{"RxUnknownMrouterMsg", bviStatistics.RxUnknownMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-unknown-mrouter-msg", types.YLeaf{"TxUnknownMrouterMsg", bviStatistics.TxUnknownMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-buffer-errors", types.YLeaf{"TxBufferErrors", bviStatistics.TxBufferErrors})
    bviStatistics.EntityData.Leafs.Append("tx-buffers", types.YLeaf{"TxBuffers", bviStatistics.TxBuffers})
    bviStatistics.EntityData.Leafs.Append("tx-protocol-buffers", types.YLeaf{"TxProtocolBuffers", bviStatistics.TxProtocolBuffers})
    bviStatistics.EntityData.Leafs.Append("tx-mrouter-buffers", types.YLeaf{"TxMrouterBuffers", bviStatistics.TxMrouterBuffers})
    bviStatistics.EntityData.Leafs.Append("tx-unknown-buffers", types.YLeaf{"TxUnknownBuffers", bviStatistics.TxUnknownBuffers})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-recvd", types.YLeaf{"WtxMsgRecvd", bviStatistics.WtxMsgRecvd})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-sent", types.YLeaf{"WtxMsgSent", bviStatistics.WtxMsgSent})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-proto-sent", types.YLeaf{"WtxMsgProtoSent", bviStatistics.WtxMsgProtoSent})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-drop-dc", types.YLeaf{"WtxMsgDropDc", bviStatistics.WtxMsgDropDc})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-drop-nomem", types.YLeaf{"WtxMsgDropNomem", bviStatistics.WtxMsgDropNomem})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-freed", types.YLeaf{"WtxMsgFreed", bviStatistics.WtxMsgFreed})

    bviStatistics.EntityData.YListKeys = []string {}

    return &(bviStatistics.EntityData)
}

// Mld_Standby_Process_Nsf
// NSF Information
type Mld_Standby_Process_Nsf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is Multicast NSF active. The type is bool.
    IsMulticastNsfActive interface{}

    // Multicast NSF timeout in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeout interface{}

    // Multicast NSF time remaining in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeLeft interface{}

    // Respawn Count. The type is interface{} with range: 0..4294967295.
    RespawnCount interface{}

    // Last NSF time ON. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOn interface{}

    // Last NSF time off. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOff interface{}

    // Last NSF time ON in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOnMin interface{}

    // Last NSF time OFF in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOffMin interface{}

    // Last ICD Notif Recv. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastIcdNotifRecv interface{}

    // Last ICD Notif Recv in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastIcdNotifRecvMin interface{}
}

func (nsf *Mld_Standby_Process_Nsf) GetEntityData() *types.CommonEntityData {
    nsf.EntityData.YFilter = nsf.YFilter
    nsf.EntityData.YangName = "nsf"
    nsf.EntityData.BundleName = "cisco_ios_xr"
    nsf.EntityData.ParentYangName = "process"
    nsf.EntityData.SegmentPath = "nsf"
    nsf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsf.EntityData.Children = types.NewOrderedMap()
    nsf.EntityData.Leafs = types.NewOrderedMap()
    nsf.EntityData.Leafs.Append("is-multicast-nsf-active", types.YLeaf{"IsMulticastNsfActive", nsf.IsMulticastNsfActive})
    nsf.EntityData.Leafs.Append("multicast-nsf-timeout", types.YLeaf{"MulticastNsfTimeout", nsf.MulticastNsfTimeout})
    nsf.EntityData.Leafs.Append("multicast-nsf-time-left", types.YLeaf{"MulticastNsfTimeLeft", nsf.MulticastNsfTimeLeft})
    nsf.EntityData.Leafs.Append("respawn-count", types.YLeaf{"RespawnCount", nsf.RespawnCount})
    nsf.EntityData.Leafs.Append("last-nsf-on", types.YLeaf{"LastNsfOn", nsf.LastNsfOn})
    nsf.EntityData.Leafs.Append("last-nsf-off", types.YLeaf{"LastNsfOff", nsf.LastNsfOff})
    nsf.EntityData.Leafs.Append("last-nsf-on-min", types.YLeaf{"LastNsfOnMin", nsf.LastNsfOnMin})
    nsf.EntityData.Leafs.Append("last-nsf-off-min", types.YLeaf{"LastNsfOffMin", nsf.LastNsfOffMin})
    nsf.EntityData.Leafs.Append("last-icd-notif-recv", types.YLeaf{"LastIcdNotifRecv", nsf.LastIcdNotifRecv})
    nsf.EntityData.Leafs.Append("last-icd-notif-recv-min", types.YLeaf{"LastIcdNotifRecvMin", nsf.LastIcdNotifRecvMin})

    nsf.EntityData.YListKeys = []string {}

    return &(nsf.EntityData)
}

// Mld_Standby_DefaultContext
// Default Context
type Mld_Standby_DefaultContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Summary Information.
    Summary Mld_Standby_DefaultContext_Summary

    // IGMP Interface state on.
    InterfaceStateOns Mld_Standby_DefaultContext_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Mld_Standby_DefaultContext_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Mld_Standby_DefaultContext_NonActiveGroups

    // SSM Map Table.
    SsmMaps Mld_Standby_DefaultContext_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Mld_Standby_DefaultContext_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Mld_Standby_DefaultContext_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Mld_Standby_DefaultContext_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Mld_Standby_DefaultContext_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Mld_Standby_DefaultContext_TrafficCounters

    // IGMP Group Database Table.
    Groups Mld_Standby_DefaultContext_Groups

    // IGMP Groups Summary.
    GroupSummary Mld_Standby_DefaultContext_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Mld_Standby_DefaultContext_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Mld_Standby_DefaultContext_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Mld_Standby_DefaultContext_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Mld_Standby_DefaultContext_InterfaceStateOffs
}

func (defaultContext *Mld_Standby_DefaultContext) GetEntityData() *types.CommonEntityData {
    defaultContext.EntityData.YFilter = defaultContext.YFilter
    defaultContext.EntityData.YangName = "default-context"
    defaultContext.EntityData.BundleName = "cisco_ios_xr"
    defaultContext.EntityData.ParentYangName = "standby"
    defaultContext.EntityData.SegmentPath = "default-context"
    defaultContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultContext.EntityData.Children = types.NewOrderedMap()
    defaultContext.EntityData.Children.Append("summary", types.YChild{"Summary", &defaultContext.Summary})
    defaultContext.EntityData.Children.Append("interface-state-ons", types.YChild{"InterfaceStateOns", &defaultContext.InterfaceStateOns})
    defaultContext.EntityData.Children.Append("detail-groups", types.YChild{"DetailGroups", &defaultContext.DetailGroups})
    defaultContext.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", &defaultContext.NonActiveGroups})
    defaultContext.EntityData.Children.Append("ssm-maps", types.YChild{"SsmMaps", &defaultContext.SsmMaps})
    defaultContext.EntityData.Children.Append("explicit-groups", types.YChild{"ExplicitGroups", &defaultContext.ExplicitGroups})
    defaultContext.EntityData.Children.Append("interface-table", types.YChild{"InterfaceTable", &defaultContext.InterfaceTable})
    defaultContext.EntityData.Children.Append("interface-unicast-qos-adjusts", types.YChild{"InterfaceUnicastQosAdjusts", &defaultContext.InterfaceUnicastQosAdjusts})
    defaultContext.EntityData.Children.Append("ranges", types.YChild{"Ranges", &defaultContext.Ranges})
    defaultContext.EntityData.Children.Append("ifrs-interfaces", types.YChild{"IfrsInterfaces", &defaultContext.IfrsInterfaces})
    defaultContext.EntityData.Children.Append("traffic-counters", types.YChild{"TrafficCounters", &defaultContext.TrafficCounters})
    defaultContext.EntityData.Children.Append("groups", types.YChild{"Groups", &defaultContext.Groups})
    defaultContext.EntityData.Children.Append("group-summary", types.YChild{"GroupSummary", &defaultContext.GroupSummary})
    defaultContext.EntityData.Children.Append("ifrs-interface-summary", types.YChild{"IfrsInterfaceSummary", &defaultContext.IfrsInterfaceSummary})
    defaultContext.EntityData.Children.Append("global-interface-table", types.YChild{"GlobalInterfaceTable", &defaultContext.GlobalInterfaceTable})
    defaultContext.EntityData.Children.Append("ssm-map-details", types.YChild{"SsmMapDetails", &defaultContext.SsmMapDetails})
    defaultContext.EntityData.Children.Append("interface-state-offs", types.YChild{"InterfaceStateOffs", &defaultContext.InterfaceStateOffs})
    defaultContext.EntityData.Leafs = types.NewOrderedMap()

    defaultContext.EntityData.YListKeys = []string {}

    return &(defaultContext.EntityData)
}

// Mld_Standby_DefaultContext_Summary
// IGMP Summary Information
type Mld_Standby_DefaultContext_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Mld_Standby_DefaultContext_Summary_Interface.
    Interface []*Mld_Standby_DefaultContext_Summary_Interface
}

func (summary *Mld_Standby_DefaultContext_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "default-context"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range summary.Interface {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.Interface[i]), types.YChild{"Interface", summary.Interface[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", summary.Robustness})
    summary.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", summary.GroupLimit})
    summary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", summary.GroupCount})
    summary.EntityData.Leafs.Append("is-disabled", types.YLeaf{"IsDisabled", summary.IsDisabled})
    summary.EntityData.Leafs.Append("supported-interfaces", types.YLeaf{"SupportedInterfaces", summary.SupportedInterfaces})
    summary.EntityData.Leafs.Append("unsupported-interfaces", types.YLeaf{"UnsupportedInterfaces", summary.UnsupportedInterfaces})
    summary.EntityData.Leafs.Append("enabled-interface-count", types.YLeaf{"EnabledInterfaceCount", summary.EnabledInterfaceCount})
    summary.EntityData.Leafs.Append("disabled-interface-count", types.YLeaf{"DisabledInterfaceCount", summary.DisabledInterfaceCount})
    summary.EntityData.Leafs.Append("tunnel-mte-config-count", types.YLeaf{"TunnelMteConfigCount", summary.TunnelMteConfigCount})
    summary.EntityData.Leafs.Append("node-low-memory", types.YLeaf{"NodeLowMemory", summary.NodeLowMemory})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Mld_Standby_DefaultContext_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Mld_Standby_DefaultContext_Summary_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Mld_Standby_DefaultContext_Summary_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "summary"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", self.GroupLimit})
    self.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", self.GroupCount})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("on-off", types.YLeaf{"OnOff", self.OnOff})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceStateOns
// IGMP Interface state on
type Mld_Standby_DefaultContext_InterfaceStateOns struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []*Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Mld_Standby_DefaultContext_InterfaceStateOns) GetEntityData() *types.CommonEntityData {
    interfaceStateOns.EntityData.YFilter = interfaceStateOns.YFilter
    interfaceStateOns.EntityData.YangName = "interface-state-ons"
    interfaceStateOns.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOns.EntityData.ParentYangName = "default-context"
    interfaceStateOns.EntityData.SegmentPath = "interface-state-ons"
    interfaceStateOns.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOns.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOns.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOns.EntityData.Children = types.NewOrderedMap()
    interfaceStateOns.EntityData.Children.Append("interface-state-on", types.YChild{"InterfaceStateOn", nil})
    for i := range interfaceStateOns.InterfaceStateOn {
        interfaceStateOns.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOns.InterfaceStateOn[i]), types.YChild{"InterfaceStateOn", interfaceStateOns.InterfaceStateOn[i]})
    }
    interfaceStateOns.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOns.EntityData.YListKeys = []string {}

    return &(interfaceStateOns.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetEntityData() *types.CommonEntityData {
    interfaceStateOn.EntityData.YFilter = interfaceStateOn.YFilter
    interfaceStateOn.EntityData.YangName = "interface-state-on"
    interfaceStateOn.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOn.EntityData.ParentYangName = "interface-state-ons"
    interfaceStateOn.EntityData.SegmentPath = "interface-state-on" + types.AddKeyToken(interfaceStateOn.InterfaceName, "interface-name")
    interfaceStateOn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOn.EntityData.Children = types.NewOrderedMap()
    interfaceStateOn.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOn.Address})
    interfaceStateOn.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOn.QuerierAddress})
    interfaceStateOn.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOn.SubscriberAddress})
    interfaceStateOn.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOn.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOn.InterfaceName})
    interfaceStateOn.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOn.InterfaceNameXr})
    interfaceStateOn.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOn.State})
    interfaceStateOn.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOn.PrefixLength})
    interfaceStateOn.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOn.IsInterfaceUp})
    interfaceStateOn.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOn.IsIpEnabled})
    interfaceStateOn.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOn.IsRouterEnabled})
    interfaceStateOn.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOn.IgmpVersion})
    interfaceStateOn.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOn.HostVersion})
    interfaceStateOn.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOn.QueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOn.QueryTimeout})
    interfaceStateOn.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOn.QueryMaximumResponseTime})
    interfaceStateOn.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOn.LastMemberQueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOn.GroupJoins})
    interfaceStateOn.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOn.GroupLeaves})
    interfaceStateOn.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOn.IsQuerier})
    interfaceStateOn.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOn.TotalActiveGroups})
    interfaceStateOn.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOn.Robustness})
    interfaceStateOn.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOn.ProxyInterface})
    interfaceStateOn.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOn.QuerierUptime})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOn.LasLlRegistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOn.LasGetAddressCount})
    interfaceStateOn.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOn.LasUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOn.LasLlRemoveUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOn.LasLlAddUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOn.LasNullUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOn.LasUnregistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOn.IsLasRequest})
    interfaceStateOn.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOn.IsLasRegistered})
    interfaceStateOn.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOn.VrfId})
    interfaceStateOn.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOn.MteVrfId})
    interfaceStateOn.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOn.Location})
    interfaceStateOn.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOn.Mtu})
    interfaceStateOn.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOn.VrfState})
    interfaceStateOn.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOn.IsConfigurationverify})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOn.ConfigurationvrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOn.ConfigurationvrfError})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOn.ConfigurationMcastVrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOn.ConfigurationMcastVrfError})
    interfaceStateOn.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOn.IsImStateRegistered})
    interfaceStateOn.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOn.IsSubscriber})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOn.SubscriberMode})
    interfaceStateOn.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOn.IsIdentityPresent})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOn.SubscriberId})
    interfaceStateOn.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOn.ParentIfhandle})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOn.TimeSinceLastQueryInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOn.TimeSinceLastReportInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOn.RouterUptimeInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOn.MteTupleCount})

    interfaceStateOn.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOn.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-on"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-on"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-on"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Standby_DefaultContext_DetailGroups
// IGMP Detail Group Database
type Mld_Standby_DefaultContext_DetailGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Mld_Standby_DefaultContext_DetailGroups_DetailGroup.
    DetailGroup []*Mld_Standby_DefaultContext_DetailGroups_DetailGroup
}

func (detailGroups *Mld_Standby_DefaultContext_DetailGroups) GetEntityData() *types.CommonEntityData {
    detailGroups.EntityData.YFilter = detailGroups.YFilter
    detailGroups.EntityData.YangName = "detail-groups"
    detailGroups.EntityData.BundleName = "cisco_ios_xr"
    detailGroups.EntityData.ParentYangName = "default-context"
    detailGroups.EntityData.SegmentPath = "detail-groups"
    detailGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroups.EntityData.Children = types.NewOrderedMap()
    detailGroups.EntityData.Children.Append("detail-group", types.YChild{"DetailGroup", nil})
    for i := range detailGroups.DetailGroup {
        detailGroups.EntityData.Children.Append(types.GetSegmentPath(detailGroups.DetailGroup[i]), types.YChild{"DetailGroup", detailGroups.DetailGroup[i]})
    }
    detailGroups.EntityData.Leafs = types.NewOrderedMap()

    detailGroups.EntityData.YListKeys = []string {}

    return &(detailGroups.EntityData)
}

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source.
    Source []*Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source
}

func (detailGroup *Mld_Standby_DefaultContext_DetailGroups_DetailGroup) GetEntityData() *types.CommonEntityData {
    detailGroup.EntityData.YFilter = detailGroup.YFilter
    detailGroup.EntityData.YangName = "detail-group"
    detailGroup.EntityData.BundleName = "cisco_ios_xr"
    detailGroup.EntityData.ParentYangName = "detail-groups"
    detailGroup.EntityData.SegmentPath = "detail-group"
    detailGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroup.EntityData.Children = types.NewOrderedMap()
    detailGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &detailGroup.GroupInfo})
    detailGroup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range detailGroup.Source {
        detailGroup.EntityData.Children.Append(types.GetSegmentPath(detailGroup.Source[i]), types.YChild{"Source", detailGroup.Source[i]})
    }
    detailGroup.EntityData.Leafs = types.NewOrderedMap()
    detailGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", detailGroup.GroupAddress})
    detailGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", detailGroup.InterfaceName})
    detailGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", detailGroup.SourceAddress})
    detailGroup.EntityData.Leafs.Append("is-router-exclude-mode", types.YLeaf{"IsRouterExcludeMode", detailGroup.IsRouterExcludeMode})
    detailGroup.EntityData.Leafs.Append("is-host-exclude-mode", types.YLeaf{"IsHostExcludeMode", detailGroup.IsHostExcludeMode})

    detailGroup.EntityData.YListKeys = []string {}

    return &(detailGroup.EntityData)
}

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "detail-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source
// List of sources
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "detail-group"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &source.SourceAddress})
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", source.Uptime})
    source.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", source.ExpirationTime})
    source.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", source.IsLocal})
    source.EntityData.Leafs.Append("is-remote", types.YLeaf{"IsRemote", source.IsRemote})
    source.EntityData.Leafs.Append("is-forward", types.YLeaf{"IsForward", source.IsForward})
    source.EntityData.Leafs.Append("is-we-report", types.YLeaf{"IsWeReport", source.IsWeReport})
    source.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", source.Flags})
    source.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", source.IsAdded})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "source"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_DefaultContext_NonActiveGroups
// IGMP Non-Active Groups Information
type Mld_Standby_DefaultContext_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []*Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "default-context"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", nil})
    for i := range nonActiveGroups.NonActiveGroups {
        nonActiveGroups.EntityData.Children.Append(types.GetSegmentPath(nonActiveGroups.NonActiveGroups[i]), types.YChild{"NonActiveGroups", nonActiveGroups.NonActiveGroups[i]})
    }
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "non-active-groups"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &nonActiveGroups.GroupAddress})
    nonActiveGroups.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &nonActiveGroups.SourceAddress})
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()
    nonActiveGroups.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", nonActiveGroups.Interface})
    nonActiveGroups.EntityData.Leafs.Append("reason-for-non-activity", types.YLeaf{"ReasonForNonActivity", nonActiveGroups.ReasonForNonActivity})

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "non-active-groups"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "non-active-groups"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_DefaultContext_SsmMaps
// SSM Map Table
type Mld_Standby_DefaultContext_SsmMaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Mld_Standby_DefaultContext_SsmMaps_SsmMap.
    SsmMap []*Mld_Standby_DefaultContext_SsmMaps_SsmMap
}

func (ssmMaps *Mld_Standby_DefaultContext_SsmMaps) GetEntityData() *types.CommonEntityData {
    ssmMaps.EntityData.YFilter = ssmMaps.YFilter
    ssmMaps.EntityData.YangName = "ssm-maps"
    ssmMaps.EntityData.BundleName = "cisco_ios_xr"
    ssmMaps.EntityData.ParentYangName = "default-context"
    ssmMaps.EntityData.SegmentPath = "ssm-maps"
    ssmMaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMaps.EntityData.Children = types.NewOrderedMap()
    ssmMaps.EntityData.Children.Append("ssm-map", types.YChild{"SsmMap", nil})
    for i := range ssmMaps.SsmMap {
        ssmMaps.EntityData.Children.Append(types.GetSegmentPath(ssmMaps.SsmMap[i]), types.YChild{"SsmMap", ssmMaps.SsmMap[i]})
    }
    ssmMaps.EntityData.Leafs = types.NewOrderedMap()

    ssmMaps.EntityData.YListKeys = []string {}

    return &(ssmMaps.EntityData)
}

// Mld_Standby_DefaultContext_SsmMaps_SsmMap
// SSM Map information
type Mld_Standby_DefaultContext_SsmMaps_SsmMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Mld_Standby_DefaultContext_SsmMaps_SsmMap) GetEntityData() *types.CommonEntityData {
    ssmMap.EntityData.YFilter = ssmMap.YFilter
    ssmMap.EntityData.YangName = "ssm-map"
    ssmMap.EntityData.BundleName = "cisco_ios_xr"
    ssmMap.EntityData.ParentYangName = "ssm-maps"
    ssmMap.EntityData.SegmentPath = "ssm-map"
    ssmMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMap.EntityData.Children = types.NewOrderedMap()
    ssmMap.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &ssmMap.GroupAddressXr})
    ssmMap.EntityData.Leafs = types.NewOrderedMap()
    ssmMap.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMap.SsmMapType})
    ssmMap.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMap.GroupAddress})
    ssmMap.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", ssmMap.MapType})
    ssmMap.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", ssmMap.SourceCounts})

    ssmMap.EntityData.YListKeys = []string {}

    return &(ssmMap.EntityData)
}

// Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "ssm-map"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Standby_DefaultContext_ExplicitGroups
// IGMP Explicit Group Database
type Mld_Standby_DefaultContext_ExplicitGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []*Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Mld_Standby_DefaultContext_ExplicitGroups) GetEntityData() *types.CommonEntityData {
    explicitGroups.EntityData.YFilter = explicitGroups.YFilter
    explicitGroups.EntityData.YangName = "explicit-groups"
    explicitGroups.EntityData.BundleName = "cisco_ios_xr"
    explicitGroups.EntityData.ParentYangName = "default-context"
    explicitGroups.EntityData.SegmentPath = "explicit-groups"
    explicitGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroups.EntityData.Children = types.NewOrderedMap()
    explicitGroups.EntityData.Children.Append("explicit-group", types.YChild{"ExplicitGroup", nil})
    for i := range explicitGroups.ExplicitGroup {
        explicitGroups.EntityData.Children.Append(types.GetSegmentPath(explicitGroups.ExplicitGroup[i]), types.YChild{"ExplicitGroup", explicitGroups.ExplicitGroup[i]})
    }
    explicitGroups.EntityData.Leafs = types.NewOrderedMap()

    explicitGroups.EntityData.YListKeys = []string {}

    return &(explicitGroups.EntityData)
}

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host.
    Host []*Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetEntityData() *types.CommonEntityData {
    explicitGroup.EntityData.YFilter = explicitGroup.YFilter
    explicitGroup.EntityData.YangName = "explicit-group"
    explicitGroup.EntityData.BundleName = "cisco_ios_xr"
    explicitGroup.EntityData.ParentYangName = "explicit-groups"
    explicitGroup.EntityData.SegmentPath = "explicit-group"
    explicitGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroup.EntityData.Children = types.NewOrderedMap()
    explicitGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &explicitGroup.GroupInfo})
    explicitGroup.EntityData.Children.Append("host", types.YChild{"Host", nil})
    for i := range explicitGroup.Host {
        explicitGroup.EntityData.Children.Append(types.GetSegmentPath(explicitGroup.Host[i]), types.YChild{"Host", explicitGroup.Host[i]})
    }
    explicitGroup.EntityData.Leafs = types.NewOrderedMap()
    explicitGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", explicitGroup.GroupAddress})
    explicitGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", explicitGroup.InterfaceName})
    explicitGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", explicitGroup.SourceAddress})
    explicitGroup.EntityData.Leafs.Append("include-hosts", types.YLeaf{"IncludeHosts", explicitGroup.IncludeHosts})
    explicitGroup.EntityData.Leafs.Append("exclude-hosts", types.YLeaf{"ExcludeHosts", explicitGroup.ExcludeHosts})

    explicitGroup.EntityData.YListKeys = []string {}

    return &(explicitGroup.EntityData)
}

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "explicit-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []*Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetEntityData() *types.CommonEntityData {
    host.EntityData.YFilter = host.YFilter
    host.EntityData.YangName = "host"
    host.EntityData.BundleName = "cisco_ios_xr"
    host.EntityData.ParentYangName = "explicit-group"
    host.EntityData.SegmentPath = "host"
    host.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    host.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    host.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    host.EntityData.Children = types.NewOrderedMap()
    host.EntityData.Children.Append("address", types.YChild{"Address", &host.Address})
    host.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", nil})
    for i := range host.SourceAddress {
        host.EntityData.Children.Append(types.GetSegmentPath(host.SourceAddress[i]), types.YChild{"SourceAddress", host.SourceAddress[i]})
    }
    host.EntityData.Leafs = types.NewOrderedMap()
    host.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", host.Uptime})
    host.EntityData.Leafs.Append("is-exclude", types.YLeaf{"IsExclude", host.IsExclude})
    host.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", host.ExpirationTime})
    host.EntityData.Leafs.Append("source-count", types.YLeaf{"SourceCount", host.SourceCount})

    host.EntityData.YListKeys = []string {}

    return &(host.EntityData)
}

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "host"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "host"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceTable
// IGMP Interface specific Table
type Mld_Standby_DefaultContext_InterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_DefaultContext_InterfaceTable_Interface.
    Interface []*Mld_Standby_DefaultContext_InterfaceTable_Interface
}

func (interfaceTable *Mld_Standby_DefaultContext_InterfaceTable) GetEntityData() *types.CommonEntityData {
    interfaceTable.EntityData.YFilter = interfaceTable.YFilter
    interfaceTable.EntityData.YangName = "interface-table"
    interfaceTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceTable.EntityData.ParentYangName = "default-context"
    interfaceTable.EntityData.SegmentPath = "interface-table"
    interfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceTable.EntityData.Children = types.NewOrderedMap()
    interfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceTable.Interface {
        interfaceTable.EntityData.Children.Append(types.GetSegmentPath(interfaceTable.Interface[i]), types.YChild{"Interface", interfaceTable.Interface[i]})
    }
    interfaceTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceTable.EntityData.YListKeys = []string {}

    return &(interfaceTable.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceTable_Interface
// IGMP Interface
type Mld_Standby_DefaultContext_InterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_DefaultContext_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Standby_DefaultContext_InterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceTable_Interface_Address
// IP address
type Mld_Standby_DefaultContext_InterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_DefaultContext_InterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []*Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjusts.EntityData.YFilter = interfaceUnicastQosAdjusts.YFilter
    interfaceUnicastQosAdjusts.EntityData.YangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjusts.EntityData.ParentYangName = "default-context"
    interfaceUnicastQosAdjusts.EntityData.SegmentPath = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjusts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjusts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjusts.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjusts.EntityData.Children.Append("interface-unicast-qos-adjust", types.YChild{"InterfaceUnicastQosAdjust", nil})
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        interfaceUnicastQosAdjusts.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]), types.YChild{"InterfaceUnicastQosAdjust", interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]})
    }
    interfaceUnicastQosAdjusts.EntityData.Leafs = types.NewOrderedMap()

    interfaceUnicastQosAdjusts.EntityData.YListKeys = []string {}

    return &(interfaceUnicastQosAdjusts.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []*Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjust.EntityData.YFilter = interfaceUnicastQosAdjust.YFilter
    interfaceUnicastQosAdjust.EntityData.YangName = "interface-unicast-qos-adjust"
    interfaceUnicastQosAdjust.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjust.EntityData.ParentYangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjust.EntityData.SegmentPath = "interface-unicast-qos-adjust" + types.AddKeyToken(interfaceUnicastQosAdjust.InterfaceName, "interface-name")
    interfaceUnicastQosAdjust.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjust.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjust.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjust.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Children.Append("update", types.YChild{"Update", nil})
    for i := range interfaceUnicastQosAdjust.Update {
        interfaceUnicastQosAdjust.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjust.Update[i]), types.YChild{"Update", interfaceUnicastQosAdjust.Update[i]})
    }
    interfaceUnicastQosAdjust.EntityData.Leafs = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceUnicastQosAdjust.InterfaceName})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("is-virtual-access", types.YLeaf{"IsVirtualAccess", interfaceUnicastQosAdjust.IsVirtualAccess})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate", types.YLeaf{"Rate", interfaceUnicastQosAdjust.Rate})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-increments", types.YLeaf{"RateIncrements", interfaceUnicastQosAdjust.RateIncrements})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-decrements", types.YLeaf{"RateDecrements", interfaceUnicastQosAdjust.RateDecrements})

    interfaceUnicastQosAdjust.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceUnicastQosAdjust.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetEntityData() *types.CommonEntityData {
    update.EntityData.YFilter = update.YFilter
    update.EntityData.YangName = "update"
    update.EntityData.BundleName = "cisco_ios_xr"
    update.EntityData.ParentYangName = "interface-unicast-qos-adjust"
    update.EntityData.SegmentPath = "update"
    update.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    update.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    update.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    update.EntityData.Children = types.NewOrderedMap()
    update.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &update.SourceAddress})
    update.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &update.GroupAddress})
    update.EntityData.Leafs = types.NewOrderedMap()
    update.EntityData.Leafs.Append("is-add", types.YLeaf{"IsAdd", update.IsAdd})
    update.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", update.Weight})
    update.EntityData.Leafs.Append("received-time", types.YLeaf{"ReceivedTime", update.ReceivedTime})

    update.EntityData.YListKeys = []string {}

    return &(update.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "update"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "update"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Mld_Standby_DefaultContext_Ranges
// Range table
type Mld_Standby_DefaultContext_Ranges struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Range information. The type is slice of
    // Mld_Standby_DefaultContext_Ranges_Range.
    Range []*Mld_Standby_DefaultContext_Ranges_Range
}

func (ranges *Mld_Standby_DefaultContext_Ranges) GetEntityData() *types.CommonEntityData {
    ranges.EntityData.YFilter = ranges.YFilter
    ranges.EntityData.YangName = "ranges"
    ranges.EntityData.BundleName = "cisco_ios_xr"
    ranges.EntityData.ParentYangName = "default-context"
    ranges.EntityData.SegmentPath = "ranges"
    ranges.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ranges.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ranges.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ranges.EntityData.Children = types.NewOrderedMap()
    ranges.EntityData.Children.Append("range", types.YChild{"Range", nil})
    for i := range ranges.Range {
        ranges.EntityData.Children.Append(types.GetSegmentPath(ranges.Range[i]), types.YChild{"Range", ranges.Range[i]})
    }
    ranges.EntityData.Leafs = types.NewOrderedMap()

    ranges.EntityData.YListKeys = []string {}

    return &(ranges.EntityData)
}

// Mld_Standby_DefaultContext_Ranges_Range
// Range information
type Mld_Standby_DefaultContext_Ranges_Range struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: 0..4294967295.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr
}

func (self *Mld_Standby_DefaultContext_Ranges_Range) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "range"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "ranges"
    self.EntityData.SegmentPath = "range"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &self.GroupAddressXr})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", self.GroupAddress})
    self.EntityData.Leafs.Append("group-mask", types.YLeaf{"GroupMask", self.GroupMask})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", self.Protocol})
    self.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", self.IsStale})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr
// Group address
type Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "range"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Standby_DefaultContext_IfrsInterfaces
// IGMP Interface specific
type Mld_Standby_DefaultContext_IfrsInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface.
    IfrsInterface []*Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Mld_Standby_DefaultContext_IfrsInterfaces) GetEntityData() *types.CommonEntityData {
    ifrsInterfaces.EntityData.YFilter = ifrsInterfaces.YFilter
    ifrsInterfaces.EntityData.YangName = "ifrs-interfaces"
    ifrsInterfaces.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaces.EntityData.ParentYangName = "default-context"
    ifrsInterfaces.EntityData.SegmentPath = "ifrs-interfaces"
    ifrsInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaces.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaces.EntityData.Children.Append("ifrs-interface", types.YChild{"IfrsInterface", nil})
    for i := range ifrsInterfaces.IfrsInterface {
        ifrsInterfaces.EntityData.Children.Append(types.GetSegmentPath(ifrsInterfaces.IfrsInterface[i]), types.YChild{"IfrsInterface", ifrsInterfaces.IfrsInterface[i]})
    }
    ifrsInterfaces.EntityData.Leafs = types.NewOrderedMap()

    ifrsInterfaces.EntityData.YListKeys = []string {}

    return &(ifrsInterfaces.EntityData)
}

// Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetEntityData() *types.CommonEntityData {
    ifrsInterface.EntityData.YFilter = ifrsInterface.YFilter
    ifrsInterface.EntityData.YangName = "ifrs-interface"
    ifrsInterface.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterface.EntityData.ParentYangName = "ifrs-interfaces"
    ifrsInterface.EntityData.SegmentPath = "ifrs-interface" + types.AddKeyToken(ifrsInterface.InterfaceName, "interface-name")
    ifrsInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterface.EntityData.Children = types.NewOrderedMap()
    ifrsInterface.EntityData.Children.Append("igmp-interface-entry", types.YChild{"IgmpInterfaceEntry", &ifrsInterface.IgmpInterfaceEntry})
    ifrsInterface.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ifrsInterface.InterfaceName})
    ifrsInterface.EntityData.Leafs.Append("join-group-count", types.YLeaf{"JoinGroupCount", ifrsInterface.JoinGroupCount})

    ifrsInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(ifrsInterface.EntityData)
}

// Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetEntityData() *types.CommonEntityData {
    igmpInterfaceEntry.EntityData.YFilter = igmpInterfaceEntry.YFilter
    igmpInterfaceEntry.EntityData.YangName = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.BundleName = "cisco_ios_xr"
    igmpInterfaceEntry.EntityData.ParentYangName = "ifrs-interface"
    igmpInterfaceEntry.EntityData.SegmentPath = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igmpInterfaceEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igmpInterfaceEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igmpInterfaceEntry.EntityData.Children = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Children.Append("address", types.YChild{"Address", &igmpInterfaceEntry.Address})
    igmpInterfaceEntry.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &igmpInterfaceEntry.QuerierAddress})
    igmpInterfaceEntry.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &igmpInterfaceEntry.SubscriberAddress})
    igmpInterfaceEntry.EntityData.Leafs = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", igmpInterfaceEntry.InterfaceNameXr})
    igmpInterfaceEntry.EntityData.Leafs.Append("state", types.YLeaf{"State", igmpInterfaceEntry.State})
    igmpInterfaceEntry.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", igmpInterfaceEntry.PrefixLength})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", igmpInterfaceEntry.IsInterfaceUp})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", igmpInterfaceEntry.IsIpEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", igmpInterfaceEntry.IsRouterEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", igmpInterfaceEntry.IgmpVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", igmpInterfaceEntry.HostVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", igmpInterfaceEntry.QueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", igmpInterfaceEntry.QueryTimeout})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", igmpInterfaceEntry.QueryMaximumResponseTime})
    igmpInterfaceEntry.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", igmpInterfaceEntry.LastMemberQueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", igmpInterfaceEntry.GroupJoins})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", igmpInterfaceEntry.GroupLeaves})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", igmpInterfaceEntry.IsQuerier})
    igmpInterfaceEntry.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", igmpInterfaceEntry.TotalActiveGroups})
    igmpInterfaceEntry.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", igmpInterfaceEntry.Robustness})
    igmpInterfaceEntry.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", igmpInterfaceEntry.ProxyInterface})
    igmpInterfaceEntry.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", igmpInterfaceEntry.QuerierUptime})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", igmpInterfaceEntry.LasLlRegistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", igmpInterfaceEntry.LasGetAddressCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", igmpInterfaceEntry.LasUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", igmpInterfaceEntry.LasLlRemoveUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", igmpInterfaceEntry.LasLlAddUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", igmpInterfaceEntry.LasNullUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", igmpInterfaceEntry.LasUnregistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", igmpInterfaceEntry.IsLasRequest})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", igmpInterfaceEntry.IsLasRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", igmpInterfaceEntry.VrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", igmpInterfaceEntry.MteVrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("location", types.YLeaf{"Location", igmpInterfaceEntry.Location})
    igmpInterfaceEntry.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", igmpInterfaceEntry.Mtu})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", igmpInterfaceEntry.VrfState})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", igmpInterfaceEntry.IsConfigurationverify})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", igmpInterfaceEntry.ConfigurationvrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", igmpInterfaceEntry.ConfigurationvrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", igmpInterfaceEntry.ConfigurationMcastVrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", igmpInterfaceEntry.ConfigurationMcastVrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", igmpInterfaceEntry.IsImStateRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", igmpInterfaceEntry.IsSubscriber})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", igmpInterfaceEntry.SubscriberMode})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", igmpInterfaceEntry.IsIdentityPresent})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", igmpInterfaceEntry.SubscriberId})
    igmpInterfaceEntry.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", igmpInterfaceEntry.ParentIfhandle})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", igmpInterfaceEntry.TimeSinceLastQueryInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", igmpInterfaceEntry.TimeSinceLastReportInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", igmpInterfaceEntry.RouterUptimeInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", igmpInterfaceEntry.MteTupleCount})

    igmpInterfaceEntry.EntityData.YListKeys = []string {}

    return &(igmpInterfaceEntry.EntityData)
}

// Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "igmp-interface-entry"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "igmp-interface-entry"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "igmp-interface-entry"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Standby_DefaultContext_TrafficCounters
// IGMP Message Traffic Counters
type Mld_Standby_DefaultContext_TrafficCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Mld_Standby_DefaultContext_TrafficCounters) GetEntityData() *types.CommonEntityData {
    trafficCounters.EntityData.YFilter = trafficCounters.YFilter
    trafficCounters.EntityData.YangName = "traffic-counters"
    trafficCounters.EntityData.BundleName = "cisco_ios_xr"
    trafficCounters.EntityData.ParentYangName = "default-context"
    trafficCounters.EntityData.SegmentPath = "traffic-counters"
    trafficCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficCounters.EntityData.Children = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", trafficCounters.ElapsedTime})
    trafficCounters.EntityData.Leafs.Append("packets-in", types.YLeaf{"PacketsIn", trafficCounters.PacketsIn})
    trafficCounters.EntityData.Leafs.Append("packets-out", types.YLeaf{"PacketsOut", trafficCounters.PacketsOut})
    trafficCounters.EntityData.Leafs.Append("format-errors", types.YLeaf{"FormatErrors", trafficCounters.FormatErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-input-errors", types.YLeaf{"PacketManagerInputErrors", trafficCounters.PacketManagerInputErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-output-errors", types.YLeaf{"PacketManagerOutputErrors", trafficCounters.PacketManagerOutputErrors})
    trafficCounters.EntityData.Leafs.Append("checksum-errors", types.YLeaf{"ChecksumErrors", trafficCounters.ChecksumErrors})
    trafficCounters.EntityData.Leafs.Append("receive-socket-errors", types.YLeaf{"ReceiveSocketErrors", trafficCounters.ReceiveSocketErrors})
    trafficCounters.EntityData.Leafs.Append("socket-errors", types.YLeaf{"SocketErrors", trafficCounters.SocketErrors})
    trafficCounters.EntityData.Leafs.Append("bad-scope-errors", types.YLeaf{"BadScopeErrors", trafficCounters.BadScopeErrors})
    trafficCounters.EntityData.Leafs.Append("auxillary-data-length-errors", types.YLeaf{"AuxillaryDataLengthErrors", trafficCounters.AuxillaryDataLengthErrors})
    trafficCounters.EntityData.Leafs.Append("invalid-source-address-errors", types.YLeaf{"InvalidSourceAddressErrors", trafficCounters.InvalidSourceAddressErrors})
    trafficCounters.EntityData.Leafs.Append("no-socket-connection", types.YLeaf{"NoSocketConnection", trafficCounters.NoSocketConnection})
    trafficCounters.EntityData.Leafs.Append("miscellaneous-errors", types.YLeaf{"MiscellaneousErrors", trafficCounters.MiscellaneousErrors})
    trafficCounters.EntityData.Leafs.Append("input-queries", types.YLeaf{"InputQueries", trafficCounters.InputQueries})
    trafficCounters.EntityData.Leafs.Append("input-reports", types.YLeaf{"InputReports", trafficCounters.InputReports})
    trafficCounters.EntityData.Leafs.Append("input-leaves", types.YLeaf{"InputLeaves", trafficCounters.InputLeaves})
    trafficCounters.EntityData.Leafs.Append("input-mtrace", types.YLeaf{"InputMtrace", trafficCounters.InputMtrace})
    trafficCounters.EntityData.Leafs.Append("input-dvmrp", types.YLeaf{"InputDvmrp", trafficCounters.InputDvmrp})
    trafficCounters.EntityData.Leafs.Append("input-pim", types.YLeaf{"InputPim", trafficCounters.InputPim})
    trafficCounters.EntityData.Leafs.Append("output-queries", types.YLeaf{"OutputQueries", trafficCounters.OutputQueries})
    trafficCounters.EntityData.Leafs.Append("output-reports", types.YLeaf{"OutputReports", trafficCounters.OutputReports})
    trafficCounters.EntityData.Leafs.Append("output-leaves", types.YLeaf{"OutputLeaves", trafficCounters.OutputLeaves})
    trafficCounters.EntityData.Leafs.Append("output-mtrace", types.YLeaf{"OutputMtrace", trafficCounters.OutputMtrace})
    trafficCounters.EntityData.Leafs.Append("output-dvmrp", types.YLeaf{"OutputDvmrp", trafficCounters.OutputDvmrp})
    trafficCounters.EntityData.Leafs.Append("output-pim", types.YLeaf{"OutputPim", trafficCounters.OutputPim})
    trafficCounters.EntityData.Leafs.Append("get-packet-failure", types.YLeaf{"GetPacketFailure", trafficCounters.GetPacketFailure})
    trafficCounters.EntityData.Leafs.Append("output-no-parent-interface-handle", types.YLeaf{"OutputNoParentInterfaceHandle", trafficCounters.OutputNoParentInterfaceHandle})
    trafficCounters.EntityData.Leafs.Append("input-no-idb", types.YLeaf{"InputNoIdb", trafficCounters.InputNoIdb})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-in-idb", types.YLeaf{"InputNoVrfInIdb", trafficCounters.InputNoVrfInIdb})
    trafficCounters.EntityData.Leafs.Append("input-disabled-idb", types.YLeaf{"InputDisabledIdb", trafficCounters.InputDisabledIdb})
    trafficCounters.EntityData.Leafs.Append("input-martian-address", types.YLeaf{"InputMartianAddress", trafficCounters.InputMartianAddress})
    trafficCounters.EntityData.Leafs.Append("input-no-assigned-vrf-id", types.YLeaf{"InputNoAssignedVrfId", trafficCounters.InputNoAssignedVrfId})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-mtrace", types.YLeaf{"InputNoVrfMtrace", trafficCounters.InputNoVrfMtrace})
    trafficCounters.EntityData.Leafs.Append("input-no-platform-support-mtrace", types.YLeaf{"InputNoPlatformSupportMtrace", trafficCounters.InputNoPlatformSupportMtrace})

    trafficCounters.EntityData.YListKeys = []string {}

    return &(trafficCounters.EntityData)
}

// Mld_Standby_DefaultContext_Groups
// IGMP Group Database Table
type Mld_Standby_DefaultContext_Groups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Mld_Standby_DefaultContext_Groups_Group.
    Group []*Mld_Standby_DefaultContext_Groups_Group
}

func (groups *Mld_Standby_DefaultContext_Groups) GetEntityData() *types.CommonEntityData {
    groups.EntityData.YFilter = groups.YFilter
    groups.EntityData.YangName = "groups"
    groups.EntityData.BundleName = "cisco_ios_xr"
    groups.EntityData.ParentYangName = "default-context"
    groups.EntityData.SegmentPath = "groups"
    groups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groups.EntityData.Children = types.NewOrderedMap()
    groups.EntityData.Children.Append("group", types.YChild{"Group", nil})
    for i := range groups.Group {
        groups.EntityData.Children.Append(types.GetSegmentPath(groups.Group[i]), types.YChild{"Group", groups.Group[i]})
    }
    groups.EntityData.Leafs = types.NewOrderedMap()

    groups.EntityData.YListKeys = []string {}

    return &(groups.EntityData)
}

// Mld_Standby_DefaultContext_Groups_Group
// IGMP Group Entry Information
type Mld_Standby_DefaultContext_Groups_Group struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Standby_DefaultContext_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Mld_Standby_DefaultContext_Groups_Group_SourceAddress
}

func (group *Mld_Standby_DefaultContext_Groups_Group) GetEntityData() *types.CommonEntityData {
    group.EntityData.YFilter = group.YFilter
    group.EntityData.YangName = "group"
    group.EntityData.BundleName = "cisco_ios_xr"
    group.EntityData.ParentYangName = "groups"
    group.EntityData.SegmentPath = "group"
    group.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    group.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    group.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    group.EntityData.Children = types.NewOrderedMap()
    group.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &group.GroupAddressXr})
    group.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &group.LastReporter})
    group.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &group.SourceAddress})
    group.EntityData.Leafs = types.NewOrderedMap()
    group.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", group.GroupAddress})
    group.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", group.InterfaceName})
    group.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", group.InterfaceNameXr})
    group.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", group.Uptime})
    group.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", group.ExpirationTime})
    group.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", group.ExplicitTrackingEnabled})
    group.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", group.IsSelfJoin})
    group.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", group.RowStatus})
    group.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", group.IsLowMemory})
    group.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", group.RouterFilterMode})
    group.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", group.OlderHostVersion1Timer})
    group.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", group.OlderHostVersion2Timer})
    group.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", group.IsAdded})
    group.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", group.IsSuppressed})

    group.EntityData.YListKeys = []string {}

    return &(group.EntityData)
}

// Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr
// Group Address
type Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Standby_DefaultContext_Groups_Group_LastReporter
// Last reporter address
type Mld_Standby_DefaultContext_Groups_Group_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Standby_DefaultContext_Groups_Group_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Mld_Standby_DefaultContext_Groups_Group_SourceAddress
// Source Address
type Mld_Standby_DefaultContext_Groups_Group_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Standby_DefaultContext_Groups_Group_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Standby_DefaultContext_GroupSummary
// IGMP Groups Summary
type Mld_Standby_DefaultContext_GroupSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Mld_Standby_DefaultContext_GroupSummary) GetEntityData() *types.CommonEntityData {
    groupSummary.EntityData.YFilter = groupSummary.YFilter
    groupSummary.EntityData.YangName = "group-summary"
    groupSummary.EntityData.BundleName = "cisco_ios_xr"
    groupSummary.EntityData.ParentYangName = "default-context"
    groupSummary.EntityData.SegmentPath = "group-summary"
    groupSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupSummary.EntityData.Children = types.NewOrderedMap()
    groupSummary.EntityData.Leafs = types.NewOrderedMap()
    groupSummary.EntityData.Leafs.Append("groutes", types.YLeaf{"Groutes", groupSummary.Groutes})
    groupSummary.EntityData.Leafs.Append("sg-routes", types.YLeaf{"SgRoutes", groupSummary.SgRoutes})
    groupSummary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", groupSummary.GroupCount})
    groupSummary.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupSummary.IsLowMemory})

    groupSummary.EntityData.YListKeys = []string {}

    return &(groupSummary.EntityData)
}

// Mld_Standby_DefaultContext_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Mld_Standby_DefaultContext_IfrsInterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Mld_Standby_DefaultContext_IfrsInterfaceSummary) GetEntityData() *types.CommonEntityData {
    ifrsInterfaceSummary.EntityData.YFilter = ifrsInterfaceSummary.YFilter
    ifrsInterfaceSummary.EntityData.YangName = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaceSummary.EntityData.ParentYangName = "default-context"
    ifrsInterfaceSummary.EntityData.SegmentPath = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaceSummary.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs.Append("interface-count", types.YLeaf{"InterfaceCount", ifrsInterfaceSummary.InterfaceCount})
    ifrsInterfaceSummary.EntityData.Leafs.Append("configuration-count", types.YLeaf{"ConfigurationCount", ifrsInterfaceSummary.ConfigurationCount})

    ifrsInterfaceSummary.EntityData.YListKeys = []string {}

    return &(ifrsInterfaceSummary.EntityData)
}

// Mld_Standby_DefaultContext_GlobalInterfaceTable
// IGMP Global Interface 
type Mld_Standby_DefaultContext_GlobalInterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface.
    Interface []*Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Mld_Standby_DefaultContext_GlobalInterfaceTable) GetEntityData() *types.CommonEntityData {
    globalInterfaceTable.EntityData.YFilter = globalInterfaceTable.YFilter
    globalInterfaceTable.EntityData.YangName = "global-interface-table"
    globalInterfaceTable.EntityData.BundleName = "cisco_ios_xr"
    globalInterfaceTable.EntityData.ParentYangName = "default-context"
    globalInterfaceTable.EntityData.SegmentPath = "global-interface-table"
    globalInterfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalInterfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalInterfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalInterfaceTable.EntityData.Children = types.NewOrderedMap()
    globalInterfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range globalInterfaceTable.Interface {
        globalInterfaceTable.EntityData.Children.Append(types.GetSegmentPath(globalInterfaceTable.Interface[i]), types.YChild{"Interface", globalInterfaceTable.Interface[i]})
    }
    globalInterfaceTable.EntityData.Leafs = types.NewOrderedMap()

    globalInterfaceTable.EntityData.YListKeys = []string {}

    return &(globalInterfaceTable.EntityData)
}

// Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface
// IGMP Interface
type Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "global-interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address
// IP address
type Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Standby_DefaultContext_SsmMapDetails
// SSM Map Detail
type Mld_Standby_DefaultContext_SsmMapDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []*Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Mld_Standby_DefaultContext_SsmMapDetails) GetEntityData() *types.CommonEntityData {
    ssmMapDetails.EntityData.YFilter = ssmMapDetails.YFilter
    ssmMapDetails.EntityData.YangName = "ssm-map-details"
    ssmMapDetails.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetails.EntityData.ParentYangName = "default-context"
    ssmMapDetails.EntityData.SegmentPath = "ssm-map-details"
    ssmMapDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetails.EntityData.Children = types.NewOrderedMap()
    ssmMapDetails.EntityData.Children.Append("ssm-map-detail", types.YChild{"SsmMapDetail", nil})
    for i := range ssmMapDetails.SsmMapDetail {
        ssmMapDetails.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetails.SsmMapDetail[i]), types.YChild{"SsmMapDetail", ssmMapDetails.SsmMapDetail[i]})
    }
    ssmMapDetails.EntityData.Leafs = types.NewOrderedMap()

    ssmMapDetails.EntityData.YListKeys = []string {}

    return &(ssmMapDetails.EntityData)
}

// Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources.
    Sources []*Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetEntityData() *types.CommonEntityData {
    ssmMapDetail.EntityData.YFilter = ssmMapDetail.YFilter
    ssmMapDetail.EntityData.YangName = "ssm-map-detail"
    ssmMapDetail.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetail.EntityData.ParentYangName = "ssm-map-details"
    ssmMapDetail.EntityData.SegmentPath = "ssm-map-detail"
    ssmMapDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetail.EntityData.Children = types.NewOrderedMap()
    ssmMapDetail.EntityData.Children.Append("map-info", types.YChild{"MapInfo", &ssmMapDetail.MapInfo})
    ssmMapDetail.EntityData.Children.Append("sources", types.YChild{"Sources", nil})
    for i := range ssmMapDetail.Sources {
        ssmMapDetail.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetail.Sources[i]), types.YChild{"Sources", ssmMapDetail.Sources[i]})
    }
    ssmMapDetail.EntityData.Leafs = types.NewOrderedMap()
    ssmMapDetail.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMapDetail.SsmMapType})
    ssmMapDetail.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMapDetail.GroupAddress})
    ssmMapDetail.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", ssmMapDetail.ExpirationTime})
    ssmMapDetail.EntityData.Leafs.Append("response-pending", types.YLeaf{"ResponsePending", ssmMapDetail.ResponsePending})
    ssmMapDetail.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", ssmMapDetail.QueryInterval})
    ssmMapDetail.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", ssmMapDetail.ElapsedTime})

    ssmMapDetail.EntityData.YListKeys = []string {}

    return &(ssmMapDetail.EntityData)
}

// Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetEntityData() *types.CommonEntityData {
    mapInfo.EntityData.YFilter = mapInfo.YFilter
    mapInfo.EntityData.YangName = "map-info"
    mapInfo.EntityData.BundleName = "cisco_ios_xr"
    mapInfo.EntityData.ParentYangName = "ssm-map-detail"
    mapInfo.EntityData.SegmentPath = "map-info"
    mapInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mapInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mapInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mapInfo.EntityData.Children = types.NewOrderedMap()
    mapInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &mapInfo.GroupAddressXr})
    mapInfo.EntityData.Leafs = types.NewOrderedMap()
    mapInfo.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", mapInfo.MapType})
    mapInfo.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", mapInfo.SourceCounts})

    mapInfo.EntityData.YListKeys = []string {}

    return &(mapInfo.EntityData)
}

// Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "map-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Mld_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetEntityData() *types.CommonEntityData {
    sources.EntityData.YFilter = sources.YFilter
    sources.EntityData.YangName = "sources"
    sources.EntityData.BundleName = "cisco_ios_xr"
    sources.EntityData.ParentYangName = "ssm-map-detail"
    sources.EntityData.SegmentPath = "sources"
    sources.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sources.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sources.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sources.EntityData.Children = types.NewOrderedMap()
    sources.EntityData.Leafs = types.NewOrderedMap()
    sources.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sources.AfName})
    sources.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sources.Ipv4Address})
    sources.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sources.Ipv6Address})

    sources.EntityData.YListKeys = []string {}

    return &(sources.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceStateOffs
// IGMP Interface state off
type Mld_Standby_DefaultContext_InterfaceStateOffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []*Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Mld_Standby_DefaultContext_InterfaceStateOffs) GetEntityData() *types.CommonEntityData {
    interfaceStateOffs.EntityData.YFilter = interfaceStateOffs.YFilter
    interfaceStateOffs.EntityData.YangName = "interface-state-offs"
    interfaceStateOffs.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOffs.EntityData.ParentYangName = "default-context"
    interfaceStateOffs.EntityData.SegmentPath = "interface-state-offs"
    interfaceStateOffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOffs.EntityData.Children = types.NewOrderedMap()
    interfaceStateOffs.EntityData.Children.Append("interface-state-off", types.YChild{"InterfaceStateOff", nil})
    for i := range interfaceStateOffs.InterfaceStateOff {
        interfaceStateOffs.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOffs.InterfaceStateOff[i]), types.YChild{"InterfaceStateOff", interfaceStateOffs.InterfaceStateOff[i]})
    }
    interfaceStateOffs.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOffs.EntityData.YListKeys = []string {}

    return &(interfaceStateOffs.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetEntityData() *types.CommonEntityData {
    interfaceStateOff.EntityData.YFilter = interfaceStateOff.YFilter
    interfaceStateOff.EntityData.YangName = "interface-state-off"
    interfaceStateOff.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOff.EntityData.ParentYangName = "interface-state-offs"
    interfaceStateOff.EntityData.SegmentPath = "interface-state-off" + types.AddKeyToken(interfaceStateOff.InterfaceName, "interface-name")
    interfaceStateOff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOff.EntityData.Children = types.NewOrderedMap()
    interfaceStateOff.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOff.Address})
    interfaceStateOff.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOff.QuerierAddress})
    interfaceStateOff.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOff.SubscriberAddress})
    interfaceStateOff.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOff.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOff.InterfaceName})
    interfaceStateOff.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOff.InterfaceNameXr})
    interfaceStateOff.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOff.State})
    interfaceStateOff.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOff.PrefixLength})
    interfaceStateOff.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOff.IsInterfaceUp})
    interfaceStateOff.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOff.IsIpEnabled})
    interfaceStateOff.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOff.IsRouterEnabled})
    interfaceStateOff.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOff.IgmpVersion})
    interfaceStateOff.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOff.HostVersion})
    interfaceStateOff.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOff.QueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOff.QueryTimeout})
    interfaceStateOff.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOff.QueryMaximumResponseTime})
    interfaceStateOff.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOff.LastMemberQueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOff.GroupJoins})
    interfaceStateOff.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOff.GroupLeaves})
    interfaceStateOff.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOff.IsQuerier})
    interfaceStateOff.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOff.TotalActiveGroups})
    interfaceStateOff.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOff.Robustness})
    interfaceStateOff.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOff.ProxyInterface})
    interfaceStateOff.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOff.QuerierUptime})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOff.LasLlRegistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOff.LasGetAddressCount})
    interfaceStateOff.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOff.LasUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOff.LasLlRemoveUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOff.LasLlAddUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOff.LasNullUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOff.LasUnregistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOff.IsLasRequest})
    interfaceStateOff.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOff.IsLasRegistered})
    interfaceStateOff.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOff.VrfId})
    interfaceStateOff.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOff.MteVrfId})
    interfaceStateOff.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOff.Location})
    interfaceStateOff.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOff.Mtu})
    interfaceStateOff.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOff.VrfState})
    interfaceStateOff.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOff.IsConfigurationverify})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOff.ConfigurationvrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOff.ConfigurationvrfError})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOff.ConfigurationMcastVrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOff.ConfigurationMcastVrfError})
    interfaceStateOff.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOff.IsImStateRegistered})
    interfaceStateOff.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOff.IsSubscriber})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOff.SubscriberMode})
    interfaceStateOff.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOff.IsIdentityPresent})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOff.SubscriberId})
    interfaceStateOff.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOff.ParentIfhandle})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOff.TimeSinceLastQueryInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOff.TimeSinceLastReportInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOff.RouterUptimeInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOff.MteTupleCount})

    interfaceStateOff.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOff.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-off"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-off"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-off"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Active
// Active Process
type Mld_Active struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Table.
    Vrfs Mld_Active_Vrfs

    // Process.
    Process Mld_Active_Process

    // Default Context.
    DefaultContext Mld_Active_DefaultContext
}

func (active *Mld_Active) GetEntityData() *types.CommonEntityData {
    active.EntityData.YFilter = active.YFilter
    active.EntityData.YangName = "active"
    active.EntityData.BundleName = "cisco_ios_xr"
    active.EntityData.ParentYangName = "mld"
    active.EntityData.SegmentPath = "active"
    active.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    active.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    active.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    active.EntityData.Children = types.NewOrderedMap()
    active.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &active.Vrfs})
    active.EntityData.Children.Append("process", types.YChild{"Process", &active.Process})
    active.EntityData.Children.Append("default-context", types.YChild{"DefaultContext", &active.DefaultContext})
    active.EntityData.Leafs = types.NewOrderedMap()

    active.EntityData.YListKeys = []string {}

    return &(active.EntityData)
}

// Mld_Active_Vrfs
// VRF Table
type Mld_Active_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table Names. The type is slice of Mld_Active_Vrfs_Vrf.
    Vrf []*Mld_Active_Vrfs_Vrf
}

func (vrfs *Mld_Active_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "active"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// Mld_Active_Vrfs_Vrf
// VRF table Names
type Mld_Active_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with length: 1..32.
    VrfName interface{}

    // IGMP Summary Information.
    Summary Mld_Active_Vrfs_Vrf_Summary

    // IGMP Interface state on.
    InterfaceStateOns Mld_Active_Vrfs_Vrf_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Mld_Active_Vrfs_Vrf_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Mld_Active_Vrfs_Vrf_NonActiveGroups

    // SSM Map Table.
    SsmMaps Mld_Active_Vrfs_Vrf_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Mld_Active_Vrfs_Vrf_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Mld_Active_Vrfs_Vrf_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Mld_Active_Vrfs_Vrf_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Mld_Active_Vrfs_Vrf_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Mld_Active_Vrfs_Vrf_TrafficCounters

    // IGMP Group Database Table.
    Groups Mld_Active_Vrfs_Vrf_Groups

    // IGMP Groups Summary.
    GroupSummary Mld_Active_Vrfs_Vrf_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Mld_Active_Vrfs_Vrf_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Mld_Active_Vrfs_Vrf_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Mld_Active_Vrfs_Vrf_InterfaceStateOffs
}

func (vrf *Mld_Active_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("summary", types.YChild{"Summary", &vrf.Summary})
    vrf.EntityData.Children.Append("interface-state-ons", types.YChild{"InterfaceStateOns", &vrf.InterfaceStateOns})
    vrf.EntityData.Children.Append("detail-groups", types.YChild{"DetailGroups", &vrf.DetailGroups})
    vrf.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", &vrf.NonActiveGroups})
    vrf.EntityData.Children.Append("ssm-maps", types.YChild{"SsmMaps", &vrf.SsmMaps})
    vrf.EntityData.Children.Append("explicit-groups", types.YChild{"ExplicitGroups", &vrf.ExplicitGroups})
    vrf.EntityData.Children.Append("interface-table", types.YChild{"InterfaceTable", &vrf.InterfaceTable})
    vrf.EntityData.Children.Append("interface-unicast-qos-adjusts", types.YChild{"InterfaceUnicastQosAdjusts", &vrf.InterfaceUnicastQosAdjusts})
    vrf.EntityData.Children.Append("ranges", types.YChild{"Ranges", &vrf.Ranges})
    vrf.EntityData.Children.Append("ifrs-interfaces", types.YChild{"IfrsInterfaces", &vrf.IfrsInterfaces})
    vrf.EntityData.Children.Append("traffic-counters", types.YChild{"TrafficCounters", &vrf.TrafficCounters})
    vrf.EntityData.Children.Append("groups", types.YChild{"Groups", &vrf.Groups})
    vrf.EntityData.Children.Append("group-summary", types.YChild{"GroupSummary", &vrf.GroupSummary})
    vrf.EntityData.Children.Append("ifrs-interface-summary", types.YChild{"IfrsInterfaceSummary", &vrf.IfrsInterfaceSummary})
    vrf.EntityData.Children.Append("global-interface-table", types.YChild{"GlobalInterfaceTable", &vrf.GlobalInterfaceTable})
    vrf.EntityData.Children.Append("ssm-map-details", types.YChild{"SsmMapDetails", &vrf.SsmMapDetails})
    vrf.EntityData.Children.Append("interface-state-offs", types.YChild{"InterfaceStateOffs", &vrf.InterfaceStateOffs})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// Mld_Active_Vrfs_Vrf_Summary
// IGMP Summary Information
type Mld_Active_Vrfs_Vrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Mld_Active_Vrfs_Vrf_Summary_Interface.
    Interface []*Mld_Active_Vrfs_Vrf_Summary_Interface
}

func (summary *Mld_Active_Vrfs_Vrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range summary.Interface {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.Interface[i]), types.YChild{"Interface", summary.Interface[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", summary.Robustness})
    summary.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", summary.GroupLimit})
    summary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", summary.GroupCount})
    summary.EntityData.Leafs.Append("is-disabled", types.YLeaf{"IsDisabled", summary.IsDisabled})
    summary.EntityData.Leafs.Append("supported-interfaces", types.YLeaf{"SupportedInterfaces", summary.SupportedInterfaces})
    summary.EntityData.Leafs.Append("unsupported-interfaces", types.YLeaf{"UnsupportedInterfaces", summary.UnsupportedInterfaces})
    summary.EntityData.Leafs.Append("enabled-interface-count", types.YLeaf{"EnabledInterfaceCount", summary.EnabledInterfaceCount})
    summary.EntityData.Leafs.Append("disabled-interface-count", types.YLeaf{"DisabledInterfaceCount", summary.DisabledInterfaceCount})
    summary.EntityData.Leafs.Append("tunnel-mte-config-count", types.YLeaf{"TunnelMteConfigCount", summary.TunnelMteConfigCount})
    summary.EntityData.Leafs.Append("node-low-memory", types.YLeaf{"NodeLowMemory", summary.NodeLowMemory})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Mld_Active_Vrfs_Vrf_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Mld_Active_Vrfs_Vrf_Summary_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Mld_Active_Vrfs_Vrf_Summary_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "summary"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", self.GroupLimit})
    self.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", self.GroupCount})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("on-off", types.YLeaf{"OnOff", self.OnOff})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceStateOns
// IGMP Interface state on
type Mld_Active_Vrfs_Vrf_InterfaceStateOns struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []*Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Mld_Active_Vrfs_Vrf_InterfaceStateOns) GetEntityData() *types.CommonEntityData {
    interfaceStateOns.EntityData.YFilter = interfaceStateOns.YFilter
    interfaceStateOns.EntityData.YangName = "interface-state-ons"
    interfaceStateOns.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOns.EntityData.ParentYangName = "vrf"
    interfaceStateOns.EntityData.SegmentPath = "interface-state-ons"
    interfaceStateOns.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOns.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOns.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOns.EntityData.Children = types.NewOrderedMap()
    interfaceStateOns.EntityData.Children.Append("interface-state-on", types.YChild{"InterfaceStateOn", nil})
    for i := range interfaceStateOns.InterfaceStateOn {
        interfaceStateOns.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOns.InterfaceStateOn[i]), types.YChild{"InterfaceStateOn", interfaceStateOns.InterfaceStateOn[i]})
    }
    interfaceStateOns.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOns.EntityData.YListKeys = []string {}

    return &(interfaceStateOns.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetEntityData() *types.CommonEntityData {
    interfaceStateOn.EntityData.YFilter = interfaceStateOn.YFilter
    interfaceStateOn.EntityData.YangName = "interface-state-on"
    interfaceStateOn.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOn.EntityData.ParentYangName = "interface-state-ons"
    interfaceStateOn.EntityData.SegmentPath = "interface-state-on" + types.AddKeyToken(interfaceStateOn.InterfaceName, "interface-name")
    interfaceStateOn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOn.EntityData.Children = types.NewOrderedMap()
    interfaceStateOn.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOn.Address})
    interfaceStateOn.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOn.QuerierAddress})
    interfaceStateOn.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOn.SubscriberAddress})
    interfaceStateOn.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOn.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOn.InterfaceName})
    interfaceStateOn.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOn.InterfaceNameXr})
    interfaceStateOn.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOn.State})
    interfaceStateOn.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOn.PrefixLength})
    interfaceStateOn.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOn.IsInterfaceUp})
    interfaceStateOn.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOn.IsIpEnabled})
    interfaceStateOn.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOn.IsRouterEnabled})
    interfaceStateOn.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOn.IgmpVersion})
    interfaceStateOn.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOn.HostVersion})
    interfaceStateOn.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOn.QueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOn.QueryTimeout})
    interfaceStateOn.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOn.QueryMaximumResponseTime})
    interfaceStateOn.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOn.LastMemberQueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOn.GroupJoins})
    interfaceStateOn.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOn.GroupLeaves})
    interfaceStateOn.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOn.IsQuerier})
    interfaceStateOn.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOn.TotalActiveGroups})
    interfaceStateOn.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOn.Robustness})
    interfaceStateOn.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOn.ProxyInterface})
    interfaceStateOn.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOn.QuerierUptime})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOn.LasLlRegistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOn.LasGetAddressCount})
    interfaceStateOn.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOn.LasUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOn.LasLlRemoveUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOn.LasLlAddUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOn.LasNullUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOn.LasUnregistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOn.IsLasRequest})
    interfaceStateOn.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOn.IsLasRegistered})
    interfaceStateOn.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOn.VrfId})
    interfaceStateOn.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOn.MteVrfId})
    interfaceStateOn.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOn.Location})
    interfaceStateOn.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOn.Mtu})
    interfaceStateOn.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOn.VrfState})
    interfaceStateOn.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOn.IsConfigurationverify})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOn.ConfigurationvrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOn.ConfigurationvrfError})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOn.ConfigurationMcastVrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOn.ConfigurationMcastVrfError})
    interfaceStateOn.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOn.IsImStateRegistered})
    interfaceStateOn.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOn.IsSubscriber})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOn.SubscriberMode})
    interfaceStateOn.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOn.IsIdentityPresent})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOn.SubscriberId})
    interfaceStateOn.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOn.ParentIfhandle})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOn.TimeSinceLastQueryInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOn.TimeSinceLastReportInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOn.RouterUptimeInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOn.MteTupleCount})

    interfaceStateOn.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOn.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-on"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-on"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-on"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_DetailGroups
// IGMP Detail Group Database
type Mld_Active_Vrfs_Vrf_DetailGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup.
    DetailGroup []*Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup
}

func (detailGroups *Mld_Active_Vrfs_Vrf_DetailGroups) GetEntityData() *types.CommonEntityData {
    detailGroups.EntityData.YFilter = detailGroups.YFilter
    detailGroups.EntityData.YangName = "detail-groups"
    detailGroups.EntityData.BundleName = "cisco_ios_xr"
    detailGroups.EntityData.ParentYangName = "vrf"
    detailGroups.EntityData.SegmentPath = "detail-groups"
    detailGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroups.EntityData.Children = types.NewOrderedMap()
    detailGroups.EntityData.Children.Append("detail-group", types.YChild{"DetailGroup", nil})
    for i := range detailGroups.DetailGroup {
        detailGroups.EntityData.Children.Append(types.GetSegmentPath(detailGroups.DetailGroup[i]), types.YChild{"DetailGroup", detailGroups.DetailGroup[i]})
    }
    detailGroups.EntityData.Leafs = types.NewOrderedMap()

    detailGroups.EntityData.YListKeys = []string {}

    return &(detailGroups.EntityData)
}

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source.
    Source []*Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source
}

func (detailGroup *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetEntityData() *types.CommonEntityData {
    detailGroup.EntityData.YFilter = detailGroup.YFilter
    detailGroup.EntityData.YangName = "detail-group"
    detailGroup.EntityData.BundleName = "cisco_ios_xr"
    detailGroup.EntityData.ParentYangName = "detail-groups"
    detailGroup.EntityData.SegmentPath = "detail-group"
    detailGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroup.EntityData.Children = types.NewOrderedMap()
    detailGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &detailGroup.GroupInfo})
    detailGroup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range detailGroup.Source {
        detailGroup.EntityData.Children.Append(types.GetSegmentPath(detailGroup.Source[i]), types.YChild{"Source", detailGroup.Source[i]})
    }
    detailGroup.EntityData.Leafs = types.NewOrderedMap()
    detailGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", detailGroup.GroupAddress})
    detailGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", detailGroup.InterfaceName})
    detailGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", detailGroup.SourceAddress})
    detailGroup.EntityData.Leafs.Append("is-router-exclude-mode", types.YLeaf{"IsRouterExcludeMode", detailGroup.IsRouterExcludeMode})
    detailGroup.EntityData.Leafs.Append("is-host-exclude-mode", types.YLeaf{"IsHostExcludeMode", detailGroup.IsHostExcludeMode})

    detailGroup.EntityData.YListKeys = []string {}

    return &(detailGroup.EntityData)
}

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "detail-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source
// List of sources
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "detail-group"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &source.SourceAddress})
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", source.Uptime})
    source.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", source.ExpirationTime})
    source.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", source.IsLocal})
    source.EntityData.Leafs.Append("is-remote", types.YLeaf{"IsRemote", source.IsRemote})
    source.EntityData.Leafs.Append("is-forward", types.YLeaf{"IsForward", source.IsForward})
    source.EntityData.Leafs.Append("is-we-report", types.YLeaf{"IsWeReport", source.IsWeReport})
    source.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", source.Flags})
    source.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", source.IsAdded})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "source"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_NonActiveGroups
// IGMP Non-Active Groups Information
type Mld_Active_Vrfs_Vrf_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []*Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "vrf"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", nil})
    for i := range nonActiveGroups.NonActiveGroups {
        nonActiveGroups.EntityData.Children.Append(types.GetSegmentPath(nonActiveGroups.NonActiveGroups[i]), types.YChild{"NonActiveGroups", nonActiveGroups.NonActiveGroups[i]})
    }
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "non-active-groups"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &nonActiveGroups.GroupAddress})
    nonActiveGroups.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &nonActiveGroups.SourceAddress})
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()
    nonActiveGroups.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", nonActiveGroups.Interface})
    nonActiveGroups.EntityData.Leafs.Append("reason-for-non-activity", types.YLeaf{"ReasonForNonActivity", nonActiveGroups.ReasonForNonActivity})

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "non-active-groups"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "non-active-groups"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_SsmMaps
// SSM Map Table
type Mld_Active_Vrfs_Vrf_SsmMaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap.
    SsmMap []*Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap
}

func (ssmMaps *Mld_Active_Vrfs_Vrf_SsmMaps) GetEntityData() *types.CommonEntityData {
    ssmMaps.EntityData.YFilter = ssmMaps.YFilter
    ssmMaps.EntityData.YangName = "ssm-maps"
    ssmMaps.EntityData.BundleName = "cisco_ios_xr"
    ssmMaps.EntityData.ParentYangName = "vrf"
    ssmMaps.EntityData.SegmentPath = "ssm-maps"
    ssmMaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMaps.EntityData.Children = types.NewOrderedMap()
    ssmMaps.EntityData.Children.Append("ssm-map", types.YChild{"SsmMap", nil})
    for i := range ssmMaps.SsmMap {
        ssmMaps.EntityData.Children.Append(types.GetSegmentPath(ssmMaps.SsmMap[i]), types.YChild{"SsmMap", ssmMaps.SsmMap[i]})
    }
    ssmMaps.EntityData.Leafs = types.NewOrderedMap()

    ssmMaps.EntityData.YListKeys = []string {}

    return &(ssmMaps.EntityData)
}

// Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap
// SSM Map information
type Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetEntityData() *types.CommonEntityData {
    ssmMap.EntityData.YFilter = ssmMap.YFilter
    ssmMap.EntityData.YangName = "ssm-map"
    ssmMap.EntityData.BundleName = "cisco_ios_xr"
    ssmMap.EntityData.ParentYangName = "ssm-maps"
    ssmMap.EntityData.SegmentPath = "ssm-map"
    ssmMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMap.EntityData.Children = types.NewOrderedMap()
    ssmMap.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &ssmMap.GroupAddressXr})
    ssmMap.EntityData.Leafs = types.NewOrderedMap()
    ssmMap.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMap.SsmMapType})
    ssmMap.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMap.GroupAddress})
    ssmMap.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", ssmMap.MapType})
    ssmMap.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", ssmMap.SourceCounts})

    ssmMap.EntityData.YListKeys = []string {}

    return &(ssmMap.EntityData)
}

// Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "ssm-map"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Active_Vrfs_Vrf_ExplicitGroups
// IGMP Explicit Group Database
type Mld_Active_Vrfs_Vrf_ExplicitGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []*Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Mld_Active_Vrfs_Vrf_ExplicitGroups) GetEntityData() *types.CommonEntityData {
    explicitGroups.EntityData.YFilter = explicitGroups.YFilter
    explicitGroups.EntityData.YangName = "explicit-groups"
    explicitGroups.EntityData.BundleName = "cisco_ios_xr"
    explicitGroups.EntityData.ParentYangName = "vrf"
    explicitGroups.EntityData.SegmentPath = "explicit-groups"
    explicitGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroups.EntityData.Children = types.NewOrderedMap()
    explicitGroups.EntityData.Children.Append("explicit-group", types.YChild{"ExplicitGroup", nil})
    for i := range explicitGroups.ExplicitGroup {
        explicitGroups.EntityData.Children.Append(types.GetSegmentPath(explicitGroups.ExplicitGroup[i]), types.YChild{"ExplicitGroup", explicitGroups.ExplicitGroup[i]})
    }
    explicitGroups.EntityData.Leafs = types.NewOrderedMap()

    explicitGroups.EntityData.YListKeys = []string {}

    return &(explicitGroups.EntityData)
}

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host.
    Host []*Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetEntityData() *types.CommonEntityData {
    explicitGroup.EntityData.YFilter = explicitGroup.YFilter
    explicitGroup.EntityData.YangName = "explicit-group"
    explicitGroup.EntityData.BundleName = "cisco_ios_xr"
    explicitGroup.EntityData.ParentYangName = "explicit-groups"
    explicitGroup.EntityData.SegmentPath = "explicit-group"
    explicitGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroup.EntityData.Children = types.NewOrderedMap()
    explicitGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &explicitGroup.GroupInfo})
    explicitGroup.EntityData.Children.Append("host", types.YChild{"Host", nil})
    for i := range explicitGroup.Host {
        explicitGroup.EntityData.Children.Append(types.GetSegmentPath(explicitGroup.Host[i]), types.YChild{"Host", explicitGroup.Host[i]})
    }
    explicitGroup.EntityData.Leafs = types.NewOrderedMap()
    explicitGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", explicitGroup.GroupAddress})
    explicitGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", explicitGroup.InterfaceName})
    explicitGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", explicitGroup.SourceAddress})
    explicitGroup.EntityData.Leafs.Append("include-hosts", types.YLeaf{"IncludeHosts", explicitGroup.IncludeHosts})
    explicitGroup.EntityData.Leafs.Append("exclude-hosts", types.YLeaf{"ExcludeHosts", explicitGroup.ExcludeHosts})

    explicitGroup.EntityData.YListKeys = []string {}

    return &(explicitGroup.EntityData)
}

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "explicit-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []*Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetEntityData() *types.CommonEntityData {
    host.EntityData.YFilter = host.YFilter
    host.EntityData.YangName = "host"
    host.EntityData.BundleName = "cisco_ios_xr"
    host.EntityData.ParentYangName = "explicit-group"
    host.EntityData.SegmentPath = "host"
    host.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    host.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    host.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    host.EntityData.Children = types.NewOrderedMap()
    host.EntityData.Children.Append("address", types.YChild{"Address", &host.Address})
    host.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", nil})
    for i := range host.SourceAddress {
        host.EntityData.Children.Append(types.GetSegmentPath(host.SourceAddress[i]), types.YChild{"SourceAddress", host.SourceAddress[i]})
    }
    host.EntityData.Leafs = types.NewOrderedMap()
    host.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", host.Uptime})
    host.EntityData.Leafs.Append("is-exclude", types.YLeaf{"IsExclude", host.IsExclude})
    host.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", host.ExpirationTime})
    host.EntityData.Leafs.Append("source-count", types.YLeaf{"SourceCount", host.SourceCount})

    host.EntityData.YListKeys = []string {}

    return &(host.EntityData)
}

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "host"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "host"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceTable
// IGMP Interface specific Table
type Mld_Active_Vrfs_Vrf_InterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_Vrfs_Vrf_InterfaceTable_Interface.
    Interface []*Mld_Active_Vrfs_Vrf_InterfaceTable_Interface
}

func (interfaceTable *Mld_Active_Vrfs_Vrf_InterfaceTable) GetEntityData() *types.CommonEntityData {
    interfaceTable.EntityData.YFilter = interfaceTable.YFilter
    interfaceTable.EntityData.YangName = "interface-table"
    interfaceTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceTable.EntityData.ParentYangName = "vrf"
    interfaceTable.EntityData.SegmentPath = "interface-table"
    interfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceTable.EntityData.Children = types.NewOrderedMap()
    interfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceTable.Interface {
        interfaceTable.EntityData.Children.Append(types.GetSegmentPath(interfaceTable.Interface[i]), types.YChild{"Interface", interfaceTable.Interface[i]})
    }
    interfaceTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceTable.EntityData.YListKeys = []string {}

    return &(interfaceTable.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceTable_Interface
// IGMP Interface
type Mld_Active_Vrfs_Vrf_InterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address
// IP address
type Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []*Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjusts.EntityData.YFilter = interfaceUnicastQosAdjusts.YFilter
    interfaceUnicastQosAdjusts.EntityData.YangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjusts.EntityData.ParentYangName = "vrf"
    interfaceUnicastQosAdjusts.EntityData.SegmentPath = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjusts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjusts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjusts.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjusts.EntityData.Children.Append("interface-unicast-qos-adjust", types.YChild{"InterfaceUnicastQosAdjust", nil})
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        interfaceUnicastQosAdjusts.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]), types.YChild{"InterfaceUnicastQosAdjust", interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]})
    }
    interfaceUnicastQosAdjusts.EntityData.Leafs = types.NewOrderedMap()

    interfaceUnicastQosAdjusts.EntityData.YListKeys = []string {}

    return &(interfaceUnicastQosAdjusts.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []*Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjust.EntityData.YFilter = interfaceUnicastQosAdjust.YFilter
    interfaceUnicastQosAdjust.EntityData.YangName = "interface-unicast-qos-adjust"
    interfaceUnicastQosAdjust.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjust.EntityData.ParentYangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjust.EntityData.SegmentPath = "interface-unicast-qos-adjust" + types.AddKeyToken(interfaceUnicastQosAdjust.InterfaceName, "interface-name")
    interfaceUnicastQosAdjust.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjust.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjust.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjust.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Children.Append("update", types.YChild{"Update", nil})
    for i := range interfaceUnicastQosAdjust.Update {
        interfaceUnicastQosAdjust.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjust.Update[i]), types.YChild{"Update", interfaceUnicastQosAdjust.Update[i]})
    }
    interfaceUnicastQosAdjust.EntityData.Leafs = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceUnicastQosAdjust.InterfaceName})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("is-virtual-access", types.YLeaf{"IsVirtualAccess", interfaceUnicastQosAdjust.IsVirtualAccess})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate", types.YLeaf{"Rate", interfaceUnicastQosAdjust.Rate})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-increments", types.YLeaf{"RateIncrements", interfaceUnicastQosAdjust.RateIncrements})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-decrements", types.YLeaf{"RateDecrements", interfaceUnicastQosAdjust.RateDecrements})

    interfaceUnicastQosAdjust.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceUnicastQosAdjust.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetEntityData() *types.CommonEntityData {
    update.EntityData.YFilter = update.YFilter
    update.EntityData.YangName = "update"
    update.EntityData.BundleName = "cisco_ios_xr"
    update.EntityData.ParentYangName = "interface-unicast-qos-adjust"
    update.EntityData.SegmentPath = "update"
    update.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    update.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    update.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    update.EntityData.Children = types.NewOrderedMap()
    update.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &update.SourceAddress})
    update.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &update.GroupAddress})
    update.EntityData.Leafs = types.NewOrderedMap()
    update.EntityData.Leafs.Append("is-add", types.YLeaf{"IsAdd", update.IsAdd})
    update.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", update.Weight})
    update.EntityData.Leafs.Append("received-time", types.YLeaf{"ReceivedTime", update.ReceivedTime})

    update.EntityData.YListKeys = []string {}

    return &(update.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "update"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "update"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_Ranges
// Range table
type Mld_Active_Vrfs_Vrf_Ranges struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Range information. The type is slice of Mld_Active_Vrfs_Vrf_Ranges_Range.
    Range []*Mld_Active_Vrfs_Vrf_Ranges_Range
}

func (ranges *Mld_Active_Vrfs_Vrf_Ranges) GetEntityData() *types.CommonEntityData {
    ranges.EntityData.YFilter = ranges.YFilter
    ranges.EntityData.YangName = "ranges"
    ranges.EntityData.BundleName = "cisco_ios_xr"
    ranges.EntityData.ParentYangName = "vrf"
    ranges.EntityData.SegmentPath = "ranges"
    ranges.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ranges.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ranges.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ranges.EntityData.Children = types.NewOrderedMap()
    ranges.EntityData.Children.Append("range", types.YChild{"Range", nil})
    for i := range ranges.Range {
        ranges.EntityData.Children.Append(types.GetSegmentPath(ranges.Range[i]), types.YChild{"Range", ranges.Range[i]})
    }
    ranges.EntityData.Leafs = types.NewOrderedMap()

    ranges.EntityData.YListKeys = []string {}

    return &(ranges.EntityData)
}

// Mld_Active_Vrfs_Vrf_Ranges_Range
// Range information
type Mld_Active_Vrfs_Vrf_Ranges_Range struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: 0..4294967295.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr
}

func (self *Mld_Active_Vrfs_Vrf_Ranges_Range) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "range"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "ranges"
    self.EntityData.SegmentPath = "range"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &self.GroupAddressXr})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", self.GroupAddress})
    self.EntityData.Leafs.Append("group-mask", types.YLeaf{"GroupMask", self.GroupMask})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", self.Protocol})
    self.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", self.IsStale})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr
// Group address
type Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "range"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Active_Vrfs_Vrf_IfrsInterfaces
// IGMP Interface specific
type Mld_Active_Vrfs_Vrf_IfrsInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface.
    IfrsInterface []*Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Mld_Active_Vrfs_Vrf_IfrsInterfaces) GetEntityData() *types.CommonEntityData {
    ifrsInterfaces.EntityData.YFilter = ifrsInterfaces.YFilter
    ifrsInterfaces.EntityData.YangName = "ifrs-interfaces"
    ifrsInterfaces.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaces.EntityData.ParentYangName = "vrf"
    ifrsInterfaces.EntityData.SegmentPath = "ifrs-interfaces"
    ifrsInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaces.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaces.EntityData.Children.Append("ifrs-interface", types.YChild{"IfrsInterface", nil})
    for i := range ifrsInterfaces.IfrsInterface {
        ifrsInterfaces.EntityData.Children.Append(types.GetSegmentPath(ifrsInterfaces.IfrsInterface[i]), types.YChild{"IfrsInterface", ifrsInterfaces.IfrsInterface[i]})
    }
    ifrsInterfaces.EntityData.Leafs = types.NewOrderedMap()

    ifrsInterfaces.EntityData.YListKeys = []string {}

    return &(ifrsInterfaces.EntityData)
}

// Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetEntityData() *types.CommonEntityData {
    ifrsInterface.EntityData.YFilter = ifrsInterface.YFilter
    ifrsInterface.EntityData.YangName = "ifrs-interface"
    ifrsInterface.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterface.EntityData.ParentYangName = "ifrs-interfaces"
    ifrsInterface.EntityData.SegmentPath = "ifrs-interface" + types.AddKeyToken(ifrsInterface.InterfaceName, "interface-name")
    ifrsInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterface.EntityData.Children = types.NewOrderedMap()
    ifrsInterface.EntityData.Children.Append("igmp-interface-entry", types.YChild{"IgmpInterfaceEntry", &ifrsInterface.IgmpInterfaceEntry})
    ifrsInterface.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ifrsInterface.InterfaceName})
    ifrsInterface.EntityData.Leafs.Append("join-group-count", types.YLeaf{"JoinGroupCount", ifrsInterface.JoinGroupCount})

    ifrsInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(ifrsInterface.EntityData)
}

// Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetEntityData() *types.CommonEntityData {
    igmpInterfaceEntry.EntityData.YFilter = igmpInterfaceEntry.YFilter
    igmpInterfaceEntry.EntityData.YangName = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.BundleName = "cisco_ios_xr"
    igmpInterfaceEntry.EntityData.ParentYangName = "ifrs-interface"
    igmpInterfaceEntry.EntityData.SegmentPath = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igmpInterfaceEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igmpInterfaceEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igmpInterfaceEntry.EntityData.Children = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Children.Append("address", types.YChild{"Address", &igmpInterfaceEntry.Address})
    igmpInterfaceEntry.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &igmpInterfaceEntry.QuerierAddress})
    igmpInterfaceEntry.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &igmpInterfaceEntry.SubscriberAddress})
    igmpInterfaceEntry.EntityData.Leafs = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", igmpInterfaceEntry.InterfaceNameXr})
    igmpInterfaceEntry.EntityData.Leafs.Append("state", types.YLeaf{"State", igmpInterfaceEntry.State})
    igmpInterfaceEntry.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", igmpInterfaceEntry.PrefixLength})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", igmpInterfaceEntry.IsInterfaceUp})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", igmpInterfaceEntry.IsIpEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", igmpInterfaceEntry.IsRouterEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", igmpInterfaceEntry.IgmpVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", igmpInterfaceEntry.HostVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", igmpInterfaceEntry.QueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", igmpInterfaceEntry.QueryTimeout})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", igmpInterfaceEntry.QueryMaximumResponseTime})
    igmpInterfaceEntry.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", igmpInterfaceEntry.LastMemberQueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", igmpInterfaceEntry.GroupJoins})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", igmpInterfaceEntry.GroupLeaves})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", igmpInterfaceEntry.IsQuerier})
    igmpInterfaceEntry.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", igmpInterfaceEntry.TotalActiveGroups})
    igmpInterfaceEntry.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", igmpInterfaceEntry.Robustness})
    igmpInterfaceEntry.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", igmpInterfaceEntry.ProxyInterface})
    igmpInterfaceEntry.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", igmpInterfaceEntry.QuerierUptime})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", igmpInterfaceEntry.LasLlRegistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", igmpInterfaceEntry.LasGetAddressCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", igmpInterfaceEntry.LasUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", igmpInterfaceEntry.LasLlRemoveUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", igmpInterfaceEntry.LasLlAddUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", igmpInterfaceEntry.LasNullUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", igmpInterfaceEntry.LasUnregistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", igmpInterfaceEntry.IsLasRequest})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", igmpInterfaceEntry.IsLasRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", igmpInterfaceEntry.VrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", igmpInterfaceEntry.MteVrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("location", types.YLeaf{"Location", igmpInterfaceEntry.Location})
    igmpInterfaceEntry.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", igmpInterfaceEntry.Mtu})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", igmpInterfaceEntry.VrfState})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", igmpInterfaceEntry.IsConfigurationverify})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", igmpInterfaceEntry.ConfigurationvrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", igmpInterfaceEntry.ConfigurationvrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", igmpInterfaceEntry.ConfigurationMcastVrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", igmpInterfaceEntry.ConfigurationMcastVrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", igmpInterfaceEntry.IsImStateRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", igmpInterfaceEntry.IsSubscriber})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", igmpInterfaceEntry.SubscriberMode})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", igmpInterfaceEntry.IsIdentityPresent})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", igmpInterfaceEntry.SubscriberId})
    igmpInterfaceEntry.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", igmpInterfaceEntry.ParentIfhandle})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", igmpInterfaceEntry.TimeSinceLastQueryInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", igmpInterfaceEntry.TimeSinceLastReportInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", igmpInterfaceEntry.RouterUptimeInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", igmpInterfaceEntry.MteTupleCount})

    igmpInterfaceEntry.EntityData.YListKeys = []string {}

    return &(igmpInterfaceEntry.EntityData)
}

// Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "igmp-interface-entry"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "igmp-interface-entry"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "igmp-interface-entry"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_TrafficCounters
// IGMP Message Traffic Counters
type Mld_Active_Vrfs_Vrf_TrafficCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Mld_Active_Vrfs_Vrf_TrafficCounters) GetEntityData() *types.CommonEntityData {
    trafficCounters.EntityData.YFilter = trafficCounters.YFilter
    trafficCounters.EntityData.YangName = "traffic-counters"
    trafficCounters.EntityData.BundleName = "cisco_ios_xr"
    trafficCounters.EntityData.ParentYangName = "vrf"
    trafficCounters.EntityData.SegmentPath = "traffic-counters"
    trafficCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficCounters.EntityData.Children = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", trafficCounters.ElapsedTime})
    trafficCounters.EntityData.Leafs.Append("packets-in", types.YLeaf{"PacketsIn", trafficCounters.PacketsIn})
    trafficCounters.EntityData.Leafs.Append("packets-out", types.YLeaf{"PacketsOut", trafficCounters.PacketsOut})
    trafficCounters.EntityData.Leafs.Append("format-errors", types.YLeaf{"FormatErrors", trafficCounters.FormatErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-input-errors", types.YLeaf{"PacketManagerInputErrors", trafficCounters.PacketManagerInputErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-output-errors", types.YLeaf{"PacketManagerOutputErrors", trafficCounters.PacketManagerOutputErrors})
    trafficCounters.EntityData.Leafs.Append("checksum-errors", types.YLeaf{"ChecksumErrors", trafficCounters.ChecksumErrors})
    trafficCounters.EntityData.Leafs.Append("receive-socket-errors", types.YLeaf{"ReceiveSocketErrors", trafficCounters.ReceiveSocketErrors})
    trafficCounters.EntityData.Leafs.Append("socket-errors", types.YLeaf{"SocketErrors", trafficCounters.SocketErrors})
    trafficCounters.EntityData.Leafs.Append("bad-scope-errors", types.YLeaf{"BadScopeErrors", trafficCounters.BadScopeErrors})
    trafficCounters.EntityData.Leafs.Append("auxillary-data-length-errors", types.YLeaf{"AuxillaryDataLengthErrors", trafficCounters.AuxillaryDataLengthErrors})
    trafficCounters.EntityData.Leafs.Append("invalid-source-address-errors", types.YLeaf{"InvalidSourceAddressErrors", trafficCounters.InvalidSourceAddressErrors})
    trafficCounters.EntityData.Leafs.Append("no-socket-connection", types.YLeaf{"NoSocketConnection", trafficCounters.NoSocketConnection})
    trafficCounters.EntityData.Leafs.Append("miscellaneous-errors", types.YLeaf{"MiscellaneousErrors", trafficCounters.MiscellaneousErrors})
    trafficCounters.EntityData.Leafs.Append("input-queries", types.YLeaf{"InputQueries", trafficCounters.InputQueries})
    trafficCounters.EntityData.Leafs.Append("input-reports", types.YLeaf{"InputReports", trafficCounters.InputReports})
    trafficCounters.EntityData.Leafs.Append("input-leaves", types.YLeaf{"InputLeaves", trafficCounters.InputLeaves})
    trafficCounters.EntityData.Leafs.Append("input-mtrace", types.YLeaf{"InputMtrace", trafficCounters.InputMtrace})
    trafficCounters.EntityData.Leafs.Append("input-dvmrp", types.YLeaf{"InputDvmrp", trafficCounters.InputDvmrp})
    trafficCounters.EntityData.Leafs.Append("input-pim", types.YLeaf{"InputPim", trafficCounters.InputPim})
    trafficCounters.EntityData.Leafs.Append("output-queries", types.YLeaf{"OutputQueries", trafficCounters.OutputQueries})
    trafficCounters.EntityData.Leafs.Append("output-reports", types.YLeaf{"OutputReports", trafficCounters.OutputReports})
    trafficCounters.EntityData.Leafs.Append("output-leaves", types.YLeaf{"OutputLeaves", trafficCounters.OutputLeaves})
    trafficCounters.EntityData.Leafs.Append("output-mtrace", types.YLeaf{"OutputMtrace", trafficCounters.OutputMtrace})
    trafficCounters.EntityData.Leafs.Append("output-dvmrp", types.YLeaf{"OutputDvmrp", trafficCounters.OutputDvmrp})
    trafficCounters.EntityData.Leafs.Append("output-pim", types.YLeaf{"OutputPim", trafficCounters.OutputPim})
    trafficCounters.EntityData.Leafs.Append("get-packet-failure", types.YLeaf{"GetPacketFailure", trafficCounters.GetPacketFailure})
    trafficCounters.EntityData.Leafs.Append("output-no-parent-interface-handle", types.YLeaf{"OutputNoParentInterfaceHandle", trafficCounters.OutputNoParentInterfaceHandle})
    trafficCounters.EntityData.Leafs.Append("input-no-idb", types.YLeaf{"InputNoIdb", trafficCounters.InputNoIdb})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-in-idb", types.YLeaf{"InputNoVrfInIdb", trafficCounters.InputNoVrfInIdb})
    trafficCounters.EntityData.Leafs.Append("input-disabled-idb", types.YLeaf{"InputDisabledIdb", trafficCounters.InputDisabledIdb})
    trafficCounters.EntityData.Leafs.Append("input-martian-address", types.YLeaf{"InputMartianAddress", trafficCounters.InputMartianAddress})
    trafficCounters.EntityData.Leafs.Append("input-no-assigned-vrf-id", types.YLeaf{"InputNoAssignedVrfId", trafficCounters.InputNoAssignedVrfId})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-mtrace", types.YLeaf{"InputNoVrfMtrace", trafficCounters.InputNoVrfMtrace})
    trafficCounters.EntityData.Leafs.Append("input-no-platform-support-mtrace", types.YLeaf{"InputNoPlatformSupportMtrace", trafficCounters.InputNoPlatformSupportMtrace})

    trafficCounters.EntityData.YListKeys = []string {}

    return &(trafficCounters.EntityData)
}

// Mld_Active_Vrfs_Vrf_Groups
// IGMP Group Database Table
type Mld_Active_Vrfs_Vrf_Groups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Mld_Active_Vrfs_Vrf_Groups_Group.
    Group []*Mld_Active_Vrfs_Vrf_Groups_Group
}

func (groups *Mld_Active_Vrfs_Vrf_Groups) GetEntityData() *types.CommonEntityData {
    groups.EntityData.YFilter = groups.YFilter
    groups.EntityData.YangName = "groups"
    groups.EntityData.BundleName = "cisco_ios_xr"
    groups.EntityData.ParentYangName = "vrf"
    groups.EntityData.SegmentPath = "groups"
    groups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groups.EntityData.Children = types.NewOrderedMap()
    groups.EntityData.Children.Append("group", types.YChild{"Group", nil})
    for i := range groups.Group {
        groups.EntityData.Children.Append(types.GetSegmentPath(groups.Group[i]), types.YChild{"Group", groups.Group[i]})
    }
    groups.EntityData.Leafs = types.NewOrderedMap()

    groups.EntityData.YListKeys = []string {}

    return &(groups.EntityData)
}

// Mld_Active_Vrfs_Vrf_Groups_Group
// IGMP Group Entry Information
type Mld_Active_Vrfs_Vrf_Groups_Group struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress
}

func (group *Mld_Active_Vrfs_Vrf_Groups_Group) GetEntityData() *types.CommonEntityData {
    group.EntityData.YFilter = group.YFilter
    group.EntityData.YangName = "group"
    group.EntityData.BundleName = "cisco_ios_xr"
    group.EntityData.ParentYangName = "groups"
    group.EntityData.SegmentPath = "group"
    group.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    group.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    group.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    group.EntityData.Children = types.NewOrderedMap()
    group.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &group.GroupAddressXr})
    group.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &group.LastReporter})
    group.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &group.SourceAddress})
    group.EntityData.Leafs = types.NewOrderedMap()
    group.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", group.GroupAddress})
    group.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", group.InterfaceName})
    group.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", group.InterfaceNameXr})
    group.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", group.Uptime})
    group.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", group.ExpirationTime})
    group.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", group.ExplicitTrackingEnabled})
    group.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", group.IsSelfJoin})
    group.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", group.RowStatus})
    group.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", group.IsLowMemory})
    group.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", group.RouterFilterMode})
    group.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", group.OlderHostVersion1Timer})
    group.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", group.OlderHostVersion2Timer})
    group.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", group.IsAdded})
    group.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", group.IsSuppressed})

    group.EntityData.YListKeys = []string {}

    return &(group.EntityData)
}

// Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr
// Group Address
type Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter
// Last reporter address
type Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress
// Source Address
type Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_GroupSummary
// IGMP Groups Summary
type Mld_Active_Vrfs_Vrf_GroupSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Mld_Active_Vrfs_Vrf_GroupSummary) GetEntityData() *types.CommonEntityData {
    groupSummary.EntityData.YFilter = groupSummary.YFilter
    groupSummary.EntityData.YangName = "group-summary"
    groupSummary.EntityData.BundleName = "cisco_ios_xr"
    groupSummary.EntityData.ParentYangName = "vrf"
    groupSummary.EntityData.SegmentPath = "group-summary"
    groupSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupSummary.EntityData.Children = types.NewOrderedMap()
    groupSummary.EntityData.Leafs = types.NewOrderedMap()
    groupSummary.EntityData.Leafs.Append("groutes", types.YLeaf{"Groutes", groupSummary.Groutes})
    groupSummary.EntityData.Leafs.Append("sg-routes", types.YLeaf{"SgRoutes", groupSummary.SgRoutes})
    groupSummary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", groupSummary.GroupCount})
    groupSummary.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupSummary.IsLowMemory})

    groupSummary.EntityData.YListKeys = []string {}

    return &(groupSummary.EntityData)
}

// Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Mld_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetEntityData() *types.CommonEntityData {
    ifrsInterfaceSummary.EntityData.YFilter = ifrsInterfaceSummary.YFilter
    ifrsInterfaceSummary.EntityData.YangName = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaceSummary.EntityData.ParentYangName = "vrf"
    ifrsInterfaceSummary.EntityData.SegmentPath = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaceSummary.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs.Append("interface-count", types.YLeaf{"InterfaceCount", ifrsInterfaceSummary.InterfaceCount})
    ifrsInterfaceSummary.EntityData.Leafs.Append("configuration-count", types.YLeaf{"ConfigurationCount", ifrsInterfaceSummary.ConfigurationCount})

    ifrsInterfaceSummary.EntityData.YListKeys = []string {}

    return &(ifrsInterfaceSummary.EntityData)
}

// Mld_Active_Vrfs_Vrf_GlobalInterfaceTable
// IGMP Global Interface 
type Mld_Active_Vrfs_Vrf_GlobalInterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface.
    Interface []*Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable) GetEntityData() *types.CommonEntityData {
    globalInterfaceTable.EntityData.YFilter = globalInterfaceTable.YFilter
    globalInterfaceTable.EntityData.YangName = "global-interface-table"
    globalInterfaceTable.EntityData.BundleName = "cisco_ios_xr"
    globalInterfaceTable.EntityData.ParentYangName = "vrf"
    globalInterfaceTable.EntityData.SegmentPath = "global-interface-table"
    globalInterfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalInterfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalInterfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalInterfaceTable.EntityData.Children = types.NewOrderedMap()
    globalInterfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range globalInterfaceTable.Interface {
        globalInterfaceTable.EntityData.Children.Append(types.GetSegmentPath(globalInterfaceTable.Interface[i]), types.YChild{"Interface", globalInterfaceTable.Interface[i]})
    }
    globalInterfaceTable.EntityData.Leafs = types.NewOrderedMap()

    globalInterfaceTable.EntityData.YListKeys = []string {}

    return &(globalInterfaceTable.EntityData)
}

// Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface
// IGMP Interface
type Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "global-interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address
// IP address
type Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_SsmMapDetails
// SSM Map Detail
type Mld_Active_Vrfs_Vrf_SsmMapDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []*Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Mld_Active_Vrfs_Vrf_SsmMapDetails) GetEntityData() *types.CommonEntityData {
    ssmMapDetails.EntityData.YFilter = ssmMapDetails.YFilter
    ssmMapDetails.EntityData.YangName = "ssm-map-details"
    ssmMapDetails.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetails.EntityData.ParentYangName = "vrf"
    ssmMapDetails.EntityData.SegmentPath = "ssm-map-details"
    ssmMapDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetails.EntityData.Children = types.NewOrderedMap()
    ssmMapDetails.EntityData.Children.Append("ssm-map-detail", types.YChild{"SsmMapDetail", nil})
    for i := range ssmMapDetails.SsmMapDetail {
        ssmMapDetails.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetails.SsmMapDetail[i]), types.YChild{"SsmMapDetail", ssmMapDetails.SsmMapDetail[i]})
    }
    ssmMapDetails.EntityData.Leafs = types.NewOrderedMap()

    ssmMapDetails.EntityData.YListKeys = []string {}

    return &(ssmMapDetails.EntityData)
}

// Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources.
    Sources []*Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetEntityData() *types.CommonEntityData {
    ssmMapDetail.EntityData.YFilter = ssmMapDetail.YFilter
    ssmMapDetail.EntityData.YangName = "ssm-map-detail"
    ssmMapDetail.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetail.EntityData.ParentYangName = "ssm-map-details"
    ssmMapDetail.EntityData.SegmentPath = "ssm-map-detail"
    ssmMapDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetail.EntityData.Children = types.NewOrderedMap()
    ssmMapDetail.EntityData.Children.Append("map-info", types.YChild{"MapInfo", &ssmMapDetail.MapInfo})
    ssmMapDetail.EntityData.Children.Append("sources", types.YChild{"Sources", nil})
    for i := range ssmMapDetail.Sources {
        ssmMapDetail.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetail.Sources[i]), types.YChild{"Sources", ssmMapDetail.Sources[i]})
    }
    ssmMapDetail.EntityData.Leafs = types.NewOrderedMap()
    ssmMapDetail.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMapDetail.SsmMapType})
    ssmMapDetail.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMapDetail.GroupAddress})
    ssmMapDetail.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", ssmMapDetail.ExpirationTime})
    ssmMapDetail.EntityData.Leafs.Append("response-pending", types.YLeaf{"ResponsePending", ssmMapDetail.ResponsePending})
    ssmMapDetail.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", ssmMapDetail.QueryInterval})
    ssmMapDetail.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", ssmMapDetail.ElapsedTime})

    ssmMapDetail.EntityData.YListKeys = []string {}

    return &(ssmMapDetail.EntityData)
}

// Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetEntityData() *types.CommonEntityData {
    mapInfo.EntityData.YFilter = mapInfo.YFilter
    mapInfo.EntityData.YangName = "map-info"
    mapInfo.EntityData.BundleName = "cisco_ios_xr"
    mapInfo.EntityData.ParentYangName = "ssm-map-detail"
    mapInfo.EntityData.SegmentPath = "map-info"
    mapInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mapInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mapInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mapInfo.EntityData.Children = types.NewOrderedMap()
    mapInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &mapInfo.GroupAddressXr})
    mapInfo.EntityData.Leafs = types.NewOrderedMap()
    mapInfo.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", mapInfo.MapType})
    mapInfo.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", mapInfo.SourceCounts})

    mapInfo.EntityData.YListKeys = []string {}

    return &(mapInfo.EntityData)
}

// Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "map-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Mld_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetEntityData() *types.CommonEntityData {
    sources.EntityData.YFilter = sources.YFilter
    sources.EntityData.YangName = "sources"
    sources.EntityData.BundleName = "cisco_ios_xr"
    sources.EntityData.ParentYangName = "ssm-map-detail"
    sources.EntityData.SegmentPath = "sources"
    sources.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sources.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sources.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sources.EntityData.Children = types.NewOrderedMap()
    sources.EntityData.Leafs = types.NewOrderedMap()
    sources.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sources.AfName})
    sources.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sources.Ipv4Address})
    sources.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sources.Ipv6Address})

    sources.EntityData.YListKeys = []string {}

    return &(sources.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceStateOffs
// IGMP Interface state off
type Mld_Active_Vrfs_Vrf_InterfaceStateOffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []*Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Mld_Active_Vrfs_Vrf_InterfaceStateOffs) GetEntityData() *types.CommonEntityData {
    interfaceStateOffs.EntityData.YFilter = interfaceStateOffs.YFilter
    interfaceStateOffs.EntityData.YangName = "interface-state-offs"
    interfaceStateOffs.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOffs.EntityData.ParentYangName = "vrf"
    interfaceStateOffs.EntityData.SegmentPath = "interface-state-offs"
    interfaceStateOffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOffs.EntityData.Children = types.NewOrderedMap()
    interfaceStateOffs.EntityData.Children.Append("interface-state-off", types.YChild{"InterfaceStateOff", nil})
    for i := range interfaceStateOffs.InterfaceStateOff {
        interfaceStateOffs.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOffs.InterfaceStateOff[i]), types.YChild{"InterfaceStateOff", interfaceStateOffs.InterfaceStateOff[i]})
    }
    interfaceStateOffs.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOffs.EntityData.YListKeys = []string {}

    return &(interfaceStateOffs.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetEntityData() *types.CommonEntityData {
    interfaceStateOff.EntityData.YFilter = interfaceStateOff.YFilter
    interfaceStateOff.EntityData.YangName = "interface-state-off"
    interfaceStateOff.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOff.EntityData.ParentYangName = "interface-state-offs"
    interfaceStateOff.EntityData.SegmentPath = "interface-state-off" + types.AddKeyToken(interfaceStateOff.InterfaceName, "interface-name")
    interfaceStateOff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOff.EntityData.Children = types.NewOrderedMap()
    interfaceStateOff.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOff.Address})
    interfaceStateOff.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOff.QuerierAddress})
    interfaceStateOff.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOff.SubscriberAddress})
    interfaceStateOff.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOff.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOff.InterfaceName})
    interfaceStateOff.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOff.InterfaceNameXr})
    interfaceStateOff.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOff.State})
    interfaceStateOff.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOff.PrefixLength})
    interfaceStateOff.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOff.IsInterfaceUp})
    interfaceStateOff.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOff.IsIpEnabled})
    interfaceStateOff.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOff.IsRouterEnabled})
    interfaceStateOff.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOff.IgmpVersion})
    interfaceStateOff.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOff.HostVersion})
    interfaceStateOff.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOff.QueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOff.QueryTimeout})
    interfaceStateOff.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOff.QueryMaximumResponseTime})
    interfaceStateOff.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOff.LastMemberQueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOff.GroupJoins})
    interfaceStateOff.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOff.GroupLeaves})
    interfaceStateOff.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOff.IsQuerier})
    interfaceStateOff.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOff.TotalActiveGroups})
    interfaceStateOff.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOff.Robustness})
    interfaceStateOff.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOff.ProxyInterface})
    interfaceStateOff.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOff.QuerierUptime})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOff.LasLlRegistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOff.LasGetAddressCount})
    interfaceStateOff.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOff.LasUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOff.LasLlRemoveUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOff.LasLlAddUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOff.LasNullUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOff.LasUnregistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOff.IsLasRequest})
    interfaceStateOff.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOff.IsLasRegistered})
    interfaceStateOff.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOff.VrfId})
    interfaceStateOff.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOff.MteVrfId})
    interfaceStateOff.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOff.Location})
    interfaceStateOff.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOff.Mtu})
    interfaceStateOff.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOff.VrfState})
    interfaceStateOff.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOff.IsConfigurationverify})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOff.ConfigurationvrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOff.ConfigurationvrfError})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOff.ConfigurationMcastVrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOff.ConfigurationMcastVrfError})
    interfaceStateOff.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOff.IsImStateRegistered})
    interfaceStateOff.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOff.IsSubscriber})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOff.SubscriberMode})
    interfaceStateOff.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOff.IsIdentityPresent})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOff.SubscriberId})
    interfaceStateOff.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOff.ParentIfhandle})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOff.TimeSinceLastQueryInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOff.TimeSinceLastReportInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOff.RouterUptimeInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOff.MteTupleCount})

    interfaceStateOff.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOff.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-off"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-off"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-off"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Active_Process
// Process
type Mld_Active_Process struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MRIB RouteDB Expiry Information.
    AmtSummary Mld_Active_Process_AmtSummary

    // NSR Information.
    Nsr Mld_Active_Process_Nsr

    // Table containing AMT Gateway DataBase information.
    AmtGatewaies Mld_Active_Process_AmtGatewaies

    // IGMP Unicast-Qos-Adjust Statistics.
    UnicastQosAdjustStats Mld_Active_Process_UnicastQosAdjustStats

    // IGMP BVI Stats.
    BviStatistics Mld_Active_Process_BviStatistics

    // NSF Information.
    Nsf Mld_Active_Process_Nsf
}

func (process *Mld_Active_Process) GetEntityData() *types.CommonEntityData {
    process.EntityData.YFilter = process.YFilter
    process.EntityData.YangName = "process"
    process.EntityData.BundleName = "cisco_ios_xr"
    process.EntityData.ParentYangName = "active"
    process.EntityData.SegmentPath = "process"
    process.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    process.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    process.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    process.EntityData.Children = types.NewOrderedMap()
    process.EntityData.Children.Append("amt-summary", types.YChild{"AmtSummary", &process.AmtSummary})
    process.EntityData.Children.Append("nsr", types.YChild{"Nsr", &process.Nsr})
    process.EntityData.Children.Append("amt-gatewaies", types.YChild{"AmtGatewaies", &process.AmtGatewaies})
    process.EntityData.Children.Append("unicast-qos-adjust-stats", types.YChild{"UnicastQosAdjustStats", &process.UnicastQosAdjustStats})
    process.EntityData.Children.Append("bvi-statistics", types.YChild{"BviStatistics", &process.BviStatistics})
    process.EntityData.Children.Append("nsf", types.YChild{"Nsf", &process.Nsf})
    process.EntityData.Leafs = types.NewOrderedMap()

    process.EntityData.YListKeys = []string {}

    return &(process.EntityData)
}

// Mld_Active_Process_AmtSummary
// MRIB RouteDB Expiry Information
type Mld_Active_Process_AmtSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Robustness variable. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AnycastPrefix interface{}

    // Advertize AMT prefix length. The type is interface{} with range:
    // 0..4294967295.
    PrefixLength interface{}

    // Advertaisment for AMT Relay address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RelayAddress interface{}

    // AMT Tunnel MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Type Of Service value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Tos interface{}

    // Time To Live value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Ttl interface{}

    // AMT Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Number of AMT Gateway. The type is interface{} with range: 0..4294967295.
    GatewayCount interface{}

    // Maximum Gateway allowed. The type is interface{} with range: 0..4294967295.
    MaxGateway interface{}

    // AMT Tunnel Count. The type is interface{} with range: 0..4294967295.
    TunnelCount interface{}

    // AMT Tunnel configured Maximum. The type is interface{} with range:
    // 0..4294967295.
    TunnelConfiguredMaximum interface{}

    // ACL configured under AMT. The type is bool.
    IsAclConfigured interface{}

    // AMT Gateway Simulation. The type is bool.
    IsGatewaySimulation interface{}

    // AMT Out Of Resource. The type is bool.
    IsOuOfResource interface{}
}

func (amtSummary *Mld_Active_Process_AmtSummary) GetEntityData() *types.CommonEntityData {
    amtSummary.EntityData.YFilter = amtSummary.YFilter
    amtSummary.EntityData.YangName = "amt-summary"
    amtSummary.EntityData.BundleName = "cisco_ios_xr"
    amtSummary.EntityData.ParentYangName = "process"
    amtSummary.EntityData.SegmentPath = "amt-summary"
    amtSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    amtSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    amtSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    amtSummary.EntityData.Children = types.NewOrderedMap()
    amtSummary.EntityData.Leafs = types.NewOrderedMap()
    amtSummary.EntityData.Leafs.Append("anycast-prefix", types.YLeaf{"AnycastPrefix", amtSummary.AnycastPrefix})
    amtSummary.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", amtSummary.PrefixLength})
    amtSummary.EntityData.Leafs.Append("relay-address", types.YLeaf{"RelayAddress", amtSummary.RelayAddress})
    amtSummary.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", amtSummary.Mtu})
    amtSummary.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", amtSummary.Tos})
    amtSummary.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", amtSummary.Ttl})
    amtSummary.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", amtSummary.QueryInterval})
    amtSummary.EntityData.Leafs.Append("gateway-count", types.YLeaf{"GatewayCount", amtSummary.GatewayCount})
    amtSummary.EntityData.Leafs.Append("max-gateway", types.YLeaf{"MaxGateway", amtSummary.MaxGateway})
    amtSummary.EntityData.Leafs.Append("tunnel-count", types.YLeaf{"TunnelCount", amtSummary.TunnelCount})
    amtSummary.EntityData.Leafs.Append("tunnel-configured-maximum", types.YLeaf{"TunnelConfiguredMaximum", amtSummary.TunnelConfiguredMaximum})
    amtSummary.EntityData.Leafs.Append("is-acl-configured", types.YLeaf{"IsAclConfigured", amtSummary.IsAclConfigured})
    amtSummary.EntityData.Leafs.Append("is-gateway-simulation", types.YLeaf{"IsGatewaySimulation", amtSummary.IsGatewaySimulation})
    amtSummary.EntityData.Leafs.Append("is-ou-of-resource", types.YLeaf{"IsOuOfResource", amtSummary.IsOuOfResource})

    amtSummary.EntityData.YListKeys = []string {}

    return &(amtSummary.EntityData)
}

// Mld_Active_Process_Nsr
// NSR Information
type Mld_Active_Process_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NSR state. The type is interface{} with range: 0..255.
    State interface{}

    // Partner process connected. The type is bool.
    PartnerProcConnected interface{}

    // Collaborators convergence done. The type is bool.
    CollabConvDone interface{}

    // RMF Notification done. The type is bool.
    RmfNotificationDone interface{}

    // Time when process came up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProc interface{}

    // Time when process connection went up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionUp interface{}

    // Time when process connection went down. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionDn interface{}

    // Time when RMF Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfReady interface{}

    // Time when RMF Not-Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfNotReady interface{}

    // No. of times process connection went up. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionUp interface{}

    // No. of times process connection went down. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionDn interface{}

    // No. of times RMF Ready notif was sent. The type is interface{} with range:
    // 0..4294967295.
    CountRmfReady interface{}

    // No. of times RMF Not Ready notif was sent. The type is interface{} with
    // range: 0..4294967295.
    CountRmfNotReady interface{}
}

func (nsr *Mld_Active_Process_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "process"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Leafs = types.NewOrderedMap()
    nsr.EntityData.Leafs.Append("state", types.YLeaf{"State", nsr.State})
    nsr.EntityData.Leafs.Append("partner-proc-connected", types.YLeaf{"PartnerProcConnected", nsr.PartnerProcConnected})
    nsr.EntityData.Leafs.Append("collab-conv-done", types.YLeaf{"CollabConvDone", nsr.CollabConvDone})
    nsr.EntityData.Leafs.Append("rmf-notification-done", types.YLeaf{"RmfNotificationDone", nsr.RmfNotificationDone})
    nsr.EntityData.Leafs.Append("last-proc", types.YLeaf{"LastProc", nsr.LastProc})
    nsr.EntityData.Leafs.Append("last-proc-connection-up", types.YLeaf{"LastProcConnectionUp", nsr.LastProcConnectionUp})
    nsr.EntityData.Leafs.Append("last-proc-connection-dn", types.YLeaf{"LastProcConnectionDn", nsr.LastProcConnectionDn})
    nsr.EntityData.Leafs.Append("last-rmf-ready", types.YLeaf{"LastRmfReady", nsr.LastRmfReady})
    nsr.EntityData.Leafs.Append("last-rmf-not-ready", types.YLeaf{"LastRmfNotReady", nsr.LastRmfNotReady})
    nsr.EntityData.Leafs.Append("count-proc-connection-up", types.YLeaf{"CountProcConnectionUp", nsr.CountProcConnectionUp})
    nsr.EntityData.Leafs.Append("count-proc-connection-dn", types.YLeaf{"CountProcConnectionDn", nsr.CountProcConnectionDn})
    nsr.EntityData.Leafs.Append("count-rmf-ready", types.YLeaf{"CountRmfReady", nsr.CountRmfReady})
    nsr.EntityData.Leafs.Append("count-rmf-not-ready", types.YLeaf{"CountRmfNotReady", nsr.CountRmfNotReady})

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// Mld_Active_Process_AmtGatewaies
// Table containing AMT Gateway DataBase
// information
type Mld_Active_Process_AmtGatewaies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AMT Gateway DataBase information. The type is slice of
    // Mld_Active_Process_AmtGatewaies_AmtGateway.
    AmtGateway []*Mld_Active_Process_AmtGatewaies_AmtGateway
}

func (amtGatewaies *Mld_Active_Process_AmtGatewaies) GetEntityData() *types.CommonEntityData {
    amtGatewaies.EntityData.YFilter = amtGatewaies.YFilter
    amtGatewaies.EntityData.YangName = "amt-gatewaies"
    amtGatewaies.EntityData.BundleName = "cisco_ios_xr"
    amtGatewaies.EntityData.ParentYangName = "process"
    amtGatewaies.EntityData.SegmentPath = "amt-gatewaies"
    amtGatewaies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    amtGatewaies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    amtGatewaies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    amtGatewaies.EntityData.Children = types.NewOrderedMap()
    amtGatewaies.EntityData.Children.Append("amt-gateway", types.YChild{"AmtGateway", nil})
    for i := range amtGatewaies.AmtGateway {
        amtGatewaies.EntityData.Children.Append(types.GetSegmentPath(amtGatewaies.AmtGateway[i]), types.YChild{"AmtGateway", amtGatewaies.AmtGateway[i]})
    }
    amtGatewaies.EntityData.Leafs = types.NewOrderedMap()

    amtGatewaies.EntityData.YListKeys = []string {}

    return &(amtGatewaies.EntityData)
}

// Mld_Active_Process_AmtGatewaies_AmtGateway
// AMT Gateway DataBase information
type Mld_Active_Process_AmtGatewaies_AmtGateway struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Gateway Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GatewayAddress interface{}

    // Port. The type is interface{} with range: 0..4294967295.
    Port interface{}

    // GW. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Amtgw interface{}

    // Port. The type is interface{} with range: 0..4294967295.
    AmtPort interface{}

    // Len. The type is interface{} with range: 0..4294967295.
    KeyLen interface{}

    // AMT NH. The type is interface{} with range: 0..4294967295.
    Amtnh interface{}

    // Nonce. The type is interface{} with range: 0..4294967295.
    AmtNonce interface{}

    // IDB. The type is interface{} with range: 0..18446744073709551615.
    Idb interface{}

    // UpdIn. The type is interface{} with range: 0..4294967295.
    MemUpdIn interface{}

    // UpdOut. The type is interface{} with range: 0..4294967295.
    MemUpdOut interface{}
}

func (amtGateway *Mld_Active_Process_AmtGatewaies_AmtGateway) GetEntityData() *types.CommonEntityData {
    amtGateway.EntityData.YFilter = amtGateway.YFilter
    amtGateway.EntityData.YangName = "amt-gateway"
    amtGateway.EntityData.BundleName = "cisco_ios_xr"
    amtGateway.EntityData.ParentYangName = "amt-gatewaies"
    amtGateway.EntityData.SegmentPath = "amt-gateway"
    amtGateway.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    amtGateway.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    amtGateway.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    amtGateway.EntityData.Children = types.NewOrderedMap()
    amtGateway.EntityData.Leafs = types.NewOrderedMap()
    amtGateway.EntityData.Leafs.Append("gateway-address", types.YLeaf{"GatewayAddress", amtGateway.GatewayAddress})
    amtGateway.EntityData.Leafs.Append("port", types.YLeaf{"Port", amtGateway.Port})
    amtGateway.EntityData.Leafs.Append("amtgw", types.YLeaf{"Amtgw", amtGateway.Amtgw})
    amtGateway.EntityData.Leafs.Append("amt-port", types.YLeaf{"AmtPort", amtGateway.AmtPort})
    amtGateway.EntityData.Leafs.Append("key-len", types.YLeaf{"KeyLen", amtGateway.KeyLen})
    amtGateway.EntityData.Leafs.Append("amtnh", types.YLeaf{"Amtnh", amtGateway.Amtnh})
    amtGateway.EntityData.Leafs.Append("amt-nonce", types.YLeaf{"AmtNonce", amtGateway.AmtNonce})
    amtGateway.EntityData.Leafs.Append("idb", types.YLeaf{"Idb", amtGateway.Idb})
    amtGateway.EntityData.Leafs.Append("mem-upd-in", types.YLeaf{"MemUpdIn", amtGateway.MemUpdIn})
    amtGateway.EntityData.Leafs.Append("mem-upd-out", types.YLeaf{"MemUpdOut", amtGateway.MemUpdOut})

    amtGateway.EntityData.YListKeys = []string {}

    return &(amtGateway.EntityData)
}

// Mld_Active_Process_UnicastQosAdjustStats
// IGMP Unicast-Qos-Adjust Statistics
type Mld_Active_Process_UnicastQosAdjustStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // I2Q Queue count. The type is interface{} with range: 0..65535.
    Queues interface{}

    // I2Q Rate Batch count. The type is interface{} with range: 0..65535.
    Batches interface{}

    // Add to batch count. The type is interface{} with range: 0..4294967295.
    AddToBatches interface{}

    // Delete to batch count. The type is interface{} with range: 0..4294967295.
    DeleteToBatches interface{}

    // Send Success count. The type is interface{} with range: 0..4294967295.
    SendSuccess interface{}

    // Number of Send errors in batch. The type is interface{} with range:
    // 0..4294967295.
    SendErrors interface{}

    // Send Error due to comms count. The type is interface{} with range:
    // 0..4294967295.
    SendCommErrors interface{}

    // Send Error due to partial issue count. The type is interface{} with range:
    // 0..4294967295.
    SendPartialErrors interface{}

    // Number of Resync request received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedResyncRequests interface{}

    // Number of bulks sent for last resync received. The type is interface{} with
    // range: 0..4294967295.
    SentResyncBulks interface{}

    // Is Resync request received. The type is bool.
    IsResyncReceived interface{}

    // Is Resync required. The type is bool.
    IsResyncRequired interface{}

    // Is Resync Start message sent. The type is bool.
    IsResyncStartSent interface{}

    // Is QOS Sweeped once . The type is bool.
    IsQosSSweeped interface{}

    // Time elapsed since Last mark and sweep in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastSweepTime interface{}

    // Time elapsed since Last download to QOS in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastDownloadTime interface{}
}

func (unicastQosAdjustStats *Mld_Active_Process_UnicastQosAdjustStats) GetEntityData() *types.CommonEntityData {
    unicastQosAdjustStats.EntityData.YFilter = unicastQosAdjustStats.YFilter
    unicastQosAdjustStats.EntityData.YangName = "unicast-qos-adjust-stats"
    unicastQosAdjustStats.EntityData.BundleName = "cisco_ios_xr"
    unicastQosAdjustStats.EntityData.ParentYangName = "process"
    unicastQosAdjustStats.EntityData.SegmentPath = "unicast-qos-adjust-stats"
    unicastQosAdjustStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unicastQosAdjustStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unicastQosAdjustStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unicastQosAdjustStats.EntityData.Children = types.NewOrderedMap()
    unicastQosAdjustStats.EntityData.Leafs = types.NewOrderedMap()
    unicastQosAdjustStats.EntityData.Leafs.Append("queues", types.YLeaf{"Queues", unicastQosAdjustStats.Queues})
    unicastQosAdjustStats.EntityData.Leafs.Append("batches", types.YLeaf{"Batches", unicastQosAdjustStats.Batches})
    unicastQosAdjustStats.EntityData.Leafs.Append("add-to-batches", types.YLeaf{"AddToBatches", unicastQosAdjustStats.AddToBatches})
    unicastQosAdjustStats.EntityData.Leafs.Append("delete-to-batches", types.YLeaf{"DeleteToBatches", unicastQosAdjustStats.DeleteToBatches})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-success", types.YLeaf{"SendSuccess", unicastQosAdjustStats.SendSuccess})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-errors", types.YLeaf{"SendErrors", unicastQosAdjustStats.SendErrors})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-comm-errors", types.YLeaf{"SendCommErrors", unicastQosAdjustStats.SendCommErrors})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-partial-errors", types.YLeaf{"SendPartialErrors", unicastQosAdjustStats.SendPartialErrors})
    unicastQosAdjustStats.EntityData.Leafs.Append("received-resync-requests", types.YLeaf{"ReceivedResyncRequests", unicastQosAdjustStats.ReceivedResyncRequests})
    unicastQosAdjustStats.EntityData.Leafs.Append("sent-resync-bulks", types.YLeaf{"SentResyncBulks", unicastQosAdjustStats.SentResyncBulks})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-resync-received", types.YLeaf{"IsResyncReceived", unicastQosAdjustStats.IsResyncReceived})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-resync-required", types.YLeaf{"IsResyncRequired", unicastQosAdjustStats.IsResyncRequired})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-resync-start-sent", types.YLeaf{"IsResyncStartSent", unicastQosAdjustStats.IsResyncStartSent})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-qos-s-sweeped", types.YLeaf{"IsQosSSweeped", unicastQosAdjustStats.IsQosSSweeped})
    unicastQosAdjustStats.EntityData.Leafs.Append("last-sweep-time", types.YLeaf{"LastSweepTime", unicastQosAdjustStats.LastSweepTime})
    unicastQosAdjustStats.EntityData.Leafs.Append("last-download-time", types.YLeaf{"LastDownloadTime", unicastQosAdjustStats.LastDownloadTime})

    unicastQosAdjustStats.EntityData.YListKeys = []string {}

    return &(unicastQosAdjustStats.EntityData)
}

// Mld_Active_Process_BviStatistics
// IGMP BVI Stats
type Mld_Active_Process_BviStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of AIPC buffers received. The type is interface{} with range:
    // 0..4294967295.
    ReceiveBuffers interface{}

    // Number of AIPC buffers released. The type is interface{} with range:
    // 0..4294967295.
    ReleaseBuffers interface{}

    // Number of AIPC buffers send blocked. The type is interface{} with range:
    // 0..4294967295.
    SendBlocks interface{}

    // Number of AIPC buffers release failed. The type is interface{} with range:
    // 0..4294967295.
    ReleaseFailBuffers interface{}

    // Number of AIPC NULL buffer handles. The type is interface{} with range:
    // 0..4294967295.
    NullBufferHandles interface{}

    // Number of AIPC open notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOpenNotif interface{}

    // Number of AIPC close notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcCloseNotif interface{}

    // Number of AIPC error notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcErrorNotif interface{}

    // Number of AIPC LWM notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcLwmNotif interface{}

    // Number of AIPC input waiting notifications received. The type is
    // interface{} with range: 0..4294967295.
    RxIpcInputWaitNotif interface{}

    // Number of AIPC send status notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcSendStatusNotif interface{}

    // Number of AIPC publish notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcPublishNotif interface{}

    // Number of AIPC queue full notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcQFullNotif interface{}

    // Number of AIPC output notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOutputNotif interface{}

    // Number of AIPC connect notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcConnectNotif interface{}

    // Number of IGMP protocol messages received. The type is interface{} with
    // range: 0..4294967295.
    RxIgmpPacketSuccess interface{}

    // Number of IGMP Mrouter Add messages received. The type is interface{} with
    // range: 0..4294967295.
    RxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages received. The type is interface{}
    // with range: 0..4294967295.
    RxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    RxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Add messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    TxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages received. The type is interface{}
    // with range: 0..4294967295.
    RxUnknownMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages transmitted. The type is
    // interface{} with range: 0..4294967295.
    TxUnknownMrouterMsg interface{}

    // Number of AIPC transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TxBufferErrors interface{}

    // Number of AIPC buffers transmited. The type is interface{} with range:
    // 0..4294967295.
    TxBuffers interface{}

    // Number of IGMP protocol buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxProtocolBuffers interface{}

    // Number of IGMP Mrouter buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxMrouterBuffers interface{}

    // Number of IGMP Unknown buffers transmited. The type is interface{} with
    // range: 0..4294967295.
    TxUnknownBuffers interface{}

    // Number of WTX messages received. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgRecvd interface{}

    // Number of WTX messages sent. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgSent interface{}

    // Number of WTX messages sent to Protocol. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgProtoSent interface{}

    // Number of WTX messages dropped due to disconnect. The type is interface{}
    // with range: 0..4294967295.
    WtxMsgDropDc interface{}

    // Number of WTX messages dropped to memory. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgDropNomem interface{}

    // Number of WTX messages freed. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgFreed interface{}
}

func (bviStatistics *Mld_Active_Process_BviStatistics) GetEntityData() *types.CommonEntityData {
    bviStatistics.EntityData.YFilter = bviStatistics.YFilter
    bviStatistics.EntityData.YangName = "bvi-statistics"
    bviStatistics.EntityData.BundleName = "cisco_ios_xr"
    bviStatistics.EntityData.ParentYangName = "process"
    bviStatistics.EntityData.SegmentPath = "bvi-statistics"
    bviStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bviStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bviStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bviStatistics.EntityData.Children = types.NewOrderedMap()
    bviStatistics.EntityData.Leafs = types.NewOrderedMap()
    bviStatistics.EntityData.Leafs.Append("receive-buffers", types.YLeaf{"ReceiveBuffers", bviStatistics.ReceiveBuffers})
    bviStatistics.EntityData.Leafs.Append("release-buffers", types.YLeaf{"ReleaseBuffers", bviStatistics.ReleaseBuffers})
    bviStatistics.EntityData.Leafs.Append("send-blocks", types.YLeaf{"SendBlocks", bviStatistics.SendBlocks})
    bviStatistics.EntityData.Leafs.Append("release-fail-buffers", types.YLeaf{"ReleaseFailBuffers", bviStatistics.ReleaseFailBuffers})
    bviStatistics.EntityData.Leafs.Append("null-buffer-handles", types.YLeaf{"NullBufferHandles", bviStatistics.NullBufferHandles})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-open-notif", types.YLeaf{"RxIpcOpenNotif", bviStatistics.RxIpcOpenNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-close-notif", types.YLeaf{"RxIpcCloseNotif", bviStatistics.RxIpcCloseNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-error-notif", types.YLeaf{"RxIpcErrorNotif", bviStatistics.RxIpcErrorNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-lwm-notif", types.YLeaf{"RxIpcLwmNotif", bviStatistics.RxIpcLwmNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-input-wait-notif", types.YLeaf{"RxIpcInputWaitNotif", bviStatistics.RxIpcInputWaitNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-send-status-notif", types.YLeaf{"RxIpcSendStatusNotif", bviStatistics.RxIpcSendStatusNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-publish-notif", types.YLeaf{"RxIpcPublishNotif", bviStatistics.RxIpcPublishNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-q-full-notif", types.YLeaf{"RxIpcQFullNotif", bviStatistics.RxIpcQFullNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-output-notif", types.YLeaf{"RxIpcOutputNotif", bviStatistics.RxIpcOutputNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-connect-notif", types.YLeaf{"RxIpcConnectNotif", bviStatistics.RxIpcConnectNotif})
    bviStatistics.EntityData.Leafs.Append("rx-igmp-packet-success", types.YLeaf{"RxIgmpPacketSuccess", bviStatistics.RxIgmpPacketSuccess})
    bviStatistics.EntityData.Leafs.Append("rx-add-mrouter-msg", types.YLeaf{"RxAddMrouterMsg", bviStatistics.RxAddMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("rx-delete-mrouter-msg", types.YLeaf{"RxDeleteMrouterMsg", bviStatistics.RxDeleteMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("rx-sweep-mrouter-msg", types.YLeaf{"RxSweepMrouterMsg", bviStatistics.RxSweepMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-add-mrouter-msg", types.YLeaf{"TxAddMrouterMsg", bviStatistics.TxAddMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-delete-mrouter-msg", types.YLeaf{"TxDeleteMrouterMsg", bviStatistics.TxDeleteMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-sweep-mrouter-msg", types.YLeaf{"TxSweepMrouterMsg", bviStatistics.TxSweepMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("rx-unknown-mrouter-msg", types.YLeaf{"RxUnknownMrouterMsg", bviStatistics.RxUnknownMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-unknown-mrouter-msg", types.YLeaf{"TxUnknownMrouterMsg", bviStatistics.TxUnknownMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-buffer-errors", types.YLeaf{"TxBufferErrors", bviStatistics.TxBufferErrors})
    bviStatistics.EntityData.Leafs.Append("tx-buffers", types.YLeaf{"TxBuffers", bviStatistics.TxBuffers})
    bviStatistics.EntityData.Leafs.Append("tx-protocol-buffers", types.YLeaf{"TxProtocolBuffers", bviStatistics.TxProtocolBuffers})
    bviStatistics.EntityData.Leafs.Append("tx-mrouter-buffers", types.YLeaf{"TxMrouterBuffers", bviStatistics.TxMrouterBuffers})
    bviStatistics.EntityData.Leafs.Append("tx-unknown-buffers", types.YLeaf{"TxUnknownBuffers", bviStatistics.TxUnknownBuffers})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-recvd", types.YLeaf{"WtxMsgRecvd", bviStatistics.WtxMsgRecvd})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-sent", types.YLeaf{"WtxMsgSent", bviStatistics.WtxMsgSent})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-proto-sent", types.YLeaf{"WtxMsgProtoSent", bviStatistics.WtxMsgProtoSent})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-drop-dc", types.YLeaf{"WtxMsgDropDc", bviStatistics.WtxMsgDropDc})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-drop-nomem", types.YLeaf{"WtxMsgDropNomem", bviStatistics.WtxMsgDropNomem})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-freed", types.YLeaf{"WtxMsgFreed", bviStatistics.WtxMsgFreed})

    bviStatistics.EntityData.YListKeys = []string {}

    return &(bviStatistics.EntityData)
}

// Mld_Active_Process_Nsf
// NSF Information
type Mld_Active_Process_Nsf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is Multicast NSF active. The type is bool.
    IsMulticastNsfActive interface{}

    // Multicast NSF timeout in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeout interface{}

    // Multicast NSF time remaining in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeLeft interface{}

    // Respawn Count. The type is interface{} with range: 0..4294967295.
    RespawnCount interface{}

    // Last NSF time ON. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOn interface{}

    // Last NSF time off. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOff interface{}

    // Last NSF time ON in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOnMin interface{}

    // Last NSF time OFF in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOffMin interface{}

    // Last ICD Notif Recv. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastIcdNotifRecv interface{}

    // Last ICD Notif Recv in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastIcdNotifRecvMin interface{}
}

func (nsf *Mld_Active_Process_Nsf) GetEntityData() *types.CommonEntityData {
    nsf.EntityData.YFilter = nsf.YFilter
    nsf.EntityData.YangName = "nsf"
    nsf.EntityData.BundleName = "cisco_ios_xr"
    nsf.EntityData.ParentYangName = "process"
    nsf.EntityData.SegmentPath = "nsf"
    nsf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsf.EntityData.Children = types.NewOrderedMap()
    nsf.EntityData.Leafs = types.NewOrderedMap()
    nsf.EntityData.Leafs.Append("is-multicast-nsf-active", types.YLeaf{"IsMulticastNsfActive", nsf.IsMulticastNsfActive})
    nsf.EntityData.Leafs.Append("multicast-nsf-timeout", types.YLeaf{"MulticastNsfTimeout", nsf.MulticastNsfTimeout})
    nsf.EntityData.Leafs.Append("multicast-nsf-time-left", types.YLeaf{"MulticastNsfTimeLeft", nsf.MulticastNsfTimeLeft})
    nsf.EntityData.Leafs.Append("respawn-count", types.YLeaf{"RespawnCount", nsf.RespawnCount})
    nsf.EntityData.Leafs.Append("last-nsf-on", types.YLeaf{"LastNsfOn", nsf.LastNsfOn})
    nsf.EntityData.Leafs.Append("last-nsf-off", types.YLeaf{"LastNsfOff", nsf.LastNsfOff})
    nsf.EntityData.Leafs.Append("last-nsf-on-min", types.YLeaf{"LastNsfOnMin", nsf.LastNsfOnMin})
    nsf.EntityData.Leafs.Append("last-nsf-off-min", types.YLeaf{"LastNsfOffMin", nsf.LastNsfOffMin})
    nsf.EntityData.Leafs.Append("last-icd-notif-recv", types.YLeaf{"LastIcdNotifRecv", nsf.LastIcdNotifRecv})
    nsf.EntityData.Leafs.Append("last-icd-notif-recv-min", types.YLeaf{"LastIcdNotifRecvMin", nsf.LastIcdNotifRecvMin})

    nsf.EntityData.YListKeys = []string {}

    return &(nsf.EntityData)
}

// Mld_Active_DefaultContext
// Default Context
type Mld_Active_DefaultContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Summary Information.
    Summary Mld_Active_DefaultContext_Summary

    // IGMP Interface state on.
    InterfaceStateOns Mld_Active_DefaultContext_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Mld_Active_DefaultContext_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Mld_Active_DefaultContext_NonActiveGroups

    // SSM Map Table.
    SsmMaps Mld_Active_DefaultContext_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Mld_Active_DefaultContext_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Mld_Active_DefaultContext_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Mld_Active_DefaultContext_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Mld_Active_DefaultContext_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Mld_Active_DefaultContext_TrafficCounters

    // IGMP Group Database Table.
    Groups Mld_Active_DefaultContext_Groups

    // IGMP Groups Summary.
    GroupSummary Mld_Active_DefaultContext_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Mld_Active_DefaultContext_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Mld_Active_DefaultContext_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Mld_Active_DefaultContext_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Mld_Active_DefaultContext_InterfaceStateOffs
}

func (defaultContext *Mld_Active_DefaultContext) GetEntityData() *types.CommonEntityData {
    defaultContext.EntityData.YFilter = defaultContext.YFilter
    defaultContext.EntityData.YangName = "default-context"
    defaultContext.EntityData.BundleName = "cisco_ios_xr"
    defaultContext.EntityData.ParentYangName = "active"
    defaultContext.EntityData.SegmentPath = "default-context"
    defaultContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultContext.EntityData.Children = types.NewOrderedMap()
    defaultContext.EntityData.Children.Append("summary", types.YChild{"Summary", &defaultContext.Summary})
    defaultContext.EntityData.Children.Append("interface-state-ons", types.YChild{"InterfaceStateOns", &defaultContext.InterfaceStateOns})
    defaultContext.EntityData.Children.Append("detail-groups", types.YChild{"DetailGroups", &defaultContext.DetailGroups})
    defaultContext.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", &defaultContext.NonActiveGroups})
    defaultContext.EntityData.Children.Append("ssm-maps", types.YChild{"SsmMaps", &defaultContext.SsmMaps})
    defaultContext.EntityData.Children.Append("explicit-groups", types.YChild{"ExplicitGroups", &defaultContext.ExplicitGroups})
    defaultContext.EntityData.Children.Append("interface-table", types.YChild{"InterfaceTable", &defaultContext.InterfaceTable})
    defaultContext.EntityData.Children.Append("interface-unicast-qos-adjusts", types.YChild{"InterfaceUnicastQosAdjusts", &defaultContext.InterfaceUnicastQosAdjusts})
    defaultContext.EntityData.Children.Append("ranges", types.YChild{"Ranges", &defaultContext.Ranges})
    defaultContext.EntityData.Children.Append("ifrs-interfaces", types.YChild{"IfrsInterfaces", &defaultContext.IfrsInterfaces})
    defaultContext.EntityData.Children.Append("traffic-counters", types.YChild{"TrafficCounters", &defaultContext.TrafficCounters})
    defaultContext.EntityData.Children.Append("groups", types.YChild{"Groups", &defaultContext.Groups})
    defaultContext.EntityData.Children.Append("group-summary", types.YChild{"GroupSummary", &defaultContext.GroupSummary})
    defaultContext.EntityData.Children.Append("ifrs-interface-summary", types.YChild{"IfrsInterfaceSummary", &defaultContext.IfrsInterfaceSummary})
    defaultContext.EntityData.Children.Append("global-interface-table", types.YChild{"GlobalInterfaceTable", &defaultContext.GlobalInterfaceTable})
    defaultContext.EntityData.Children.Append("ssm-map-details", types.YChild{"SsmMapDetails", &defaultContext.SsmMapDetails})
    defaultContext.EntityData.Children.Append("interface-state-offs", types.YChild{"InterfaceStateOffs", &defaultContext.InterfaceStateOffs})
    defaultContext.EntityData.Leafs = types.NewOrderedMap()

    defaultContext.EntityData.YListKeys = []string {}

    return &(defaultContext.EntityData)
}

// Mld_Active_DefaultContext_Summary
// IGMP Summary Information
type Mld_Active_DefaultContext_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Mld_Active_DefaultContext_Summary_Interface.
    Interface []*Mld_Active_DefaultContext_Summary_Interface
}

func (summary *Mld_Active_DefaultContext_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "default-context"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range summary.Interface {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.Interface[i]), types.YChild{"Interface", summary.Interface[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", summary.Robustness})
    summary.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", summary.GroupLimit})
    summary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", summary.GroupCount})
    summary.EntityData.Leafs.Append("is-disabled", types.YLeaf{"IsDisabled", summary.IsDisabled})
    summary.EntityData.Leafs.Append("supported-interfaces", types.YLeaf{"SupportedInterfaces", summary.SupportedInterfaces})
    summary.EntityData.Leafs.Append("unsupported-interfaces", types.YLeaf{"UnsupportedInterfaces", summary.UnsupportedInterfaces})
    summary.EntityData.Leafs.Append("enabled-interface-count", types.YLeaf{"EnabledInterfaceCount", summary.EnabledInterfaceCount})
    summary.EntityData.Leafs.Append("disabled-interface-count", types.YLeaf{"DisabledInterfaceCount", summary.DisabledInterfaceCount})
    summary.EntityData.Leafs.Append("tunnel-mte-config-count", types.YLeaf{"TunnelMteConfigCount", summary.TunnelMteConfigCount})
    summary.EntityData.Leafs.Append("node-low-memory", types.YLeaf{"NodeLowMemory", summary.NodeLowMemory})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Mld_Active_DefaultContext_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Mld_Active_DefaultContext_Summary_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Mld_Active_DefaultContext_Summary_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "summary"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", self.GroupLimit})
    self.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", self.GroupCount})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("on-off", types.YLeaf{"OnOff", self.OnOff})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Mld_Active_DefaultContext_InterfaceStateOns
// IGMP Interface state on
type Mld_Active_DefaultContext_InterfaceStateOns struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []*Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Mld_Active_DefaultContext_InterfaceStateOns) GetEntityData() *types.CommonEntityData {
    interfaceStateOns.EntityData.YFilter = interfaceStateOns.YFilter
    interfaceStateOns.EntityData.YangName = "interface-state-ons"
    interfaceStateOns.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOns.EntityData.ParentYangName = "default-context"
    interfaceStateOns.EntityData.SegmentPath = "interface-state-ons"
    interfaceStateOns.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOns.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOns.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOns.EntityData.Children = types.NewOrderedMap()
    interfaceStateOns.EntityData.Children.Append("interface-state-on", types.YChild{"InterfaceStateOn", nil})
    for i := range interfaceStateOns.InterfaceStateOn {
        interfaceStateOns.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOns.InterfaceStateOn[i]), types.YChild{"InterfaceStateOn", interfaceStateOns.InterfaceStateOn[i]})
    }
    interfaceStateOns.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOns.EntityData.YListKeys = []string {}

    return &(interfaceStateOns.EntityData)
}

// Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetEntityData() *types.CommonEntityData {
    interfaceStateOn.EntityData.YFilter = interfaceStateOn.YFilter
    interfaceStateOn.EntityData.YangName = "interface-state-on"
    interfaceStateOn.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOn.EntityData.ParentYangName = "interface-state-ons"
    interfaceStateOn.EntityData.SegmentPath = "interface-state-on" + types.AddKeyToken(interfaceStateOn.InterfaceName, "interface-name")
    interfaceStateOn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOn.EntityData.Children = types.NewOrderedMap()
    interfaceStateOn.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOn.Address})
    interfaceStateOn.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOn.QuerierAddress})
    interfaceStateOn.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOn.SubscriberAddress})
    interfaceStateOn.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOn.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOn.InterfaceName})
    interfaceStateOn.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOn.InterfaceNameXr})
    interfaceStateOn.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOn.State})
    interfaceStateOn.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOn.PrefixLength})
    interfaceStateOn.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOn.IsInterfaceUp})
    interfaceStateOn.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOn.IsIpEnabled})
    interfaceStateOn.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOn.IsRouterEnabled})
    interfaceStateOn.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOn.IgmpVersion})
    interfaceStateOn.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOn.HostVersion})
    interfaceStateOn.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOn.QueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOn.QueryTimeout})
    interfaceStateOn.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOn.QueryMaximumResponseTime})
    interfaceStateOn.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOn.LastMemberQueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOn.GroupJoins})
    interfaceStateOn.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOn.GroupLeaves})
    interfaceStateOn.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOn.IsQuerier})
    interfaceStateOn.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOn.TotalActiveGroups})
    interfaceStateOn.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOn.Robustness})
    interfaceStateOn.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOn.ProxyInterface})
    interfaceStateOn.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOn.QuerierUptime})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOn.LasLlRegistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOn.LasGetAddressCount})
    interfaceStateOn.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOn.LasUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOn.LasLlRemoveUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOn.LasLlAddUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOn.LasNullUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOn.LasUnregistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOn.IsLasRequest})
    interfaceStateOn.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOn.IsLasRegistered})
    interfaceStateOn.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOn.VrfId})
    interfaceStateOn.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOn.MteVrfId})
    interfaceStateOn.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOn.Location})
    interfaceStateOn.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOn.Mtu})
    interfaceStateOn.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOn.VrfState})
    interfaceStateOn.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOn.IsConfigurationverify})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOn.ConfigurationvrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOn.ConfigurationvrfError})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOn.ConfigurationMcastVrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOn.ConfigurationMcastVrfError})
    interfaceStateOn.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOn.IsImStateRegistered})
    interfaceStateOn.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOn.IsSubscriber})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOn.SubscriberMode})
    interfaceStateOn.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOn.IsIdentityPresent})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOn.SubscriberId})
    interfaceStateOn.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOn.ParentIfhandle})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOn.TimeSinceLastQueryInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOn.TimeSinceLastReportInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOn.RouterUptimeInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOn.MteTupleCount})

    interfaceStateOn.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOn.EntityData)
}

// Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-on"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-on"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-on"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Active_DefaultContext_DetailGroups
// IGMP Detail Group Database
type Mld_Active_DefaultContext_DetailGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Mld_Active_DefaultContext_DetailGroups_DetailGroup.
    DetailGroup []*Mld_Active_DefaultContext_DetailGroups_DetailGroup
}

func (detailGroups *Mld_Active_DefaultContext_DetailGroups) GetEntityData() *types.CommonEntityData {
    detailGroups.EntityData.YFilter = detailGroups.YFilter
    detailGroups.EntityData.YangName = "detail-groups"
    detailGroups.EntityData.BundleName = "cisco_ios_xr"
    detailGroups.EntityData.ParentYangName = "default-context"
    detailGroups.EntityData.SegmentPath = "detail-groups"
    detailGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroups.EntityData.Children = types.NewOrderedMap()
    detailGroups.EntityData.Children.Append("detail-group", types.YChild{"DetailGroup", nil})
    for i := range detailGroups.DetailGroup {
        detailGroups.EntityData.Children.Append(types.GetSegmentPath(detailGroups.DetailGroup[i]), types.YChild{"DetailGroup", detailGroups.DetailGroup[i]})
    }
    detailGroups.EntityData.Leafs = types.NewOrderedMap()

    detailGroups.EntityData.YListKeys = []string {}

    return &(detailGroups.EntityData)
}

// Mld_Active_DefaultContext_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Mld_Active_DefaultContext_DetailGroups_DetailGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source.
    Source []*Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source
}

func (detailGroup *Mld_Active_DefaultContext_DetailGroups_DetailGroup) GetEntityData() *types.CommonEntityData {
    detailGroup.EntityData.YFilter = detailGroup.YFilter
    detailGroup.EntityData.YangName = "detail-group"
    detailGroup.EntityData.BundleName = "cisco_ios_xr"
    detailGroup.EntityData.ParentYangName = "detail-groups"
    detailGroup.EntityData.SegmentPath = "detail-group"
    detailGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroup.EntityData.Children = types.NewOrderedMap()
    detailGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &detailGroup.GroupInfo})
    detailGroup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range detailGroup.Source {
        detailGroup.EntityData.Children.Append(types.GetSegmentPath(detailGroup.Source[i]), types.YChild{"Source", detailGroup.Source[i]})
    }
    detailGroup.EntityData.Leafs = types.NewOrderedMap()
    detailGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", detailGroup.GroupAddress})
    detailGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", detailGroup.InterfaceName})
    detailGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", detailGroup.SourceAddress})
    detailGroup.EntityData.Leafs.Append("is-router-exclude-mode", types.YLeaf{"IsRouterExcludeMode", detailGroup.IsRouterExcludeMode})
    detailGroup.EntityData.Leafs.Append("is-host-exclude-mode", types.YLeaf{"IsHostExcludeMode", detailGroup.IsHostExcludeMode})

    detailGroup.EntityData.YListKeys = []string {}

    return &(detailGroup.EntityData)
}

// Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "detail-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source
// List of sources
type Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "detail-group"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &source.SourceAddress})
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", source.Uptime})
    source.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", source.ExpirationTime})
    source.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", source.IsLocal})
    source.EntityData.Leafs.Append("is-remote", types.YLeaf{"IsRemote", source.IsRemote})
    source.EntityData.Leafs.Append("is-forward", types.YLeaf{"IsForward", source.IsForward})
    source.EntityData.Leafs.Append("is-we-report", types.YLeaf{"IsWeReport", source.IsWeReport})
    source.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", source.Flags})
    source.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", source.IsAdded})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "source"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_DefaultContext_NonActiveGroups
// IGMP Non-Active Groups Information
type Mld_Active_DefaultContext_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []*Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "default-context"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", nil})
    for i := range nonActiveGroups.NonActiveGroups {
        nonActiveGroups.EntityData.Children.Append(types.GetSegmentPath(nonActiveGroups.NonActiveGroups[i]), types.YChild{"NonActiveGroups", nonActiveGroups.NonActiveGroups[i]})
    }
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "non-active-groups"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &nonActiveGroups.GroupAddress})
    nonActiveGroups.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &nonActiveGroups.SourceAddress})
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()
    nonActiveGroups.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", nonActiveGroups.Interface})
    nonActiveGroups.EntityData.Leafs.Append("reason-for-non-activity", types.YLeaf{"ReasonForNonActivity", nonActiveGroups.ReasonForNonActivity})

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "non-active-groups"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "non-active-groups"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_DefaultContext_SsmMaps
// SSM Map Table
type Mld_Active_DefaultContext_SsmMaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Mld_Active_DefaultContext_SsmMaps_SsmMap.
    SsmMap []*Mld_Active_DefaultContext_SsmMaps_SsmMap
}

func (ssmMaps *Mld_Active_DefaultContext_SsmMaps) GetEntityData() *types.CommonEntityData {
    ssmMaps.EntityData.YFilter = ssmMaps.YFilter
    ssmMaps.EntityData.YangName = "ssm-maps"
    ssmMaps.EntityData.BundleName = "cisco_ios_xr"
    ssmMaps.EntityData.ParentYangName = "default-context"
    ssmMaps.EntityData.SegmentPath = "ssm-maps"
    ssmMaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMaps.EntityData.Children = types.NewOrderedMap()
    ssmMaps.EntityData.Children.Append("ssm-map", types.YChild{"SsmMap", nil})
    for i := range ssmMaps.SsmMap {
        ssmMaps.EntityData.Children.Append(types.GetSegmentPath(ssmMaps.SsmMap[i]), types.YChild{"SsmMap", ssmMaps.SsmMap[i]})
    }
    ssmMaps.EntityData.Leafs = types.NewOrderedMap()

    ssmMaps.EntityData.YListKeys = []string {}

    return &(ssmMaps.EntityData)
}

// Mld_Active_DefaultContext_SsmMaps_SsmMap
// SSM Map information
type Mld_Active_DefaultContext_SsmMaps_SsmMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Mld_Active_DefaultContext_SsmMaps_SsmMap) GetEntityData() *types.CommonEntityData {
    ssmMap.EntityData.YFilter = ssmMap.YFilter
    ssmMap.EntityData.YangName = "ssm-map"
    ssmMap.EntityData.BundleName = "cisco_ios_xr"
    ssmMap.EntityData.ParentYangName = "ssm-maps"
    ssmMap.EntityData.SegmentPath = "ssm-map"
    ssmMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMap.EntityData.Children = types.NewOrderedMap()
    ssmMap.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &ssmMap.GroupAddressXr})
    ssmMap.EntityData.Leafs = types.NewOrderedMap()
    ssmMap.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMap.SsmMapType})
    ssmMap.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMap.GroupAddress})
    ssmMap.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", ssmMap.MapType})
    ssmMap.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", ssmMap.SourceCounts})

    ssmMap.EntityData.YListKeys = []string {}

    return &(ssmMap.EntityData)
}

// Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "ssm-map"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Active_DefaultContext_ExplicitGroups
// IGMP Explicit Group Database
type Mld_Active_DefaultContext_ExplicitGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []*Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Mld_Active_DefaultContext_ExplicitGroups) GetEntityData() *types.CommonEntityData {
    explicitGroups.EntityData.YFilter = explicitGroups.YFilter
    explicitGroups.EntityData.YangName = "explicit-groups"
    explicitGroups.EntityData.BundleName = "cisco_ios_xr"
    explicitGroups.EntityData.ParentYangName = "default-context"
    explicitGroups.EntityData.SegmentPath = "explicit-groups"
    explicitGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroups.EntityData.Children = types.NewOrderedMap()
    explicitGroups.EntityData.Children.Append("explicit-group", types.YChild{"ExplicitGroup", nil})
    for i := range explicitGroups.ExplicitGroup {
        explicitGroups.EntityData.Children.Append(types.GetSegmentPath(explicitGroups.ExplicitGroup[i]), types.YChild{"ExplicitGroup", explicitGroups.ExplicitGroup[i]})
    }
    explicitGroups.EntityData.Leafs = types.NewOrderedMap()

    explicitGroups.EntityData.YListKeys = []string {}

    return &(explicitGroups.EntityData)
}

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host.
    Host []*Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetEntityData() *types.CommonEntityData {
    explicitGroup.EntityData.YFilter = explicitGroup.YFilter
    explicitGroup.EntityData.YangName = "explicit-group"
    explicitGroup.EntityData.BundleName = "cisco_ios_xr"
    explicitGroup.EntityData.ParentYangName = "explicit-groups"
    explicitGroup.EntityData.SegmentPath = "explicit-group"
    explicitGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroup.EntityData.Children = types.NewOrderedMap()
    explicitGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &explicitGroup.GroupInfo})
    explicitGroup.EntityData.Children.Append("host", types.YChild{"Host", nil})
    for i := range explicitGroup.Host {
        explicitGroup.EntityData.Children.Append(types.GetSegmentPath(explicitGroup.Host[i]), types.YChild{"Host", explicitGroup.Host[i]})
    }
    explicitGroup.EntityData.Leafs = types.NewOrderedMap()
    explicitGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", explicitGroup.GroupAddress})
    explicitGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", explicitGroup.InterfaceName})
    explicitGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", explicitGroup.SourceAddress})
    explicitGroup.EntityData.Leafs.Append("include-hosts", types.YLeaf{"IncludeHosts", explicitGroup.IncludeHosts})
    explicitGroup.EntityData.Leafs.Append("exclude-hosts", types.YLeaf{"ExcludeHosts", explicitGroup.ExcludeHosts})

    explicitGroup.EntityData.YListKeys = []string {}

    return &(explicitGroup.EntityData)
}

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "explicit-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []*Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetEntityData() *types.CommonEntityData {
    host.EntityData.YFilter = host.YFilter
    host.EntityData.YangName = "host"
    host.EntityData.BundleName = "cisco_ios_xr"
    host.EntityData.ParentYangName = "explicit-group"
    host.EntityData.SegmentPath = "host"
    host.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    host.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    host.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    host.EntityData.Children = types.NewOrderedMap()
    host.EntityData.Children.Append("address", types.YChild{"Address", &host.Address})
    host.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", nil})
    for i := range host.SourceAddress {
        host.EntityData.Children.Append(types.GetSegmentPath(host.SourceAddress[i]), types.YChild{"SourceAddress", host.SourceAddress[i]})
    }
    host.EntityData.Leafs = types.NewOrderedMap()
    host.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", host.Uptime})
    host.EntityData.Leafs.Append("is-exclude", types.YLeaf{"IsExclude", host.IsExclude})
    host.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", host.ExpirationTime})
    host.EntityData.Leafs.Append("source-count", types.YLeaf{"SourceCount", host.SourceCount})

    host.EntityData.YListKeys = []string {}

    return &(host.EntityData)
}

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "host"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "host"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_DefaultContext_InterfaceTable
// IGMP Interface specific Table
type Mld_Active_DefaultContext_InterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_DefaultContext_InterfaceTable_Interface.
    Interface []*Mld_Active_DefaultContext_InterfaceTable_Interface
}

func (interfaceTable *Mld_Active_DefaultContext_InterfaceTable) GetEntityData() *types.CommonEntityData {
    interfaceTable.EntityData.YFilter = interfaceTable.YFilter
    interfaceTable.EntityData.YangName = "interface-table"
    interfaceTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceTable.EntityData.ParentYangName = "default-context"
    interfaceTable.EntityData.SegmentPath = "interface-table"
    interfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceTable.EntityData.Children = types.NewOrderedMap()
    interfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceTable.Interface {
        interfaceTable.EntityData.Children.Append(types.GetSegmentPath(interfaceTable.Interface[i]), types.YChild{"Interface", interfaceTable.Interface[i]})
    }
    interfaceTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceTable.EntityData.YListKeys = []string {}

    return &(interfaceTable.EntityData)
}

// Mld_Active_DefaultContext_InterfaceTable_Interface
// IGMP Interface
type Mld_Active_DefaultContext_InterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_DefaultContext_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Active_DefaultContext_InterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Mld_Active_DefaultContext_InterfaceTable_Interface_Address
// IP address
type Mld_Active_DefaultContext_InterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_DefaultContext_InterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []*Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjusts.EntityData.YFilter = interfaceUnicastQosAdjusts.YFilter
    interfaceUnicastQosAdjusts.EntityData.YangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjusts.EntityData.ParentYangName = "default-context"
    interfaceUnicastQosAdjusts.EntityData.SegmentPath = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjusts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjusts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjusts.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjusts.EntityData.Children.Append("interface-unicast-qos-adjust", types.YChild{"InterfaceUnicastQosAdjust", nil})
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        interfaceUnicastQosAdjusts.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]), types.YChild{"InterfaceUnicastQosAdjust", interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]})
    }
    interfaceUnicastQosAdjusts.EntityData.Leafs = types.NewOrderedMap()

    interfaceUnicastQosAdjusts.EntityData.YListKeys = []string {}

    return &(interfaceUnicastQosAdjusts.EntityData)
}

// Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []*Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjust.EntityData.YFilter = interfaceUnicastQosAdjust.YFilter
    interfaceUnicastQosAdjust.EntityData.YangName = "interface-unicast-qos-adjust"
    interfaceUnicastQosAdjust.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjust.EntityData.ParentYangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjust.EntityData.SegmentPath = "interface-unicast-qos-adjust" + types.AddKeyToken(interfaceUnicastQosAdjust.InterfaceName, "interface-name")
    interfaceUnicastQosAdjust.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjust.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjust.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjust.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Children.Append("update", types.YChild{"Update", nil})
    for i := range interfaceUnicastQosAdjust.Update {
        interfaceUnicastQosAdjust.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjust.Update[i]), types.YChild{"Update", interfaceUnicastQosAdjust.Update[i]})
    }
    interfaceUnicastQosAdjust.EntityData.Leafs = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceUnicastQosAdjust.InterfaceName})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("is-virtual-access", types.YLeaf{"IsVirtualAccess", interfaceUnicastQosAdjust.IsVirtualAccess})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate", types.YLeaf{"Rate", interfaceUnicastQosAdjust.Rate})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-increments", types.YLeaf{"RateIncrements", interfaceUnicastQosAdjust.RateIncrements})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-decrements", types.YLeaf{"RateDecrements", interfaceUnicastQosAdjust.RateDecrements})

    interfaceUnicastQosAdjust.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceUnicastQosAdjust.EntityData)
}

// Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetEntityData() *types.CommonEntityData {
    update.EntityData.YFilter = update.YFilter
    update.EntityData.YangName = "update"
    update.EntityData.BundleName = "cisco_ios_xr"
    update.EntityData.ParentYangName = "interface-unicast-qos-adjust"
    update.EntityData.SegmentPath = "update"
    update.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    update.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    update.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    update.EntityData.Children = types.NewOrderedMap()
    update.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &update.SourceAddress})
    update.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &update.GroupAddress})
    update.EntityData.Leafs = types.NewOrderedMap()
    update.EntityData.Leafs.Append("is-add", types.YLeaf{"IsAdd", update.IsAdd})
    update.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", update.Weight})
    update.EntityData.Leafs.Append("received-time", types.YLeaf{"ReceivedTime", update.ReceivedTime})

    update.EntityData.YListKeys = []string {}

    return &(update.EntityData)
}

// Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "update"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Mld_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "update"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Mld_Active_DefaultContext_Ranges
// Range table
type Mld_Active_DefaultContext_Ranges struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Range information. The type is slice of
    // Mld_Active_DefaultContext_Ranges_Range.
    Range []*Mld_Active_DefaultContext_Ranges_Range
}

func (ranges *Mld_Active_DefaultContext_Ranges) GetEntityData() *types.CommonEntityData {
    ranges.EntityData.YFilter = ranges.YFilter
    ranges.EntityData.YangName = "ranges"
    ranges.EntityData.BundleName = "cisco_ios_xr"
    ranges.EntityData.ParentYangName = "default-context"
    ranges.EntityData.SegmentPath = "ranges"
    ranges.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ranges.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ranges.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ranges.EntityData.Children = types.NewOrderedMap()
    ranges.EntityData.Children.Append("range", types.YChild{"Range", nil})
    for i := range ranges.Range {
        ranges.EntityData.Children.Append(types.GetSegmentPath(ranges.Range[i]), types.YChild{"Range", ranges.Range[i]})
    }
    ranges.EntityData.Leafs = types.NewOrderedMap()

    ranges.EntityData.YListKeys = []string {}

    return &(ranges.EntityData)
}

// Mld_Active_DefaultContext_Ranges_Range
// Range information
type Mld_Active_DefaultContext_Ranges_Range struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: 0..4294967295.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr
}

func (self *Mld_Active_DefaultContext_Ranges_Range) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "range"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "ranges"
    self.EntityData.SegmentPath = "range"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &self.GroupAddressXr})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", self.GroupAddress})
    self.EntityData.Leafs.Append("group-mask", types.YLeaf{"GroupMask", self.GroupMask})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", self.Protocol})
    self.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", self.IsStale})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr
// Group address
type Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "range"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Active_DefaultContext_IfrsInterfaces
// IGMP Interface specific
type Mld_Active_DefaultContext_IfrsInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface.
    IfrsInterface []*Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Mld_Active_DefaultContext_IfrsInterfaces) GetEntityData() *types.CommonEntityData {
    ifrsInterfaces.EntityData.YFilter = ifrsInterfaces.YFilter
    ifrsInterfaces.EntityData.YangName = "ifrs-interfaces"
    ifrsInterfaces.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaces.EntityData.ParentYangName = "default-context"
    ifrsInterfaces.EntityData.SegmentPath = "ifrs-interfaces"
    ifrsInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaces.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaces.EntityData.Children.Append("ifrs-interface", types.YChild{"IfrsInterface", nil})
    for i := range ifrsInterfaces.IfrsInterface {
        ifrsInterfaces.EntityData.Children.Append(types.GetSegmentPath(ifrsInterfaces.IfrsInterface[i]), types.YChild{"IfrsInterface", ifrsInterfaces.IfrsInterface[i]})
    }
    ifrsInterfaces.EntityData.Leafs = types.NewOrderedMap()

    ifrsInterfaces.EntityData.YListKeys = []string {}

    return &(ifrsInterfaces.EntityData)
}

// Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetEntityData() *types.CommonEntityData {
    ifrsInterface.EntityData.YFilter = ifrsInterface.YFilter
    ifrsInterface.EntityData.YangName = "ifrs-interface"
    ifrsInterface.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterface.EntityData.ParentYangName = "ifrs-interfaces"
    ifrsInterface.EntityData.SegmentPath = "ifrs-interface" + types.AddKeyToken(ifrsInterface.InterfaceName, "interface-name")
    ifrsInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterface.EntityData.Children = types.NewOrderedMap()
    ifrsInterface.EntityData.Children.Append("igmp-interface-entry", types.YChild{"IgmpInterfaceEntry", &ifrsInterface.IgmpInterfaceEntry})
    ifrsInterface.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ifrsInterface.InterfaceName})
    ifrsInterface.EntityData.Leafs.Append("join-group-count", types.YLeaf{"JoinGroupCount", ifrsInterface.JoinGroupCount})

    ifrsInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(ifrsInterface.EntityData)
}

// Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetEntityData() *types.CommonEntityData {
    igmpInterfaceEntry.EntityData.YFilter = igmpInterfaceEntry.YFilter
    igmpInterfaceEntry.EntityData.YangName = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.BundleName = "cisco_ios_xr"
    igmpInterfaceEntry.EntityData.ParentYangName = "ifrs-interface"
    igmpInterfaceEntry.EntityData.SegmentPath = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igmpInterfaceEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igmpInterfaceEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igmpInterfaceEntry.EntityData.Children = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Children.Append("address", types.YChild{"Address", &igmpInterfaceEntry.Address})
    igmpInterfaceEntry.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &igmpInterfaceEntry.QuerierAddress})
    igmpInterfaceEntry.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &igmpInterfaceEntry.SubscriberAddress})
    igmpInterfaceEntry.EntityData.Leafs = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", igmpInterfaceEntry.InterfaceNameXr})
    igmpInterfaceEntry.EntityData.Leafs.Append("state", types.YLeaf{"State", igmpInterfaceEntry.State})
    igmpInterfaceEntry.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", igmpInterfaceEntry.PrefixLength})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", igmpInterfaceEntry.IsInterfaceUp})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", igmpInterfaceEntry.IsIpEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", igmpInterfaceEntry.IsRouterEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", igmpInterfaceEntry.IgmpVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", igmpInterfaceEntry.HostVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", igmpInterfaceEntry.QueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", igmpInterfaceEntry.QueryTimeout})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", igmpInterfaceEntry.QueryMaximumResponseTime})
    igmpInterfaceEntry.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", igmpInterfaceEntry.LastMemberQueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", igmpInterfaceEntry.GroupJoins})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", igmpInterfaceEntry.GroupLeaves})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", igmpInterfaceEntry.IsQuerier})
    igmpInterfaceEntry.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", igmpInterfaceEntry.TotalActiveGroups})
    igmpInterfaceEntry.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", igmpInterfaceEntry.Robustness})
    igmpInterfaceEntry.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", igmpInterfaceEntry.ProxyInterface})
    igmpInterfaceEntry.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", igmpInterfaceEntry.QuerierUptime})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", igmpInterfaceEntry.LasLlRegistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", igmpInterfaceEntry.LasGetAddressCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", igmpInterfaceEntry.LasUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", igmpInterfaceEntry.LasLlRemoveUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", igmpInterfaceEntry.LasLlAddUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", igmpInterfaceEntry.LasNullUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", igmpInterfaceEntry.LasUnregistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", igmpInterfaceEntry.IsLasRequest})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", igmpInterfaceEntry.IsLasRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", igmpInterfaceEntry.VrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", igmpInterfaceEntry.MteVrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("location", types.YLeaf{"Location", igmpInterfaceEntry.Location})
    igmpInterfaceEntry.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", igmpInterfaceEntry.Mtu})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", igmpInterfaceEntry.VrfState})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", igmpInterfaceEntry.IsConfigurationverify})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", igmpInterfaceEntry.ConfigurationvrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", igmpInterfaceEntry.ConfigurationvrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", igmpInterfaceEntry.ConfigurationMcastVrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", igmpInterfaceEntry.ConfigurationMcastVrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", igmpInterfaceEntry.IsImStateRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", igmpInterfaceEntry.IsSubscriber})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", igmpInterfaceEntry.SubscriberMode})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", igmpInterfaceEntry.IsIdentityPresent})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", igmpInterfaceEntry.SubscriberId})
    igmpInterfaceEntry.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", igmpInterfaceEntry.ParentIfhandle})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", igmpInterfaceEntry.TimeSinceLastQueryInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", igmpInterfaceEntry.TimeSinceLastReportInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", igmpInterfaceEntry.RouterUptimeInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", igmpInterfaceEntry.MteTupleCount})

    igmpInterfaceEntry.EntityData.YListKeys = []string {}

    return &(igmpInterfaceEntry.EntityData)
}

// Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "igmp-interface-entry"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "igmp-interface-entry"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "igmp-interface-entry"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Active_DefaultContext_TrafficCounters
// IGMP Message Traffic Counters
type Mld_Active_DefaultContext_TrafficCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Mld_Active_DefaultContext_TrafficCounters) GetEntityData() *types.CommonEntityData {
    trafficCounters.EntityData.YFilter = trafficCounters.YFilter
    trafficCounters.EntityData.YangName = "traffic-counters"
    trafficCounters.EntityData.BundleName = "cisco_ios_xr"
    trafficCounters.EntityData.ParentYangName = "default-context"
    trafficCounters.EntityData.SegmentPath = "traffic-counters"
    trafficCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficCounters.EntityData.Children = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", trafficCounters.ElapsedTime})
    trafficCounters.EntityData.Leafs.Append("packets-in", types.YLeaf{"PacketsIn", trafficCounters.PacketsIn})
    trafficCounters.EntityData.Leafs.Append("packets-out", types.YLeaf{"PacketsOut", trafficCounters.PacketsOut})
    trafficCounters.EntityData.Leafs.Append("format-errors", types.YLeaf{"FormatErrors", trafficCounters.FormatErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-input-errors", types.YLeaf{"PacketManagerInputErrors", trafficCounters.PacketManagerInputErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-output-errors", types.YLeaf{"PacketManagerOutputErrors", trafficCounters.PacketManagerOutputErrors})
    trafficCounters.EntityData.Leafs.Append("checksum-errors", types.YLeaf{"ChecksumErrors", trafficCounters.ChecksumErrors})
    trafficCounters.EntityData.Leafs.Append("receive-socket-errors", types.YLeaf{"ReceiveSocketErrors", trafficCounters.ReceiveSocketErrors})
    trafficCounters.EntityData.Leafs.Append("socket-errors", types.YLeaf{"SocketErrors", trafficCounters.SocketErrors})
    trafficCounters.EntityData.Leafs.Append("bad-scope-errors", types.YLeaf{"BadScopeErrors", trafficCounters.BadScopeErrors})
    trafficCounters.EntityData.Leafs.Append("auxillary-data-length-errors", types.YLeaf{"AuxillaryDataLengthErrors", trafficCounters.AuxillaryDataLengthErrors})
    trafficCounters.EntityData.Leafs.Append("invalid-source-address-errors", types.YLeaf{"InvalidSourceAddressErrors", trafficCounters.InvalidSourceAddressErrors})
    trafficCounters.EntityData.Leafs.Append("no-socket-connection", types.YLeaf{"NoSocketConnection", trafficCounters.NoSocketConnection})
    trafficCounters.EntityData.Leafs.Append("miscellaneous-errors", types.YLeaf{"MiscellaneousErrors", trafficCounters.MiscellaneousErrors})
    trafficCounters.EntityData.Leafs.Append("input-queries", types.YLeaf{"InputQueries", trafficCounters.InputQueries})
    trafficCounters.EntityData.Leafs.Append("input-reports", types.YLeaf{"InputReports", trafficCounters.InputReports})
    trafficCounters.EntityData.Leafs.Append("input-leaves", types.YLeaf{"InputLeaves", trafficCounters.InputLeaves})
    trafficCounters.EntityData.Leafs.Append("input-mtrace", types.YLeaf{"InputMtrace", trafficCounters.InputMtrace})
    trafficCounters.EntityData.Leafs.Append("input-dvmrp", types.YLeaf{"InputDvmrp", trafficCounters.InputDvmrp})
    trafficCounters.EntityData.Leafs.Append("input-pim", types.YLeaf{"InputPim", trafficCounters.InputPim})
    trafficCounters.EntityData.Leafs.Append("output-queries", types.YLeaf{"OutputQueries", trafficCounters.OutputQueries})
    trafficCounters.EntityData.Leafs.Append("output-reports", types.YLeaf{"OutputReports", trafficCounters.OutputReports})
    trafficCounters.EntityData.Leafs.Append("output-leaves", types.YLeaf{"OutputLeaves", trafficCounters.OutputLeaves})
    trafficCounters.EntityData.Leafs.Append("output-mtrace", types.YLeaf{"OutputMtrace", trafficCounters.OutputMtrace})
    trafficCounters.EntityData.Leafs.Append("output-dvmrp", types.YLeaf{"OutputDvmrp", trafficCounters.OutputDvmrp})
    trafficCounters.EntityData.Leafs.Append("output-pim", types.YLeaf{"OutputPim", trafficCounters.OutputPim})
    trafficCounters.EntityData.Leafs.Append("get-packet-failure", types.YLeaf{"GetPacketFailure", trafficCounters.GetPacketFailure})
    trafficCounters.EntityData.Leafs.Append("output-no-parent-interface-handle", types.YLeaf{"OutputNoParentInterfaceHandle", trafficCounters.OutputNoParentInterfaceHandle})
    trafficCounters.EntityData.Leafs.Append("input-no-idb", types.YLeaf{"InputNoIdb", trafficCounters.InputNoIdb})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-in-idb", types.YLeaf{"InputNoVrfInIdb", trafficCounters.InputNoVrfInIdb})
    trafficCounters.EntityData.Leafs.Append("input-disabled-idb", types.YLeaf{"InputDisabledIdb", trafficCounters.InputDisabledIdb})
    trafficCounters.EntityData.Leafs.Append("input-martian-address", types.YLeaf{"InputMartianAddress", trafficCounters.InputMartianAddress})
    trafficCounters.EntityData.Leafs.Append("input-no-assigned-vrf-id", types.YLeaf{"InputNoAssignedVrfId", trafficCounters.InputNoAssignedVrfId})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-mtrace", types.YLeaf{"InputNoVrfMtrace", trafficCounters.InputNoVrfMtrace})
    trafficCounters.EntityData.Leafs.Append("input-no-platform-support-mtrace", types.YLeaf{"InputNoPlatformSupportMtrace", trafficCounters.InputNoPlatformSupportMtrace})

    trafficCounters.EntityData.YListKeys = []string {}

    return &(trafficCounters.EntityData)
}

// Mld_Active_DefaultContext_Groups
// IGMP Group Database Table
type Mld_Active_DefaultContext_Groups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Mld_Active_DefaultContext_Groups_Group.
    Group []*Mld_Active_DefaultContext_Groups_Group
}

func (groups *Mld_Active_DefaultContext_Groups) GetEntityData() *types.CommonEntityData {
    groups.EntityData.YFilter = groups.YFilter
    groups.EntityData.YangName = "groups"
    groups.EntityData.BundleName = "cisco_ios_xr"
    groups.EntityData.ParentYangName = "default-context"
    groups.EntityData.SegmentPath = "groups"
    groups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groups.EntityData.Children = types.NewOrderedMap()
    groups.EntityData.Children.Append("group", types.YChild{"Group", nil})
    for i := range groups.Group {
        groups.EntityData.Children.Append(types.GetSegmentPath(groups.Group[i]), types.YChild{"Group", groups.Group[i]})
    }
    groups.EntityData.Leafs = types.NewOrderedMap()

    groups.EntityData.YListKeys = []string {}

    return &(groups.EntityData)
}

// Mld_Active_DefaultContext_Groups_Group
// IGMP Group Entry Information
type Mld_Active_DefaultContext_Groups_Group struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Mld_Active_DefaultContext_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Mld_Active_DefaultContext_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Mld_Active_DefaultContext_Groups_Group_SourceAddress
}

func (group *Mld_Active_DefaultContext_Groups_Group) GetEntityData() *types.CommonEntityData {
    group.EntityData.YFilter = group.YFilter
    group.EntityData.YangName = "group"
    group.EntityData.BundleName = "cisco_ios_xr"
    group.EntityData.ParentYangName = "groups"
    group.EntityData.SegmentPath = "group"
    group.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    group.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    group.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    group.EntityData.Children = types.NewOrderedMap()
    group.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &group.GroupAddressXr})
    group.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &group.LastReporter})
    group.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &group.SourceAddress})
    group.EntityData.Leafs = types.NewOrderedMap()
    group.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", group.GroupAddress})
    group.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", group.InterfaceName})
    group.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", group.InterfaceNameXr})
    group.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", group.Uptime})
    group.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", group.ExpirationTime})
    group.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", group.ExplicitTrackingEnabled})
    group.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", group.IsSelfJoin})
    group.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", group.RowStatus})
    group.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", group.IsLowMemory})
    group.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", group.RouterFilterMode})
    group.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", group.OlderHostVersion1Timer})
    group.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", group.OlderHostVersion2Timer})
    group.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", group.IsAdded})
    group.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", group.IsSuppressed})

    group.EntityData.YListKeys = []string {}

    return &(group.EntityData)
}

// Mld_Active_DefaultContext_Groups_Group_GroupAddressXr
// Group Address
type Mld_Active_DefaultContext_Groups_Group_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_DefaultContext_Groups_Group_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Active_DefaultContext_Groups_Group_LastReporter
// Last reporter address
type Mld_Active_DefaultContext_Groups_Group_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Mld_Active_DefaultContext_Groups_Group_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Mld_Active_DefaultContext_Groups_Group_SourceAddress
// Source Address
type Mld_Active_DefaultContext_Groups_Group_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Mld_Active_DefaultContext_Groups_Group_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Mld_Active_DefaultContext_GroupSummary
// IGMP Groups Summary
type Mld_Active_DefaultContext_GroupSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Mld_Active_DefaultContext_GroupSummary) GetEntityData() *types.CommonEntityData {
    groupSummary.EntityData.YFilter = groupSummary.YFilter
    groupSummary.EntityData.YangName = "group-summary"
    groupSummary.EntityData.BundleName = "cisco_ios_xr"
    groupSummary.EntityData.ParentYangName = "default-context"
    groupSummary.EntityData.SegmentPath = "group-summary"
    groupSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupSummary.EntityData.Children = types.NewOrderedMap()
    groupSummary.EntityData.Leafs = types.NewOrderedMap()
    groupSummary.EntityData.Leafs.Append("groutes", types.YLeaf{"Groutes", groupSummary.Groutes})
    groupSummary.EntityData.Leafs.Append("sg-routes", types.YLeaf{"SgRoutes", groupSummary.SgRoutes})
    groupSummary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", groupSummary.GroupCount})
    groupSummary.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupSummary.IsLowMemory})

    groupSummary.EntityData.YListKeys = []string {}

    return &(groupSummary.EntityData)
}

// Mld_Active_DefaultContext_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Mld_Active_DefaultContext_IfrsInterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Mld_Active_DefaultContext_IfrsInterfaceSummary) GetEntityData() *types.CommonEntityData {
    ifrsInterfaceSummary.EntityData.YFilter = ifrsInterfaceSummary.YFilter
    ifrsInterfaceSummary.EntityData.YangName = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaceSummary.EntityData.ParentYangName = "default-context"
    ifrsInterfaceSummary.EntityData.SegmentPath = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaceSummary.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs.Append("interface-count", types.YLeaf{"InterfaceCount", ifrsInterfaceSummary.InterfaceCount})
    ifrsInterfaceSummary.EntityData.Leafs.Append("configuration-count", types.YLeaf{"ConfigurationCount", ifrsInterfaceSummary.ConfigurationCount})

    ifrsInterfaceSummary.EntityData.YListKeys = []string {}

    return &(ifrsInterfaceSummary.EntityData)
}

// Mld_Active_DefaultContext_GlobalInterfaceTable
// IGMP Global Interface 
type Mld_Active_DefaultContext_GlobalInterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_DefaultContext_GlobalInterfaceTable_Interface.
    Interface []*Mld_Active_DefaultContext_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Mld_Active_DefaultContext_GlobalInterfaceTable) GetEntityData() *types.CommonEntityData {
    globalInterfaceTable.EntityData.YFilter = globalInterfaceTable.YFilter
    globalInterfaceTable.EntityData.YangName = "global-interface-table"
    globalInterfaceTable.EntityData.BundleName = "cisco_ios_xr"
    globalInterfaceTable.EntityData.ParentYangName = "default-context"
    globalInterfaceTable.EntityData.SegmentPath = "global-interface-table"
    globalInterfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalInterfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalInterfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalInterfaceTable.EntityData.Children = types.NewOrderedMap()
    globalInterfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range globalInterfaceTable.Interface {
        globalInterfaceTable.EntityData.Children.Append(types.GetSegmentPath(globalInterfaceTable.Interface[i]), types.YChild{"Interface", globalInterfaceTable.Interface[i]})
    }
    globalInterfaceTable.EntityData.Leafs = types.NewOrderedMap()

    globalInterfaceTable.EntityData.YListKeys = []string {}

    return &(globalInterfaceTable.EntityData)
}

// Mld_Active_DefaultContext_GlobalInterfaceTable_Interface
// IGMP Interface
type Mld_Active_DefaultContext_GlobalInterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "global-interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address
// IP address
type Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Mld_Active_DefaultContext_SsmMapDetails
// SSM Map Detail
type Mld_Active_DefaultContext_SsmMapDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []*Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Mld_Active_DefaultContext_SsmMapDetails) GetEntityData() *types.CommonEntityData {
    ssmMapDetails.EntityData.YFilter = ssmMapDetails.YFilter
    ssmMapDetails.EntityData.YangName = "ssm-map-details"
    ssmMapDetails.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetails.EntityData.ParentYangName = "default-context"
    ssmMapDetails.EntityData.SegmentPath = "ssm-map-details"
    ssmMapDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetails.EntityData.Children = types.NewOrderedMap()
    ssmMapDetails.EntityData.Children.Append("ssm-map-detail", types.YChild{"SsmMapDetail", nil})
    for i := range ssmMapDetails.SsmMapDetail {
        ssmMapDetails.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetails.SsmMapDetail[i]), types.YChild{"SsmMapDetail", ssmMapDetails.SsmMapDetail[i]})
    }
    ssmMapDetails.EntityData.Leafs = types.NewOrderedMap()

    ssmMapDetails.EntityData.YListKeys = []string {}

    return &(ssmMapDetails.EntityData)
}

// Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources.
    Sources []*Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetEntityData() *types.CommonEntityData {
    ssmMapDetail.EntityData.YFilter = ssmMapDetail.YFilter
    ssmMapDetail.EntityData.YangName = "ssm-map-detail"
    ssmMapDetail.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetail.EntityData.ParentYangName = "ssm-map-details"
    ssmMapDetail.EntityData.SegmentPath = "ssm-map-detail"
    ssmMapDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetail.EntityData.Children = types.NewOrderedMap()
    ssmMapDetail.EntityData.Children.Append("map-info", types.YChild{"MapInfo", &ssmMapDetail.MapInfo})
    ssmMapDetail.EntityData.Children.Append("sources", types.YChild{"Sources", nil})
    for i := range ssmMapDetail.Sources {
        ssmMapDetail.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetail.Sources[i]), types.YChild{"Sources", ssmMapDetail.Sources[i]})
    }
    ssmMapDetail.EntityData.Leafs = types.NewOrderedMap()
    ssmMapDetail.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMapDetail.SsmMapType})
    ssmMapDetail.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMapDetail.GroupAddress})
    ssmMapDetail.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", ssmMapDetail.ExpirationTime})
    ssmMapDetail.EntityData.Leafs.Append("response-pending", types.YLeaf{"ResponsePending", ssmMapDetail.ResponsePending})
    ssmMapDetail.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", ssmMapDetail.QueryInterval})
    ssmMapDetail.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", ssmMapDetail.ElapsedTime})

    ssmMapDetail.EntityData.YListKeys = []string {}

    return &(ssmMapDetail.EntityData)
}

// Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetEntityData() *types.CommonEntityData {
    mapInfo.EntityData.YFilter = mapInfo.YFilter
    mapInfo.EntityData.YangName = "map-info"
    mapInfo.EntityData.BundleName = "cisco_ios_xr"
    mapInfo.EntityData.ParentYangName = "ssm-map-detail"
    mapInfo.EntityData.SegmentPath = "map-info"
    mapInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mapInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mapInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mapInfo.EntityData.Children = types.NewOrderedMap()
    mapInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &mapInfo.GroupAddressXr})
    mapInfo.EntityData.Leafs = types.NewOrderedMap()
    mapInfo.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", mapInfo.MapType})
    mapInfo.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", mapInfo.SourceCounts})

    mapInfo.EntityData.YListKeys = []string {}

    return &(mapInfo.EntityData)
}

// Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "map-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Mld_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetEntityData() *types.CommonEntityData {
    sources.EntityData.YFilter = sources.YFilter
    sources.EntityData.YangName = "sources"
    sources.EntityData.BundleName = "cisco_ios_xr"
    sources.EntityData.ParentYangName = "ssm-map-detail"
    sources.EntityData.SegmentPath = "sources"
    sources.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sources.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sources.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sources.EntityData.Children = types.NewOrderedMap()
    sources.EntityData.Leafs = types.NewOrderedMap()
    sources.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sources.AfName})
    sources.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sources.Ipv4Address})
    sources.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sources.Ipv6Address})

    sources.EntityData.YListKeys = []string {}

    return &(sources.EntityData)
}

// Mld_Active_DefaultContext_InterfaceStateOffs
// IGMP Interface state off
type Mld_Active_DefaultContext_InterfaceStateOffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []*Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Mld_Active_DefaultContext_InterfaceStateOffs) GetEntityData() *types.CommonEntityData {
    interfaceStateOffs.EntityData.YFilter = interfaceStateOffs.YFilter
    interfaceStateOffs.EntityData.YangName = "interface-state-offs"
    interfaceStateOffs.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOffs.EntityData.ParentYangName = "default-context"
    interfaceStateOffs.EntityData.SegmentPath = "interface-state-offs"
    interfaceStateOffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOffs.EntityData.Children = types.NewOrderedMap()
    interfaceStateOffs.EntityData.Children.Append("interface-state-off", types.YChild{"InterfaceStateOff", nil})
    for i := range interfaceStateOffs.InterfaceStateOff {
        interfaceStateOffs.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOffs.InterfaceStateOff[i]), types.YChild{"InterfaceStateOff", interfaceStateOffs.InterfaceStateOff[i]})
    }
    interfaceStateOffs.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOffs.EntityData.YListKeys = []string {}

    return &(interfaceStateOffs.EntityData)
}

// Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetEntityData() *types.CommonEntityData {
    interfaceStateOff.EntityData.YFilter = interfaceStateOff.YFilter
    interfaceStateOff.EntityData.YangName = "interface-state-off"
    interfaceStateOff.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOff.EntityData.ParentYangName = "interface-state-offs"
    interfaceStateOff.EntityData.SegmentPath = "interface-state-off" + types.AddKeyToken(interfaceStateOff.InterfaceName, "interface-name")
    interfaceStateOff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOff.EntityData.Children = types.NewOrderedMap()
    interfaceStateOff.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOff.Address})
    interfaceStateOff.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOff.QuerierAddress})
    interfaceStateOff.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOff.SubscriberAddress})
    interfaceStateOff.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOff.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOff.InterfaceName})
    interfaceStateOff.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOff.InterfaceNameXr})
    interfaceStateOff.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOff.State})
    interfaceStateOff.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOff.PrefixLength})
    interfaceStateOff.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOff.IsInterfaceUp})
    interfaceStateOff.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOff.IsIpEnabled})
    interfaceStateOff.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOff.IsRouterEnabled})
    interfaceStateOff.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOff.IgmpVersion})
    interfaceStateOff.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOff.HostVersion})
    interfaceStateOff.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOff.QueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOff.QueryTimeout})
    interfaceStateOff.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOff.QueryMaximumResponseTime})
    interfaceStateOff.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOff.LastMemberQueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOff.GroupJoins})
    interfaceStateOff.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOff.GroupLeaves})
    interfaceStateOff.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOff.IsQuerier})
    interfaceStateOff.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOff.TotalActiveGroups})
    interfaceStateOff.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOff.Robustness})
    interfaceStateOff.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOff.ProxyInterface})
    interfaceStateOff.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOff.QuerierUptime})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOff.LasLlRegistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOff.LasGetAddressCount})
    interfaceStateOff.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOff.LasUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOff.LasLlRemoveUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOff.LasLlAddUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOff.LasNullUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOff.LasUnregistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOff.IsLasRequest})
    interfaceStateOff.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOff.IsLasRegistered})
    interfaceStateOff.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOff.VrfId})
    interfaceStateOff.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOff.MteVrfId})
    interfaceStateOff.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOff.Location})
    interfaceStateOff.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOff.Mtu})
    interfaceStateOff.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOff.VrfState})
    interfaceStateOff.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOff.IsConfigurationverify})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOff.ConfigurationvrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOff.ConfigurationvrfError})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOff.ConfigurationMcastVrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOff.ConfigurationMcastVrfError})
    interfaceStateOff.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOff.IsImStateRegistered})
    interfaceStateOff.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOff.IsSubscriber})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOff.SubscriberMode})
    interfaceStateOff.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOff.IsIdentityPresent})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOff.SubscriberId})
    interfaceStateOff.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOff.ParentIfhandle})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOff.TimeSinceLastQueryInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOff.TimeSinceLastReportInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOff.RouterUptimeInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOff.MteTupleCount})

    interfaceStateOff.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOff.EntityData)
}

// Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-off"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-off"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Mld_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-off"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp
// igmp
type Igmp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Standby Process.
    Standby Igmp_Standby

    // Active Process.
    Active Igmp_Active
}

func (igmp *Igmp) GetEntityData() *types.CommonEntityData {
    igmp.EntityData.YFilter = igmp.YFilter
    igmp.EntityData.YangName = "igmp"
    igmp.EntityData.BundleName = "cisco_ios_xr"
    igmp.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-igmp-oper"
    igmp.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-igmp-oper:igmp"
    igmp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igmp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igmp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igmp.EntityData.Children = types.NewOrderedMap()
    igmp.EntityData.Children.Append("standby", types.YChild{"Standby", &igmp.Standby})
    igmp.EntityData.Children.Append("active", types.YChild{"Active", &igmp.Active})
    igmp.EntityData.Leafs = types.NewOrderedMap()

    igmp.EntityData.YListKeys = []string {}

    return &(igmp.EntityData)
}

// Igmp_Standby
// Standby Process
type Igmp_Standby struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Table.
    Vrfs Igmp_Standby_Vrfs

    // Process.
    Process Igmp_Standby_Process

    // Default Context.
    DefaultContext Igmp_Standby_DefaultContext
}

func (standby *Igmp_Standby) GetEntityData() *types.CommonEntityData {
    standby.EntityData.YFilter = standby.YFilter
    standby.EntityData.YangName = "standby"
    standby.EntityData.BundleName = "cisco_ios_xr"
    standby.EntityData.ParentYangName = "igmp"
    standby.EntityData.SegmentPath = "standby"
    standby.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standby.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standby.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standby.EntityData.Children = types.NewOrderedMap()
    standby.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &standby.Vrfs})
    standby.EntityData.Children.Append("process", types.YChild{"Process", &standby.Process})
    standby.EntityData.Children.Append("default-context", types.YChild{"DefaultContext", &standby.DefaultContext})
    standby.EntityData.Leafs = types.NewOrderedMap()

    standby.EntityData.YListKeys = []string {}

    return &(standby.EntityData)
}

// Igmp_Standby_Vrfs
// VRF Table
type Igmp_Standby_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table Names. The type is slice of Igmp_Standby_Vrfs_Vrf.
    Vrf []*Igmp_Standby_Vrfs_Vrf
}

func (vrfs *Igmp_Standby_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "standby"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// Igmp_Standby_Vrfs_Vrf
// VRF table Names
type Igmp_Standby_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with length: 1..32.
    VrfName interface{}

    // IGMP Summary Information.
    Summary Igmp_Standby_Vrfs_Vrf_Summary

    // IGMP Interface state on.
    InterfaceStateOns Igmp_Standby_Vrfs_Vrf_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Igmp_Standby_Vrfs_Vrf_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Igmp_Standby_Vrfs_Vrf_NonActiveGroups

    // SSM Map Table.
    SsmMaps Igmp_Standby_Vrfs_Vrf_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Igmp_Standby_Vrfs_Vrf_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Igmp_Standby_Vrfs_Vrf_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Igmp_Standby_Vrfs_Vrf_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Igmp_Standby_Vrfs_Vrf_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Igmp_Standby_Vrfs_Vrf_TrafficCounters

    // IGMP Group Database Table.
    Groups Igmp_Standby_Vrfs_Vrf_Groups

    // IGMP Groups Summary.
    GroupSummary Igmp_Standby_Vrfs_Vrf_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Igmp_Standby_Vrfs_Vrf_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs
}

func (vrf *Igmp_Standby_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("summary", types.YChild{"Summary", &vrf.Summary})
    vrf.EntityData.Children.Append("interface-state-ons", types.YChild{"InterfaceStateOns", &vrf.InterfaceStateOns})
    vrf.EntityData.Children.Append("detail-groups", types.YChild{"DetailGroups", &vrf.DetailGroups})
    vrf.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", &vrf.NonActiveGroups})
    vrf.EntityData.Children.Append("ssm-maps", types.YChild{"SsmMaps", &vrf.SsmMaps})
    vrf.EntityData.Children.Append("explicit-groups", types.YChild{"ExplicitGroups", &vrf.ExplicitGroups})
    vrf.EntityData.Children.Append("interface-table", types.YChild{"InterfaceTable", &vrf.InterfaceTable})
    vrf.EntityData.Children.Append("interface-unicast-qos-adjusts", types.YChild{"InterfaceUnicastQosAdjusts", &vrf.InterfaceUnicastQosAdjusts})
    vrf.EntityData.Children.Append("ranges", types.YChild{"Ranges", &vrf.Ranges})
    vrf.EntityData.Children.Append("ifrs-interfaces", types.YChild{"IfrsInterfaces", &vrf.IfrsInterfaces})
    vrf.EntityData.Children.Append("traffic-counters", types.YChild{"TrafficCounters", &vrf.TrafficCounters})
    vrf.EntityData.Children.Append("groups", types.YChild{"Groups", &vrf.Groups})
    vrf.EntityData.Children.Append("group-summary", types.YChild{"GroupSummary", &vrf.GroupSummary})
    vrf.EntityData.Children.Append("ifrs-interface-summary", types.YChild{"IfrsInterfaceSummary", &vrf.IfrsInterfaceSummary})
    vrf.EntityData.Children.Append("global-interface-table", types.YChild{"GlobalInterfaceTable", &vrf.GlobalInterfaceTable})
    vrf.EntityData.Children.Append("ssm-map-details", types.YChild{"SsmMapDetails", &vrf.SsmMapDetails})
    vrf.EntityData.Children.Append("interface-state-offs", types.YChild{"InterfaceStateOffs", &vrf.InterfaceStateOffs})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_Summary
// IGMP Summary Information
type Igmp_Standby_Vrfs_Vrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Igmp_Standby_Vrfs_Vrf_Summary_Interface.
    Interface []*Igmp_Standby_Vrfs_Vrf_Summary_Interface
}

func (summary *Igmp_Standby_Vrfs_Vrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range summary.Interface {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.Interface[i]), types.YChild{"Interface", summary.Interface[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", summary.Robustness})
    summary.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", summary.GroupLimit})
    summary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", summary.GroupCount})
    summary.EntityData.Leafs.Append("is-disabled", types.YLeaf{"IsDisabled", summary.IsDisabled})
    summary.EntityData.Leafs.Append("supported-interfaces", types.YLeaf{"SupportedInterfaces", summary.SupportedInterfaces})
    summary.EntityData.Leafs.Append("unsupported-interfaces", types.YLeaf{"UnsupportedInterfaces", summary.UnsupportedInterfaces})
    summary.EntityData.Leafs.Append("enabled-interface-count", types.YLeaf{"EnabledInterfaceCount", summary.EnabledInterfaceCount})
    summary.EntityData.Leafs.Append("disabled-interface-count", types.YLeaf{"DisabledInterfaceCount", summary.DisabledInterfaceCount})
    summary.EntityData.Leafs.Append("tunnel-mte-config-count", types.YLeaf{"TunnelMteConfigCount", summary.TunnelMteConfigCount})
    summary.EntityData.Leafs.Append("node-low-memory", types.YLeaf{"NodeLowMemory", summary.NodeLowMemory})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Igmp_Standby_Vrfs_Vrf_Summary_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Igmp_Standby_Vrfs_Vrf_Summary_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "summary"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", self.GroupLimit})
    self.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", self.GroupCount})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("on-off", types.YLeaf{"OnOff", self.OnOff})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOns
// IGMP Interface state on
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOns struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []*Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns) GetEntityData() *types.CommonEntityData {
    interfaceStateOns.EntityData.YFilter = interfaceStateOns.YFilter
    interfaceStateOns.EntityData.YangName = "interface-state-ons"
    interfaceStateOns.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOns.EntityData.ParentYangName = "vrf"
    interfaceStateOns.EntityData.SegmentPath = "interface-state-ons"
    interfaceStateOns.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOns.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOns.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOns.EntityData.Children = types.NewOrderedMap()
    interfaceStateOns.EntityData.Children.Append("interface-state-on", types.YChild{"InterfaceStateOn", nil})
    for i := range interfaceStateOns.InterfaceStateOn {
        interfaceStateOns.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOns.InterfaceStateOn[i]), types.YChild{"InterfaceStateOn", interfaceStateOns.InterfaceStateOn[i]})
    }
    interfaceStateOns.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOns.EntityData.YListKeys = []string {}

    return &(interfaceStateOns.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetEntityData() *types.CommonEntityData {
    interfaceStateOn.EntityData.YFilter = interfaceStateOn.YFilter
    interfaceStateOn.EntityData.YangName = "interface-state-on"
    interfaceStateOn.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOn.EntityData.ParentYangName = "interface-state-ons"
    interfaceStateOn.EntityData.SegmentPath = "interface-state-on" + types.AddKeyToken(interfaceStateOn.InterfaceName, "interface-name")
    interfaceStateOn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOn.EntityData.Children = types.NewOrderedMap()
    interfaceStateOn.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOn.Address})
    interfaceStateOn.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOn.QuerierAddress})
    interfaceStateOn.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOn.SubscriberAddress})
    interfaceStateOn.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOn.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOn.InterfaceName})
    interfaceStateOn.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOn.InterfaceNameXr})
    interfaceStateOn.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOn.State})
    interfaceStateOn.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOn.PrefixLength})
    interfaceStateOn.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOn.IsInterfaceUp})
    interfaceStateOn.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOn.IsIpEnabled})
    interfaceStateOn.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOn.IsRouterEnabled})
    interfaceStateOn.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOn.IgmpVersion})
    interfaceStateOn.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOn.HostVersion})
    interfaceStateOn.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOn.QueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOn.QueryTimeout})
    interfaceStateOn.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOn.QueryMaximumResponseTime})
    interfaceStateOn.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOn.LastMemberQueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOn.GroupJoins})
    interfaceStateOn.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOn.GroupLeaves})
    interfaceStateOn.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOn.IsQuerier})
    interfaceStateOn.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOn.TotalActiveGroups})
    interfaceStateOn.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOn.Robustness})
    interfaceStateOn.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOn.ProxyInterface})
    interfaceStateOn.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOn.QuerierUptime})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOn.LasLlRegistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOn.LasGetAddressCount})
    interfaceStateOn.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOn.LasUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOn.LasLlRemoveUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOn.LasLlAddUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOn.LasNullUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOn.LasUnregistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOn.IsLasRequest})
    interfaceStateOn.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOn.IsLasRegistered})
    interfaceStateOn.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOn.VrfId})
    interfaceStateOn.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOn.MteVrfId})
    interfaceStateOn.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOn.Location})
    interfaceStateOn.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOn.Mtu})
    interfaceStateOn.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOn.VrfState})
    interfaceStateOn.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOn.IsConfigurationverify})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOn.ConfigurationvrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOn.ConfigurationvrfError})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOn.ConfigurationMcastVrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOn.ConfigurationMcastVrfError})
    interfaceStateOn.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOn.IsImStateRegistered})
    interfaceStateOn.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOn.IsSubscriber})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOn.SubscriberMode})
    interfaceStateOn.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOn.IsIdentityPresent})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOn.SubscriberId})
    interfaceStateOn.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOn.ParentIfhandle})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOn.TimeSinceLastQueryInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOn.TimeSinceLastReportInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOn.RouterUptimeInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOn.MteTupleCount})

    interfaceStateOn.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOn.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-on"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-on"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-on"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_DetailGroups
// IGMP Detail Group Database
type Igmp_Standby_Vrfs_Vrf_DetailGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup.
    DetailGroup []*Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup
}

func (detailGroups *Igmp_Standby_Vrfs_Vrf_DetailGroups) GetEntityData() *types.CommonEntityData {
    detailGroups.EntityData.YFilter = detailGroups.YFilter
    detailGroups.EntityData.YangName = "detail-groups"
    detailGroups.EntityData.BundleName = "cisco_ios_xr"
    detailGroups.EntityData.ParentYangName = "vrf"
    detailGroups.EntityData.SegmentPath = "detail-groups"
    detailGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroups.EntityData.Children = types.NewOrderedMap()
    detailGroups.EntityData.Children.Append("detail-group", types.YChild{"DetailGroup", nil})
    for i := range detailGroups.DetailGroup {
        detailGroups.EntityData.Children.Append(types.GetSegmentPath(detailGroups.DetailGroup[i]), types.YChild{"DetailGroup", detailGroups.DetailGroup[i]})
    }
    detailGroups.EntityData.Leafs = types.NewOrderedMap()

    detailGroups.EntityData.YListKeys = []string {}

    return &(detailGroups.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source.
    Source []*Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source
}

func (detailGroup *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup) GetEntityData() *types.CommonEntityData {
    detailGroup.EntityData.YFilter = detailGroup.YFilter
    detailGroup.EntityData.YangName = "detail-group"
    detailGroup.EntityData.BundleName = "cisco_ios_xr"
    detailGroup.EntityData.ParentYangName = "detail-groups"
    detailGroup.EntityData.SegmentPath = "detail-group"
    detailGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroup.EntityData.Children = types.NewOrderedMap()
    detailGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &detailGroup.GroupInfo})
    detailGroup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range detailGroup.Source {
        detailGroup.EntityData.Children.Append(types.GetSegmentPath(detailGroup.Source[i]), types.YChild{"Source", detailGroup.Source[i]})
    }
    detailGroup.EntityData.Leafs = types.NewOrderedMap()
    detailGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", detailGroup.GroupAddress})
    detailGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", detailGroup.InterfaceName})
    detailGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", detailGroup.SourceAddress})
    detailGroup.EntityData.Leafs.Append("is-router-exclude-mode", types.YLeaf{"IsRouterExcludeMode", detailGroup.IsRouterExcludeMode})
    detailGroup.EntityData.Leafs.Append("is-host-exclude-mode", types.YLeaf{"IsHostExcludeMode", detailGroup.IsHostExcludeMode})

    detailGroup.EntityData.YListKeys = []string {}

    return &(detailGroup.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "detail-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source
// List of sources
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "detail-group"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &source.SourceAddress})
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", source.Uptime})
    source.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", source.ExpirationTime})
    source.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", source.IsLocal})
    source.EntityData.Leafs.Append("is-remote", types.YLeaf{"IsRemote", source.IsRemote})
    source.EntityData.Leafs.Append("is-forward", types.YLeaf{"IsForward", source.IsForward})
    source.EntityData.Leafs.Append("is-we-report", types.YLeaf{"IsWeReport", source.IsWeReport})
    source.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", source.Flags})
    source.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", source.IsAdded})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "source"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_NonActiveGroups
// IGMP Non-Active Groups Information
type Igmp_Standby_Vrfs_Vrf_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []*Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "vrf"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", nil})
    for i := range nonActiveGroups.NonActiveGroups {
        nonActiveGroups.EntityData.Children.Append(types.GetSegmentPath(nonActiveGroups.NonActiveGroups[i]), types.YChild{"NonActiveGroups", nonActiveGroups.NonActiveGroups[i]})
    }
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "non-active-groups"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &nonActiveGroups.GroupAddress})
    nonActiveGroups.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &nonActiveGroups.SourceAddress})
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()
    nonActiveGroups.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", nonActiveGroups.Interface})
    nonActiveGroups.EntityData.Leafs.Append("reason-for-non-activity", types.YLeaf{"ReasonForNonActivity", nonActiveGroups.ReasonForNonActivity})

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "non-active-groups"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "non-active-groups"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_SsmMaps
// SSM Map Table
type Igmp_Standby_Vrfs_Vrf_SsmMaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap.
    SsmMap []*Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap
}

func (ssmMaps *Igmp_Standby_Vrfs_Vrf_SsmMaps) GetEntityData() *types.CommonEntityData {
    ssmMaps.EntityData.YFilter = ssmMaps.YFilter
    ssmMaps.EntityData.YangName = "ssm-maps"
    ssmMaps.EntityData.BundleName = "cisco_ios_xr"
    ssmMaps.EntityData.ParentYangName = "vrf"
    ssmMaps.EntityData.SegmentPath = "ssm-maps"
    ssmMaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMaps.EntityData.Children = types.NewOrderedMap()
    ssmMaps.EntityData.Children.Append("ssm-map", types.YChild{"SsmMap", nil})
    for i := range ssmMaps.SsmMap {
        ssmMaps.EntityData.Children.Append(types.GetSegmentPath(ssmMaps.SsmMap[i]), types.YChild{"SsmMap", ssmMaps.SsmMap[i]})
    }
    ssmMaps.EntityData.Leafs = types.NewOrderedMap()

    ssmMaps.EntityData.YListKeys = []string {}

    return &(ssmMaps.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap
// SSM Map information
type Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap) GetEntityData() *types.CommonEntityData {
    ssmMap.EntityData.YFilter = ssmMap.YFilter
    ssmMap.EntityData.YangName = "ssm-map"
    ssmMap.EntityData.BundleName = "cisco_ios_xr"
    ssmMap.EntityData.ParentYangName = "ssm-maps"
    ssmMap.EntityData.SegmentPath = "ssm-map"
    ssmMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMap.EntityData.Children = types.NewOrderedMap()
    ssmMap.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &ssmMap.GroupAddressXr})
    ssmMap.EntityData.Leafs = types.NewOrderedMap()
    ssmMap.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMap.SsmMapType})
    ssmMap.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMap.GroupAddress})
    ssmMap.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", ssmMap.MapType})
    ssmMap.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", ssmMap.SourceCounts})

    ssmMap.EntityData.YListKeys = []string {}

    return &(ssmMap.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "ssm-map"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups
// IGMP Explicit Group Database
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []*Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Igmp_Standby_Vrfs_Vrf_ExplicitGroups) GetEntityData() *types.CommonEntityData {
    explicitGroups.EntityData.YFilter = explicitGroups.YFilter
    explicitGroups.EntityData.YangName = "explicit-groups"
    explicitGroups.EntityData.BundleName = "cisco_ios_xr"
    explicitGroups.EntityData.ParentYangName = "vrf"
    explicitGroups.EntityData.SegmentPath = "explicit-groups"
    explicitGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroups.EntityData.Children = types.NewOrderedMap()
    explicitGroups.EntityData.Children.Append("explicit-group", types.YChild{"ExplicitGroup", nil})
    for i := range explicitGroups.ExplicitGroup {
        explicitGroups.EntityData.Children.Append(types.GetSegmentPath(explicitGroups.ExplicitGroup[i]), types.YChild{"ExplicitGroup", explicitGroups.ExplicitGroup[i]})
    }
    explicitGroups.EntityData.Leafs = types.NewOrderedMap()

    explicitGroups.EntityData.YListKeys = []string {}

    return &(explicitGroups.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host.
    Host []*Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetEntityData() *types.CommonEntityData {
    explicitGroup.EntityData.YFilter = explicitGroup.YFilter
    explicitGroup.EntityData.YangName = "explicit-group"
    explicitGroup.EntityData.BundleName = "cisco_ios_xr"
    explicitGroup.EntityData.ParentYangName = "explicit-groups"
    explicitGroup.EntityData.SegmentPath = "explicit-group"
    explicitGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroup.EntityData.Children = types.NewOrderedMap()
    explicitGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &explicitGroup.GroupInfo})
    explicitGroup.EntityData.Children.Append("host", types.YChild{"Host", nil})
    for i := range explicitGroup.Host {
        explicitGroup.EntityData.Children.Append(types.GetSegmentPath(explicitGroup.Host[i]), types.YChild{"Host", explicitGroup.Host[i]})
    }
    explicitGroup.EntityData.Leafs = types.NewOrderedMap()
    explicitGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", explicitGroup.GroupAddress})
    explicitGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", explicitGroup.InterfaceName})
    explicitGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", explicitGroup.SourceAddress})
    explicitGroup.EntityData.Leafs.Append("include-hosts", types.YLeaf{"IncludeHosts", explicitGroup.IncludeHosts})
    explicitGroup.EntityData.Leafs.Append("exclude-hosts", types.YLeaf{"ExcludeHosts", explicitGroup.ExcludeHosts})

    explicitGroup.EntityData.YListKeys = []string {}

    return &(explicitGroup.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "explicit-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []*Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetEntityData() *types.CommonEntityData {
    host.EntityData.YFilter = host.YFilter
    host.EntityData.YangName = "host"
    host.EntityData.BundleName = "cisco_ios_xr"
    host.EntityData.ParentYangName = "explicit-group"
    host.EntityData.SegmentPath = "host"
    host.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    host.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    host.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    host.EntityData.Children = types.NewOrderedMap()
    host.EntityData.Children.Append("address", types.YChild{"Address", &host.Address})
    host.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", nil})
    for i := range host.SourceAddress {
        host.EntityData.Children.Append(types.GetSegmentPath(host.SourceAddress[i]), types.YChild{"SourceAddress", host.SourceAddress[i]})
    }
    host.EntityData.Leafs = types.NewOrderedMap()
    host.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", host.Uptime})
    host.EntityData.Leafs.Append("is-exclude", types.YLeaf{"IsExclude", host.IsExclude})
    host.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", host.ExpirationTime})
    host.EntityData.Leafs.Append("source-count", types.YLeaf{"SourceCount", host.SourceCount})

    host.EntityData.YListKeys = []string {}

    return &(host.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "host"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "host"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceTable
// IGMP Interface specific Table
type Igmp_Standby_Vrfs_Vrf_InterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface.
    Interface []*Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface
}

func (interfaceTable *Igmp_Standby_Vrfs_Vrf_InterfaceTable) GetEntityData() *types.CommonEntityData {
    interfaceTable.EntityData.YFilter = interfaceTable.YFilter
    interfaceTable.EntityData.YangName = "interface-table"
    interfaceTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceTable.EntityData.ParentYangName = "vrf"
    interfaceTable.EntityData.SegmentPath = "interface-table"
    interfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceTable.EntityData.Children = types.NewOrderedMap()
    interfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceTable.Interface {
        interfaceTable.EntityData.Children.Append(types.GetSegmentPath(interfaceTable.Interface[i]), types.YChild{"Interface", interfaceTable.Interface[i]})
    }
    interfaceTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceTable.EntityData.YListKeys = []string {}

    return &(interfaceTable.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface
// IGMP Interface
type Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address
// IP address
type Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []*Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjusts.EntityData.YFilter = interfaceUnicastQosAdjusts.YFilter
    interfaceUnicastQosAdjusts.EntityData.YangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjusts.EntityData.ParentYangName = "vrf"
    interfaceUnicastQosAdjusts.EntityData.SegmentPath = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjusts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjusts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjusts.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjusts.EntityData.Children.Append("interface-unicast-qos-adjust", types.YChild{"InterfaceUnicastQosAdjust", nil})
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        interfaceUnicastQosAdjusts.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]), types.YChild{"InterfaceUnicastQosAdjust", interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]})
    }
    interfaceUnicastQosAdjusts.EntityData.Leafs = types.NewOrderedMap()

    interfaceUnicastQosAdjusts.EntityData.YListKeys = []string {}

    return &(interfaceUnicastQosAdjusts.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []*Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjust.EntityData.YFilter = interfaceUnicastQosAdjust.YFilter
    interfaceUnicastQosAdjust.EntityData.YangName = "interface-unicast-qos-adjust"
    interfaceUnicastQosAdjust.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjust.EntityData.ParentYangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjust.EntityData.SegmentPath = "interface-unicast-qos-adjust" + types.AddKeyToken(interfaceUnicastQosAdjust.InterfaceName, "interface-name")
    interfaceUnicastQosAdjust.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjust.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjust.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjust.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Children.Append("update", types.YChild{"Update", nil})
    for i := range interfaceUnicastQosAdjust.Update {
        interfaceUnicastQosAdjust.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjust.Update[i]), types.YChild{"Update", interfaceUnicastQosAdjust.Update[i]})
    }
    interfaceUnicastQosAdjust.EntityData.Leafs = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceUnicastQosAdjust.InterfaceName})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("is-virtual-access", types.YLeaf{"IsVirtualAccess", interfaceUnicastQosAdjust.IsVirtualAccess})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate", types.YLeaf{"Rate", interfaceUnicastQosAdjust.Rate})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-increments", types.YLeaf{"RateIncrements", interfaceUnicastQosAdjust.RateIncrements})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-decrements", types.YLeaf{"RateDecrements", interfaceUnicastQosAdjust.RateDecrements})

    interfaceUnicastQosAdjust.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceUnicastQosAdjust.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetEntityData() *types.CommonEntityData {
    update.EntityData.YFilter = update.YFilter
    update.EntityData.YangName = "update"
    update.EntityData.BundleName = "cisco_ios_xr"
    update.EntityData.ParentYangName = "interface-unicast-qos-adjust"
    update.EntityData.SegmentPath = "update"
    update.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    update.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    update.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    update.EntityData.Children = types.NewOrderedMap()
    update.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &update.SourceAddress})
    update.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &update.GroupAddress})
    update.EntityData.Leafs = types.NewOrderedMap()
    update.EntityData.Leafs.Append("is-add", types.YLeaf{"IsAdd", update.IsAdd})
    update.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", update.Weight})
    update.EntityData.Leafs.Append("received-time", types.YLeaf{"ReceivedTime", update.ReceivedTime})

    update.EntityData.YListKeys = []string {}

    return &(update.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "update"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Standby_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "update"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_Ranges
// Range table
type Igmp_Standby_Vrfs_Vrf_Ranges struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Range information. The type is slice of Igmp_Standby_Vrfs_Vrf_Ranges_Range.
    Range []*Igmp_Standby_Vrfs_Vrf_Ranges_Range
}

func (ranges *Igmp_Standby_Vrfs_Vrf_Ranges) GetEntityData() *types.CommonEntityData {
    ranges.EntityData.YFilter = ranges.YFilter
    ranges.EntityData.YangName = "ranges"
    ranges.EntityData.BundleName = "cisco_ios_xr"
    ranges.EntityData.ParentYangName = "vrf"
    ranges.EntityData.SegmentPath = "ranges"
    ranges.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ranges.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ranges.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ranges.EntityData.Children = types.NewOrderedMap()
    ranges.EntityData.Children.Append("range", types.YChild{"Range", nil})
    for i := range ranges.Range {
        ranges.EntityData.Children.Append(types.GetSegmentPath(ranges.Range[i]), types.YChild{"Range", ranges.Range[i]})
    }
    ranges.EntityData.Leafs = types.NewOrderedMap()

    ranges.EntityData.YListKeys = []string {}

    return &(ranges.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_Ranges_Range
// Range information
type Igmp_Standby_Vrfs_Vrf_Ranges_Range struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: 0..4294967295.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr
}

func (self *Igmp_Standby_Vrfs_Vrf_Ranges_Range) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "range"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "ranges"
    self.EntityData.SegmentPath = "range"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &self.GroupAddressXr})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", self.GroupAddress})
    self.EntityData.Leafs.Append("group-mask", types.YLeaf{"GroupMask", self.GroupMask})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", self.Protocol})
    self.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", self.IsStale})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr
// Group address
type Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "range"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaces
// IGMP Interface specific
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface.
    IfrsInterface []*Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces) GetEntityData() *types.CommonEntityData {
    ifrsInterfaces.EntityData.YFilter = ifrsInterfaces.YFilter
    ifrsInterfaces.EntityData.YangName = "ifrs-interfaces"
    ifrsInterfaces.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaces.EntityData.ParentYangName = "vrf"
    ifrsInterfaces.EntityData.SegmentPath = "ifrs-interfaces"
    ifrsInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaces.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaces.EntityData.Children.Append("ifrs-interface", types.YChild{"IfrsInterface", nil})
    for i := range ifrsInterfaces.IfrsInterface {
        ifrsInterfaces.EntityData.Children.Append(types.GetSegmentPath(ifrsInterfaces.IfrsInterface[i]), types.YChild{"IfrsInterface", ifrsInterfaces.IfrsInterface[i]})
    }
    ifrsInterfaces.EntityData.Leafs = types.NewOrderedMap()

    ifrsInterfaces.EntityData.YListKeys = []string {}

    return &(ifrsInterfaces.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetEntityData() *types.CommonEntityData {
    ifrsInterface.EntityData.YFilter = ifrsInterface.YFilter
    ifrsInterface.EntityData.YangName = "ifrs-interface"
    ifrsInterface.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterface.EntityData.ParentYangName = "ifrs-interfaces"
    ifrsInterface.EntityData.SegmentPath = "ifrs-interface" + types.AddKeyToken(ifrsInterface.InterfaceName, "interface-name")
    ifrsInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterface.EntityData.Children = types.NewOrderedMap()
    ifrsInterface.EntityData.Children.Append("igmp-interface-entry", types.YChild{"IgmpInterfaceEntry", &ifrsInterface.IgmpInterfaceEntry})
    ifrsInterface.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ifrsInterface.InterfaceName})
    ifrsInterface.EntityData.Leafs.Append("join-group-count", types.YLeaf{"JoinGroupCount", ifrsInterface.JoinGroupCount})

    ifrsInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(ifrsInterface.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetEntityData() *types.CommonEntityData {
    igmpInterfaceEntry.EntityData.YFilter = igmpInterfaceEntry.YFilter
    igmpInterfaceEntry.EntityData.YangName = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.BundleName = "cisco_ios_xr"
    igmpInterfaceEntry.EntityData.ParentYangName = "ifrs-interface"
    igmpInterfaceEntry.EntityData.SegmentPath = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igmpInterfaceEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igmpInterfaceEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igmpInterfaceEntry.EntityData.Children = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Children.Append("address", types.YChild{"Address", &igmpInterfaceEntry.Address})
    igmpInterfaceEntry.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &igmpInterfaceEntry.QuerierAddress})
    igmpInterfaceEntry.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &igmpInterfaceEntry.SubscriberAddress})
    igmpInterfaceEntry.EntityData.Leafs = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", igmpInterfaceEntry.InterfaceNameXr})
    igmpInterfaceEntry.EntityData.Leafs.Append("state", types.YLeaf{"State", igmpInterfaceEntry.State})
    igmpInterfaceEntry.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", igmpInterfaceEntry.PrefixLength})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", igmpInterfaceEntry.IsInterfaceUp})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", igmpInterfaceEntry.IsIpEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", igmpInterfaceEntry.IsRouterEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", igmpInterfaceEntry.IgmpVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", igmpInterfaceEntry.HostVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", igmpInterfaceEntry.QueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", igmpInterfaceEntry.QueryTimeout})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", igmpInterfaceEntry.QueryMaximumResponseTime})
    igmpInterfaceEntry.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", igmpInterfaceEntry.LastMemberQueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", igmpInterfaceEntry.GroupJoins})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", igmpInterfaceEntry.GroupLeaves})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", igmpInterfaceEntry.IsQuerier})
    igmpInterfaceEntry.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", igmpInterfaceEntry.TotalActiveGroups})
    igmpInterfaceEntry.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", igmpInterfaceEntry.Robustness})
    igmpInterfaceEntry.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", igmpInterfaceEntry.ProxyInterface})
    igmpInterfaceEntry.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", igmpInterfaceEntry.QuerierUptime})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", igmpInterfaceEntry.LasLlRegistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", igmpInterfaceEntry.LasGetAddressCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", igmpInterfaceEntry.LasUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", igmpInterfaceEntry.LasLlRemoveUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", igmpInterfaceEntry.LasLlAddUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", igmpInterfaceEntry.LasNullUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", igmpInterfaceEntry.LasUnregistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", igmpInterfaceEntry.IsLasRequest})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", igmpInterfaceEntry.IsLasRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", igmpInterfaceEntry.VrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", igmpInterfaceEntry.MteVrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("location", types.YLeaf{"Location", igmpInterfaceEntry.Location})
    igmpInterfaceEntry.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", igmpInterfaceEntry.Mtu})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", igmpInterfaceEntry.VrfState})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", igmpInterfaceEntry.IsConfigurationverify})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", igmpInterfaceEntry.ConfigurationvrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", igmpInterfaceEntry.ConfigurationvrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", igmpInterfaceEntry.ConfigurationMcastVrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", igmpInterfaceEntry.ConfigurationMcastVrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", igmpInterfaceEntry.IsImStateRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", igmpInterfaceEntry.IsSubscriber})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", igmpInterfaceEntry.SubscriberMode})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", igmpInterfaceEntry.IsIdentityPresent})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", igmpInterfaceEntry.SubscriberId})
    igmpInterfaceEntry.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", igmpInterfaceEntry.ParentIfhandle})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", igmpInterfaceEntry.TimeSinceLastQueryInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", igmpInterfaceEntry.TimeSinceLastReportInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", igmpInterfaceEntry.RouterUptimeInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", igmpInterfaceEntry.MteTupleCount})

    igmpInterfaceEntry.EntityData.YListKeys = []string {}

    return &(igmpInterfaceEntry.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "igmp-interface-entry"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "igmp-interface-entry"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "igmp-interface-entry"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_TrafficCounters
// IGMP Message Traffic Counters
type Igmp_Standby_Vrfs_Vrf_TrafficCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Igmp_Standby_Vrfs_Vrf_TrafficCounters) GetEntityData() *types.CommonEntityData {
    trafficCounters.EntityData.YFilter = trafficCounters.YFilter
    trafficCounters.EntityData.YangName = "traffic-counters"
    trafficCounters.EntityData.BundleName = "cisco_ios_xr"
    trafficCounters.EntityData.ParentYangName = "vrf"
    trafficCounters.EntityData.SegmentPath = "traffic-counters"
    trafficCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficCounters.EntityData.Children = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", trafficCounters.ElapsedTime})
    trafficCounters.EntityData.Leafs.Append("packets-in", types.YLeaf{"PacketsIn", trafficCounters.PacketsIn})
    trafficCounters.EntityData.Leafs.Append("packets-out", types.YLeaf{"PacketsOut", trafficCounters.PacketsOut})
    trafficCounters.EntityData.Leafs.Append("format-errors", types.YLeaf{"FormatErrors", trafficCounters.FormatErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-input-errors", types.YLeaf{"PacketManagerInputErrors", trafficCounters.PacketManagerInputErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-output-errors", types.YLeaf{"PacketManagerOutputErrors", trafficCounters.PacketManagerOutputErrors})
    trafficCounters.EntityData.Leafs.Append("checksum-errors", types.YLeaf{"ChecksumErrors", trafficCounters.ChecksumErrors})
    trafficCounters.EntityData.Leafs.Append("receive-socket-errors", types.YLeaf{"ReceiveSocketErrors", trafficCounters.ReceiveSocketErrors})
    trafficCounters.EntityData.Leafs.Append("socket-errors", types.YLeaf{"SocketErrors", trafficCounters.SocketErrors})
    trafficCounters.EntityData.Leafs.Append("bad-scope-errors", types.YLeaf{"BadScopeErrors", trafficCounters.BadScopeErrors})
    trafficCounters.EntityData.Leafs.Append("auxillary-data-length-errors", types.YLeaf{"AuxillaryDataLengthErrors", trafficCounters.AuxillaryDataLengthErrors})
    trafficCounters.EntityData.Leafs.Append("invalid-source-address-errors", types.YLeaf{"InvalidSourceAddressErrors", trafficCounters.InvalidSourceAddressErrors})
    trafficCounters.EntityData.Leafs.Append("no-socket-connection", types.YLeaf{"NoSocketConnection", trafficCounters.NoSocketConnection})
    trafficCounters.EntityData.Leafs.Append("miscellaneous-errors", types.YLeaf{"MiscellaneousErrors", trafficCounters.MiscellaneousErrors})
    trafficCounters.EntityData.Leafs.Append("input-queries", types.YLeaf{"InputQueries", trafficCounters.InputQueries})
    trafficCounters.EntityData.Leafs.Append("input-reports", types.YLeaf{"InputReports", trafficCounters.InputReports})
    trafficCounters.EntityData.Leafs.Append("input-leaves", types.YLeaf{"InputLeaves", trafficCounters.InputLeaves})
    trafficCounters.EntityData.Leafs.Append("input-mtrace", types.YLeaf{"InputMtrace", trafficCounters.InputMtrace})
    trafficCounters.EntityData.Leafs.Append("input-dvmrp", types.YLeaf{"InputDvmrp", trafficCounters.InputDvmrp})
    trafficCounters.EntityData.Leafs.Append("input-pim", types.YLeaf{"InputPim", trafficCounters.InputPim})
    trafficCounters.EntityData.Leafs.Append("output-queries", types.YLeaf{"OutputQueries", trafficCounters.OutputQueries})
    trafficCounters.EntityData.Leafs.Append("output-reports", types.YLeaf{"OutputReports", trafficCounters.OutputReports})
    trafficCounters.EntityData.Leafs.Append("output-leaves", types.YLeaf{"OutputLeaves", trafficCounters.OutputLeaves})
    trafficCounters.EntityData.Leafs.Append("output-mtrace", types.YLeaf{"OutputMtrace", trafficCounters.OutputMtrace})
    trafficCounters.EntityData.Leafs.Append("output-dvmrp", types.YLeaf{"OutputDvmrp", trafficCounters.OutputDvmrp})
    trafficCounters.EntityData.Leafs.Append("output-pim", types.YLeaf{"OutputPim", trafficCounters.OutputPim})
    trafficCounters.EntityData.Leafs.Append("get-packet-failure", types.YLeaf{"GetPacketFailure", trafficCounters.GetPacketFailure})
    trafficCounters.EntityData.Leafs.Append("output-no-parent-interface-handle", types.YLeaf{"OutputNoParentInterfaceHandle", trafficCounters.OutputNoParentInterfaceHandle})
    trafficCounters.EntityData.Leafs.Append("input-no-idb", types.YLeaf{"InputNoIdb", trafficCounters.InputNoIdb})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-in-idb", types.YLeaf{"InputNoVrfInIdb", trafficCounters.InputNoVrfInIdb})
    trafficCounters.EntityData.Leafs.Append("input-disabled-idb", types.YLeaf{"InputDisabledIdb", trafficCounters.InputDisabledIdb})
    trafficCounters.EntityData.Leafs.Append("input-martian-address", types.YLeaf{"InputMartianAddress", trafficCounters.InputMartianAddress})
    trafficCounters.EntityData.Leafs.Append("input-no-assigned-vrf-id", types.YLeaf{"InputNoAssignedVrfId", trafficCounters.InputNoAssignedVrfId})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-mtrace", types.YLeaf{"InputNoVrfMtrace", trafficCounters.InputNoVrfMtrace})
    trafficCounters.EntityData.Leafs.Append("input-no-platform-support-mtrace", types.YLeaf{"InputNoPlatformSupportMtrace", trafficCounters.InputNoPlatformSupportMtrace})

    trafficCounters.EntityData.YListKeys = []string {}

    return &(trafficCounters.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_Groups
// IGMP Group Database Table
type Igmp_Standby_Vrfs_Vrf_Groups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_Groups_Group.
    Group []*Igmp_Standby_Vrfs_Vrf_Groups_Group
}

func (groups *Igmp_Standby_Vrfs_Vrf_Groups) GetEntityData() *types.CommonEntityData {
    groups.EntityData.YFilter = groups.YFilter
    groups.EntityData.YangName = "groups"
    groups.EntityData.BundleName = "cisco_ios_xr"
    groups.EntityData.ParentYangName = "vrf"
    groups.EntityData.SegmentPath = "groups"
    groups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groups.EntityData.Children = types.NewOrderedMap()
    groups.EntityData.Children.Append("group", types.YChild{"Group", nil})
    for i := range groups.Group {
        groups.EntityData.Children.Append(types.GetSegmentPath(groups.Group[i]), types.YChild{"Group", groups.Group[i]})
    }
    groups.EntityData.Leafs = types.NewOrderedMap()

    groups.EntityData.YListKeys = []string {}

    return &(groups.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_Groups_Group
// IGMP Group Entry Information
type Igmp_Standby_Vrfs_Vrf_Groups_Group struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress
}

func (group *Igmp_Standby_Vrfs_Vrf_Groups_Group) GetEntityData() *types.CommonEntityData {
    group.EntityData.YFilter = group.YFilter
    group.EntityData.YangName = "group"
    group.EntityData.BundleName = "cisco_ios_xr"
    group.EntityData.ParentYangName = "groups"
    group.EntityData.SegmentPath = "group"
    group.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    group.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    group.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    group.EntityData.Children = types.NewOrderedMap()
    group.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &group.GroupAddressXr})
    group.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &group.LastReporter})
    group.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &group.SourceAddress})
    group.EntityData.Leafs = types.NewOrderedMap()
    group.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", group.GroupAddress})
    group.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", group.InterfaceName})
    group.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", group.InterfaceNameXr})
    group.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", group.Uptime})
    group.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", group.ExpirationTime})
    group.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", group.ExplicitTrackingEnabled})
    group.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", group.IsSelfJoin})
    group.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", group.RowStatus})
    group.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", group.IsLowMemory})
    group.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", group.RouterFilterMode})
    group.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", group.OlderHostVersion1Timer})
    group.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", group.OlderHostVersion2Timer})
    group.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", group.IsAdded})
    group.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", group.IsSuppressed})

    group.EntityData.YListKeys = []string {}

    return &(group.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr
// Group Address
type Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter
// Last reporter address
type Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Standby_Vrfs_Vrf_Groups_Group_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress
// Source Address
type Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_Vrfs_Vrf_Groups_Group_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_GroupSummary
// IGMP Groups Summary
type Igmp_Standby_Vrfs_Vrf_GroupSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Igmp_Standby_Vrfs_Vrf_GroupSummary) GetEntityData() *types.CommonEntityData {
    groupSummary.EntityData.YFilter = groupSummary.YFilter
    groupSummary.EntityData.YangName = "group-summary"
    groupSummary.EntityData.BundleName = "cisco_ios_xr"
    groupSummary.EntityData.ParentYangName = "vrf"
    groupSummary.EntityData.SegmentPath = "group-summary"
    groupSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupSummary.EntityData.Children = types.NewOrderedMap()
    groupSummary.EntityData.Leafs = types.NewOrderedMap()
    groupSummary.EntityData.Leafs.Append("groutes", types.YLeaf{"Groutes", groupSummary.Groutes})
    groupSummary.EntityData.Leafs.Append("sg-routes", types.YLeaf{"SgRoutes", groupSummary.SgRoutes})
    groupSummary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", groupSummary.GroupCount})
    groupSummary.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupSummary.IsLowMemory})

    groupSummary.EntityData.YListKeys = []string {}

    return &(groupSummary.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Igmp_Standby_Vrfs_Vrf_IfrsInterfaceSummary) GetEntityData() *types.CommonEntityData {
    ifrsInterfaceSummary.EntityData.YFilter = ifrsInterfaceSummary.YFilter
    ifrsInterfaceSummary.EntityData.YangName = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaceSummary.EntityData.ParentYangName = "vrf"
    ifrsInterfaceSummary.EntityData.SegmentPath = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaceSummary.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs.Append("interface-count", types.YLeaf{"InterfaceCount", ifrsInterfaceSummary.InterfaceCount})
    ifrsInterfaceSummary.EntityData.Leafs.Append("configuration-count", types.YLeaf{"ConfigurationCount", ifrsInterfaceSummary.ConfigurationCount})

    ifrsInterfaceSummary.EntityData.YListKeys = []string {}

    return &(ifrsInterfaceSummary.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable
// IGMP Global Interface 
type Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface.
    Interface []*Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable) GetEntityData() *types.CommonEntityData {
    globalInterfaceTable.EntityData.YFilter = globalInterfaceTable.YFilter
    globalInterfaceTable.EntityData.YangName = "global-interface-table"
    globalInterfaceTable.EntityData.BundleName = "cisco_ios_xr"
    globalInterfaceTable.EntityData.ParentYangName = "vrf"
    globalInterfaceTable.EntityData.SegmentPath = "global-interface-table"
    globalInterfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalInterfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalInterfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalInterfaceTable.EntityData.Children = types.NewOrderedMap()
    globalInterfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range globalInterfaceTable.Interface {
        globalInterfaceTable.EntityData.Children.Append(types.GetSegmentPath(globalInterfaceTable.Interface[i]), types.YChild{"Interface", globalInterfaceTable.Interface[i]})
    }
    globalInterfaceTable.EntityData.Leafs = types.NewOrderedMap()

    globalInterfaceTable.EntityData.YListKeys = []string {}

    return &(globalInterfaceTable.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface
// IGMP Interface
type Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "global-interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address
// IP address
type Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_SsmMapDetails
// SSM Map Detail
type Igmp_Standby_Vrfs_Vrf_SsmMapDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []*Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Igmp_Standby_Vrfs_Vrf_SsmMapDetails) GetEntityData() *types.CommonEntityData {
    ssmMapDetails.EntityData.YFilter = ssmMapDetails.YFilter
    ssmMapDetails.EntityData.YangName = "ssm-map-details"
    ssmMapDetails.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetails.EntityData.ParentYangName = "vrf"
    ssmMapDetails.EntityData.SegmentPath = "ssm-map-details"
    ssmMapDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetails.EntityData.Children = types.NewOrderedMap()
    ssmMapDetails.EntityData.Children.Append("ssm-map-detail", types.YChild{"SsmMapDetail", nil})
    for i := range ssmMapDetails.SsmMapDetail {
        ssmMapDetails.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetails.SsmMapDetail[i]), types.YChild{"SsmMapDetail", ssmMapDetails.SsmMapDetail[i]})
    }
    ssmMapDetails.EntityData.Leafs = types.NewOrderedMap()

    ssmMapDetails.EntityData.YListKeys = []string {}

    return &(ssmMapDetails.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources.
    Sources []*Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetEntityData() *types.CommonEntityData {
    ssmMapDetail.EntityData.YFilter = ssmMapDetail.YFilter
    ssmMapDetail.EntityData.YangName = "ssm-map-detail"
    ssmMapDetail.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetail.EntityData.ParentYangName = "ssm-map-details"
    ssmMapDetail.EntityData.SegmentPath = "ssm-map-detail"
    ssmMapDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetail.EntityData.Children = types.NewOrderedMap()
    ssmMapDetail.EntityData.Children.Append("map-info", types.YChild{"MapInfo", &ssmMapDetail.MapInfo})
    ssmMapDetail.EntityData.Children.Append("sources", types.YChild{"Sources", nil})
    for i := range ssmMapDetail.Sources {
        ssmMapDetail.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetail.Sources[i]), types.YChild{"Sources", ssmMapDetail.Sources[i]})
    }
    ssmMapDetail.EntityData.Leafs = types.NewOrderedMap()
    ssmMapDetail.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMapDetail.SsmMapType})
    ssmMapDetail.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMapDetail.GroupAddress})
    ssmMapDetail.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", ssmMapDetail.ExpirationTime})
    ssmMapDetail.EntityData.Leafs.Append("response-pending", types.YLeaf{"ResponsePending", ssmMapDetail.ResponsePending})
    ssmMapDetail.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", ssmMapDetail.QueryInterval})
    ssmMapDetail.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", ssmMapDetail.ElapsedTime})

    ssmMapDetail.EntityData.YListKeys = []string {}

    return &(ssmMapDetail.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetEntityData() *types.CommonEntityData {
    mapInfo.EntityData.YFilter = mapInfo.YFilter
    mapInfo.EntityData.YangName = "map-info"
    mapInfo.EntityData.BundleName = "cisco_ios_xr"
    mapInfo.EntityData.ParentYangName = "ssm-map-detail"
    mapInfo.EntityData.SegmentPath = "map-info"
    mapInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mapInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mapInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mapInfo.EntityData.Children = types.NewOrderedMap()
    mapInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &mapInfo.GroupAddressXr})
    mapInfo.EntityData.Leafs = types.NewOrderedMap()
    mapInfo.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", mapInfo.MapType})
    mapInfo.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", mapInfo.SourceCounts})

    mapInfo.EntityData.YListKeys = []string {}

    return &(mapInfo.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "map-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Igmp_Standby_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetEntityData() *types.CommonEntityData {
    sources.EntityData.YFilter = sources.YFilter
    sources.EntityData.YangName = "sources"
    sources.EntityData.BundleName = "cisco_ios_xr"
    sources.EntityData.ParentYangName = "ssm-map-detail"
    sources.EntityData.SegmentPath = "sources"
    sources.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sources.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sources.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sources.EntityData.Children = types.NewOrderedMap()
    sources.EntityData.Leafs = types.NewOrderedMap()
    sources.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sources.AfName})
    sources.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sources.Ipv4Address})
    sources.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sources.Ipv6Address})

    sources.EntityData.YListKeys = []string {}

    return &(sources.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs
// IGMP Interface state off
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []*Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs) GetEntityData() *types.CommonEntityData {
    interfaceStateOffs.EntityData.YFilter = interfaceStateOffs.YFilter
    interfaceStateOffs.EntityData.YangName = "interface-state-offs"
    interfaceStateOffs.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOffs.EntityData.ParentYangName = "vrf"
    interfaceStateOffs.EntityData.SegmentPath = "interface-state-offs"
    interfaceStateOffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOffs.EntityData.Children = types.NewOrderedMap()
    interfaceStateOffs.EntityData.Children.Append("interface-state-off", types.YChild{"InterfaceStateOff", nil})
    for i := range interfaceStateOffs.InterfaceStateOff {
        interfaceStateOffs.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOffs.InterfaceStateOff[i]), types.YChild{"InterfaceStateOff", interfaceStateOffs.InterfaceStateOff[i]})
    }
    interfaceStateOffs.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOffs.EntityData.YListKeys = []string {}

    return &(interfaceStateOffs.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetEntityData() *types.CommonEntityData {
    interfaceStateOff.EntityData.YFilter = interfaceStateOff.YFilter
    interfaceStateOff.EntityData.YangName = "interface-state-off"
    interfaceStateOff.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOff.EntityData.ParentYangName = "interface-state-offs"
    interfaceStateOff.EntityData.SegmentPath = "interface-state-off" + types.AddKeyToken(interfaceStateOff.InterfaceName, "interface-name")
    interfaceStateOff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOff.EntityData.Children = types.NewOrderedMap()
    interfaceStateOff.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOff.Address})
    interfaceStateOff.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOff.QuerierAddress})
    interfaceStateOff.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOff.SubscriberAddress})
    interfaceStateOff.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOff.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOff.InterfaceName})
    interfaceStateOff.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOff.InterfaceNameXr})
    interfaceStateOff.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOff.State})
    interfaceStateOff.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOff.PrefixLength})
    interfaceStateOff.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOff.IsInterfaceUp})
    interfaceStateOff.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOff.IsIpEnabled})
    interfaceStateOff.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOff.IsRouterEnabled})
    interfaceStateOff.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOff.IgmpVersion})
    interfaceStateOff.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOff.HostVersion})
    interfaceStateOff.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOff.QueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOff.QueryTimeout})
    interfaceStateOff.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOff.QueryMaximumResponseTime})
    interfaceStateOff.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOff.LastMemberQueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOff.GroupJoins})
    interfaceStateOff.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOff.GroupLeaves})
    interfaceStateOff.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOff.IsQuerier})
    interfaceStateOff.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOff.TotalActiveGroups})
    interfaceStateOff.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOff.Robustness})
    interfaceStateOff.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOff.ProxyInterface})
    interfaceStateOff.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOff.QuerierUptime})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOff.LasLlRegistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOff.LasGetAddressCount})
    interfaceStateOff.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOff.LasUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOff.LasLlRemoveUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOff.LasLlAddUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOff.LasNullUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOff.LasUnregistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOff.IsLasRequest})
    interfaceStateOff.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOff.IsLasRegistered})
    interfaceStateOff.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOff.VrfId})
    interfaceStateOff.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOff.MteVrfId})
    interfaceStateOff.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOff.Location})
    interfaceStateOff.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOff.Mtu})
    interfaceStateOff.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOff.VrfState})
    interfaceStateOff.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOff.IsConfigurationverify})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOff.ConfigurationvrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOff.ConfigurationvrfError})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOff.ConfigurationMcastVrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOff.ConfigurationMcastVrfError})
    interfaceStateOff.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOff.IsImStateRegistered})
    interfaceStateOff.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOff.IsSubscriber})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOff.SubscriberMode})
    interfaceStateOff.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOff.IsIdentityPresent})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOff.SubscriberId})
    interfaceStateOff.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOff.ParentIfhandle})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOff.TimeSinceLastQueryInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOff.TimeSinceLastReportInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOff.RouterUptimeInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOff.MteTupleCount})

    interfaceStateOff.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOff.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-off"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-off"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-off"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Standby_Process
// Process
type Igmp_Standby_Process struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MRIB RouteDB Expiry Information.
    AmtSummary Igmp_Standby_Process_AmtSummary

    // NSR Information.
    Nsr Igmp_Standby_Process_Nsr

    // Table containing AMT Gateway DataBase information.
    AmtGatewaies Igmp_Standby_Process_AmtGatewaies

    // IGMP Unicast-Qos-Adjust Statistics.
    UnicastQosAdjustStats Igmp_Standby_Process_UnicastQosAdjustStats

    // IGMP BVI Stats.
    BviStatistics Igmp_Standby_Process_BviStatistics

    // NSF Information.
    Nsf Igmp_Standby_Process_Nsf
}

func (process *Igmp_Standby_Process) GetEntityData() *types.CommonEntityData {
    process.EntityData.YFilter = process.YFilter
    process.EntityData.YangName = "process"
    process.EntityData.BundleName = "cisco_ios_xr"
    process.EntityData.ParentYangName = "standby"
    process.EntityData.SegmentPath = "process"
    process.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    process.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    process.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    process.EntityData.Children = types.NewOrderedMap()
    process.EntityData.Children.Append("amt-summary", types.YChild{"AmtSummary", &process.AmtSummary})
    process.EntityData.Children.Append("nsr", types.YChild{"Nsr", &process.Nsr})
    process.EntityData.Children.Append("amt-gatewaies", types.YChild{"AmtGatewaies", &process.AmtGatewaies})
    process.EntityData.Children.Append("unicast-qos-adjust-stats", types.YChild{"UnicastQosAdjustStats", &process.UnicastQosAdjustStats})
    process.EntityData.Children.Append("bvi-statistics", types.YChild{"BviStatistics", &process.BviStatistics})
    process.EntityData.Children.Append("nsf", types.YChild{"Nsf", &process.Nsf})
    process.EntityData.Leafs = types.NewOrderedMap()

    process.EntityData.YListKeys = []string {}

    return &(process.EntityData)
}

// Igmp_Standby_Process_AmtSummary
// MRIB RouteDB Expiry Information
type Igmp_Standby_Process_AmtSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Robustness variable. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AnycastPrefix interface{}

    // Advertize AMT prefix length. The type is interface{} with range:
    // 0..4294967295.
    PrefixLength interface{}

    // Advertaisment for AMT Relay address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RelayAddress interface{}

    // AMT Tunnel MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Type Of Service value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Tos interface{}

    // Time To Live value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Ttl interface{}

    // AMT Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Number of AMT Gateway. The type is interface{} with range: 0..4294967295.
    GatewayCount interface{}

    // Maximum Gateway allowed. The type is interface{} with range: 0..4294967295.
    MaxGateway interface{}

    // AMT Tunnel Count. The type is interface{} with range: 0..4294967295.
    TunnelCount interface{}

    // AMT Tunnel configured Maximum. The type is interface{} with range:
    // 0..4294967295.
    TunnelConfiguredMaximum interface{}

    // ACL configured under AMT. The type is bool.
    IsAclConfigured interface{}

    // AMT Gateway Simulation. The type is bool.
    IsGatewaySimulation interface{}

    // AMT Out Of Resource. The type is bool.
    IsOuOfResource interface{}
}

func (amtSummary *Igmp_Standby_Process_AmtSummary) GetEntityData() *types.CommonEntityData {
    amtSummary.EntityData.YFilter = amtSummary.YFilter
    amtSummary.EntityData.YangName = "amt-summary"
    amtSummary.EntityData.BundleName = "cisco_ios_xr"
    amtSummary.EntityData.ParentYangName = "process"
    amtSummary.EntityData.SegmentPath = "amt-summary"
    amtSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    amtSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    amtSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    amtSummary.EntityData.Children = types.NewOrderedMap()
    amtSummary.EntityData.Leafs = types.NewOrderedMap()
    amtSummary.EntityData.Leafs.Append("anycast-prefix", types.YLeaf{"AnycastPrefix", amtSummary.AnycastPrefix})
    amtSummary.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", amtSummary.PrefixLength})
    amtSummary.EntityData.Leafs.Append("relay-address", types.YLeaf{"RelayAddress", amtSummary.RelayAddress})
    amtSummary.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", amtSummary.Mtu})
    amtSummary.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", amtSummary.Tos})
    amtSummary.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", amtSummary.Ttl})
    amtSummary.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", amtSummary.QueryInterval})
    amtSummary.EntityData.Leafs.Append("gateway-count", types.YLeaf{"GatewayCount", amtSummary.GatewayCount})
    amtSummary.EntityData.Leafs.Append("max-gateway", types.YLeaf{"MaxGateway", amtSummary.MaxGateway})
    amtSummary.EntityData.Leafs.Append("tunnel-count", types.YLeaf{"TunnelCount", amtSummary.TunnelCount})
    amtSummary.EntityData.Leafs.Append("tunnel-configured-maximum", types.YLeaf{"TunnelConfiguredMaximum", amtSummary.TunnelConfiguredMaximum})
    amtSummary.EntityData.Leafs.Append("is-acl-configured", types.YLeaf{"IsAclConfigured", amtSummary.IsAclConfigured})
    amtSummary.EntityData.Leafs.Append("is-gateway-simulation", types.YLeaf{"IsGatewaySimulation", amtSummary.IsGatewaySimulation})
    amtSummary.EntityData.Leafs.Append("is-ou-of-resource", types.YLeaf{"IsOuOfResource", amtSummary.IsOuOfResource})

    amtSummary.EntityData.YListKeys = []string {}

    return &(amtSummary.EntityData)
}

// Igmp_Standby_Process_Nsr
// NSR Information
type Igmp_Standby_Process_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NSR state. The type is interface{} with range: 0..255.
    State interface{}

    // Partner process connected. The type is bool.
    PartnerProcConnected interface{}

    // Collaborators convergence done. The type is bool.
    CollabConvDone interface{}

    // RMF Notification done. The type is bool.
    RmfNotificationDone interface{}

    // Time when process came up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProc interface{}

    // Time when process connection went up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionUp interface{}

    // Time when process connection went down. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionDn interface{}

    // Time when RMF Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfReady interface{}

    // Time when RMF Not-Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfNotReady interface{}

    // No. of times process connection went up. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionUp interface{}

    // No. of times process connection went down. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionDn interface{}

    // No. of times RMF Ready notif was sent. The type is interface{} with range:
    // 0..4294967295.
    CountRmfReady interface{}

    // No. of times RMF Not Ready notif was sent. The type is interface{} with
    // range: 0..4294967295.
    CountRmfNotReady interface{}
}

func (nsr *Igmp_Standby_Process_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "process"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Leafs = types.NewOrderedMap()
    nsr.EntityData.Leafs.Append("state", types.YLeaf{"State", nsr.State})
    nsr.EntityData.Leafs.Append("partner-proc-connected", types.YLeaf{"PartnerProcConnected", nsr.PartnerProcConnected})
    nsr.EntityData.Leafs.Append("collab-conv-done", types.YLeaf{"CollabConvDone", nsr.CollabConvDone})
    nsr.EntityData.Leafs.Append("rmf-notification-done", types.YLeaf{"RmfNotificationDone", nsr.RmfNotificationDone})
    nsr.EntityData.Leafs.Append("last-proc", types.YLeaf{"LastProc", nsr.LastProc})
    nsr.EntityData.Leafs.Append("last-proc-connection-up", types.YLeaf{"LastProcConnectionUp", nsr.LastProcConnectionUp})
    nsr.EntityData.Leafs.Append("last-proc-connection-dn", types.YLeaf{"LastProcConnectionDn", nsr.LastProcConnectionDn})
    nsr.EntityData.Leafs.Append("last-rmf-ready", types.YLeaf{"LastRmfReady", nsr.LastRmfReady})
    nsr.EntityData.Leafs.Append("last-rmf-not-ready", types.YLeaf{"LastRmfNotReady", nsr.LastRmfNotReady})
    nsr.EntityData.Leafs.Append("count-proc-connection-up", types.YLeaf{"CountProcConnectionUp", nsr.CountProcConnectionUp})
    nsr.EntityData.Leafs.Append("count-proc-connection-dn", types.YLeaf{"CountProcConnectionDn", nsr.CountProcConnectionDn})
    nsr.EntityData.Leafs.Append("count-rmf-ready", types.YLeaf{"CountRmfReady", nsr.CountRmfReady})
    nsr.EntityData.Leafs.Append("count-rmf-not-ready", types.YLeaf{"CountRmfNotReady", nsr.CountRmfNotReady})

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// Igmp_Standby_Process_AmtGatewaies
// Table containing AMT Gateway DataBase
// information
type Igmp_Standby_Process_AmtGatewaies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AMT Gateway DataBase information. The type is slice of
    // Igmp_Standby_Process_AmtGatewaies_AmtGateway.
    AmtGateway []*Igmp_Standby_Process_AmtGatewaies_AmtGateway
}

func (amtGatewaies *Igmp_Standby_Process_AmtGatewaies) GetEntityData() *types.CommonEntityData {
    amtGatewaies.EntityData.YFilter = amtGatewaies.YFilter
    amtGatewaies.EntityData.YangName = "amt-gatewaies"
    amtGatewaies.EntityData.BundleName = "cisco_ios_xr"
    amtGatewaies.EntityData.ParentYangName = "process"
    amtGatewaies.EntityData.SegmentPath = "amt-gatewaies"
    amtGatewaies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    amtGatewaies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    amtGatewaies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    amtGatewaies.EntityData.Children = types.NewOrderedMap()
    amtGatewaies.EntityData.Children.Append("amt-gateway", types.YChild{"AmtGateway", nil})
    for i := range amtGatewaies.AmtGateway {
        amtGatewaies.EntityData.Children.Append(types.GetSegmentPath(amtGatewaies.AmtGateway[i]), types.YChild{"AmtGateway", amtGatewaies.AmtGateway[i]})
    }
    amtGatewaies.EntityData.Leafs = types.NewOrderedMap()

    amtGatewaies.EntityData.YListKeys = []string {}

    return &(amtGatewaies.EntityData)
}

// Igmp_Standby_Process_AmtGatewaies_AmtGateway
// AMT Gateway DataBase information
type Igmp_Standby_Process_AmtGatewaies_AmtGateway struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Gateway Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GatewayAddress interface{}

    // Port. The type is interface{} with range: 0..4294967295.
    Port interface{}

    // GW. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Amtgw interface{}

    // Port. The type is interface{} with range: 0..4294967295.
    AmtPort interface{}

    // Len. The type is interface{} with range: 0..4294967295.
    KeyLen interface{}

    // AMT NH. The type is interface{} with range: 0..4294967295.
    Amtnh interface{}

    // Nonce. The type is interface{} with range: 0..4294967295.
    AmtNonce interface{}

    // IDB. The type is interface{} with range: 0..18446744073709551615.
    Idb interface{}

    // UpdIn. The type is interface{} with range: 0..4294967295.
    MemUpdIn interface{}

    // UpdOut. The type is interface{} with range: 0..4294967295.
    MemUpdOut interface{}
}

func (amtGateway *Igmp_Standby_Process_AmtGatewaies_AmtGateway) GetEntityData() *types.CommonEntityData {
    amtGateway.EntityData.YFilter = amtGateway.YFilter
    amtGateway.EntityData.YangName = "amt-gateway"
    amtGateway.EntityData.BundleName = "cisco_ios_xr"
    amtGateway.EntityData.ParentYangName = "amt-gatewaies"
    amtGateway.EntityData.SegmentPath = "amt-gateway"
    amtGateway.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    amtGateway.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    amtGateway.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    amtGateway.EntityData.Children = types.NewOrderedMap()
    amtGateway.EntityData.Leafs = types.NewOrderedMap()
    amtGateway.EntityData.Leafs.Append("gateway-address", types.YLeaf{"GatewayAddress", amtGateway.GatewayAddress})
    amtGateway.EntityData.Leafs.Append("port", types.YLeaf{"Port", amtGateway.Port})
    amtGateway.EntityData.Leafs.Append("amtgw", types.YLeaf{"Amtgw", amtGateway.Amtgw})
    amtGateway.EntityData.Leafs.Append("amt-port", types.YLeaf{"AmtPort", amtGateway.AmtPort})
    amtGateway.EntityData.Leafs.Append("key-len", types.YLeaf{"KeyLen", amtGateway.KeyLen})
    amtGateway.EntityData.Leafs.Append("amtnh", types.YLeaf{"Amtnh", amtGateway.Amtnh})
    amtGateway.EntityData.Leafs.Append("amt-nonce", types.YLeaf{"AmtNonce", amtGateway.AmtNonce})
    amtGateway.EntityData.Leafs.Append("idb", types.YLeaf{"Idb", amtGateway.Idb})
    amtGateway.EntityData.Leafs.Append("mem-upd-in", types.YLeaf{"MemUpdIn", amtGateway.MemUpdIn})
    amtGateway.EntityData.Leafs.Append("mem-upd-out", types.YLeaf{"MemUpdOut", amtGateway.MemUpdOut})

    amtGateway.EntityData.YListKeys = []string {}

    return &(amtGateway.EntityData)
}

// Igmp_Standby_Process_UnicastQosAdjustStats
// IGMP Unicast-Qos-Adjust Statistics
type Igmp_Standby_Process_UnicastQosAdjustStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // I2Q Queue count. The type is interface{} with range: 0..65535.
    Queues interface{}

    // I2Q Rate Batch count. The type is interface{} with range: 0..65535.
    Batches interface{}

    // Add to batch count. The type is interface{} with range: 0..4294967295.
    AddToBatches interface{}

    // Delete to batch count. The type is interface{} with range: 0..4294967295.
    DeleteToBatches interface{}

    // Send Success count. The type is interface{} with range: 0..4294967295.
    SendSuccess interface{}

    // Number of Send errors in batch. The type is interface{} with range:
    // 0..4294967295.
    SendErrors interface{}

    // Send Error due to comms count. The type is interface{} with range:
    // 0..4294967295.
    SendCommErrors interface{}

    // Send Error due to partial issue count. The type is interface{} with range:
    // 0..4294967295.
    SendPartialErrors interface{}

    // Number of Resync request received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedResyncRequests interface{}

    // Number of bulks sent for last resync received. The type is interface{} with
    // range: 0..4294967295.
    SentResyncBulks interface{}

    // Is Resync request received. The type is bool.
    IsResyncReceived interface{}

    // Is Resync required. The type is bool.
    IsResyncRequired interface{}

    // Is Resync Start message sent. The type is bool.
    IsResyncStartSent interface{}

    // Is QOS Sweeped once . The type is bool.
    IsQosSSweeped interface{}

    // Time elapsed since Last mark and sweep in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastSweepTime interface{}

    // Time elapsed since Last download to QOS in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastDownloadTime interface{}
}

func (unicastQosAdjustStats *Igmp_Standby_Process_UnicastQosAdjustStats) GetEntityData() *types.CommonEntityData {
    unicastQosAdjustStats.EntityData.YFilter = unicastQosAdjustStats.YFilter
    unicastQosAdjustStats.EntityData.YangName = "unicast-qos-adjust-stats"
    unicastQosAdjustStats.EntityData.BundleName = "cisco_ios_xr"
    unicastQosAdjustStats.EntityData.ParentYangName = "process"
    unicastQosAdjustStats.EntityData.SegmentPath = "unicast-qos-adjust-stats"
    unicastQosAdjustStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unicastQosAdjustStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unicastQosAdjustStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unicastQosAdjustStats.EntityData.Children = types.NewOrderedMap()
    unicastQosAdjustStats.EntityData.Leafs = types.NewOrderedMap()
    unicastQosAdjustStats.EntityData.Leafs.Append("queues", types.YLeaf{"Queues", unicastQosAdjustStats.Queues})
    unicastQosAdjustStats.EntityData.Leafs.Append("batches", types.YLeaf{"Batches", unicastQosAdjustStats.Batches})
    unicastQosAdjustStats.EntityData.Leafs.Append("add-to-batches", types.YLeaf{"AddToBatches", unicastQosAdjustStats.AddToBatches})
    unicastQosAdjustStats.EntityData.Leafs.Append("delete-to-batches", types.YLeaf{"DeleteToBatches", unicastQosAdjustStats.DeleteToBatches})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-success", types.YLeaf{"SendSuccess", unicastQosAdjustStats.SendSuccess})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-errors", types.YLeaf{"SendErrors", unicastQosAdjustStats.SendErrors})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-comm-errors", types.YLeaf{"SendCommErrors", unicastQosAdjustStats.SendCommErrors})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-partial-errors", types.YLeaf{"SendPartialErrors", unicastQosAdjustStats.SendPartialErrors})
    unicastQosAdjustStats.EntityData.Leafs.Append("received-resync-requests", types.YLeaf{"ReceivedResyncRequests", unicastQosAdjustStats.ReceivedResyncRequests})
    unicastQosAdjustStats.EntityData.Leafs.Append("sent-resync-bulks", types.YLeaf{"SentResyncBulks", unicastQosAdjustStats.SentResyncBulks})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-resync-received", types.YLeaf{"IsResyncReceived", unicastQosAdjustStats.IsResyncReceived})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-resync-required", types.YLeaf{"IsResyncRequired", unicastQosAdjustStats.IsResyncRequired})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-resync-start-sent", types.YLeaf{"IsResyncStartSent", unicastQosAdjustStats.IsResyncStartSent})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-qos-s-sweeped", types.YLeaf{"IsQosSSweeped", unicastQosAdjustStats.IsQosSSweeped})
    unicastQosAdjustStats.EntityData.Leafs.Append("last-sweep-time", types.YLeaf{"LastSweepTime", unicastQosAdjustStats.LastSweepTime})
    unicastQosAdjustStats.EntityData.Leafs.Append("last-download-time", types.YLeaf{"LastDownloadTime", unicastQosAdjustStats.LastDownloadTime})

    unicastQosAdjustStats.EntityData.YListKeys = []string {}

    return &(unicastQosAdjustStats.EntityData)
}

// Igmp_Standby_Process_BviStatistics
// IGMP BVI Stats
type Igmp_Standby_Process_BviStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of AIPC buffers received. The type is interface{} with range:
    // 0..4294967295.
    ReceiveBuffers interface{}

    // Number of AIPC buffers released. The type is interface{} with range:
    // 0..4294967295.
    ReleaseBuffers interface{}

    // Number of AIPC buffers send blocked. The type is interface{} with range:
    // 0..4294967295.
    SendBlocks interface{}

    // Number of AIPC buffers release failed. The type is interface{} with range:
    // 0..4294967295.
    ReleaseFailBuffers interface{}

    // Number of AIPC NULL buffer handles. The type is interface{} with range:
    // 0..4294967295.
    NullBufferHandles interface{}

    // Number of AIPC open notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOpenNotif interface{}

    // Number of AIPC close notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcCloseNotif interface{}

    // Number of AIPC error notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcErrorNotif interface{}

    // Number of AIPC LWM notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcLwmNotif interface{}

    // Number of AIPC input waiting notifications received. The type is
    // interface{} with range: 0..4294967295.
    RxIpcInputWaitNotif interface{}

    // Number of AIPC send status notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcSendStatusNotif interface{}

    // Number of AIPC publish notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcPublishNotif interface{}

    // Number of AIPC queue full notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcQFullNotif interface{}

    // Number of AIPC output notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOutputNotif interface{}

    // Number of AIPC connect notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcConnectNotif interface{}

    // Number of IGMP protocol messages received. The type is interface{} with
    // range: 0..4294967295.
    RxIgmpPacketSuccess interface{}

    // Number of IGMP Mrouter Add messages received. The type is interface{} with
    // range: 0..4294967295.
    RxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages received. The type is interface{}
    // with range: 0..4294967295.
    RxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    RxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Add messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    TxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages received. The type is interface{}
    // with range: 0..4294967295.
    RxUnknownMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages transmitted. The type is
    // interface{} with range: 0..4294967295.
    TxUnknownMrouterMsg interface{}

    // Number of AIPC transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TxBufferErrors interface{}

    // Number of AIPC buffers transmited. The type is interface{} with range:
    // 0..4294967295.
    TxBuffers interface{}

    // Number of IGMP protocol buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxProtocolBuffers interface{}

    // Number of IGMP Mrouter buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxMrouterBuffers interface{}

    // Number of IGMP Unknown buffers transmited. The type is interface{} with
    // range: 0..4294967295.
    TxUnknownBuffers interface{}

    // Number of WTX messages received. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgRecvd interface{}

    // Number of WTX messages sent. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgSent interface{}

    // Number of WTX messages sent to Protocol. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgProtoSent interface{}

    // Number of WTX messages dropped due to disconnect. The type is interface{}
    // with range: 0..4294967295.
    WtxMsgDropDc interface{}

    // Number of WTX messages dropped to memory. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgDropNomem interface{}

    // Number of WTX messages freed. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgFreed interface{}
}

func (bviStatistics *Igmp_Standby_Process_BviStatistics) GetEntityData() *types.CommonEntityData {
    bviStatistics.EntityData.YFilter = bviStatistics.YFilter
    bviStatistics.EntityData.YangName = "bvi-statistics"
    bviStatistics.EntityData.BundleName = "cisco_ios_xr"
    bviStatistics.EntityData.ParentYangName = "process"
    bviStatistics.EntityData.SegmentPath = "bvi-statistics"
    bviStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bviStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bviStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bviStatistics.EntityData.Children = types.NewOrderedMap()
    bviStatistics.EntityData.Leafs = types.NewOrderedMap()
    bviStatistics.EntityData.Leafs.Append("receive-buffers", types.YLeaf{"ReceiveBuffers", bviStatistics.ReceiveBuffers})
    bviStatistics.EntityData.Leafs.Append("release-buffers", types.YLeaf{"ReleaseBuffers", bviStatistics.ReleaseBuffers})
    bviStatistics.EntityData.Leafs.Append("send-blocks", types.YLeaf{"SendBlocks", bviStatistics.SendBlocks})
    bviStatistics.EntityData.Leafs.Append("release-fail-buffers", types.YLeaf{"ReleaseFailBuffers", bviStatistics.ReleaseFailBuffers})
    bviStatistics.EntityData.Leafs.Append("null-buffer-handles", types.YLeaf{"NullBufferHandles", bviStatistics.NullBufferHandles})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-open-notif", types.YLeaf{"RxIpcOpenNotif", bviStatistics.RxIpcOpenNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-close-notif", types.YLeaf{"RxIpcCloseNotif", bviStatistics.RxIpcCloseNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-error-notif", types.YLeaf{"RxIpcErrorNotif", bviStatistics.RxIpcErrorNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-lwm-notif", types.YLeaf{"RxIpcLwmNotif", bviStatistics.RxIpcLwmNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-input-wait-notif", types.YLeaf{"RxIpcInputWaitNotif", bviStatistics.RxIpcInputWaitNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-send-status-notif", types.YLeaf{"RxIpcSendStatusNotif", bviStatistics.RxIpcSendStatusNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-publish-notif", types.YLeaf{"RxIpcPublishNotif", bviStatistics.RxIpcPublishNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-q-full-notif", types.YLeaf{"RxIpcQFullNotif", bviStatistics.RxIpcQFullNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-output-notif", types.YLeaf{"RxIpcOutputNotif", bviStatistics.RxIpcOutputNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-connect-notif", types.YLeaf{"RxIpcConnectNotif", bviStatistics.RxIpcConnectNotif})
    bviStatistics.EntityData.Leafs.Append("rx-igmp-packet-success", types.YLeaf{"RxIgmpPacketSuccess", bviStatistics.RxIgmpPacketSuccess})
    bviStatistics.EntityData.Leafs.Append("rx-add-mrouter-msg", types.YLeaf{"RxAddMrouterMsg", bviStatistics.RxAddMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("rx-delete-mrouter-msg", types.YLeaf{"RxDeleteMrouterMsg", bviStatistics.RxDeleteMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("rx-sweep-mrouter-msg", types.YLeaf{"RxSweepMrouterMsg", bviStatistics.RxSweepMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-add-mrouter-msg", types.YLeaf{"TxAddMrouterMsg", bviStatistics.TxAddMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-delete-mrouter-msg", types.YLeaf{"TxDeleteMrouterMsg", bviStatistics.TxDeleteMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-sweep-mrouter-msg", types.YLeaf{"TxSweepMrouterMsg", bviStatistics.TxSweepMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("rx-unknown-mrouter-msg", types.YLeaf{"RxUnknownMrouterMsg", bviStatistics.RxUnknownMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-unknown-mrouter-msg", types.YLeaf{"TxUnknownMrouterMsg", bviStatistics.TxUnknownMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-buffer-errors", types.YLeaf{"TxBufferErrors", bviStatistics.TxBufferErrors})
    bviStatistics.EntityData.Leafs.Append("tx-buffers", types.YLeaf{"TxBuffers", bviStatistics.TxBuffers})
    bviStatistics.EntityData.Leafs.Append("tx-protocol-buffers", types.YLeaf{"TxProtocolBuffers", bviStatistics.TxProtocolBuffers})
    bviStatistics.EntityData.Leafs.Append("tx-mrouter-buffers", types.YLeaf{"TxMrouterBuffers", bviStatistics.TxMrouterBuffers})
    bviStatistics.EntityData.Leafs.Append("tx-unknown-buffers", types.YLeaf{"TxUnknownBuffers", bviStatistics.TxUnknownBuffers})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-recvd", types.YLeaf{"WtxMsgRecvd", bviStatistics.WtxMsgRecvd})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-sent", types.YLeaf{"WtxMsgSent", bviStatistics.WtxMsgSent})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-proto-sent", types.YLeaf{"WtxMsgProtoSent", bviStatistics.WtxMsgProtoSent})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-drop-dc", types.YLeaf{"WtxMsgDropDc", bviStatistics.WtxMsgDropDc})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-drop-nomem", types.YLeaf{"WtxMsgDropNomem", bviStatistics.WtxMsgDropNomem})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-freed", types.YLeaf{"WtxMsgFreed", bviStatistics.WtxMsgFreed})

    bviStatistics.EntityData.YListKeys = []string {}

    return &(bviStatistics.EntityData)
}

// Igmp_Standby_Process_Nsf
// NSF Information
type Igmp_Standby_Process_Nsf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is Multicast NSF active. The type is bool.
    IsMulticastNsfActive interface{}

    // Multicast NSF timeout in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeout interface{}

    // Multicast NSF time remaining in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeLeft interface{}

    // Respawn Count. The type is interface{} with range: 0..4294967295.
    RespawnCount interface{}

    // Last NSF time ON. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOn interface{}

    // Last NSF time off. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOff interface{}

    // Last NSF time ON in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOnMin interface{}

    // Last NSF time OFF in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOffMin interface{}

    // Last ICD Notif Recv. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastIcdNotifRecv interface{}

    // Last ICD Notif Recv in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastIcdNotifRecvMin interface{}
}

func (nsf *Igmp_Standby_Process_Nsf) GetEntityData() *types.CommonEntityData {
    nsf.EntityData.YFilter = nsf.YFilter
    nsf.EntityData.YangName = "nsf"
    nsf.EntityData.BundleName = "cisco_ios_xr"
    nsf.EntityData.ParentYangName = "process"
    nsf.EntityData.SegmentPath = "nsf"
    nsf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsf.EntityData.Children = types.NewOrderedMap()
    nsf.EntityData.Leafs = types.NewOrderedMap()
    nsf.EntityData.Leafs.Append("is-multicast-nsf-active", types.YLeaf{"IsMulticastNsfActive", nsf.IsMulticastNsfActive})
    nsf.EntityData.Leafs.Append("multicast-nsf-timeout", types.YLeaf{"MulticastNsfTimeout", nsf.MulticastNsfTimeout})
    nsf.EntityData.Leafs.Append("multicast-nsf-time-left", types.YLeaf{"MulticastNsfTimeLeft", nsf.MulticastNsfTimeLeft})
    nsf.EntityData.Leafs.Append("respawn-count", types.YLeaf{"RespawnCount", nsf.RespawnCount})
    nsf.EntityData.Leafs.Append("last-nsf-on", types.YLeaf{"LastNsfOn", nsf.LastNsfOn})
    nsf.EntityData.Leafs.Append("last-nsf-off", types.YLeaf{"LastNsfOff", nsf.LastNsfOff})
    nsf.EntityData.Leafs.Append("last-nsf-on-min", types.YLeaf{"LastNsfOnMin", nsf.LastNsfOnMin})
    nsf.EntityData.Leafs.Append("last-nsf-off-min", types.YLeaf{"LastNsfOffMin", nsf.LastNsfOffMin})
    nsf.EntityData.Leafs.Append("last-icd-notif-recv", types.YLeaf{"LastIcdNotifRecv", nsf.LastIcdNotifRecv})
    nsf.EntityData.Leafs.Append("last-icd-notif-recv-min", types.YLeaf{"LastIcdNotifRecvMin", nsf.LastIcdNotifRecvMin})

    nsf.EntityData.YListKeys = []string {}

    return &(nsf.EntityData)
}

// Igmp_Standby_DefaultContext
// Default Context
type Igmp_Standby_DefaultContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Summary Information.
    Summary Igmp_Standby_DefaultContext_Summary

    // IGMP Interface state on.
    InterfaceStateOns Igmp_Standby_DefaultContext_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Igmp_Standby_DefaultContext_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Igmp_Standby_DefaultContext_NonActiveGroups

    // SSM Map Table.
    SsmMaps Igmp_Standby_DefaultContext_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Igmp_Standby_DefaultContext_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Igmp_Standby_DefaultContext_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Igmp_Standby_DefaultContext_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Igmp_Standby_DefaultContext_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Igmp_Standby_DefaultContext_TrafficCounters

    // IGMP Group Database Table.
    Groups Igmp_Standby_DefaultContext_Groups

    // IGMP Groups Summary.
    GroupSummary Igmp_Standby_DefaultContext_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Igmp_Standby_DefaultContext_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Igmp_Standby_DefaultContext_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Igmp_Standby_DefaultContext_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Igmp_Standby_DefaultContext_InterfaceStateOffs
}

func (defaultContext *Igmp_Standby_DefaultContext) GetEntityData() *types.CommonEntityData {
    defaultContext.EntityData.YFilter = defaultContext.YFilter
    defaultContext.EntityData.YangName = "default-context"
    defaultContext.EntityData.BundleName = "cisco_ios_xr"
    defaultContext.EntityData.ParentYangName = "standby"
    defaultContext.EntityData.SegmentPath = "default-context"
    defaultContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultContext.EntityData.Children = types.NewOrderedMap()
    defaultContext.EntityData.Children.Append("summary", types.YChild{"Summary", &defaultContext.Summary})
    defaultContext.EntityData.Children.Append("interface-state-ons", types.YChild{"InterfaceStateOns", &defaultContext.InterfaceStateOns})
    defaultContext.EntityData.Children.Append("detail-groups", types.YChild{"DetailGroups", &defaultContext.DetailGroups})
    defaultContext.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", &defaultContext.NonActiveGroups})
    defaultContext.EntityData.Children.Append("ssm-maps", types.YChild{"SsmMaps", &defaultContext.SsmMaps})
    defaultContext.EntityData.Children.Append("explicit-groups", types.YChild{"ExplicitGroups", &defaultContext.ExplicitGroups})
    defaultContext.EntityData.Children.Append("interface-table", types.YChild{"InterfaceTable", &defaultContext.InterfaceTable})
    defaultContext.EntityData.Children.Append("interface-unicast-qos-adjusts", types.YChild{"InterfaceUnicastQosAdjusts", &defaultContext.InterfaceUnicastQosAdjusts})
    defaultContext.EntityData.Children.Append("ranges", types.YChild{"Ranges", &defaultContext.Ranges})
    defaultContext.EntityData.Children.Append("ifrs-interfaces", types.YChild{"IfrsInterfaces", &defaultContext.IfrsInterfaces})
    defaultContext.EntityData.Children.Append("traffic-counters", types.YChild{"TrafficCounters", &defaultContext.TrafficCounters})
    defaultContext.EntityData.Children.Append("groups", types.YChild{"Groups", &defaultContext.Groups})
    defaultContext.EntityData.Children.Append("group-summary", types.YChild{"GroupSummary", &defaultContext.GroupSummary})
    defaultContext.EntityData.Children.Append("ifrs-interface-summary", types.YChild{"IfrsInterfaceSummary", &defaultContext.IfrsInterfaceSummary})
    defaultContext.EntityData.Children.Append("global-interface-table", types.YChild{"GlobalInterfaceTable", &defaultContext.GlobalInterfaceTable})
    defaultContext.EntityData.Children.Append("ssm-map-details", types.YChild{"SsmMapDetails", &defaultContext.SsmMapDetails})
    defaultContext.EntityData.Children.Append("interface-state-offs", types.YChild{"InterfaceStateOffs", &defaultContext.InterfaceStateOffs})
    defaultContext.EntityData.Leafs = types.NewOrderedMap()

    defaultContext.EntityData.YListKeys = []string {}

    return &(defaultContext.EntityData)
}

// Igmp_Standby_DefaultContext_Summary
// IGMP Summary Information
type Igmp_Standby_DefaultContext_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Igmp_Standby_DefaultContext_Summary_Interface.
    Interface []*Igmp_Standby_DefaultContext_Summary_Interface
}

func (summary *Igmp_Standby_DefaultContext_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "default-context"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range summary.Interface {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.Interface[i]), types.YChild{"Interface", summary.Interface[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", summary.Robustness})
    summary.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", summary.GroupLimit})
    summary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", summary.GroupCount})
    summary.EntityData.Leafs.Append("is-disabled", types.YLeaf{"IsDisabled", summary.IsDisabled})
    summary.EntityData.Leafs.Append("supported-interfaces", types.YLeaf{"SupportedInterfaces", summary.SupportedInterfaces})
    summary.EntityData.Leafs.Append("unsupported-interfaces", types.YLeaf{"UnsupportedInterfaces", summary.UnsupportedInterfaces})
    summary.EntityData.Leafs.Append("enabled-interface-count", types.YLeaf{"EnabledInterfaceCount", summary.EnabledInterfaceCount})
    summary.EntityData.Leafs.Append("disabled-interface-count", types.YLeaf{"DisabledInterfaceCount", summary.DisabledInterfaceCount})
    summary.EntityData.Leafs.Append("tunnel-mte-config-count", types.YLeaf{"TunnelMteConfigCount", summary.TunnelMteConfigCount})
    summary.EntityData.Leafs.Append("node-low-memory", types.YLeaf{"NodeLowMemory", summary.NodeLowMemory})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Igmp_Standby_DefaultContext_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Igmp_Standby_DefaultContext_Summary_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Igmp_Standby_DefaultContext_Summary_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "summary"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", self.GroupLimit})
    self.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", self.GroupCount})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("on-off", types.YLeaf{"OnOff", self.OnOff})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceStateOns
// IGMP Interface state on
type Igmp_Standby_DefaultContext_InterfaceStateOns struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []*Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Igmp_Standby_DefaultContext_InterfaceStateOns) GetEntityData() *types.CommonEntityData {
    interfaceStateOns.EntityData.YFilter = interfaceStateOns.YFilter
    interfaceStateOns.EntityData.YangName = "interface-state-ons"
    interfaceStateOns.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOns.EntityData.ParentYangName = "default-context"
    interfaceStateOns.EntityData.SegmentPath = "interface-state-ons"
    interfaceStateOns.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOns.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOns.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOns.EntityData.Children = types.NewOrderedMap()
    interfaceStateOns.EntityData.Children.Append("interface-state-on", types.YChild{"InterfaceStateOn", nil})
    for i := range interfaceStateOns.InterfaceStateOn {
        interfaceStateOns.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOns.InterfaceStateOn[i]), types.YChild{"InterfaceStateOn", interfaceStateOns.InterfaceStateOn[i]})
    }
    interfaceStateOns.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOns.EntityData.YListKeys = []string {}

    return &(interfaceStateOns.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetEntityData() *types.CommonEntityData {
    interfaceStateOn.EntityData.YFilter = interfaceStateOn.YFilter
    interfaceStateOn.EntityData.YangName = "interface-state-on"
    interfaceStateOn.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOn.EntityData.ParentYangName = "interface-state-ons"
    interfaceStateOn.EntityData.SegmentPath = "interface-state-on" + types.AddKeyToken(interfaceStateOn.InterfaceName, "interface-name")
    interfaceStateOn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOn.EntityData.Children = types.NewOrderedMap()
    interfaceStateOn.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOn.Address})
    interfaceStateOn.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOn.QuerierAddress})
    interfaceStateOn.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOn.SubscriberAddress})
    interfaceStateOn.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOn.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOn.InterfaceName})
    interfaceStateOn.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOn.InterfaceNameXr})
    interfaceStateOn.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOn.State})
    interfaceStateOn.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOn.PrefixLength})
    interfaceStateOn.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOn.IsInterfaceUp})
    interfaceStateOn.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOn.IsIpEnabled})
    interfaceStateOn.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOn.IsRouterEnabled})
    interfaceStateOn.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOn.IgmpVersion})
    interfaceStateOn.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOn.HostVersion})
    interfaceStateOn.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOn.QueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOn.QueryTimeout})
    interfaceStateOn.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOn.QueryMaximumResponseTime})
    interfaceStateOn.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOn.LastMemberQueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOn.GroupJoins})
    interfaceStateOn.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOn.GroupLeaves})
    interfaceStateOn.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOn.IsQuerier})
    interfaceStateOn.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOn.TotalActiveGroups})
    interfaceStateOn.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOn.Robustness})
    interfaceStateOn.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOn.ProxyInterface})
    interfaceStateOn.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOn.QuerierUptime})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOn.LasLlRegistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOn.LasGetAddressCount})
    interfaceStateOn.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOn.LasUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOn.LasLlRemoveUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOn.LasLlAddUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOn.LasNullUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOn.LasUnregistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOn.IsLasRequest})
    interfaceStateOn.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOn.IsLasRegistered})
    interfaceStateOn.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOn.VrfId})
    interfaceStateOn.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOn.MteVrfId})
    interfaceStateOn.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOn.Location})
    interfaceStateOn.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOn.Mtu})
    interfaceStateOn.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOn.VrfState})
    interfaceStateOn.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOn.IsConfigurationverify})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOn.ConfigurationvrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOn.ConfigurationvrfError})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOn.ConfigurationMcastVrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOn.ConfigurationMcastVrfError})
    interfaceStateOn.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOn.IsImStateRegistered})
    interfaceStateOn.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOn.IsSubscriber})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOn.SubscriberMode})
    interfaceStateOn.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOn.IsIdentityPresent})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOn.SubscriberId})
    interfaceStateOn.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOn.ParentIfhandle})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOn.TimeSinceLastQueryInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOn.TimeSinceLastReportInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOn.RouterUptimeInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOn.MteTupleCount})

    interfaceStateOn.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOn.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-on"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-on"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-on"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Standby_DefaultContext_DetailGroups
// IGMP Detail Group Database
type Igmp_Standby_DefaultContext_DetailGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Igmp_Standby_DefaultContext_DetailGroups_DetailGroup.
    DetailGroup []*Igmp_Standby_DefaultContext_DetailGroups_DetailGroup
}

func (detailGroups *Igmp_Standby_DefaultContext_DetailGroups) GetEntityData() *types.CommonEntityData {
    detailGroups.EntityData.YFilter = detailGroups.YFilter
    detailGroups.EntityData.YangName = "detail-groups"
    detailGroups.EntityData.BundleName = "cisco_ios_xr"
    detailGroups.EntityData.ParentYangName = "default-context"
    detailGroups.EntityData.SegmentPath = "detail-groups"
    detailGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroups.EntityData.Children = types.NewOrderedMap()
    detailGroups.EntityData.Children.Append("detail-group", types.YChild{"DetailGroup", nil})
    for i := range detailGroups.DetailGroup {
        detailGroups.EntityData.Children.Append(types.GetSegmentPath(detailGroups.DetailGroup[i]), types.YChild{"DetailGroup", detailGroups.DetailGroup[i]})
    }
    detailGroups.EntityData.Leafs = types.NewOrderedMap()

    detailGroups.EntityData.YListKeys = []string {}

    return &(detailGroups.EntityData)
}

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source.
    Source []*Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source
}

func (detailGroup *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup) GetEntityData() *types.CommonEntityData {
    detailGroup.EntityData.YFilter = detailGroup.YFilter
    detailGroup.EntityData.YangName = "detail-group"
    detailGroup.EntityData.BundleName = "cisco_ios_xr"
    detailGroup.EntityData.ParentYangName = "detail-groups"
    detailGroup.EntityData.SegmentPath = "detail-group"
    detailGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroup.EntityData.Children = types.NewOrderedMap()
    detailGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &detailGroup.GroupInfo})
    detailGroup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range detailGroup.Source {
        detailGroup.EntityData.Children.Append(types.GetSegmentPath(detailGroup.Source[i]), types.YChild{"Source", detailGroup.Source[i]})
    }
    detailGroup.EntityData.Leafs = types.NewOrderedMap()
    detailGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", detailGroup.GroupAddress})
    detailGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", detailGroup.InterfaceName})
    detailGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", detailGroup.SourceAddress})
    detailGroup.EntityData.Leafs.Append("is-router-exclude-mode", types.YLeaf{"IsRouterExcludeMode", detailGroup.IsRouterExcludeMode})
    detailGroup.EntityData.Leafs.Append("is-host-exclude-mode", types.YLeaf{"IsHostExcludeMode", detailGroup.IsHostExcludeMode})

    detailGroup.EntityData.YListKeys = []string {}

    return &(detailGroup.EntityData)
}

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "detail-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source
// List of sources
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "detail-group"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &source.SourceAddress})
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", source.Uptime})
    source.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", source.ExpirationTime})
    source.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", source.IsLocal})
    source.EntityData.Leafs.Append("is-remote", types.YLeaf{"IsRemote", source.IsRemote})
    source.EntityData.Leafs.Append("is-forward", types.YLeaf{"IsForward", source.IsForward})
    source.EntityData.Leafs.Append("is-we-report", types.YLeaf{"IsWeReport", source.IsWeReport})
    source.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", source.Flags})
    source.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", source.IsAdded})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "source"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_DefaultContext_NonActiveGroups
// IGMP Non-Active Groups Information
type Igmp_Standby_DefaultContext_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []*Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "default-context"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", nil})
    for i := range nonActiveGroups.NonActiveGroups {
        nonActiveGroups.EntityData.Children.Append(types.GetSegmentPath(nonActiveGroups.NonActiveGroups[i]), types.YChild{"NonActiveGroups", nonActiveGroups.NonActiveGroups[i]})
    }
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "non-active-groups"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &nonActiveGroups.GroupAddress})
    nonActiveGroups.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &nonActiveGroups.SourceAddress})
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()
    nonActiveGroups.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", nonActiveGroups.Interface})
    nonActiveGroups.EntityData.Leafs.Append("reason-for-non-activity", types.YLeaf{"ReasonForNonActivity", nonActiveGroups.ReasonForNonActivity})

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "non-active-groups"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "non-active-groups"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_DefaultContext_SsmMaps
// SSM Map Table
type Igmp_Standby_DefaultContext_SsmMaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Igmp_Standby_DefaultContext_SsmMaps_SsmMap.
    SsmMap []*Igmp_Standby_DefaultContext_SsmMaps_SsmMap
}

func (ssmMaps *Igmp_Standby_DefaultContext_SsmMaps) GetEntityData() *types.CommonEntityData {
    ssmMaps.EntityData.YFilter = ssmMaps.YFilter
    ssmMaps.EntityData.YangName = "ssm-maps"
    ssmMaps.EntityData.BundleName = "cisco_ios_xr"
    ssmMaps.EntityData.ParentYangName = "default-context"
    ssmMaps.EntityData.SegmentPath = "ssm-maps"
    ssmMaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMaps.EntityData.Children = types.NewOrderedMap()
    ssmMaps.EntityData.Children.Append("ssm-map", types.YChild{"SsmMap", nil})
    for i := range ssmMaps.SsmMap {
        ssmMaps.EntityData.Children.Append(types.GetSegmentPath(ssmMaps.SsmMap[i]), types.YChild{"SsmMap", ssmMaps.SsmMap[i]})
    }
    ssmMaps.EntityData.Leafs = types.NewOrderedMap()

    ssmMaps.EntityData.YListKeys = []string {}

    return &(ssmMaps.EntityData)
}

// Igmp_Standby_DefaultContext_SsmMaps_SsmMap
// SSM Map information
type Igmp_Standby_DefaultContext_SsmMaps_SsmMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Igmp_Standby_DefaultContext_SsmMaps_SsmMap) GetEntityData() *types.CommonEntityData {
    ssmMap.EntityData.YFilter = ssmMap.YFilter
    ssmMap.EntityData.YangName = "ssm-map"
    ssmMap.EntityData.BundleName = "cisco_ios_xr"
    ssmMap.EntityData.ParentYangName = "ssm-maps"
    ssmMap.EntityData.SegmentPath = "ssm-map"
    ssmMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMap.EntityData.Children = types.NewOrderedMap()
    ssmMap.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &ssmMap.GroupAddressXr})
    ssmMap.EntityData.Leafs = types.NewOrderedMap()
    ssmMap.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMap.SsmMapType})
    ssmMap.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMap.GroupAddress})
    ssmMap.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", ssmMap.MapType})
    ssmMap.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", ssmMap.SourceCounts})

    ssmMap.EntityData.YListKeys = []string {}

    return &(ssmMap.EntityData)
}

// Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "ssm-map"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Standby_DefaultContext_ExplicitGroups
// IGMP Explicit Group Database
type Igmp_Standby_DefaultContext_ExplicitGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []*Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Igmp_Standby_DefaultContext_ExplicitGroups) GetEntityData() *types.CommonEntityData {
    explicitGroups.EntityData.YFilter = explicitGroups.YFilter
    explicitGroups.EntityData.YangName = "explicit-groups"
    explicitGroups.EntityData.BundleName = "cisco_ios_xr"
    explicitGroups.EntityData.ParentYangName = "default-context"
    explicitGroups.EntityData.SegmentPath = "explicit-groups"
    explicitGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroups.EntityData.Children = types.NewOrderedMap()
    explicitGroups.EntityData.Children.Append("explicit-group", types.YChild{"ExplicitGroup", nil})
    for i := range explicitGroups.ExplicitGroup {
        explicitGroups.EntityData.Children.Append(types.GetSegmentPath(explicitGroups.ExplicitGroup[i]), types.YChild{"ExplicitGroup", explicitGroups.ExplicitGroup[i]})
    }
    explicitGroups.EntityData.Leafs = types.NewOrderedMap()

    explicitGroups.EntityData.YListKeys = []string {}

    return &(explicitGroups.EntityData)
}

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host.
    Host []*Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup) GetEntityData() *types.CommonEntityData {
    explicitGroup.EntityData.YFilter = explicitGroup.YFilter
    explicitGroup.EntityData.YangName = "explicit-group"
    explicitGroup.EntityData.BundleName = "cisco_ios_xr"
    explicitGroup.EntityData.ParentYangName = "explicit-groups"
    explicitGroup.EntityData.SegmentPath = "explicit-group"
    explicitGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroup.EntityData.Children = types.NewOrderedMap()
    explicitGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &explicitGroup.GroupInfo})
    explicitGroup.EntityData.Children.Append("host", types.YChild{"Host", nil})
    for i := range explicitGroup.Host {
        explicitGroup.EntityData.Children.Append(types.GetSegmentPath(explicitGroup.Host[i]), types.YChild{"Host", explicitGroup.Host[i]})
    }
    explicitGroup.EntityData.Leafs = types.NewOrderedMap()
    explicitGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", explicitGroup.GroupAddress})
    explicitGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", explicitGroup.InterfaceName})
    explicitGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", explicitGroup.SourceAddress})
    explicitGroup.EntityData.Leafs.Append("include-hosts", types.YLeaf{"IncludeHosts", explicitGroup.IncludeHosts})
    explicitGroup.EntityData.Leafs.Append("exclude-hosts", types.YLeaf{"ExcludeHosts", explicitGroup.ExcludeHosts})

    explicitGroup.EntityData.YListKeys = []string {}

    return &(explicitGroup.EntityData)
}

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "explicit-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []*Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetEntityData() *types.CommonEntityData {
    host.EntityData.YFilter = host.YFilter
    host.EntityData.YangName = "host"
    host.EntityData.BundleName = "cisco_ios_xr"
    host.EntityData.ParentYangName = "explicit-group"
    host.EntityData.SegmentPath = "host"
    host.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    host.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    host.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    host.EntityData.Children = types.NewOrderedMap()
    host.EntityData.Children.Append("address", types.YChild{"Address", &host.Address})
    host.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", nil})
    for i := range host.SourceAddress {
        host.EntityData.Children.Append(types.GetSegmentPath(host.SourceAddress[i]), types.YChild{"SourceAddress", host.SourceAddress[i]})
    }
    host.EntityData.Leafs = types.NewOrderedMap()
    host.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", host.Uptime})
    host.EntityData.Leafs.Append("is-exclude", types.YLeaf{"IsExclude", host.IsExclude})
    host.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", host.ExpirationTime})
    host.EntityData.Leafs.Append("source-count", types.YLeaf{"SourceCount", host.SourceCount})

    host.EntityData.YListKeys = []string {}

    return &(host.EntityData)
}

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "host"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "host"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceTable
// IGMP Interface specific Table
type Igmp_Standby_DefaultContext_InterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_DefaultContext_InterfaceTable_Interface.
    Interface []*Igmp_Standby_DefaultContext_InterfaceTable_Interface
}

func (interfaceTable *Igmp_Standby_DefaultContext_InterfaceTable) GetEntityData() *types.CommonEntityData {
    interfaceTable.EntityData.YFilter = interfaceTable.YFilter
    interfaceTable.EntityData.YangName = "interface-table"
    interfaceTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceTable.EntityData.ParentYangName = "default-context"
    interfaceTable.EntityData.SegmentPath = "interface-table"
    interfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceTable.EntityData.Children = types.NewOrderedMap()
    interfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceTable.Interface {
        interfaceTable.EntityData.Children.Append(types.GetSegmentPath(interfaceTable.Interface[i]), types.YChild{"Interface", interfaceTable.Interface[i]})
    }
    interfaceTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceTable.EntityData.YListKeys = []string {}

    return &(interfaceTable.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceTable_Interface
// IGMP Interface
type Igmp_Standby_DefaultContext_InterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Standby_DefaultContext_InterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address
// IP address
type Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_DefaultContext_InterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []*Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjusts.EntityData.YFilter = interfaceUnicastQosAdjusts.YFilter
    interfaceUnicastQosAdjusts.EntityData.YangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjusts.EntityData.ParentYangName = "default-context"
    interfaceUnicastQosAdjusts.EntityData.SegmentPath = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjusts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjusts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjusts.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjusts.EntityData.Children.Append("interface-unicast-qos-adjust", types.YChild{"InterfaceUnicastQosAdjust", nil})
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        interfaceUnicastQosAdjusts.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]), types.YChild{"InterfaceUnicastQosAdjust", interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]})
    }
    interfaceUnicastQosAdjusts.EntityData.Leafs = types.NewOrderedMap()

    interfaceUnicastQosAdjusts.EntityData.YListKeys = []string {}

    return &(interfaceUnicastQosAdjusts.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []*Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjust.EntityData.YFilter = interfaceUnicastQosAdjust.YFilter
    interfaceUnicastQosAdjust.EntityData.YangName = "interface-unicast-qos-adjust"
    interfaceUnicastQosAdjust.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjust.EntityData.ParentYangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjust.EntityData.SegmentPath = "interface-unicast-qos-adjust" + types.AddKeyToken(interfaceUnicastQosAdjust.InterfaceName, "interface-name")
    interfaceUnicastQosAdjust.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjust.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjust.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjust.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Children.Append("update", types.YChild{"Update", nil})
    for i := range interfaceUnicastQosAdjust.Update {
        interfaceUnicastQosAdjust.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjust.Update[i]), types.YChild{"Update", interfaceUnicastQosAdjust.Update[i]})
    }
    interfaceUnicastQosAdjust.EntityData.Leafs = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceUnicastQosAdjust.InterfaceName})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("is-virtual-access", types.YLeaf{"IsVirtualAccess", interfaceUnicastQosAdjust.IsVirtualAccess})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate", types.YLeaf{"Rate", interfaceUnicastQosAdjust.Rate})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-increments", types.YLeaf{"RateIncrements", interfaceUnicastQosAdjust.RateIncrements})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-decrements", types.YLeaf{"RateDecrements", interfaceUnicastQosAdjust.RateDecrements})

    interfaceUnicastQosAdjust.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceUnicastQosAdjust.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetEntityData() *types.CommonEntityData {
    update.EntityData.YFilter = update.YFilter
    update.EntityData.YangName = "update"
    update.EntityData.BundleName = "cisco_ios_xr"
    update.EntityData.ParentYangName = "interface-unicast-qos-adjust"
    update.EntityData.SegmentPath = "update"
    update.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    update.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    update.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    update.EntityData.Children = types.NewOrderedMap()
    update.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &update.SourceAddress})
    update.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &update.GroupAddress})
    update.EntityData.Leafs = types.NewOrderedMap()
    update.EntityData.Leafs.Append("is-add", types.YLeaf{"IsAdd", update.IsAdd})
    update.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", update.Weight})
    update.EntityData.Leafs.Append("received-time", types.YLeaf{"ReceivedTime", update.ReceivedTime})

    update.EntityData.YListKeys = []string {}

    return &(update.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "update"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Standby_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "update"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Igmp_Standby_DefaultContext_Ranges
// Range table
type Igmp_Standby_DefaultContext_Ranges struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Range information. The type is slice of
    // Igmp_Standby_DefaultContext_Ranges_Range.
    Range []*Igmp_Standby_DefaultContext_Ranges_Range
}

func (ranges *Igmp_Standby_DefaultContext_Ranges) GetEntityData() *types.CommonEntityData {
    ranges.EntityData.YFilter = ranges.YFilter
    ranges.EntityData.YangName = "ranges"
    ranges.EntityData.BundleName = "cisco_ios_xr"
    ranges.EntityData.ParentYangName = "default-context"
    ranges.EntityData.SegmentPath = "ranges"
    ranges.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ranges.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ranges.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ranges.EntityData.Children = types.NewOrderedMap()
    ranges.EntityData.Children.Append("range", types.YChild{"Range", nil})
    for i := range ranges.Range {
        ranges.EntityData.Children.Append(types.GetSegmentPath(ranges.Range[i]), types.YChild{"Range", ranges.Range[i]})
    }
    ranges.EntityData.Leafs = types.NewOrderedMap()

    ranges.EntityData.YListKeys = []string {}

    return &(ranges.EntityData)
}

// Igmp_Standby_DefaultContext_Ranges_Range
// Range information
type Igmp_Standby_DefaultContext_Ranges_Range struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: 0..4294967295.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr
}

func (self *Igmp_Standby_DefaultContext_Ranges_Range) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "range"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "ranges"
    self.EntityData.SegmentPath = "range"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &self.GroupAddressXr})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", self.GroupAddress})
    self.EntityData.Leafs.Append("group-mask", types.YLeaf{"GroupMask", self.GroupMask})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", self.Protocol})
    self.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", self.IsStale})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr
// Group address
type Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Ranges_Range_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "range"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Standby_DefaultContext_IfrsInterfaces
// IGMP Interface specific
type Igmp_Standby_DefaultContext_IfrsInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface.
    IfrsInterface []*Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Igmp_Standby_DefaultContext_IfrsInterfaces) GetEntityData() *types.CommonEntityData {
    ifrsInterfaces.EntityData.YFilter = ifrsInterfaces.YFilter
    ifrsInterfaces.EntityData.YangName = "ifrs-interfaces"
    ifrsInterfaces.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaces.EntityData.ParentYangName = "default-context"
    ifrsInterfaces.EntityData.SegmentPath = "ifrs-interfaces"
    ifrsInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaces.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaces.EntityData.Children.Append("ifrs-interface", types.YChild{"IfrsInterface", nil})
    for i := range ifrsInterfaces.IfrsInterface {
        ifrsInterfaces.EntityData.Children.Append(types.GetSegmentPath(ifrsInterfaces.IfrsInterface[i]), types.YChild{"IfrsInterface", ifrsInterfaces.IfrsInterface[i]})
    }
    ifrsInterfaces.EntityData.Leafs = types.NewOrderedMap()

    ifrsInterfaces.EntityData.YListKeys = []string {}

    return &(ifrsInterfaces.EntityData)
}

// Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface) GetEntityData() *types.CommonEntityData {
    ifrsInterface.EntityData.YFilter = ifrsInterface.YFilter
    ifrsInterface.EntityData.YangName = "ifrs-interface"
    ifrsInterface.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterface.EntityData.ParentYangName = "ifrs-interfaces"
    ifrsInterface.EntityData.SegmentPath = "ifrs-interface" + types.AddKeyToken(ifrsInterface.InterfaceName, "interface-name")
    ifrsInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterface.EntityData.Children = types.NewOrderedMap()
    ifrsInterface.EntityData.Children.Append("igmp-interface-entry", types.YChild{"IgmpInterfaceEntry", &ifrsInterface.IgmpInterfaceEntry})
    ifrsInterface.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ifrsInterface.InterfaceName})
    ifrsInterface.EntityData.Leafs.Append("join-group-count", types.YLeaf{"JoinGroupCount", ifrsInterface.JoinGroupCount})

    ifrsInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(ifrsInterface.EntityData)
}

// Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetEntityData() *types.CommonEntityData {
    igmpInterfaceEntry.EntityData.YFilter = igmpInterfaceEntry.YFilter
    igmpInterfaceEntry.EntityData.YangName = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.BundleName = "cisco_ios_xr"
    igmpInterfaceEntry.EntityData.ParentYangName = "ifrs-interface"
    igmpInterfaceEntry.EntityData.SegmentPath = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igmpInterfaceEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igmpInterfaceEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igmpInterfaceEntry.EntityData.Children = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Children.Append("address", types.YChild{"Address", &igmpInterfaceEntry.Address})
    igmpInterfaceEntry.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &igmpInterfaceEntry.QuerierAddress})
    igmpInterfaceEntry.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &igmpInterfaceEntry.SubscriberAddress})
    igmpInterfaceEntry.EntityData.Leafs = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", igmpInterfaceEntry.InterfaceNameXr})
    igmpInterfaceEntry.EntityData.Leafs.Append("state", types.YLeaf{"State", igmpInterfaceEntry.State})
    igmpInterfaceEntry.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", igmpInterfaceEntry.PrefixLength})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", igmpInterfaceEntry.IsInterfaceUp})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", igmpInterfaceEntry.IsIpEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", igmpInterfaceEntry.IsRouterEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", igmpInterfaceEntry.IgmpVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", igmpInterfaceEntry.HostVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", igmpInterfaceEntry.QueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", igmpInterfaceEntry.QueryTimeout})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", igmpInterfaceEntry.QueryMaximumResponseTime})
    igmpInterfaceEntry.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", igmpInterfaceEntry.LastMemberQueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", igmpInterfaceEntry.GroupJoins})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", igmpInterfaceEntry.GroupLeaves})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", igmpInterfaceEntry.IsQuerier})
    igmpInterfaceEntry.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", igmpInterfaceEntry.TotalActiveGroups})
    igmpInterfaceEntry.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", igmpInterfaceEntry.Robustness})
    igmpInterfaceEntry.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", igmpInterfaceEntry.ProxyInterface})
    igmpInterfaceEntry.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", igmpInterfaceEntry.QuerierUptime})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", igmpInterfaceEntry.LasLlRegistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", igmpInterfaceEntry.LasGetAddressCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", igmpInterfaceEntry.LasUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", igmpInterfaceEntry.LasLlRemoveUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", igmpInterfaceEntry.LasLlAddUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", igmpInterfaceEntry.LasNullUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", igmpInterfaceEntry.LasUnregistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", igmpInterfaceEntry.IsLasRequest})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", igmpInterfaceEntry.IsLasRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", igmpInterfaceEntry.VrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", igmpInterfaceEntry.MteVrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("location", types.YLeaf{"Location", igmpInterfaceEntry.Location})
    igmpInterfaceEntry.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", igmpInterfaceEntry.Mtu})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", igmpInterfaceEntry.VrfState})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", igmpInterfaceEntry.IsConfigurationverify})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", igmpInterfaceEntry.ConfigurationvrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", igmpInterfaceEntry.ConfigurationvrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", igmpInterfaceEntry.ConfigurationMcastVrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", igmpInterfaceEntry.ConfigurationMcastVrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", igmpInterfaceEntry.IsImStateRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", igmpInterfaceEntry.IsSubscriber})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", igmpInterfaceEntry.SubscriberMode})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", igmpInterfaceEntry.IsIdentityPresent})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", igmpInterfaceEntry.SubscriberId})
    igmpInterfaceEntry.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", igmpInterfaceEntry.ParentIfhandle})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", igmpInterfaceEntry.TimeSinceLastQueryInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", igmpInterfaceEntry.TimeSinceLastReportInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", igmpInterfaceEntry.RouterUptimeInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", igmpInterfaceEntry.MteTupleCount})

    igmpInterfaceEntry.EntityData.YListKeys = []string {}

    return &(igmpInterfaceEntry.EntityData)
}

// Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "igmp-interface-entry"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "igmp-interface-entry"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "igmp-interface-entry"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Standby_DefaultContext_TrafficCounters
// IGMP Message Traffic Counters
type Igmp_Standby_DefaultContext_TrafficCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Igmp_Standby_DefaultContext_TrafficCounters) GetEntityData() *types.CommonEntityData {
    trafficCounters.EntityData.YFilter = trafficCounters.YFilter
    trafficCounters.EntityData.YangName = "traffic-counters"
    trafficCounters.EntityData.BundleName = "cisco_ios_xr"
    trafficCounters.EntityData.ParentYangName = "default-context"
    trafficCounters.EntityData.SegmentPath = "traffic-counters"
    trafficCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficCounters.EntityData.Children = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", trafficCounters.ElapsedTime})
    trafficCounters.EntityData.Leafs.Append("packets-in", types.YLeaf{"PacketsIn", trafficCounters.PacketsIn})
    trafficCounters.EntityData.Leafs.Append("packets-out", types.YLeaf{"PacketsOut", trafficCounters.PacketsOut})
    trafficCounters.EntityData.Leafs.Append("format-errors", types.YLeaf{"FormatErrors", trafficCounters.FormatErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-input-errors", types.YLeaf{"PacketManagerInputErrors", trafficCounters.PacketManagerInputErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-output-errors", types.YLeaf{"PacketManagerOutputErrors", trafficCounters.PacketManagerOutputErrors})
    trafficCounters.EntityData.Leafs.Append("checksum-errors", types.YLeaf{"ChecksumErrors", trafficCounters.ChecksumErrors})
    trafficCounters.EntityData.Leafs.Append("receive-socket-errors", types.YLeaf{"ReceiveSocketErrors", trafficCounters.ReceiveSocketErrors})
    trafficCounters.EntityData.Leafs.Append("socket-errors", types.YLeaf{"SocketErrors", trafficCounters.SocketErrors})
    trafficCounters.EntityData.Leafs.Append("bad-scope-errors", types.YLeaf{"BadScopeErrors", trafficCounters.BadScopeErrors})
    trafficCounters.EntityData.Leafs.Append("auxillary-data-length-errors", types.YLeaf{"AuxillaryDataLengthErrors", trafficCounters.AuxillaryDataLengthErrors})
    trafficCounters.EntityData.Leafs.Append("invalid-source-address-errors", types.YLeaf{"InvalidSourceAddressErrors", trafficCounters.InvalidSourceAddressErrors})
    trafficCounters.EntityData.Leafs.Append("no-socket-connection", types.YLeaf{"NoSocketConnection", trafficCounters.NoSocketConnection})
    trafficCounters.EntityData.Leafs.Append("miscellaneous-errors", types.YLeaf{"MiscellaneousErrors", trafficCounters.MiscellaneousErrors})
    trafficCounters.EntityData.Leafs.Append("input-queries", types.YLeaf{"InputQueries", trafficCounters.InputQueries})
    trafficCounters.EntityData.Leafs.Append("input-reports", types.YLeaf{"InputReports", trafficCounters.InputReports})
    trafficCounters.EntityData.Leafs.Append("input-leaves", types.YLeaf{"InputLeaves", trafficCounters.InputLeaves})
    trafficCounters.EntityData.Leafs.Append("input-mtrace", types.YLeaf{"InputMtrace", trafficCounters.InputMtrace})
    trafficCounters.EntityData.Leafs.Append("input-dvmrp", types.YLeaf{"InputDvmrp", trafficCounters.InputDvmrp})
    trafficCounters.EntityData.Leafs.Append("input-pim", types.YLeaf{"InputPim", trafficCounters.InputPim})
    trafficCounters.EntityData.Leafs.Append("output-queries", types.YLeaf{"OutputQueries", trafficCounters.OutputQueries})
    trafficCounters.EntityData.Leafs.Append("output-reports", types.YLeaf{"OutputReports", trafficCounters.OutputReports})
    trafficCounters.EntityData.Leafs.Append("output-leaves", types.YLeaf{"OutputLeaves", trafficCounters.OutputLeaves})
    trafficCounters.EntityData.Leafs.Append("output-mtrace", types.YLeaf{"OutputMtrace", trafficCounters.OutputMtrace})
    trafficCounters.EntityData.Leafs.Append("output-dvmrp", types.YLeaf{"OutputDvmrp", trafficCounters.OutputDvmrp})
    trafficCounters.EntityData.Leafs.Append("output-pim", types.YLeaf{"OutputPim", trafficCounters.OutputPim})
    trafficCounters.EntityData.Leafs.Append("get-packet-failure", types.YLeaf{"GetPacketFailure", trafficCounters.GetPacketFailure})
    trafficCounters.EntityData.Leafs.Append("output-no-parent-interface-handle", types.YLeaf{"OutputNoParentInterfaceHandle", trafficCounters.OutputNoParentInterfaceHandle})
    trafficCounters.EntityData.Leafs.Append("input-no-idb", types.YLeaf{"InputNoIdb", trafficCounters.InputNoIdb})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-in-idb", types.YLeaf{"InputNoVrfInIdb", trafficCounters.InputNoVrfInIdb})
    trafficCounters.EntityData.Leafs.Append("input-disabled-idb", types.YLeaf{"InputDisabledIdb", trafficCounters.InputDisabledIdb})
    trafficCounters.EntityData.Leafs.Append("input-martian-address", types.YLeaf{"InputMartianAddress", trafficCounters.InputMartianAddress})
    trafficCounters.EntityData.Leafs.Append("input-no-assigned-vrf-id", types.YLeaf{"InputNoAssignedVrfId", trafficCounters.InputNoAssignedVrfId})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-mtrace", types.YLeaf{"InputNoVrfMtrace", trafficCounters.InputNoVrfMtrace})
    trafficCounters.EntityData.Leafs.Append("input-no-platform-support-mtrace", types.YLeaf{"InputNoPlatformSupportMtrace", trafficCounters.InputNoPlatformSupportMtrace})

    trafficCounters.EntityData.YListKeys = []string {}

    return &(trafficCounters.EntityData)
}

// Igmp_Standby_DefaultContext_Groups
// IGMP Group Database Table
type Igmp_Standby_DefaultContext_Groups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Igmp_Standby_DefaultContext_Groups_Group.
    Group []*Igmp_Standby_DefaultContext_Groups_Group
}

func (groups *Igmp_Standby_DefaultContext_Groups) GetEntityData() *types.CommonEntityData {
    groups.EntityData.YFilter = groups.YFilter
    groups.EntityData.YangName = "groups"
    groups.EntityData.BundleName = "cisco_ios_xr"
    groups.EntityData.ParentYangName = "default-context"
    groups.EntityData.SegmentPath = "groups"
    groups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groups.EntityData.Children = types.NewOrderedMap()
    groups.EntityData.Children.Append("group", types.YChild{"Group", nil})
    for i := range groups.Group {
        groups.EntityData.Children.Append(types.GetSegmentPath(groups.Group[i]), types.YChild{"Group", groups.Group[i]})
    }
    groups.EntityData.Leafs = types.NewOrderedMap()

    groups.EntityData.YListKeys = []string {}

    return &(groups.EntityData)
}

// Igmp_Standby_DefaultContext_Groups_Group
// IGMP Group Entry Information
type Igmp_Standby_DefaultContext_Groups_Group struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Standby_DefaultContext_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Igmp_Standby_DefaultContext_Groups_Group_SourceAddress
}

func (group *Igmp_Standby_DefaultContext_Groups_Group) GetEntityData() *types.CommonEntityData {
    group.EntityData.YFilter = group.YFilter
    group.EntityData.YangName = "group"
    group.EntityData.BundleName = "cisco_ios_xr"
    group.EntityData.ParentYangName = "groups"
    group.EntityData.SegmentPath = "group"
    group.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    group.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    group.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    group.EntityData.Children = types.NewOrderedMap()
    group.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &group.GroupAddressXr})
    group.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &group.LastReporter})
    group.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &group.SourceAddress})
    group.EntityData.Leafs = types.NewOrderedMap()
    group.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", group.GroupAddress})
    group.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", group.InterfaceName})
    group.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", group.InterfaceNameXr})
    group.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", group.Uptime})
    group.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", group.ExpirationTime})
    group.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", group.ExplicitTrackingEnabled})
    group.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", group.IsSelfJoin})
    group.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", group.RowStatus})
    group.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", group.IsLowMemory})
    group.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", group.RouterFilterMode})
    group.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", group.OlderHostVersion1Timer})
    group.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", group.OlderHostVersion2Timer})
    group.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", group.IsAdded})
    group.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", group.IsSuppressed})

    group.EntityData.YListKeys = []string {}

    return &(group.EntityData)
}

// Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr
// Group Address
type Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_DefaultContext_Groups_Group_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Standby_DefaultContext_Groups_Group_LastReporter
// Last reporter address
type Igmp_Standby_DefaultContext_Groups_Group_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Standby_DefaultContext_Groups_Group_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Igmp_Standby_DefaultContext_Groups_Group_SourceAddress
// Source Address
type Igmp_Standby_DefaultContext_Groups_Group_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Standby_DefaultContext_Groups_Group_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Standby_DefaultContext_GroupSummary
// IGMP Groups Summary
type Igmp_Standby_DefaultContext_GroupSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Igmp_Standby_DefaultContext_GroupSummary) GetEntityData() *types.CommonEntityData {
    groupSummary.EntityData.YFilter = groupSummary.YFilter
    groupSummary.EntityData.YangName = "group-summary"
    groupSummary.EntityData.BundleName = "cisco_ios_xr"
    groupSummary.EntityData.ParentYangName = "default-context"
    groupSummary.EntityData.SegmentPath = "group-summary"
    groupSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupSummary.EntityData.Children = types.NewOrderedMap()
    groupSummary.EntityData.Leafs = types.NewOrderedMap()
    groupSummary.EntityData.Leafs.Append("groutes", types.YLeaf{"Groutes", groupSummary.Groutes})
    groupSummary.EntityData.Leafs.Append("sg-routes", types.YLeaf{"SgRoutes", groupSummary.SgRoutes})
    groupSummary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", groupSummary.GroupCount})
    groupSummary.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupSummary.IsLowMemory})

    groupSummary.EntityData.YListKeys = []string {}

    return &(groupSummary.EntityData)
}

// Igmp_Standby_DefaultContext_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Igmp_Standby_DefaultContext_IfrsInterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Igmp_Standby_DefaultContext_IfrsInterfaceSummary) GetEntityData() *types.CommonEntityData {
    ifrsInterfaceSummary.EntityData.YFilter = ifrsInterfaceSummary.YFilter
    ifrsInterfaceSummary.EntityData.YangName = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaceSummary.EntityData.ParentYangName = "default-context"
    ifrsInterfaceSummary.EntityData.SegmentPath = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaceSummary.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs.Append("interface-count", types.YLeaf{"InterfaceCount", ifrsInterfaceSummary.InterfaceCount})
    ifrsInterfaceSummary.EntityData.Leafs.Append("configuration-count", types.YLeaf{"ConfigurationCount", ifrsInterfaceSummary.ConfigurationCount})

    ifrsInterfaceSummary.EntityData.YListKeys = []string {}

    return &(ifrsInterfaceSummary.EntityData)
}

// Igmp_Standby_DefaultContext_GlobalInterfaceTable
// IGMP Global Interface 
type Igmp_Standby_DefaultContext_GlobalInterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface.
    Interface []*Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Igmp_Standby_DefaultContext_GlobalInterfaceTable) GetEntityData() *types.CommonEntityData {
    globalInterfaceTable.EntityData.YFilter = globalInterfaceTable.YFilter
    globalInterfaceTable.EntityData.YangName = "global-interface-table"
    globalInterfaceTable.EntityData.BundleName = "cisco_ios_xr"
    globalInterfaceTable.EntityData.ParentYangName = "default-context"
    globalInterfaceTable.EntityData.SegmentPath = "global-interface-table"
    globalInterfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalInterfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalInterfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalInterfaceTable.EntityData.Children = types.NewOrderedMap()
    globalInterfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range globalInterfaceTable.Interface {
        globalInterfaceTable.EntityData.Children.Append(types.GetSegmentPath(globalInterfaceTable.Interface[i]), types.YChild{"Interface", globalInterfaceTable.Interface[i]})
    }
    globalInterfaceTable.EntityData.Leafs = types.NewOrderedMap()

    globalInterfaceTable.EntityData.YListKeys = []string {}

    return &(globalInterfaceTable.EntityData)
}

// Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface
// IGMP Interface
type Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "global-interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address
// IP address
type Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Standby_DefaultContext_SsmMapDetails
// SSM Map Detail
type Igmp_Standby_DefaultContext_SsmMapDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []*Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Igmp_Standby_DefaultContext_SsmMapDetails) GetEntityData() *types.CommonEntityData {
    ssmMapDetails.EntityData.YFilter = ssmMapDetails.YFilter
    ssmMapDetails.EntityData.YangName = "ssm-map-details"
    ssmMapDetails.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetails.EntityData.ParentYangName = "default-context"
    ssmMapDetails.EntityData.SegmentPath = "ssm-map-details"
    ssmMapDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetails.EntityData.Children = types.NewOrderedMap()
    ssmMapDetails.EntityData.Children.Append("ssm-map-detail", types.YChild{"SsmMapDetail", nil})
    for i := range ssmMapDetails.SsmMapDetail {
        ssmMapDetails.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetails.SsmMapDetail[i]), types.YChild{"SsmMapDetail", ssmMapDetails.SsmMapDetail[i]})
    }
    ssmMapDetails.EntityData.Leafs = types.NewOrderedMap()

    ssmMapDetails.EntityData.YListKeys = []string {}

    return &(ssmMapDetails.EntityData)
}

// Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources.
    Sources []*Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail) GetEntityData() *types.CommonEntityData {
    ssmMapDetail.EntityData.YFilter = ssmMapDetail.YFilter
    ssmMapDetail.EntityData.YangName = "ssm-map-detail"
    ssmMapDetail.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetail.EntityData.ParentYangName = "ssm-map-details"
    ssmMapDetail.EntityData.SegmentPath = "ssm-map-detail"
    ssmMapDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetail.EntityData.Children = types.NewOrderedMap()
    ssmMapDetail.EntityData.Children.Append("map-info", types.YChild{"MapInfo", &ssmMapDetail.MapInfo})
    ssmMapDetail.EntityData.Children.Append("sources", types.YChild{"Sources", nil})
    for i := range ssmMapDetail.Sources {
        ssmMapDetail.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetail.Sources[i]), types.YChild{"Sources", ssmMapDetail.Sources[i]})
    }
    ssmMapDetail.EntityData.Leafs = types.NewOrderedMap()
    ssmMapDetail.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMapDetail.SsmMapType})
    ssmMapDetail.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMapDetail.GroupAddress})
    ssmMapDetail.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", ssmMapDetail.ExpirationTime})
    ssmMapDetail.EntityData.Leafs.Append("response-pending", types.YLeaf{"ResponsePending", ssmMapDetail.ResponsePending})
    ssmMapDetail.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", ssmMapDetail.QueryInterval})
    ssmMapDetail.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", ssmMapDetail.ElapsedTime})

    ssmMapDetail.EntityData.YListKeys = []string {}

    return &(ssmMapDetail.EntityData)
}

// Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetEntityData() *types.CommonEntityData {
    mapInfo.EntityData.YFilter = mapInfo.YFilter
    mapInfo.EntityData.YangName = "map-info"
    mapInfo.EntityData.BundleName = "cisco_ios_xr"
    mapInfo.EntityData.ParentYangName = "ssm-map-detail"
    mapInfo.EntityData.SegmentPath = "map-info"
    mapInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mapInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mapInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mapInfo.EntityData.Children = types.NewOrderedMap()
    mapInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &mapInfo.GroupAddressXr})
    mapInfo.EntityData.Leafs = types.NewOrderedMap()
    mapInfo.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", mapInfo.MapType})
    mapInfo.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", mapInfo.SourceCounts})

    mapInfo.EntityData.YListKeys = []string {}

    return &(mapInfo.EntityData)
}

// Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "map-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Igmp_Standby_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetEntityData() *types.CommonEntityData {
    sources.EntityData.YFilter = sources.YFilter
    sources.EntityData.YangName = "sources"
    sources.EntityData.BundleName = "cisco_ios_xr"
    sources.EntityData.ParentYangName = "ssm-map-detail"
    sources.EntityData.SegmentPath = "sources"
    sources.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sources.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sources.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sources.EntityData.Children = types.NewOrderedMap()
    sources.EntityData.Leafs = types.NewOrderedMap()
    sources.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sources.AfName})
    sources.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sources.Ipv4Address})
    sources.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sources.Ipv6Address})

    sources.EntityData.YListKeys = []string {}

    return &(sources.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceStateOffs
// IGMP Interface state off
type Igmp_Standby_DefaultContext_InterfaceStateOffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []*Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Igmp_Standby_DefaultContext_InterfaceStateOffs) GetEntityData() *types.CommonEntityData {
    interfaceStateOffs.EntityData.YFilter = interfaceStateOffs.YFilter
    interfaceStateOffs.EntityData.YangName = "interface-state-offs"
    interfaceStateOffs.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOffs.EntityData.ParentYangName = "default-context"
    interfaceStateOffs.EntityData.SegmentPath = "interface-state-offs"
    interfaceStateOffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOffs.EntityData.Children = types.NewOrderedMap()
    interfaceStateOffs.EntityData.Children.Append("interface-state-off", types.YChild{"InterfaceStateOff", nil})
    for i := range interfaceStateOffs.InterfaceStateOff {
        interfaceStateOffs.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOffs.InterfaceStateOff[i]), types.YChild{"InterfaceStateOff", interfaceStateOffs.InterfaceStateOff[i]})
    }
    interfaceStateOffs.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOffs.EntityData.YListKeys = []string {}

    return &(interfaceStateOffs.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetEntityData() *types.CommonEntityData {
    interfaceStateOff.EntityData.YFilter = interfaceStateOff.YFilter
    interfaceStateOff.EntityData.YangName = "interface-state-off"
    interfaceStateOff.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOff.EntityData.ParentYangName = "interface-state-offs"
    interfaceStateOff.EntityData.SegmentPath = "interface-state-off" + types.AddKeyToken(interfaceStateOff.InterfaceName, "interface-name")
    interfaceStateOff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOff.EntityData.Children = types.NewOrderedMap()
    interfaceStateOff.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOff.Address})
    interfaceStateOff.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOff.QuerierAddress})
    interfaceStateOff.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOff.SubscriberAddress})
    interfaceStateOff.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOff.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOff.InterfaceName})
    interfaceStateOff.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOff.InterfaceNameXr})
    interfaceStateOff.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOff.State})
    interfaceStateOff.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOff.PrefixLength})
    interfaceStateOff.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOff.IsInterfaceUp})
    interfaceStateOff.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOff.IsIpEnabled})
    interfaceStateOff.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOff.IsRouterEnabled})
    interfaceStateOff.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOff.IgmpVersion})
    interfaceStateOff.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOff.HostVersion})
    interfaceStateOff.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOff.QueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOff.QueryTimeout})
    interfaceStateOff.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOff.QueryMaximumResponseTime})
    interfaceStateOff.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOff.LastMemberQueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOff.GroupJoins})
    interfaceStateOff.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOff.GroupLeaves})
    interfaceStateOff.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOff.IsQuerier})
    interfaceStateOff.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOff.TotalActiveGroups})
    interfaceStateOff.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOff.Robustness})
    interfaceStateOff.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOff.ProxyInterface})
    interfaceStateOff.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOff.QuerierUptime})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOff.LasLlRegistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOff.LasGetAddressCount})
    interfaceStateOff.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOff.LasUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOff.LasLlRemoveUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOff.LasLlAddUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOff.LasNullUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOff.LasUnregistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOff.IsLasRequest})
    interfaceStateOff.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOff.IsLasRegistered})
    interfaceStateOff.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOff.VrfId})
    interfaceStateOff.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOff.MteVrfId})
    interfaceStateOff.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOff.Location})
    interfaceStateOff.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOff.Mtu})
    interfaceStateOff.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOff.VrfState})
    interfaceStateOff.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOff.IsConfigurationverify})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOff.ConfigurationvrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOff.ConfigurationvrfError})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOff.ConfigurationMcastVrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOff.ConfigurationMcastVrfError})
    interfaceStateOff.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOff.IsImStateRegistered})
    interfaceStateOff.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOff.IsSubscriber})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOff.SubscriberMode})
    interfaceStateOff.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOff.IsIdentityPresent})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOff.SubscriberId})
    interfaceStateOff.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOff.ParentIfhandle})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOff.TimeSinceLastQueryInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOff.TimeSinceLastReportInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOff.RouterUptimeInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOff.MteTupleCount})

    interfaceStateOff.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOff.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-off"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-off"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Standby_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-off"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Active
// Active Process
type Igmp_Active struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Table.
    Vrfs Igmp_Active_Vrfs

    // Process.
    Process Igmp_Active_Process

    // Default Context.
    DefaultContext Igmp_Active_DefaultContext
}

func (active *Igmp_Active) GetEntityData() *types.CommonEntityData {
    active.EntityData.YFilter = active.YFilter
    active.EntityData.YangName = "active"
    active.EntityData.BundleName = "cisco_ios_xr"
    active.EntityData.ParentYangName = "igmp"
    active.EntityData.SegmentPath = "active"
    active.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    active.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    active.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    active.EntityData.Children = types.NewOrderedMap()
    active.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &active.Vrfs})
    active.EntityData.Children.Append("process", types.YChild{"Process", &active.Process})
    active.EntityData.Children.Append("default-context", types.YChild{"DefaultContext", &active.DefaultContext})
    active.EntityData.Leafs = types.NewOrderedMap()

    active.EntityData.YListKeys = []string {}

    return &(active.EntityData)
}

// Igmp_Active_Vrfs
// VRF Table
type Igmp_Active_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table Names. The type is slice of Igmp_Active_Vrfs_Vrf.
    Vrf []*Igmp_Active_Vrfs_Vrf
}

func (vrfs *Igmp_Active_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "active"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// Igmp_Active_Vrfs_Vrf
// VRF table Names
type Igmp_Active_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with length: 1..32.
    VrfName interface{}

    // IGMP Summary Information.
    Summary Igmp_Active_Vrfs_Vrf_Summary

    // IGMP Interface state on.
    InterfaceStateOns Igmp_Active_Vrfs_Vrf_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Igmp_Active_Vrfs_Vrf_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Igmp_Active_Vrfs_Vrf_NonActiveGroups

    // SSM Map Table.
    SsmMaps Igmp_Active_Vrfs_Vrf_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Igmp_Active_Vrfs_Vrf_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Igmp_Active_Vrfs_Vrf_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Igmp_Active_Vrfs_Vrf_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Igmp_Active_Vrfs_Vrf_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Igmp_Active_Vrfs_Vrf_TrafficCounters

    // IGMP Group Database Table.
    Groups Igmp_Active_Vrfs_Vrf_Groups

    // IGMP Groups Summary.
    GroupSummary Igmp_Active_Vrfs_Vrf_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Igmp_Active_Vrfs_Vrf_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Igmp_Active_Vrfs_Vrf_InterfaceStateOffs
}

func (vrf *Igmp_Active_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("summary", types.YChild{"Summary", &vrf.Summary})
    vrf.EntityData.Children.Append("interface-state-ons", types.YChild{"InterfaceStateOns", &vrf.InterfaceStateOns})
    vrf.EntityData.Children.Append("detail-groups", types.YChild{"DetailGroups", &vrf.DetailGroups})
    vrf.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", &vrf.NonActiveGroups})
    vrf.EntityData.Children.Append("ssm-maps", types.YChild{"SsmMaps", &vrf.SsmMaps})
    vrf.EntityData.Children.Append("explicit-groups", types.YChild{"ExplicitGroups", &vrf.ExplicitGroups})
    vrf.EntityData.Children.Append("interface-table", types.YChild{"InterfaceTable", &vrf.InterfaceTable})
    vrf.EntityData.Children.Append("interface-unicast-qos-adjusts", types.YChild{"InterfaceUnicastQosAdjusts", &vrf.InterfaceUnicastQosAdjusts})
    vrf.EntityData.Children.Append("ranges", types.YChild{"Ranges", &vrf.Ranges})
    vrf.EntityData.Children.Append("ifrs-interfaces", types.YChild{"IfrsInterfaces", &vrf.IfrsInterfaces})
    vrf.EntityData.Children.Append("traffic-counters", types.YChild{"TrafficCounters", &vrf.TrafficCounters})
    vrf.EntityData.Children.Append("groups", types.YChild{"Groups", &vrf.Groups})
    vrf.EntityData.Children.Append("group-summary", types.YChild{"GroupSummary", &vrf.GroupSummary})
    vrf.EntityData.Children.Append("ifrs-interface-summary", types.YChild{"IfrsInterfaceSummary", &vrf.IfrsInterfaceSummary})
    vrf.EntityData.Children.Append("global-interface-table", types.YChild{"GlobalInterfaceTable", &vrf.GlobalInterfaceTable})
    vrf.EntityData.Children.Append("ssm-map-details", types.YChild{"SsmMapDetails", &vrf.SsmMapDetails})
    vrf.EntityData.Children.Append("interface-state-offs", types.YChild{"InterfaceStateOffs", &vrf.InterfaceStateOffs})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// Igmp_Active_Vrfs_Vrf_Summary
// IGMP Summary Information
type Igmp_Active_Vrfs_Vrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Igmp_Active_Vrfs_Vrf_Summary_Interface.
    Interface []*Igmp_Active_Vrfs_Vrf_Summary_Interface
}

func (summary *Igmp_Active_Vrfs_Vrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range summary.Interface {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.Interface[i]), types.YChild{"Interface", summary.Interface[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", summary.Robustness})
    summary.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", summary.GroupLimit})
    summary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", summary.GroupCount})
    summary.EntityData.Leafs.Append("is-disabled", types.YLeaf{"IsDisabled", summary.IsDisabled})
    summary.EntityData.Leafs.Append("supported-interfaces", types.YLeaf{"SupportedInterfaces", summary.SupportedInterfaces})
    summary.EntityData.Leafs.Append("unsupported-interfaces", types.YLeaf{"UnsupportedInterfaces", summary.UnsupportedInterfaces})
    summary.EntityData.Leafs.Append("enabled-interface-count", types.YLeaf{"EnabledInterfaceCount", summary.EnabledInterfaceCount})
    summary.EntityData.Leafs.Append("disabled-interface-count", types.YLeaf{"DisabledInterfaceCount", summary.DisabledInterfaceCount})
    summary.EntityData.Leafs.Append("tunnel-mte-config-count", types.YLeaf{"TunnelMteConfigCount", summary.TunnelMteConfigCount})
    summary.EntityData.Leafs.Append("node-low-memory", types.YLeaf{"NodeLowMemory", summary.NodeLowMemory})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Igmp_Active_Vrfs_Vrf_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Igmp_Active_Vrfs_Vrf_Summary_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Igmp_Active_Vrfs_Vrf_Summary_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "summary"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", self.GroupLimit})
    self.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", self.GroupCount})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("on-off", types.YLeaf{"OnOff", self.OnOff})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceStateOns
// IGMP Interface state on
type Igmp_Active_Vrfs_Vrf_InterfaceStateOns struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []*Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Igmp_Active_Vrfs_Vrf_InterfaceStateOns) GetEntityData() *types.CommonEntityData {
    interfaceStateOns.EntityData.YFilter = interfaceStateOns.YFilter
    interfaceStateOns.EntityData.YangName = "interface-state-ons"
    interfaceStateOns.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOns.EntityData.ParentYangName = "vrf"
    interfaceStateOns.EntityData.SegmentPath = "interface-state-ons"
    interfaceStateOns.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOns.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOns.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOns.EntityData.Children = types.NewOrderedMap()
    interfaceStateOns.EntityData.Children.Append("interface-state-on", types.YChild{"InterfaceStateOn", nil})
    for i := range interfaceStateOns.InterfaceStateOn {
        interfaceStateOns.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOns.InterfaceStateOn[i]), types.YChild{"InterfaceStateOn", interfaceStateOns.InterfaceStateOn[i]})
    }
    interfaceStateOns.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOns.EntityData.YListKeys = []string {}

    return &(interfaceStateOns.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn) GetEntityData() *types.CommonEntityData {
    interfaceStateOn.EntityData.YFilter = interfaceStateOn.YFilter
    interfaceStateOn.EntityData.YangName = "interface-state-on"
    interfaceStateOn.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOn.EntityData.ParentYangName = "interface-state-ons"
    interfaceStateOn.EntityData.SegmentPath = "interface-state-on" + types.AddKeyToken(interfaceStateOn.InterfaceName, "interface-name")
    interfaceStateOn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOn.EntityData.Children = types.NewOrderedMap()
    interfaceStateOn.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOn.Address})
    interfaceStateOn.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOn.QuerierAddress})
    interfaceStateOn.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOn.SubscriberAddress})
    interfaceStateOn.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOn.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOn.InterfaceName})
    interfaceStateOn.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOn.InterfaceNameXr})
    interfaceStateOn.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOn.State})
    interfaceStateOn.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOn.PrefixLength})
    interfaceStateOn.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOn.IsInterfaceUp})
    interfaceStateOn.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOn.IsIpEnabled})
    interfaceStateOn.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOn.IsRouterEnabled})
    interfaceStateOn.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOn.IgmpVersion})
    interfaceStateOn.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOn.HostVersion})
    interfaceStateOn.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOn.QueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOn.QueryTimeout})
    interfaceStateOn.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOn.QueryMaximumResponseTime})
    interfaceStateOn.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOn.LastMemberQueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOn.GroupJoins})
    interfaceStateOn.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOn.GroupLeaves})
    interfaceStateOn.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOn.IsQuerier})
    interfaceStateOn.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOn.TotalActiveGroups})
    interfaceStateOn.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOn.Robustness})
    interfaceStateOn.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOn.ProxyInterface})
    interfaceStateOn.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOn.QuerierUptime})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOn.LasLlRegistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOn.LasGetAddressCount})
    interfaceStateOn.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOn.LasUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOn.LasLlRemoveUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOn.LasLlAddUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOn.LasNullUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOn.LasUnregistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOn.IsLasRequest})
    interfaceStateOn.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOn.IsLasRegistered})
    interfaceStateOn.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOn.VrfId})
    interfaceStateOn.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOn.MteVrfId})
    interfaceStateOn.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOn.Location})
    interfaceStateOn.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOn.Mtu})
    interfaceStateOn.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOn.VrfState})
    interfaceStateOn.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOn.IsConfigurationverify})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOn.ConfigurationvrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOn.ConfigurationvrfError})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOn.ConfigurationMcastVrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOn.ConfigurationMcastVrfError})
    interfaceStateOn.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOn.IsImStateRegistered})
    interfaceStateOn.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOn.IsSubscriber})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOn.SubscriberMode})
    interfaceStateOn.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOn.IsIdentityPresent})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOn.SubscriberId})
    interfaceStateOn.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOn.ParentIfhandle})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOn.TimeSinceLastQueryInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOn.TimeSinceLastReportInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOn.RouterUptimeInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOn.MteTupleCount})

    interfaceStateOn.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOn.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-on"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-on"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-on"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_DetailGroups
// IGMP Detail Group Database
type Igmp_Active_Vrfs_Vrf_DetailGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup.
    DetailGroup []*Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup
}

func (detailGroups *Igmp_Active_Vrfs_Vrf_DetailGroups) GetEntityData() *types.CommonEntityData {
    detailGroups.EntityData.YFilter = detailGroups.YFilter
    detailGroups.EntityData.YangName = "detail-groups"
    detailGroups.EntityData.BundleName = "cisco_ios_xr"
    detailGroups.EntityData.ParentYangName = "vrf"
    detailGroups.EntityData.SegmentPath = "detail-groups"
    detailGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroups.EntityData.Children = types.NewOrderedMap()
    detailGroups.EntityData.Children.Append("detail-group", types.YChild{"DetailGroup", nil})
    for i := range detailGroups.DetailGroup {
        detailGroups.EntityData.Children.Append(types.GetSegmentPath(detailGroups.DetailGroup[i]), types.YChild{"DetailGroup", detailGroups.DetailGroup[i]})
    }
    detailGroups.EntityData.Leafs = types.NewOrderedMap()

    detailGroups.EntityData.YListKeys = []string {}

    return &(detailGroups.EntityData)
}

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source.
    Source []*Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source
}

func (detailGroup *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup) GetEntityData() *types.CommonEntityData {
    detailGroup.EntityData.YFilter = detailGroup.YFilter
    detailGroup.EntityData.YangName = "detail-group"
    detailGroup.EntityData.BundleName = "cisco_ios_xr"
    detailGroup.EntityData.ParentYangName = "detail-groups"
    detailGroup.EntityData.SegmentPath = "detail-group"
    detailGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroup.EntityData.Children = types.NewOrderedMap()
    detailGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &detailGroup.GroupInfo})
    detailGroup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range detailGroup.Source {
        detailGroup.EntityData.Children.Append(types.GetSegmentPath(detailGroup.Source[i]), types.YChild{"Source", detailGroup.Source[i]})
    }
    detailGroup.EntityData.Leafs = types.NewOrderedMap()
    detailGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", detailGroup.GroupAddress})
    detailGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", detailGroup.InterfaceName})
    detailGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", detailGroup.SourceAddress})
    detailGroup.EntityData.Leafs.Append("is-router-exclude-mode", types.YLeaf{"IsRouterExcludeMode", detailGroup.IsRouterExcludeMode})
    detailGroup.EntityData.Leafs.Append("is-host-exclude-mode", types.YLeaf{"IsHostExcludeMode", detailGroup.IsHostExcludeMode})

    detailGroup.EntityData.YListKeys = []string {}

    return &(detailGroup.EntityData)
}

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "detail-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source
// List of sources
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "detail-group"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &source.SourceAddress})
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", source.Uptime})
    source.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", source.ExpirationTime})
    source.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", source.IsLocal})
    source.EntityData.Leafs.Append("is-remote", types.YLeaf{"IsRemote", source.IsRemote})
    source.EntityData.Leafs.Append("is-forward", types.YLeaf{"IsForward", source.IsForward})
    source.EntityData.Leafs.Append("is-we-report", types.YLeaf{"IsWeReport", source.IsWeReport})
    source.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", source.Flags})
    source.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", source.IsAdded})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_DetailGroups_DetailGroup_Source_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "source"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_NonActiveGroups
// IGMP Non-Active Groups Information
type Igmp_Active_Vrfs_Vrf_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []*Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "vrf"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", nil})
    for i := range nonActiveGroups.NonActiveGroups {
        nonActiveGroups.EntityData.Children.Append(types.GetSegmentPath(nonActiveGroups.NonActiveGroups[i]), types.YChild{"NonActiveGroups", nonActiveGroups.NonActiveGroups[i]})
    }
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "non-active-groups"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &nonActiveGroups.GroupAddress})
    nonActiveGroups.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &nonActiveGroups.SourceAddress})
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()
    nonActiveGroups.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", nonActiveGroups.Interface})
    nonActiveGroups.EntityData.Leafs.Append("reason-for-non-activity", types.YLeaf{"ReasonForNonActivity", nonActiveGroups.ReasonForNonActivity})

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "non-active-groups"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_NonActiveGroups_NonActiveGroups_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "non-active-groups"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_SsmMaps
// SSM Map Table
type Igmp_Active_Vrfs_Vrf_SsmMaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap.
    SsmMap []*Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap
}

func (ssmMaps *Igmp_Active_Vrfs_Vrf_SsmMaps) GetEntityData() *types.CommonEntityData {
    ssmMaps.EntityData.YFilter = ssmMaps.YFilter
    ssmMaps.EntityData.YangName = "ssm-maps"
    ssmMaps.EntityData.BundleName = "cisco_ios_xr"
    ssmMaps.EntityData.ParentYangName = "vrf"
    ssmMaps.EntityData.SegmentPath = "ssm-maps"
    ssmMaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMaps.EntityData.Children = types.NewOrderedMap()
    ssmMaps.EntityData.Children.Append("ssm-map", types.YChild{"SsmMap", nil})
    for i := range ssmMaps.SsmMap {
        ssmMaps.EntityData.Children.Append(types.GetSegmentPath(ssmMaps.SsmMap[i]), types.YChild{"SsmMap", ssmMaps.SsmMap[i]})
    }
    ssmMaps.EntityData.Leafs = types.NewOrderedMap()

    ssmMaps.EntityData.YListKeys = []string {}

    return &(ssmMaps.EntityData)
}

// Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap
// SSM Map information
type Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap) GetEntityData() *types.CommonEntityData {
    ssmMap.EntityData.YFilter = ssmMap.YFilter
    ssmMap.EntityData.YangName = "ssm-map"
    ssmMap.EntityData.BundleName = "cisco_ios_xr"
    ssmMap.EntityData.ParentYangName = "ssm-maps"
    ssmMap.EntityData.SegmentPath = "ssm-map"
    ssmMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMap.EntityData.Children = types.NewOrderedMap()
    ssmMap.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &ssmMap.GroupAddressXr})
    ssmMap.EntityData.Leafs = types.NewOrderedMap()
    ssmMap.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMap.SsmMapType})
    ssmMap.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMap.GroupAddress})
    ssmMap.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", ssmMap.MapType})
    ssmMap.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", ssmMap.SourceCounts})

    ssmMap.EntityData.YListKeys = []string {}

    return &(ssmMap.EntityData)
}

// Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMaps_SsmMap_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "ssm-map"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Active_Vrfs_Vrf_ExplicitGroups
// IGMP Explicit Group Database
type Igmp_Active_Vrfs_Vrf_ExplicitGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []*Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Igmp_Active_Vrfs_Vrf_ExplicitGroups) GetEntityData() *types.CommonEntityData {
    explicitGroups.EntityData.YFilter = explicitGroups.YFilter
    explicitGroups.EntityData.YangName = "explicit-groups"
    explicitGroups.EntityData.BundleName = "cisco_ios_xr"
    explicitGroups.EntityData.ParentYangName = "vrf"
    explicitGroups.EntityData.SegmentPath = "explicit-groups"
    explicitGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroups.EntityData.Children = types.NewOrderedMap()
    explicitGroups.EntityData.Children.Append("explicit-group", types.YChild{"ExplicitGroup", nil})
    for i := range explicitGroups.ExplicitGroup {
        explicitGroups.EntityData.Children.Append(types.GetSegmentPath(explicitGroups.ExplicitGroup[i]), types.YChild{"ExplicitGroup", explicitGroups.ExplicitGroup[i]})
    }
    explicitGroups.EntityData.Leafs = types.NewOrderedMap()

    explicitGroups.EntityData.YListKeys = []string {}

    return &(explicitGroups.EntityData)
}

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host.
    Host []*Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup) GetEntityData() *types.CommonEntityData {
    explicitGroup.EntityData.YFilter = explicitGroup.YFilter
    explicitGroup.EntityData.YangName = "explicit-group"
    explicitGroup.EntityData.BundleName = "cisco_ios_xr"
    explicitGroup.EntityData.ParentYangName = "explicit-groups"
    explicitGroup.EntityData.SegmentPath = "explicit-group"
    explicitGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroup.EntityData.Children = types.NewOrderedMap()
    explicitGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &explicitGroup.GroupInfo})
    explicitGroup.EntityData.Children.Append("host", types.YChild{"Host", nil})
    for i := range explicitGroup.Host {
        explicitGroup.EntityData.Children.Append(types.GetSegmentPath(explicitGroup.Host[i]), types.YChild{"Host", explicitGroup.Host[i]})
    }
    explicitGroup.EntityData.Leafs = types.NewOrderedMap()
    explicitGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", explicitGroup.GroupAddress})
    explicitGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", explicitGroup.InterfaceName})
    explicitGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", explicitGroup.SourceAddress})
    explicitGroup.EntityData.Leafs.Append("include-hosts", types.YLeaf{"IncludeHosts", explicitGroup.IncludeHosts})
    explicitGroup.EntityData.Leafs.Append("exclude-hosts", types.YLeaf{"ExcludeHosts", explicitGroup.ExcludeHosts})

    explicitGroup.EntityData.YListKeys = []string {}

    return &(explicitGroup.EntityData)
}

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "explicit-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []*Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host) GetEntityData() *types.CommonEntityData {
    host.EntityData.YFilter = host.YFilter
    host.EntityData.YangName = "host"
    host.EntityData.BundleName = "cisco_ios_xr"
    host.EntityData.ParentYangName = "explicit-group"
    host.EntityData.SegmentPath = "host"
    host.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    host.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    host.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    host.EntityData.Children = types.NewOrderedMap()
    host.EntityData.Children.Append("address", types.YChild{"Address", &host.Address})
    host.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", nil})
    for i := range host.SourceAddress {
        host.EntityData.Children.Append(types.GetSegmentPath(host.SourceAddress[i]), types.YChild{"SourceAddress", host.SourceAddress[i]})
    }
    host.EntityData.Leafs = types.NewOrderedMap()
    host.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", host.Uptime})
    host.EntityData.Leafs.Append("is-exclude", types.YLeaf{"IsExclude", host.IsExclude})
    host.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", host.ExpirationTime})
    host.EntityData.Leafs.Append("source-count", types.YLeaf{"SourceCount", host.SourceCount})

    host.EntityData.YListKeys = []string {}

    return &(host.EntityData)
}

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "host"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "host"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceTable
// IGMP Interface specific Table
type Igmp_Active_Vrfs_Vrf_InterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface.
    Interface []*Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface
}

func (interfaceTable *Igmp_Active_Vrfs_Vrf_InterfaceTable) GetEntityData() *types.CommonEntityData {
    interfaceTable.EntityData.YFilter = interfaceTable.YFilter
    interfaceTable.EntityData.YangName = "interface-table"
    interfaceTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceTable.EntityData.ParentYangName = "vrf"
    interfaceTable.EntityData.SegmentPath = "interface-table"
    interfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceTable.EntityData.Children = types.NewOrderedMap()
    interfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceTable.Interface {
        interfaceTable.EntityData.Children.Append(types.GetSegmentPath(interfaceTable.Interface[i]), types.YChild{"Interface", interfaceTable.Interface[i]})
    }
    interfaceTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceTable.EntityData.YListKeys = []string {}

    return &(interfaceTable.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface
// IGMP Interface
type Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address
// IP address
type Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []*Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjusts.EntityData.YFilter = interfaceUnicastQosAdjusts.YFilter
    interfaceUnicastQosAdjusts.EntityData.YangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjusts.EntityData.ParentYangName = "vrf"
    interfaceUnicastQosAdjusts.EntityData.SegmentPath = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjusts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjusts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjusts.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjusts.EntityData.Children.Append("interface-unicast-qos-adjust", types.YChild{"InterfaceUnicastQosAdjust", nil})
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        interfaceUnicastQosAdjusts.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]), types.YChild{"InterfaceUnicastQosAdjust", interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]})
    }
    interfaceUnicastQosAdjusts.EntityData.Leafs = types.NewOrderedMap()

    interfaceUnicastQosAdjusts.EntityData.YListKeys = []string {}

    return &(interfaceUnicastQosAdjusts.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []*Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjust.EntityData.YFilter = interfaceUnicastQosAdjust.YFilter
    interfaceUnicastQosAdjust.EntityData.YangName = "interface-unicast-qos-adjust"
    interfaceUnicastQosAdjust.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjust.EntityData.ParentYangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjust.EntityData.SegmentPath = "interface-unicast-qos-adjust" + types.AddKeyToken(interfaceUnicastQosAdjust.InterfaceName, "interface-name")
    interfaceUnicastQosAdjust.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjust.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjust.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjust.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Children.Append("update", types.YChild{"Update", nil})
    for i := range interfaceUnicastQosAdjust.Update {
        interfaceUnicastQosAdjust.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjust.Update[i]), types.YChild{"Update", interfaceUnicastQosAdjust.Update[i]})
    }
    interfaceUnicastQosAdjust.EntityData.Leafs = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceUnicastQosAdjust.InterfaceName})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("is-virtual-access", types.YLeaf{"IsVirtualAccess", interfaceUnicastQosAdjust.IsVirtualAccess})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate", types.YLeaf{"Rate", interfaceUnicastQosAdjust.Rate})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-increments", types.YLeaf{"RateIncrements", interfaceUnicastQosAdjust.RateIncrements})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-decrements", types.YLeaf{"RateDecrements", interfaceUnicastQosAdjust.RateDecrements})

    interfaceUnicastQosAdjust.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceUnicastQosAdjust.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetEntityData() *types.CommonEntityData {
    update.EntityData.YFilter = update.YFilter
    update.EntityData.YangName = "update"
    update.EntityData.BundleName = "cisco_ios_xr"
    update.EntityData.ParentYangName = "interface-unicast-qos-adjust"
    update.EntityData.SegmentPath = "update"
    update.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    update.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    update.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    update.EntityData.Children = types.NewOrderedMap()
    update.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &update.SourceAddress})
    update.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &update.GroupAddress})
    update.EntityData.Leafs = types.NewOrderedMap()
    update.EntityData.Leafs.Append("is-add", types.YLeaf{"IsAdd", update.IsAdd})
    update.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", update.Weight})
    update.EntityData.Leafs.Append("received-time", types.YLeaf{"ReceivedTime", update.ReceivedTime})

    update.EntityData.YListKeys = []string {}

    return &(update.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "update"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Active_Vrfs_Vrf_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "update"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_Ranges
// Range table
type Igmp_Active_Vrfs_Vrf_Ranges struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Range information. The type is slice of Igmp_Active_Vrfs_Vrf_Ranges_Range.
    Range []*Igmp_Active_Vrfs_Vrf_Ranges_Range
}

func (ranges *Igmp_Active_Vrfs_Vrf_Ranges) GetEntityData() *types.CommonEntityData {
    ranges.EntityData.YFilter = ranges.YFilter
    ranges.EntityData.YangName = "ranges"
    ranges.EntityData.BundleName = "cisco_ios_xr"
    ranges.EntityData.ParentYangName = "vrf"
    ranges.EntityData.SegmentPath = "ranges"
    ranges.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ranges.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ranges.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ranges.EntityData.Children = types.NewOrderedMap()
    ranges.EntityData.Children.Append("range", types.YChild{"Range", nil})
    for i := range ranges.Range {
        ranges.EntityData.Children.Append(types.GetSegmentPath(ranges.Range[i]), types.YChild{"Range", ranges.Range[i]})
    }
    ranges.EntityData.Leafs = types.NewOrderedMap()

    ranges.EntityData.YListKeys = []string {}

    return &(ranges.EntityData)
}

// Igmp_Active_Vrfs_Vrf_Ranges_Range
// Range information
type Igmp_Active_Vrfs_Vrf_Ranges_Range struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: 0..4294967295.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr
}

func (self *Igmp_Active_Vrfs_Vrf_Ranges_Range) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "range"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "ranges"
    self.EntityData.SegmentPath = "range"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &self.GroupAddressXr})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", self.GroupAddress})
    self.EntityData.Leafs.Append("group-mask", types.YLeaf{"GroupMask", self.GroupMask})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", self.Protocol})
    self.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", self.IsStale})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr
// Group address
type Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Ranges_Range_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "range"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Active_Vrfs_Vrf_IfrsInterfaces
// IGMP Interface specific
type Igmp_Active_Vrfs_Vrf_IfrsInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface.
    IfrsInterface []*Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Igmp_Active_Vrfs_Vrf_IfrsInterfaces) GetEntityData() *types.CommonEntityData {
    ifrsInterfaces.EntityData.YFilter = ifrsInterfaces.YFilter
    ifrsInterfaces.EntityData.YangName = "ifrs-interfaces"
    ifrsInterfaces.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaces.EntityData.ParentYangName = "vrf"
    ifrsInterfaces.EntityData.SegmentPath = "ifrs-interfaces"
    ifrsInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaces.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaces.EntityData.Children.Append("ifrs-interface", types.YChild{"IfrsInterface", nil})
    for i := range ifrsInterfaces.IfrsInterface {
        ifrsInterfaces.EntityData.Children.Append(types.GetSegmentPath(ifrsInterfaces.IfrsInterface[i]), types.YChild{"IfrsInterface", ifrsInterfaces.IfrsInterface[i]})
    }
    ifrsInterfaces.EntityData.Leafs = types.NewOrderedMap()

    ifrsInterfaces.EntityData.YListKeys = []string {}

    return &(ifrsInterfaces.EntityData)
}

// Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface) GetEntityData() *types.CommonEntityData {
    ifrsInterface.EntityData.YFilter = ifrsInterface.YFilter
    ifrsInterface.EntityData.YangName = "ifrs-interface"
    ifrsInterface.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterface.EntityData.ParentYangName = "ifrs-interfaces"
    ifrsInterface.EntityData.SegmentPath = "ifrs-interface" + types.AddKeyToken(ifrsInterface.InterfaceName, "interface-name")
    ifrsInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterface.EntityData.Children = types.NewOrderedMap()
    ifrsInterface.EntityData.Children.Append("igmp-interface-entry", types.YChild{"IgmpInterfaceEntry", &ifrsInterface.IgmpInterfaceEntry})
    ifrsInterface.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ifrsInterface.InterfaceName})
    ifrsInterface.EntityData.Leafs.Append("join-group-count", types.YLeaf{"JoinGroupCount", ifrsInterface.JoinGroupCount})

    ifrsInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(ifrsInterface.EntityData)
}

// Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetEntityData() *types.CommonEntityData {
    igmpInterfaceEntry.EntityData.YFilter = igmpInterfaceEntry.YFilter
    igmpInterfaceEntry.EntityData.YangName = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.BundleName = "cisco_ios_xr"
    igmpInterfaceEntry.EntityData.ParentYangName = "ifrs-interface"
    igmpInterfaceEntry.EntityData.SegmentPath = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igmpInterfaceEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igmpInterfaceEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igmpInterfaceEntry.EntityData.Children = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Children.Append("address", types.YChild{"Address", &igmpInterfaceEntry.Address})
    igmpInterfaceEntry.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &igmpInterfaceEntry.QuerierAddress})
    igmpInterfaceEntry.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &igmpInterfaceEntry.SubscriberAddress})
    igmpInterfaceEntry.EntityData.Leafs = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", igmpInterfaceEntry.InterfaceNameXr})
    igmpInterfaceEntry.EntityData.Leafs.Append("state", types.YLeaf{"State", igmpInterfaceEntry.State})
    igmpInterfaceEntry.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", igmpInterfaceEntry.PrefixLength})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", igmpInterfaceEntry.IsInterfaceUp})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", igmpInterfaceEntry.IsIpEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", igmpInterfaceEntry.IsRouterEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", igmpInterfaceEntry.IgmpVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", igmpInterfaceEntry.HostVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", igmpInterfaceEntry.QueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", igmpInterfaceEntry.QueryTimeout})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", igmpInterfaceEntry.QueryMaximumResponseTime})
    igmpInterfaceEntry.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", igmpInterfaceEntry.LastMemberQueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", igmpInterfaceEntry.GroupJoins})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", igmpInterfaceEntry.GroupLeaves})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", igmpInterfaceEntry.IsQuerier})
    igmpInterfaceEntry.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", igmpInterfaceEntry.TotalActiveGroups})
    igmpInterfaceEntry.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", igmpInterfaceEntry.Robustness})
    igmpInterfaceEntry.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", igmpInterfaceEntry.ProxyInterface})
    igmpInterfaceEntry.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", igmpInterfaceEntry.QuerierUptime})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", igmpInterfaceEntry.LasLlRegistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", igmpInterfaceEntry.LasGetAddressCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", igmpInterfaceEntry.LasUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", igmpInterfaceEntry.LasLlRemoveUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", igmpInterfaceEntry.LasLlAddUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", igmpInterfaceEntry.LasNullUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", igmpInterfaceEntry.LasUnregistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", igmpInterfaceEntry.IsLasRequest})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", igmpInterfaceEntry.IsLasRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", igmpInterfaceEntry.VrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", igmpInterfaceEntry.MteVrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("location", types.YLeaf{"Location", igmpInterfaceEntry.Location})
    igmpInterfaceEntry.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", igmpInterfaceEntry.Mtu})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", igmpInterfaceEntry.VrfState})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", igmpInterfaceEntry.IsConfigurationverify})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", igmpInterfaceEntry.ConfigurationvrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", igmpInterfaceEntry.ConfigurationvrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", igmpInterfaceEntry.ConfigurationMcastVrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", igmpInterfaceEntry.ConfigurationMcastVrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", igmpInterfaceEntry.IsImStateRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", igmpInterfaceEntry.IsSubscriber})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", igmpInterfaceEntry.SubscriberMode})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", igmpInterfaceEntry.IsIdentityPresent})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", igmpInterfaceEntry.SubscriberId})
    igmpInterfaceEntry.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", igmpInterfaceEntry.ParentIfhandle})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", igmpInterfaceEntry.TimeSinceLastQueryInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", igmpInterfaceEntry.TimeSinceLastReportInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", igmpInterfaceEntry.RouterUptimeInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", igmpInterfaceEntry.MteTupleCount})

    igmpInterfaceEntry.EntityData.YListKeys = []string {}

    return &(igmpInterfaceEntry.EntityData)
}

// Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "igmp-interface-entry"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "igmp-interface-entry"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "igmp-interface-entry"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_TrafficCounters
// IGMP Message Traffic Counters
type Igmp_Active_Vrfs_Vrf_TrafficCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Igmp_Active_Vrfs_Vrf_TrafficCounters) GetEntityData() *types.CommonEntityData {
    trafficCounters.EntityData.YFilter = trafficCounters.YFilter
    trafficCounters.EntityData.YangName = "traffic-counters"
    trafficCounters.EntityData.BundleName = "cisco_ios_xr"
    trafficCounters.EntityData.ParentYangName = "vrf"
    trafficCounters.EntityData.SegmentPath = "traffic-counters"
    trafficCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficCounters.EntityData.Children = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", trafficCounters.ElapsedTime})
    trafficCounters.EntityData.Leafs.Append("packets-in", types.YLeaf{"PacketsIn", trafficCounters.PacketsIn})
    trafficCounters.EntityData.Leafs.Append("packets-out", types.YLeaf{"PacketsOut", trafficCounters.PacketsOut})
    trafficCounters.EntityData.Leafs.Append("format-errors", types.YLeaf{"FormatErrors", trafficCounters.FormatErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-input-errors", types.YLeaf{"PacketManagerInputErrors", trafficCounters.PacketManagerInputErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-output-errors", types.YLeaf{"PacketManagerOutputErrors", trafficCounters.PacketManagerOutputErrors})
    trafficCounters.EntityData.Leafs.Append("checksum-errors", types.YLeaf{"ChecksumErrors", trafficCounters.ChecksumErrors})
    trafficCounters.EntityData.Leafs.Append("receive-socket-errors", types.YLeaf{"ReceiveSocketErrors", trafficCounters.ReceiveSocketErrors})
    trafficCounters.EntityData.Leafs.Append("socket-errors", types.YLeaf{"SocketErrors", trafficCounters.SocketErrors})
    trafficCounters.EntityData.Leafs.Append("bad-scope-errors", types.YLeaf{"BadScopeErrors", trafficCounters.BadScopeErrors})
    trafficCounters.EntityData.Leafs.Append("auxillary-data-length-errors", types.YLeaf{"AuxillaryDataLengthErrors", trafficCounters.AuxillaryDataLengthErrors})
    trafficCounters.EntityData.Leafs.Append("invalid-source-address-errors", types.YLeaf{"InvalidSourceAddressErrors", trafficCounters.InvalidSourceAddressErrors})
    trafficCounters.EntityData.Leafs.Append("no-socket-connection", types.YLeaf{"NoSocketConnection", trafficCounters.NoSocketConnection})
    trafficCounters.EntityData.Leafs.Append("miscellaneous-errors", types.YLeaf{"MiscellaneousErrors", trafficCounters.MiscellaneousErrors})
    trafficCounters.EntityData.Leafs.Append("input-queries", types.YLeaf{"InputQueries", trafficCounters.InputQueries})
    trafficCounters.EntityData.Leafs.Append("input-reports", types.YLeaf{"InputReports", trafficCounters.InputReports})
    trafficCounters.EntityData.Leafs.Append("input-leaves", types.YLeaf{"InputLeaves", trafficCounters.InputLeaves})
    trafficCounters.EntityData.Leafs.Append("input-mtrace", types.YLeaf{"InputMtrace", trafficCounters.InputMtrace})
    trafficCounters.EntityData.Leafs.Append("input-dvmrp", types.YLeaf{"InputDvmrp", trafficCounters.InputDvmrp})
    trafficCounters.EntityData.Leafs.Append("input-pim", types.YLeaf{"InputPim", trafficCounters.InputPim})
    trafficCounters.EntityData.Leafs.Append("output-queries", types.YLeaf{"OutputQueries", trafficCounters.OutputQueries})
    trafficCounters.EntityData.Leafs.Append("output-reports", types.YLeaf{"OutputReports", trafficCounters.OutputReports})
    trafficCounters.EntityData.Leafs.Append("output-leaves", types.YLeaf{"OutputLeaves", trafficCounters.OutputLeaves})
    trafficCounters.EntityData.Leafs.Append("output-mtrace", types.YLeaf{"OutputMtrace", trafficCounters.OutputMtrace})
    trafficCounters.EntityData.Leafs.Append("output-dvmrp", types.YLeaf{"OutputDvmrp", trafficCounters.OutputDvmrp})
    trafficCounters.EntityData.Leafs.Append("output-pim", types.YLeaf{"OutputPim", trafficCounters.OutputPim})
    trafficCounters.EntityData.Leafs.Append("get-packet-failure", types.YLeaf{"GetPacketFailure", trafficCounters.GetPacketFailure})
    trafficCounters.EntityData.Leafs.Append("output-no-parent-interface-handle", types.YLeaf{"OutputNoParentInterfaceHandle", trafficCounters.OutputNoParentInterfaceHandle})
    trafficCounters.EntityData.Leafs.Append("input-no-idb", types.YLeaf{"InputNoIdb", trafficCounters.InputNoIdb})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-in-idb", types.YLeaf{"InputNoVrfInIdb", trafficCounters.InputNoVrfInIdb})
    trafficCounters.EntityData.Leafs.Append("input-disabled-idb", types.YLeaf{"InputDisabledIdb", trafficCounters.InputDisabledIdb})
    trafficCounters.EntityData.Leafs.Append("input-martian-address", types.YLeaf{"InputMartianAddress", trafficCounters.InputMartianAddress})
    trafficCounters.EntityData.Leafs.Append("input-no-assigned-vrf-id", types.YLeaf{"InputNoAssignedVrfId", trafficCounters.InputNoAssignedVrfId})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-mtrace", types.YLeaf{"InputNoVrfMtrace", trafficCounters.InputNoVrfMtrace})
    trafficCounters.EntityData.Leafs.Append("input-no-platform-support-mtrace", types.YLeaf{"InputNoPlatformSupportMtrace", trafficCounters.InputNoPlatformSupportMtrace})

    trafficCounters.EntityData.YListKeys = []string {}

    return &(trafficCounters.EntityData)
}

// Igmp_Active_Vrfs_Vrf_Groups
// IGMP Group Database Table
type Igmp_Active_Vrfs_Vrf_Groups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Igmp_Active_Vrfs_Vrf_Groups_Group.
    Group []*Igmp_Active_Vrfs_Vrf_Groups_Group
}

func (groups *Igmp_Active_Vrfs_Vrf_Groups) GetEntityData() *types.CommonEntityData {
    groups.EntityData.YFilter = groups.YFilter
    groups.EntityData.YangName = "groups"
    groups.EntityData.BundleName = "cisco_ios_xr"
    groups.EntityData.ParentYangName = "vrf"
    groups.EntityData.SegmentPath = "groups"
    groups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groups.EntityData.Children = types.NewOrderedMap()
    groups.EntityData.Children.Append("group", types.YChild{"Group", nil})
    for i := range groups.Group {
        groups.EntityData.Children.Append(types.GetSegmentPath(groups.Group[i]), types.YChild{"Group", groups.Group[i]})
    }
    groups.EntityData.Leafs = types.NewOrderedMap()

    groups.EntityData.YListKeys = []string {}

    return &(groups.EntityData)
}

// Igmp_Active_Vrfs_Vrf_Groups_Group
// IGMP Group Entry Information
type Igmp_Active_Vrfs_Vrf_Groups_Group struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress
}

func (group *Igmp_Active_Vrfs_Vrf_Groups_Group) GetEntityData() *types.CommonEntityData {
    group.EntityData.YFilter = group.YFilter
    group.EntityData.YangName = "group"
    group.EntityData.BundleName = "cisco_ios_xr"
    group.EntityData.ParentYangName = "groups"
    group.EntityData.SegmentPath = "group"
    group.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    group.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    group.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    group.EntityData.Children = types.NewOrderedMap()
    group.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &group.GroupAddressXr})
    group.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &group.LastReporter})
    group.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &group.SourceAddress})
    group.EntityData.Leafs = types.NewOrderedMap()
    group.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", group.GroupAddress})
    group.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", group.InterfaceName})
    group.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", group.InterfaceNameXr})
    group.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", group.Uptime})
    group.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", group.ExpirationTime})
    group.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", group.ExplicitTrackingEnabled})
    group.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", group.IsSelfJoin})
    group.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", group.RowStatus})
    group.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", group.IsLowMemory})
    group.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", group.RouterFilterMode})
    group.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", group.OlderHostVersion1Timer})
    group.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", group.OlderHostVersion2Timer})
    group.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", group.IsAdded})
    group.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", group.IsSuppressed})

    group.EntityData.YListKeys = []string {}

    return &(group.EntityData)
}

// Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr
// Group Address
type Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_Groups_Group_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter
// Last reporter address
type Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Active_Vrfs_Vrf_Groups_Group_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress
// Source Address
type Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_Vrfs_Vrf_Groups_Group_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_GroupSummary
// IGMP Groups Summary
type Igmp_Active_Vrfs_Vrf_GroupSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Igmp_Active_Vrfs_Vrf_GroupSummary) GetEntityData() *types.CommonEntityData {
    groupSummary.EntityData.YFilter = groupSummary.YFilter
    groupSummary.EntityData.YangName = "group-summary"
    groupSummary.EntityData.BundleName = "cisco_ios_xr"
    groupSummary.EntityData.ParentYangName = "vrf"
    groupSummary.EntityData.SegmentPath = "group-summary"
    groupSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupSummary.EntityData.Children = types.NewOrderedMap()
    groupSummary.EntityData.Leafs = types.NewOrderedMap()
    groupSummary.EntityData.Leafs.Append("groutes", types.YLeaf{"Groutes", groupSummary.Groutes})
    groupSummary.EntityData.Leafs.Append("sg-routes", types.YLeaf{"SgRoutes", groupSummary.SgRoutes})
    groupSummary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", groupSummary.GroupCount})
    groupSummary.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupSummary.IsLowMemory})

    groupSummary.EntityData.YListKeys = []string {}

    return &(groupSummary.EntityData)
}

// Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Igmp_Active_Vrfs_Vrf_IfrsInterfaceSummary) GetEntityData() *types.CommonEntityData {
    ifrsInterfaceSummary.EntityData.YFilter = ifrsInterfaceSummary.YFilter
    ifrsInterfaceSummary.EntityData.YangName = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaceSummary.EntityData.ParentYangName = "vrf"
    ifrsInterfaceSummary.EntityData.SegmentPath = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaceSummary.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs.Append("interface-count", types.YLeaf{"InterfaceCount", ifrsInterfaceSummary.InterfaceCount})
    ifrsInterfaceSummary.EntityData.Leafs.Append("configuration-count", types.YLeaf{"ConfigurationCount", ifrsInterfaceSummary.ConfigurationCount})

    ifrsInterfaceSummary.EntityData.YListKeys = []string {}

    return &(ifrsInterfaceSummary.EntityData)
}

// Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable
// IGMP Global Interface 
type Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface.
    Interface []*Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable) GetEntityData() *types.CommonEntityData {
    globalInterfaceTable.EntityData.YFilter = globalInterfaceTable.YFilter
    globalInterfaceTable.EntityData.YangName = "global-interface-table"
    globalInterfaceTable.EntityData.BundleName = "cisco_ios_xr"
    globalInterfaceTable.EntityData.ParentYangName = "vrf"
    globalInterfaceTable.EntityData.SegmentPath = "global-interface-table"
    globalInterfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalInterfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalInterfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalInterfaceTable.EntityData.Children = types.NewOrderedMap()
    globalInterfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range globalInterfaceTable.Interface {
        globalInterfaceTable.EntityData.Children.Append(types.GetSegmentPath(globalInterfaceTable.Interface[i]), types.YChild{"Interface", globalInterfaceTable.Interface[i]})
    }
    globalInterfaceTable.EntityData.Leafs = types.NewOrderedMap()

    globalInterfaceTable.EntityData.YListKeys = []string {}

    return &(globalInterfaceTable.EntityData)
}

// Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface
// IGMP Interface
type Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "global-interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address
// IP address
type Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_GlobalInterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_SsmMapDetails
// SSM Map Detail
type Igmp_Active_Vrfs_Vrf_SsmMapDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []*Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Igmp_Active_Vrfs_Vrf_SsmMapDetails) GetEntityData() *types.CommonEntityData {
    ssmMapDetails.EntityData.YFilter = ssmMapDetails.YFilter
    ssmMapDetails.EntityData.YangName = "ssm-map-details"
    ssmMapDetails.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetails.EntityData.ParentYangName = "vrf"
    ssmMapDetails.EntityData.SegmentPath = "ssm-map-details"
    ssmMapDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetails.EntityData.Children = types.NewOrderedMap()
    ssmMapDetails.EntityData.Children.Append("ssm-map-detail", types.YChild{"SsmMapDetail", nil})
    for i := range ssmMapDetails.SsmMapDetail {
        ssmMapDetails.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetails.SsmMapDetail[i]), types.YChild{"SsmMapDetail", ssmMapDetails.SsmMapDetail[i]})
    }
    ssmMapDetails.EntityData.Leafs = types.NewOrderedMap()

    ssmMapDetails.EntityData.YListKeys = []string {}

    return &(ssmMapDetails.EntityData)
}

// Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources.
    Sources []*Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail) GetEntityData() *types.CommonEntityData {
    ssmMapDetail.EntityData.YFilter = ssmMapDetail.YFilter
    ssmMapDetail.EntityData.YangName = "ssm-map-detail"
    ssmMapDetail.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetail.EntityData.ParentYangName = "ssm-map-details"
    ssmMapDetail.EntityData.SegmentPath = "ssm-map-detail"
    ssmMapDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetail.EntityData.Children = types.NewOrderedMap()
    ssmMapDetail.EntityData.Children.Append("map-info", types.YChild{"MapInfo", &ssmMapDetail.MapInfo})
    ssmMapDetail.EntityData.Children.Append("sources", types.YChild{"Sources", nil})
    for i := range ssmMapDetail.Sources {
        ssmMapDetail.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetail.Sources[i]), types.YChild{"Sources", ssmMapDetail.Sources[i]})
    }
    ssmMapDetail.EntityData.Leafs = types.NewOrderedMap()
    ssmMapDetail.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMapDetail.SsmMapType})
    ssmMapDetail.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMapDetail.GroupAddress})
    ssmMapDetail.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", ssmMapDetail.ExpirationTime})
    ssmMapDetail.EntityData.Leafs.Append("response-pending", types.YLeaf{"ResponsePending", ssmMapDetail.ResponsePending})
    ssmMapDetail.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", ssmMapDetail.QueryInterval})
    ssmMapDetail.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", ssmMapDetail.ElapsedTime})

    ssmMapDetail.EntityData.YListKeys = []string {}

    return &(ssmMapDetail.EntityData)
}

// Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo) GetEntityData() *types.CommonEntityData {
    mapInfo.EntityData.YFilter = mapInfo.YFilter
    mapInfo.EntityData.YangName = "map-info"
    mapInfo.EntityData.BundleName = "cisco_ios_xr"
    mapInfo.EntityData.ParentYangName = "ssm-map-detail"
    mapInfo.EntityData.SegmentPath = "map-info"
    mapInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mapInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mapInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mapInfo.EntityData.Children = types.NewOrderedMap()
    mapInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &mapInfo.GroupAddressXr})
    mapInfo.EntityData.Leafs = types.NewOrderedMap()
    mapInfo.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", mapInfo.MapType})
    mapInfo.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", mapInfo.SourceCounts})

    mapInfo.EntityData.YListKeys = []string {}

    return &(mapInfo.EntityData)
}

// Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "map-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Igmp_Active_Vrfs_Vrf_SsmMapDetails_SsmMapDetail_Sources) GetEntityData() *types.CommonEntityData {
    sources.EntityData.YFilter = sources.YFilter
    sources.EntityData.YangName = "sources"
    sources.EntityData.BundleName = "cisco_ios_xr"
    sources.EntityData.ParentYangName = "ssm-map-detail"
    sources.EntityData.SegmentPath = "sources"
    sources.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sources.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sources.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sources.EntityData.Children = types.NewOrderedMap()
    sources.EntityData.Leafs = types.NewOrderedMap()
    sources.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sources.AfName})
    sources.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sources.Ipv4Address})
    sources.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sources.Ipv6Address})

    sources.EntityData.YListKeys = []string {}

    return &(sources.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceStateOffs
// IGMP Interface state off
type Igmp_Active_Vrfs_Vrf_InterfaceStateOffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []*Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs) GetEntityData() *types.CommonEntityData {
    interfaceStateOffs.EntityData.YFilter = interfaceStateOffs.YFilter
    interfaceStateOffs.EntityData.YangName = "interface-state-offs"
    interfaceStateOffs.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOffs.EntityData.ParentYangName = "vrf"
    interfaceStateOffs.EntityData.SegmentPath = "interface-state-offs"
    interfaceStateOffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOffs.EntityData.Children = types.NewOrderedMap()
    interfaceStateOffs.EntityData.Children.Append("interface-state-off", types.YChild{"InterfaceStateOff", nil})
    for i := range interfaceStateOffs.InterfaceStateOff {
        interfaceStateOffs.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOffs.InterfaceStateOff[i]), types.YChild{"InterfaceStateOff", interfaceStateOffs.InterfaceStateOff[i]})
    }
    interfaceStateOffs.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOffs.EntityData.YListKeys = []string {}

    return &(interfaceStateOffs.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff) GetEntityData() *types.CommonEntityData {
    interfaceStateOff.EntityData.YFilter = interfaceStateOff.YFilter
    interfaceStateOff.EntityData.YangName = "interface-state-off"
    interfaceStateOff.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOff.EntityData.ParentYangName = "interface-state-offs"
    interfaceStateOff.EntityData.SegmentPath = "interface-state-off" + types.AddKeyToken(interfaceStateOff.InterfaceName, "interface-name")
    interfaceStateOff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOff.EntityData.Children = types.NewOrderedMap()
    interfaceStateOff.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOff.Address})
    interfaceStateOff.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOff.QuerierAddress})
    interfaceStateOff.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOff.SubscriberAddress})
    interfaceStateOff.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOff.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOff.InterfaceName})
    interfaceStateOff.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOff.InterfaceNameXr})
    interfaceStateOff.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOff.State})
    interfaceStateOff.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOff.PrefixLength})
    interfaceStateOff.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOff.IsInterfaceUp})
    interfaceStateOff.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOff.IsIpEnabled})
    interfaceStateOff.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOff.IsRouterEnabled})
    interfaceStateOff.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOff.IgmpVersion})
    interfaceStateOff.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOff.HostVersion})
    interfaceStateOff.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOff.QueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOff.QueryTimeout})
    interfaceStateOff.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOff.QueryMaximumResponseTime})
    interfaceStateOff.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOff.LastMemberQueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOff.GroupJoins})
    interfaceStateOff.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOff.GroupLeaves})
    interfaceStateOff.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOff.IsQuerier})
    interfaceStateOff.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOff.TotalActiveGroups})
    interfaceStateOff.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOff.Robustness})
    interfaceStateOff.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOff.ProxyInterface})
    interfaceStateOff.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOff.QuerierUptime})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOff.LasLlRegistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOff.LasGetAddressCount})
    interfaceStateOff.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOff.LasUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOff.LasLlRemoveUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOff.LasLlAddUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOff.LasNullUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOff.LasUnregistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOff.IsLasRequest})
    interfaceStateOff.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOff.IsLasRegistered})
    interfaceStateOff.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOff.VrfId})
    interfaceStateOff.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOff.MteVrfId})
    interfaceStateOff.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOff.Location})
    interfaceStateOff.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOff.Mtu})
    interfaceStateOff.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOff.VrfState})
    interfaceStateOff.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOff.IsConfigurationverify})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOff.ConfigurationvrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOff.ConfigurationvrfError})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOff.ConfigurationMcastVrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOff.ConfigurationMcastVrfError})
    interfaceStateOff.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOff.IsImStateRegistered})
    interfaceStateOff.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOff.IsSubscriber})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOff.SubscriberMode})
    interfaceStateOff.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOff.IsIdentityPresent})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOff.SubscriberId})
    interfaceStateOff.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOff.ParentIfhandle})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOff.TimeSinceLastQueryInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOff.TimeSinceLastReportInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOff.RouterUptimeInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOff.MteTupleCount})

    interfaceStateOff.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOff.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-off"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-off"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_Vrfs_Vrf_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-off"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Active_Process
// Process
type Igmp_Active_Process struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MRIB RouteDB Expiry Information.
    AmtSummary Igmp_Active_Process_AmtSummary

    // NSR Information.
    Nsr Igmp_Active_Process_Nsr

    // Table containing AMT Gateway DataBase information.
    AmtGatewaies Igmp_Active_Process_AmtGatewaies

    // IGMP Unicast-Qos-Adjust Statistics.
    UnicastQosAdjustStats Igmp_Active_Process_UnicastQosAdjustStats

    // IGMP BVI Stats.
    BviStatistics Igmp_Active_Process_BviStatistics

    // NSF Information.
    Nsf Igmp_Active_Process_Nsf
}

func (process *Igmp_Active_Process) GetEntityData() *types.CommonEntityData {
    process.EntityData.YFilter = process.YFilter
    process.EntityData.YangName = "process"
    process.EntityData.BundleName = "cisco_ios_xr"
    process.EntityData.ParentYangName = "active"
    process.EntityData.SegmentPath = "process"
    process.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    process.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    process.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    process.EntityData.Children = types.NewOrderedMap()
    process.EntityData.Children.Append("amt-summary", types.YChild{"AmtSummary", &process.AmtSummary})
    process.EntityData.Children.Append("nsr", types.YChild{"Nsr", &process.Nsr})
    process.EntityData.Children.Append("amt-gatewaies", types.YChild{"AmtGatewaies", &process.AmtGatewaies})
    process.EntityData.Children.Append("unicast-qos-adjust-stats", types.YChild{"UnicastQosAdjustStats", &process.UnicastQosAdjustStats})
    process.EntityData.Children.Append("bvi-statistics", types.YChild{"BviStatistics", &process.BviStatistics})
    process.EntityData.Children.Append("nsf", types.YChild{"Nsf", &process.Nsf})
    process.EntityData.Leafs = types.NewOrderedMap()

    process.EntityData.YListKeys = []string {}

    return &(process.EntityData)
}

// Igmp_Active_Process_AmtSummary
// MRIB RouteDB Expiry Information
type Igmp_Active_Process_AmtSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Robustness variable. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AnycastPrefix interface{}

    // Advertize AMT prefix length. The type is interface{} with range:
    // 0..4294967295.
    PrefixLength interface{}

    // Advertaisment for AMT Relay address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RelayAddress interface{}

    // AMT Tunnel MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Type Of Service value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Tos interface{}

    // Time To Live value in AMT header. The type is interface{} with range:
    // 0..4294967295.
    Ttl interface{}

    // AMT Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Number of AMT Gateway. The type is interface{} with range: 0..4294967295.
    GatewayCount interface{}

    // Maximum Gateway allowed. The type is interface{} with range: 0..4294967295.
    MaxGateway interface{}

    // AMT Tunnel Count. The type is interface{} with range: 0..4294967295.
    TunnelCount interface{}

    // AMT Tunnel configured Maximum. The type is interface{} with range:
    // 0..4294967295.
    TunnelConfiguredMaximum interface{}

    // ACL configured under AMT. The type is bool.
    IsAclConfigured interface{}

    // AMT Gateway Simulation. The type is bool.
    IsGatewaySimulation interface{}

    // AMT Out Of Resource. The type is bool.
    IsOuOfResource interface{}
}

func (amtSummary *Igmp_Active_Process_AmtSummary) GetEntityData() *types.CommonEntityData {
    amtSummary.EntityData.YFilter = amtSummary.YFilter
    amtSummary.EntityData.YangName = "amt-summary"
    amtSummary.EntityData.BundleName = "cisco_ios_xr"
    amtSummary.EntityData.ParentYangName = "process"
    amtSummary.EntityData.SegmentPath = "amt-summary"
    amtSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    amtSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    amtSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    amtSummary.EntityData.Children = types.NewOrderedMap()
    amtSummary.EntityData.Leafs = types.NewOrderedMap()
    amtSummary.EntityData.Leafs.Append("anycast-prefix", types.YLeaf{"AnycastPrefix", amtSummary.AnycastPrefix})
    amtSummary.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", amtSummary.PrefixLength})
    amtSummary.EntityData.Leafs.Append("relay-address", types.YLeaf{"RelayAddress", amtSummary.RelayAddress})
    amtSummary.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", amtSummary.Mtu})
    amtSummary.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", amtSummary.Tos})
    amtSummary.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", amtSummary.Ttl})
    amtSummary.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", amtSummary.QueryInterval})
    amtSummary.EntityData.Leafs.Append("gateway-count", types.YLeaf{"GatewayCount", amtSummary.GatewayCount})
    amtSummary.EntityData.Leafs.Append("max-gateway", types.YLeaf{"MaxGateway", amtSummary.MaxGateway})
    amtSummary.EntityData.Leafs.Append("tunnel-count", types.YLeaf{"TunnelCount", amtSummary.TunnelCount})
    amtSummary.EntityData.Leafs.Append("tunnel-configured-maximum", types.YLeaf{"TunnelConfiguredMaximum", amtSummary.TunnelConfiguredMaximum})
    amtSummary.EntityData.Leafs.Append("is-acl-configured", types.YLeaf{"IsAclConfigured", amtSummary.IsAclConfigured})
    amtSummary.EntityData.Leafs.Append("is-gateway-simulation", types.YLeaf{"IsGatewaySimulation", amtSummary.IsGatewaySimulation})
    amtSummary.EntityData.Leafs.Append("is-ou-of-resource", types.YLeaf{"IsOuOfResource", amtSummary.IsOuOfResource})

    amtSummary.EntityData.YListKeys = []string {}

    return &(amtSummary.EntityData)
}

// Igmp_Active_Process_Nsr
// NSR Information
type Igmp_Active_Process_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NSR state. The type is interface{} with range: 0..255.
    State interface{}

    // Partner process connected. The type is bool.
    PartnerProcConnected interface{}

    // Collaborators convergence done. The type is bool.
    CollabConvDone interface{}

    // RMF Notification done. The type is bool.
    RmfNotificationDone interface{}

    // Time when process came up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProc interface{}

    // Time when process connection went up. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionUp interface{}

    // Time when process connection went down. The type is interface{} with range:
    // 0..18446744073709551615.
    LastProcConnectionDn interface{}

    // Time when RMF Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfReady interface{}

    // Time when RMF Not-Rdy notif was sent. The type is interface{} with range:
    // 0..18446744073709551615.
    LastRmfNotReady interface{}

    // No. of times process connection went up. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionUp interface{}

    // No. of times process connection went down. The type is interface{} with
    // range: 0..4294967295.
    CountProcConnectionDn interface{}

    // No. of times RMF Ready notif was sent. The type is interface{} with range:
    // 0..4294967295.
    CountRmfReady interface{}

    // No. of times RMF Not Ready notif was sent. The type is interface{} with
    // range: 0..4294967295.
    CountRmfNotReady interface{}
}

func (nsr *Igmp_Active_Process_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "process"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Leafs = types.NewOrderedMap()
    nsr.EntityData.Leafs.Append("state", types.YLeaf{"State", nsr.State})
    nsr.EntityData.Leafs.Append("partner-proc-connected", types.YLeaf{"PartnerProcConnected", nsr.PartnerProcConnected})
    nsr.EntityData.Leafs.Append("collab-conv-done", types.YLeaf{"CollabConvDone", nsr.CollabConvDone})
    nsr.EntityData.Leafs.Append("rmf-notification-done", types.YLeaf{"RmfNotificationDone", nsr.RmfNotificationDone})
    nsr.EntityData.Leafs.Append("last-proc", types.YLeaf{"LastProc", nsr.LastProc})
    nsr.EntityData.Leafs.Append("last-proc-connection-up", types.YLeaf{"LastProcConnectionUp", nsr.LastProcConnectionUp})
    nsr.EntityData.Leafs.Append("last-proc-connection-dn", types.YLeaf{"LastProcConnectionDn", nsr.LastProcConnectionDn})
    nsr.EntityData.Leafs.Append("last-rmf-ready", types.YLeaf{"LastRmfReady", nsr.LastRmfReady})
    nsr.EntityData.Leafs.Append("last-rmf-not-ready", types.YLeaf{"LastRmfNotReady", nsr.LastRmfNotReady})
    nsr.EntityData.Leafs.Append("count-proc-connection-up", types.YLeaf{"CountProcConnectionUp", nsr.CountProcConnectionUp})
    nsr.EntityData.Leafs.Append("count-proc-connection-dn", types.YLeaf{"CountProcConnectionDn", nsr.CountProcConnectionDn})
    nsr.EntityData.Leafs.Append("count-rmf-ready", types.YLeaf{"CountRmfReady", nsr.CountRmfReady})
    nsr.EntityData.Leafs.Append("count-rmf-not-ready", types.YLeaf{"CountRmfNotReady", nsr.CountRmfNotReady})

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// Igmp_Active_Process_AmtGatewaies
// Table containing AMT Gateway DataBase
// information
type Igmp_Active_Process_AmtGatewaies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AMT Gateway DataBase information. The type is slice of
    // Igmp_Active_Process_AmtGatewaies_AmtGateway.
    AmtGateway []*Igmp_Active_Process_AmtGatewaies_AmtGateway
}

func (amtGatewaies *Igmp_Active_Process_AmtGatewaies) GetEntityData() *types.CommonEntityData {
    amtGatewaies.EntityData.YFilter = amtGatewaies.YFilter
    amtGatewaies.EntityData.YangName = "amt-gatewaies"
    amtGatewaies.EntityData.BundleName = "cisco_ios_xr"
    amtGatewaies.EntityData.ParentYangName = "process"
    amtGatewaies.EntityData.SegmentPath = "amt-gatewaies"
    amtGatewaies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    amtGatewaies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    amtGatewaies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    amtGatewaies.EntityData.Children = types.NewOrderedMap()
    amtGatewaies.EntityData.Children.Append("amt-gateway", types.YChild{"AmtGateway", nil})
    for i := range amtGatewaies.AmtGateway {
        amtGatewaies.EntityData.Children.Append(types.GetSegmentPath(amtGatewaies.AmtGateway[i]), types.YChild{"AmtGateway", amtGatewaies.AmtGateway[i]})
    }
    amtGatewaies.EntityData.Leafs = types.NewOrderedMap()

    amtGatewaies.EntityData.YListKeys = []string {}

    return &(amtGatewaies.EntityData)
}

// Igmp_Active_Process_AmtGatewaies_AmtGateway
// AMT Gateway DataBase information
type Igmp_Active_Process_AmtGatewaies_AmtGateway struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Gateway Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GatewayAddress interface{}

    // Port. The type is interface{} with range: 0..4294967295.
    Port interface{}

    // GW. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Amtgw interface{}

    // Port. The type is interface{} with range: 0..4294967295.
    AmtPort interface{}

    // Len. The type is interface{} with range: 0..4294967295.
    KeyLen interface{}

    // AMT NH. The type is interface{} with range: 0..4294967295.
    Amtnh interface{}

    // Nonce. The type is interface{} with range: 0..4294967295.
    AmtNonce interface{}

    // IDB. The type is interface{} with range: 0..18446744073709551615.
    Idb interface{}

    // UpdIn. The type is interface{} with range: 0..4294967295.
    MemUpdIn interface{}

    // UpdOut. The type is interface{} with range: 0..4294967295.
    MemUpdOut interface{}
}

func (amtGateway *Igmp_Active_Process_AmtGatewaies_AmtGateway) GetEntityData() *types.CommonEntityData {
    amtGateway.EntityData.YFilter = amtGateway.YFilter
    amtGateway.EntityData.YangName = "amt-gateway"
    amtGateway.EntityData.BundleName = "cisco_ios_xr"
    amtGateway.EntityData.ParentYangName = "amt-gatewaies"
    amtGateway.EntityData.SegmentPath = "amt-gateway"
    amtGateway.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    amtGateway.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    amtGateway.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    amtGateway.EntityData.Children = types.NewOrderedMap()
    amtGateway.EntityData.Leafs = types.NewOrderedMap()
    amtGateway.EntityData.Leafs.Append("gateway-address", types.YLeaf{"GatewayAddress", amtGateway.GatewayAddress})
    amtGateway.EntityData.Leafs.Append("port", types.YLeaf{"Port", amtGateway.Port})
    amtGateway.EntityData.Leafs.Append("amtgw", types.YLeaf{"Amtgw", amtGateway.Amtgw})
    amtGateway.EntityData.Leafs.Append("amt-port", types.YLeaf{"AmtPort", amtGateway.AmtPort})
    amtGateway.EntityData.Leafs.Append("key-len", types.YLeaf{"KeyLen", amtGateway.KeyLen})
    amtGateway.EntityData.Leafs.Append("amtnh", types.YLeaf{"Amtnh", amtGateway.Amtnh})
    amtGateway.EntityData.Leafs.Append("amt-nonce", types.YLeaf{"AmtNonce", amtGateway.AmtNonce})
    amtGateway.EntityData.Leafs.Append("idb", types.YLeaf{"Idb", amtGateway.Idb})
    amtGateway.EntityData.Leafs.Append("mem-upd-in", types.YLeaf{"MemUpdIn", amtGateway.MemUpdIn})
    amtGateway.EntityData.Leafs.Append("mem-upd-out", types.YLeaf{"MemUpdOut", amtGateway.MemUpdOut})

    amtGateway.EntityData.YListKeys = []string {}

    return &(amtGateway.EntityData)
}

// Igmp_Active_Process_UnicastQosAdjustStats
// IGMP Unicast-Qos-Adjust Statistics
type Igmp_Active_Process_UnicastQosAdjustStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // I2Q Queue count. The type is interface{} with range: 0..65535.
    Queues interface{}

    // I2Q Rate Batch count. The type is interface{} with range: 0..65535.
    Batches interface{}

    // Add to batch count. The type is interface{} with range: 0..4294967295.
    AddToBatches interface{}

    // Delete to batch count. The type is interface{} with range: 0..4294967295.
    DeleteToBatches interface{}

    // Send Success count. The type is interface{} with range: 0..4294967295.
    SendSuccess interface{}

    // Number of Send errors in batch. The type is interface{} with range:
    // 0..4294967295.
    SendErrors interface{}

    // Send Error due to comms count. The type is interface{} with range:
    // 0..4294967295.
    SendCommErrors interface{}

    // Send Error due to partial issue count. The type is interface{} with range:
    // 0..4294967295.
    SendPartialErrors interface{}

    // Number of Resync request received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedResyncRequests interface{}

    // Number of bulks sent for last resync received. The type is interface{} with
    // range: 0..4294967295.
    SentResyncBulks interface{}

    // Is Resync request received. The type is bool.
    IsResyncReceived interface{}

    // Is Resync required. The type is bool.
    IsResyncRequired interface{}

    // Is Resync Start message sent. The type is bool.
    IsResyncStartSent interface{}

    // Is QOS Sweeped once . The type is bool.
    IsQosSSweeped interface{}

    // Time elapsed since Last mark and sweep in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastSweepTime interface{}

    // Time elapsed since Last download to QOS in seconds. The type is interface{}
    // with range: 0..18446744073709551615. Units are second.
    LastDownloadTime interface{}
}

func (unicastQosAdjustStats *Igmp_Active_Process_UnicastQosAdjustStats) GetEntityData() *types.CommonEntityData {
    unicastQosAdjustStats.EntityData.YFilter = unicastQosAdjustStats.YFilter
    unicastQosAdjustStats.EntityData.YangName = "unicast-qos-adjust-stats"
    unicastQosAdjustStats.EntityData.BundleName = "cisco_ios_xr"
    unicastQosAdjustStats.EntityData.ParentYangName = "process"
    unicastQosAdjustStats.EntityData.SegmentPath = "unicast-qos-adjust-stats"
    unicastQosAdjustStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unicastQosAdjustStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unicastQosAdjustStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unicastQosAdjustStats.EntityData.Children = types.NewOrderedMap()
    unicastQosAdjustStats.EntityData.Leafs = types.NewOrderedMap()
    unicastQosAdjustStats.EntityData.Leafs.Append("queues", types.YLeaf{"Queues", unicastQosAdjustStats.Queues})
    unicastQosAdjustStats.EntityData.Leafs.Append("batches", types.YLeaf{"Batches", unicastQosAdjustStats.Batches})
    unicastQosAdjustStats.EntityData.Leafs.Append("add-to-batches", types.YLeaf{"AddToBatches", unicastQosAdjustStats.AddToBatches})
    unicastQosAdjustStats.EntityData.Leafs.Append("delete-to-batches", types.YLeaf{"DeleteToBatches", unicastQosAdjustStats.DeleteToBatches})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-success", types.YLeaf{"SendSuccess", unicastQosAdjustStats.SendSuccess})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-errors", types.YLeaf{"SendErrors", unicastQosAdjustStats.SendErrors})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-comm-errors", types.YLeaf{"SendCommErrors", unicastQosAdjustStats.SendCommErrors})
    unicastQosAdjustStats.EntityData.Leafs.Append("send-partial-errors", types.YLeaf{"SendPartialErrors", unicastQosAdjustStats.SendPartialErrors})
    unicastQosAdjustStats.EntityData.Leafs.Append("received-resync-requests", types.YLeaf{"ReceivedResyncRequests", unicastQosAdjustStats.ReceivedResyncRequests})
    unicastQosAdjustStats.EntityData.Leafs.Append("sent-resync-bulks", types.YLeaf{"SentResyncBulks", unicastQosAdjustStats.SentResyncBulks})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-resync-received", types.YLeaf{"IsResyncReceived", unicastQosAdjustStats.IsResyncReceived})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-resync-required", types.YLeaf{"IsResyncRequired", unicastQosAdjustStats.IsResyncRequired})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-resync-start-sent", types.YLeaf{"IsResyncStartSent", unicastQosAdjustStats.IsResyncStartSent})
    unicastQosAdjustStats.EntityData.Leafs.Append("is-qos-s-sweeped", types.YLeaf{"IsQosSSweeped", unicastQosAdjustStats.IsQosSSweeped})
    unicastQosAdjustStats.EntityData.Leafs.Append("last-sweep-time", types.YLeaf{"LastSweepTime", unicastQosAdjustStats.LastSweepTime})
    unicastQosAdjustStats.EntityData.Leafs.Append("last-download-time", types.YLeaf{"LastDownloadTime", unicastQosAdjustStats.LastDownloadTime})

    unicastQosAdjustStats.EntityData.YListKeys = []string {}

    return &(unicastQosAdjustStats.EntityData)
}

// Igmp_Active_Process_BviStatistics
// IGMP BVI Stats
type Igmp_Active_Process_BviStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of AIPC buffers received. The type is interface{} with range:
    // 0..4294967295.
    ReceiveBuffers interface{}

    // Number of AIPC buffers released. The type is interface{} with range:
    // 0..4294967295.
    ReleaseBuffers interface{}

    // Number of AIPC buffers send blocked. The type is interface{} with range:
    // 0..4294967295.
    SendBlocks interface{}

    // Number of AIPC buffers release failed. The type is interface{} with range:
    // 0..4294967295.
    ReleaseFailBuffers interface{}

    // Number of AIPC NULL buffer handles. The type is interface{} with range:
    // 0..4294967295.
    NullBufferHandles interface{}

    // Number of AIPC open notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOpenNotif interface{}

    // Number of AIPC close notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcCloseNotif interface{}

    // Number of AIPC error notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcErrorNotif interface{}

    // Number of AIPC LWM notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcLwmNotif interface{}

    // Number of AIPC input waiting notifications received. The type is
    // interface{} with range: 0..4294967295.
    RxIpcInputWaitNotif interface{}

    // Number of AIPC send status notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcSendStatusNotif interface{}

    // Number of AIPC publish notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcPublishNotif interface{}

    // Number of AIPC queue full notifications received. The type is interface{}
    // with range: 0..4294967295.
    RxIpcQFullNotif interface{}

    // Number of AIPC output notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcOutputNotif interface{}

    // Number of AIPC connect notifications received. The type is interface{} with
    // range: 0..4294967295.
    RxIpcConnectNotif interface{}

    // Number of IGMP protocol messages received. The type is interface{} with
    // range: 0..4294967295.
    RxIgmpPacketSuccess interface{}

    // Number of IGMP Mrouter Add messages received. The type is interface{} with
    // range: 0..4294967295.
    RxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages received. The type is interface{}
    // with range: 0..4294967295.
    RxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    RxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Add messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxAddMrouterMsg interface{}

    // Number of IGMP Mrouter Delete messages transmitted. The type is interface{}
    // with range: 0..4294967295.
    TxDeleteMrouterMsg interface{}

    // Number of IGMP Mrouter Sweep messages received. The type is interface{}
    // with range: 0..4294967295.
    TxSweepMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages received. The type is interface{}
    // with range: 0..4294967295.
    RxUnknownMrouterMsg interface{}

    // Number of IGMP Mrouter Unknown messages transmitted. The type is
    // interface{} with range: 0..4294967295.
    TxUnknownMrouterMsg interface{}

    // Number of AIPC transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TxBufferErrors interface{}

    // Number of AIPC buffers transmited. The type is interface{} with range:
    // 0..4294967295.
    TxBuffers interface{}

    // Number of IGMP protocol buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxProtocolBuffers interface{}

    // Number of IGMP Mrouter buffers transmitted. The type is interface{} with
    // range: 0..4294967295.
    TxMrouterBuffers interface{}

    // Number of IGMP Unknown buffers transmited. The type is interface{} with
    // range: 0..4294967295.
    TxUnknownBuffers interface{}

    // Number of WTX messages received. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgRecvd interface{}

    // Number of WTX messages sent. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgSent interface{}

    // Number of WTX messages sent to Protocol. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgProtoSent interface{}

    // Number of WTX messages dropped due to disconnect. The type is interface{}
    // with range: 0..4294967295.
    WtxMsgDropDc interface{}

    // Number of WTX messages dropped to memory. The type is interface{} with
    // range: 0..4294967295.
    WtxMsgDropNomem interface{}

    // Number of WTX messages freed. The type is interface{} with range:
    // 0..4294967295.
    WtxMsgFreed interface{}
}

func (bviStatistics *Igmp_Active_Process_BviStatistics) GetEntityData() *types.CommonEntityData {
    bviStatistics.EntityData.YFilter = bviStatistics.YFilter
    bviStatistics.EntityData.YangName = "bvi-statistics"
    bviStatistics.EntityData.BundleName = "cisco_ios_xr"
    bviStatistics.EntityData.ParentYangName = "process"
    bviStatistics.EntityData.SegmentPath = "bvi-statistics"
    bviStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bviStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bviStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bviStatistics.EntityData.Children = types.NewOrderedMap()
    bviStatistics.EntityData.Leafs = types.NewOrderedMap()
    bviStatistics.EntityData.Leafs.Append("receive-buffers", types.YLeaf{"ReceiveBuffers", bviStatistics.ReceiveBuffers})
    bviStatistics.EntityData.Leafs.Append("release-buffers", types.YLeaf{"ReleaseBuffers", bviStatistics.ReleaseBuffers})
    bviStatistics.EntityData.Leafs.Append("send-blocks", types.YLeaf{"SendBlocks", bviStatistics.SendBlocks})
    bviStatistics.EntityData.Leafs.Append("release-fail-buffers", types.YLeaf{"ReleaseFailBuffers", bviStatistics.ReleaseFailBuffers})
    bviStatistics.EntityData.Leafs.Append("null-buffer-handles", types.YLeaf{"NullBufferHandles", bviStatistics.NullBufferHandles})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-open-notif", types.YLeaf{"RxIpcOpenNotif", bviStatistics.RxIpcOpenNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-close-notif", types.YLeaf{"RxIpcCloseNotif", bviStatistics.RxIpcCloseNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-error-notif", types.YLeaf{"RxIpcErrorNotif", bviStatistics.RxIpcErrorNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-lwm-notif", types.YLeaf{"RxIpcLwmNotif", bviStatistics.RxIpcLwmNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-input-wait-notif", types.YLeaf{"RxIpcInputWaitNotif", bviStatistics.RxIpcInputWaitNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-send-status-notif", types.YLeaf{"RxIpcSendStatusNotif", bviStatistics.RxIpcSendStatusNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-publish-notif", types.YLeaf{"RxIpcPublishNotif", bviStatistics.RxIpcPublishNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-q-full-notif", types.YLeaf{"RxIpcQFullNotif", bviStatistics.RxIpcQFullNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-output-notif", types.YLeaf{"RxIpcOutputNotif", bviStatistics.RxIpcOutputNotif})
    bviStatistics.EntityData.Leafs.Append("rx-ipc-connect-notif", types.YLeaf{"RxIpcConnectNotif", bviStatistics.RxIpcConnectNotif})
    bviStatistics.EntityData.Leafs.Append("rx-igmp-packet-success", types.YLeaf{"RxIgmpPacketSuccess", bviStatistics.RxIgmpPacketSuccess})
    bviStatistics.EntityData.Leafs.Append("rx-add-mrouter-msg", types.YLeaf{"RxAddMrouterMsg", bviStatistics.RxAddMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("rx-delete-mrouter-msg", types.YLeaf{"RxDeleteMrouterMsg", bviStatistics.RxDeleteMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("rx-sweep-mrouter-msg", types.YLeaf{"RxSweepMrouterMsg", bviStatistics.RxSweepMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-add-mrouter-msg", types.YLeaf{"TxAddMrouterMsg", bviStatistics.TxAddMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-delete-mrouter-msg", types.YLeaf{"TxDeleteMrouterMsg", bviStatistics.TxDeleteMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-sweep-mrouter-msg", types.YLeaf{"TxSweepMrouterMsg", bviStatistics.TxSweepMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("rx-unknown-mrouter-msg", types.YLeaf{"RxUnknownMrouterMsg", bviStatistics.RxUnknownMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-unknown-mrouter-msg", types.YLeaf{"TxUnknownMrouterMsg", bviStatistics.TxUnknownMrouterMsg})
    bviStatistics.EntityData.Leafs.Append("tx-buffer-errors", types.YLeaf{"TxBufferErrors", bviStatistics.TxBufferErrors})
    bviStatistics.EntityData.Leafs.Append("tx-buffers", types.YLeaf{"TxBuffers", bviStatistics.TxBuffers})
    bviStatistics.EntityData.Leafs.Append("tx-protocol-buffers", types.YLeaf{"TxProtocolBuffers", bviStatistics.TxProtocolBuffers})
    bviStatistics.EntityData.Leafs.Append("tx-mrouter-buffers", types.YLeaf{"TxMrouterBuffers", bviStatistics.TxMrouterBuffers})
    bviStatistics.EntityData.Leafs.Append("tx-unknown-buffers", types.YLeaf{"TxUnknownBuffers", bviStatistics.TxUnknownBuffers})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-recvd", types.YLeaf{"WtxMsgRecvd", bviStatistics.WtxMsgRecvd})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-sent", types.YLeaf{"WtxMsgSent", bviStatistics.WtxMsgSent})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-proto-sent", types.YLeaf{"WtxMsgProtoSent", bviStatistics.WtxMsgProtoSent})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-drop-dc", types.YLeaf{"WtxMsgDropDc", bviStatistics.WtxMsgDropDc})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-drop-nomem", types.YLeaf{"WtxMsgDropNomem", bviStatistics.WtxMsgDropNomem})
    bviStatistics.EntityData.Leafs.Append("wtx-msg-freed", types.YLeaf{"WtxMsgFreed", bviStatistics.WtxMsgFreed})

    bviStatistics.EntityData.YListKeys = []string {}

    return &(bviStatistics.EntityData)
}

// Igmp_Active_Process_Nsf
// NSF Information
type Igmp_Active_Process_Nsf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is Multicast NSF active. The type is bool.
    IsMulticastNsfActive interface{}

    // Multicast NSF timeout in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeout interface{}

    // Multicast NSF time remaining in secs. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MulticastNsfTimeLeft interface{}

    // Respawn Count. The type is interface{} with range: 0..4294967295.
    RespawnCount interface{}

    // Last NSF time ON. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOn interface{}

    // Last NSF time off. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastNsfOff interface{}

    // Last NSF time ON in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOnMin interface{}

    // Last NSF time OFF in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastNsfOffMin interface{}

    // Last ICD Notif Recv. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LastIcdNotifRecv interface{}

    // Last ICD Notif Recv in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    LastIcdNotifRecvMin interface{}
}

func (nsf *Igmp_Active_Process_Nsf) GetEntityData() *types.CommonEntityData {
    nsf.EntityData.YFilter = nsf.YFilter
    nsf.EntityData.YangName = "nsf"
    nsf.EntityData.BundleName = "cisco_ios_xr"
    nsf.EntityData.ParentYangName = "process"
    nsf.EntityData.SegmentPath = "nsf"
    nsf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsf.EntityData.Children = types.NewOrderedMap()
    nsf.EntityData.Leafs = types.NewOrderedMap()
    nsf.EntityData.Leafs.Append("is-multicast-nsf-active", types.YLeaf{"IsMulticastNsfActive", nsf.IsMulticastNsfActive})
    nsf.EntityData.Leafs.Append("multicast-nsf-timeout", types.YLeaf{"MulticastNsfTimeout", nsf.MulticastNsfTimeout})
    nsf.EntityData.Leafs.Append("multicast-nsf-time-left", types.YLeaf{"MulticastNsfTimeLeft", nsf.MulticastNsfTimeLeft})
    nsf.EntityData.Leafs.Append("respawn-count", types.YLeaf{"RespawnCount", nsf.RespawnCount})
    nsf.EntityData.Leafs.Append("last-nsf-on", types.YLeaf{"LastNsfOn", nsf.LastNsfOn})
    nsf.EntityData.Leafs.Append("last-nsf-off", types.YLeaf{"LastNsfOff", nsf.LastNsfOff})
    nsf.EntityData.Leafs.Append("last-nsf-on-min", types.YLeaf{"LastNsfOnMin", nsf.LastNsfOnMin})
    nsf.EntityData.Leafs.Append("last-nsf-off-min", types.YLeaf{"LastNsfOffMin", nsf.LastNsfOffMin})
    nsf.EntityData.Leafs.Append("last-icd-notif-recv", types.YLeaf{"LastIcdNotifRecv", nsf.LastIcdNotifRecv})
    nsf.EntityData.Leafs.Append("last-icd-notif-recv-min", types.YLeaf{"LastIcdNotifRecvMin", nsf.LastIcdNotifRecvMin})

    nsf.EntityData.YListKeys = []string {}

    return &(nsf.EntityData)
}

// Igmp_Active_DefaultContext
// Default Context
type Igmp_Active_DefaultContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Summary Information.
    Summary Igmp_Active_DefaultContext_Summary

    // IGMP Interface state on.
    InterfaceStateOns Igmp_Active_DefaultContext_InterfaceStateOns

    // IGMP Detail Group Database.
    DetailGroups Igmp_Active_DefaultContext_DetailGroups

    // IGMP Non-Active Groups Information.
    NonActiveGroups Igmp_Active_DefaultContext_NonActiveGroups

    // SSM Map Table.
    SsmMaps Igmp_Active_DefaultContext_SsmMaps

    // IGMP Explicit Group Database.
    ExplicitGroups Igmp_Active_DefaultContext_ExplicitGroups

    // IGMP Interface specific Table.
    InterfaceTable Igmp_Active_DefaultContext_InterfaceTable

    // IGMP Interface Unicast-Qos-Adjust.
    InterfaceUnicastQosAdjusts Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts

    // Range table.
    Ranges Igmp_Active_DefaultContext_Ranges

    // IGMP Interface specific.
    IfrsInterfaces Igmp_Active_DefaultContext_IfrsInterfaces

    // IGMP Message Traffic Counters.
    TrafficCounters Igmp_Active_DefaultContext_TrafficCounters

    // IGMP Group Database Table.
    Groups Igmp_Active_DefaultContext_Groups

    // IGMP Groups Summary.
    GroupSummary Igmp_Active_DefaultContext_GroupSummary

    // IGMP IFRS Interface summary.
    IfrsInterfaceSummary Igmp_Active_DefaultContext_IfrsInterfaceSummary

    // IGMP Global Interface .
    GlobalInterfaceTable Igmp_Active_DefaultContext_GlobalInterfaceTable

    // SSM Map Detail.
    SsmMapDetails Igmp_Active_DefaultContext_SsmMapDetails

    // IGMP Interface state off.
    InterfaceStateOffs Igmp_Active_DefaultContext_InterfaceStateOffs
}

func (defaultContext *Igmp_Active_DefaultContext) GetEntityData() *types.CommonEntityData {
    defaultContext.EntityData.YFilter = defaultContext.YFilter
    defaultContext.EntityData.YangName = "default-context"
    defaultContext.EntityData.BundleName = "cisco_ios_xr"
    defaultContext.EntityData.ParentYangName = "active"
    defaultContext.EntityData.SegmentPath = "default-context"
    defaultContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultContext.EntityData.Children = types.NewOrderedMap()
    defaultContext.EntityData.Children.Append("summary", types.YChild{"Summary", &defaultContext.Summary})
    defaultContext.EntityData.Children.Append("interface-state-ons", types.YChild{"InterfaceStateOns", &defaultContext.InterfaceStateOns})
    defaultContext.EntityData.Children.Append("detail-groups", types.YChild{"DetailGroups", &defaultContext.DetailGroups})
    defaultContext.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", &defaultContext.NonActiveGroups})
    defaultContext.EntityData.Children.Append("ssm-maps", types.YChild{"SsmMaps", &defaultContext.SsmMaps})
    defaultContext.EntityData.Children.Append("explicit-groups", types.YChild{"ExplicitGroups", &defaultContext.ExplicitGroups})
    defaultContext.EntityData.Children.Append("interface-table", types.YChild{"InterfaceTable", &defaultContext.InterfaceTable})
    defaultContext.EntityData.Children.Append("interface-unicast-qos-adjusts", types.YChild{"InterfaceUnicastQosAdjusts", &defaultContext.InterfaceUnicastQosAdjusts})
    defaultContext.EntityData.Children.Append("ranges", types.YChild{"Ranges", &defaultContext.Ranges})
    defaultContext.EntityData.Children.Append("ifrs-interfaces", types.YChild{"IfrsInterfaces", &defaultContext.IfrsInterfaces})
    defaultContext.EntityData.Children.Append("traffic-counters", types.YChild{"TrafficCounters", &defaultContext.TrafficCounters})
    defaultContext.EntityData.Children.Append("groups", types.YChild{"Groups", &defaultContext.Groups})
    defaultContext.EntityData.Children.Append("group-summary", types.YChild{"GroupSummary", &defaultContext.GroupSummary})
    defaultContext.EntityData.Children.Append("ifrs-interface-summary", types.YChild{"IfrsInterfaceSummary", &defaultContext.IfrsInterfaceSummary})
    defaultContext.EntityData.Children.Append("global-interface-table", types.YChild{"GlobalInterfaceTable", &defaultContext.GlobalInterfaceTable})
    defaultContext.EntityData.Children.Append("ssm-map-details", types.YChild{"SsmMapDetails", &defaultContext.SsmMapDetails})
    defaultContext.EntityData.Children.Append("interface-state-offs", types.YChild{"InterfaceStateOffs", &defaultContext.InterfaceStateOffs})
    defaultContext.EntityData.Leafs = types.NewOrderedMap()

    defaultContext.EntityData.YListKeys = []string {}

    return &(defaultContext.EntityData)
}

// Igmp_Active_DefaultContext_Summary
// IGMP Summary Information
type Igmp_Active_DefaultContext_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Robustness variable. The type is interface{} with range: 0..4294967295.
    Robustness interface{}

    // Maximum groups accepted. The type is interface{} with range: 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Is maximum enforcement disabled. The type is bool.
    IsDisabled interface{}

    // No. of supported interfaces. The type is interface{} with range:
    // 0..4294967295.
    SupportedInterfaces interface{}

    // No. of unsupported interfaces. The type is interface{} with range:
    // 0..4294967295.
    UnsupportedInterfaces interface{}

    // No. of enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    EnabledInterfaceCount interface{}

    // No. of disabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    DisabledInterfaceCount interface{}

    // No. of static group commands. The type is interface{} with range:
    // 0..4294967295.
    TunnelMteConfigCount interface{}

    // Is node in low memory condition. The type is bool.
    NodeLowMemory interface{}

    // Maximum and current groups accepted for each interface. The type is slice
    // of Igmp_Active_DefaultContext_Summary_Interface.
    Interface []*Igmp_Active_DefaultContext_Summary_Interface
}

func (summary *Igmp_Active_DefaultContext_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "default-context"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range summary.Interface {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.Interface[i]), types.YChild{"Interface", summary.Interface[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", summary.Robustness})
    summary.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", summary.GroupLimit})
    summary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", summary.GroupCount})
    summary.EntityData.Leafs.Append("is-disabled", types.YLeaf{"IsDisabled", summary.IsDisabled})
    summary.EntityData.Leafs.Append("supported-interfaces", types.YLeaf{"SupportedInterfaces", summary.SupportedInterfaces})
    summary.EntityData.Leafs.Append("unsupported-interfaces", types.YLeaf{"UnsupportedInterfaces", summary.UnsupportedInterfaces})
    summary.EntityData.Leafs.Append("enabled-interface-count", types.YLeaf{"EnabledInterfaceCount", summary.EnabledInterfaceCount})
    summary.EntityData.Leafs.Append("disabled-interface-count", types.YLeaf{"DisabledInterfaceCount", summary.DisabledInterfaceCount})
    summary.EntityData.Leafs.Append("tunnel-mte-config-count", types.YLeaf{"TunnelMteConfigCount", summary.TunnelMteConfigCount})
    summary.EntityData.Leafs.Append("node-low-memory", types.YLeaf{"NodeLowMemory", summary.NodeLowMemory})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Igmp_Active_DefaultContext_Summary_Interface
// Maximum and current groups accepted for each
// interface
type Igmp_Active_DefaultContext_Summary_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Maximum groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupLimit interface{}

    // Current groups accepted per interface. The type is interface{} with range:
    // 0..4294967295.
    GroupCount interface{}

    // Parent if handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Enabled/Disabled. The type is bool.
    OnOff interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Time elapsed since router enabled event. The type is interface{} with
    // range: 0..4294967295.
    RouterUptimeInSeconds interface{}
}

func (self *Igmp_Active_DefaultContext_Summary_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "summary"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("group-limit", types.YLeaf{"GroupLimit", self.GroupLimit})
    self.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", self.GroupCount})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("on-off", types.YLeaf{"OnOff", self.OnOff})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceStateOns
// IGMP Interface state on
type Igmp_Active_DefaultContext_InterfaceStateOns struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn.
    InterfaceStateOn []*Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn
}

func (interfaceStateOns *Igmp_Active_DefaultContext_InterfaceStateOns) GetEntityData() *types.CommonEntityData {
    interfaceStateOns.EntityData.YFilter = interfaceStateOns.YFilter
    interfaceStateOns.EntityData.YangName = "interface-state-ons"
    interfaceStateOns.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOns.EntityData.ParentYangName = "default-context"
    interfaceStateOns.EntityData.SegmentPath = "interface-state-ons"
    interfaceStateOns.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOns.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOns.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOns.EntityData.Children = types.NewOrderedMap()
    interfaceStateOns.EntityData.Children.Append("interface-state-on", types.YChild{"InterfaceStateOn", nil})
    for i := range interfaceStateOns.InterfaceStateOn {
        interfaceStateOns.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOns.InterfaceStateOn[i]), types.YChild{"InterfaceStateOn", interfaceStateOns.InterfaceStateOn[i]})
    }
    interfaceStateOns.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOns.EntityData.YListKeys = []string {}

    return &(interfaceStateOns.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn
// IGMP Interface
type Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
}

func (interfaceStateOn *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn) GetEntityData() *types.CommonEntityData {
    interfaceStateOn.EntityData.YFilter = interfaceStateOn.YFilter
    interfaceStateOn.EntityData.YangName = "interface-state-on"
    interfaceStateOn.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOn.EntityData.ParentYangName = "interface-state-ons"
    interfaceStateOn.EntityData.SegmentPath = "interface-state-on" + types.AddKeyToken(interfaceStateOn.InterfaceName, "interface-name")
    interfaceStateOn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOn.EntityData.Children = types.NewOrderedMap()
    interfaceStateOn.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOn.Address})
    interfaceStateOn.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOn.QuerierAddress})
    interfaceStateOn.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOn.SubscriberAddress})
    interfaceStateOn.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOn.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOn.InterfaceName})
    interfaceStateOn.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOn.InterfaceNameXr})
    interfaceStateOn.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOn.State})
    interfaceStateOn.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOn.PrefixLength})
    interfaceStateOn.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOn.IsInterfaceUp})
    interfaceStateOn.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOn.IsIpEnabled})
    interfaceStateOn.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOn.IsRouterEnabled})
    interfaceStateOn.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOn.IgmpVersion})
    interfaceStateOn.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOn.HostVersion})
    interfaceStateOn.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOn.QueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOn.QueryTimeout})
    interfaceStateOn.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOn.QueryMaximumResponseTime})
    interfaceStateOn.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOn.LastMemberQueryInterval})
    interfaceStateOn.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOn.GroupJoins})
    interfaceStateOn.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOn.GroupLeaves})
    interfaceStateOn.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOn.IsQuerier})
    interfaceStateOn.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOn.TotalActiveGroups})
    interfaceStateOn.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOn.Robustness})
    interfaceStateOn.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOn.ProxyInterface})
    interfaceStateOn.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOn.QuerierUptime})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOn.LasLlRegistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOn.LasGetAddressCount})
    interfaceStateOn.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOn.LasUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOn.LasLlRemoveUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOn.LasLlAddUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOn.LasNullUpdateCount})
    interfaceStateOn.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOn.LasUnregistrationCount})
    interfaceStateOn.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOn.IsLasRequest})
    interfaceStateOn.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOn.IsLasRegistered})
    interfaceStateOn.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOn.VrfId})
    interfaceStateOn.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOn.MteVrfId})
    interfaceStateOn.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOn.Location})
    interfaceStateOn.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOn.Mtu})
    interfaceStateOn.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOn.VrfState})
    interfaceStateOn.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOn.IsConfigurationverify})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOn.ConfigurationvrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOn.ConfigurationvrfError})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOn.ConfigurationMcastVrfSet})
    interfaceStateOn.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOn.ConfigurationMcastVrfError})
    interfaceStateOn.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOn.IsImStateRegistered})
    interfaceStateOn.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOn.IsSubscriber})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOn.SubscriberMode})
    interfaceStateOn.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOn.IsIdentityPresent})
    interfaceStateOn.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOn.SubscriberId})
    interfaceStateOn.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOn.ParentIfhandle})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOn.TimeSinceLastQueryInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOn.TimeSinceLastReportInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOn.RouterUptimeInSeconds})
    interfaceStateOn.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOn.MteTupleCount})

    interfaceStateOn.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOn.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address
// IP address
type Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-on"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress
// Address of the Querier
type Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-on"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress
// Address of subscriber
type Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOns_InterfaceStateOn_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-on"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Active_DefaultContext_DetailGroups
// IGMP Detail Group Database
type Igmp_Active_DefaultContext_DetailGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Detail Group Entry Information. The type is slice of
    // Igmp_Active_DefaultContext_DetailGroups_DetailGroup.
    DetailGroup []*Igmp_Active_DefaultContext_DetailGroups_DetailGroup
}

func (detailGroups *Igmp_Active_DefaultContext_DetailGroups) GetEntityData() *types.CommonEntityData {
    detailGroups.EntityData.YFilter = detailGroups.YFilter
    detailGroups.EntityData.YangName = "detail-groups"
    detailGroups.EntityData.BundleName = "cisco_ios_xr"
    detailGroups.EntityData.ParentYangName = "default-context"
    detailGroups.EntityData.SegmentPath = "detail-groups"
    detailGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroups.EntityData.Children = types.NewOrderedMap()
    detailGroups.EntityData.Children.Append("detail-group", types.YChild{"DetailGroup", nil})
    for i := range detailGroups.DetailGroup {
        detailGroups.EntityData.Children.Append(types.GetSegmentPath(detailGroups.DetailGroup[i]), types.YChild{"DetailGroup", detailGroups.DetailGroup[i]})
    }
    detailGroups.EntityData.Leafs = types.NewOrderedMap()

    detailGroups.EntityData.YListKeys = []string {}

    return &(detailGroups.EntityData)
}

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup
// IGMP Detail Group Entry Information
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Group router filter mode. The type is bool.
    IsRouterExcludeMode interface{}

    // Group host filter mode. The type is bool.
    IsHostExcludeMode interface{}

    // Basic Group information.
    GroupInfo Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo

    // List of sources. The type is slice of
    // Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source.
    Source []*Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source
}

func (detailGroup *Igmp_Active_DefaultContext_DetailGroups_DetailGroup) GetEntityData() *types.CommonEntityData {
    detailGroup.EntityData.YFilter = detailGroup.YFilter
    detailGroup.EntityData.YangName = "detail-group"
    detailGroup.EntityData.BundleName = "cisco_ios_xr"
    detailGroup.EntityData.ParentYangName = "detail-groups"
    detailGroup.EntityData.SegmentPath = "detail-group"
    detailGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailGroup.EntityData.Children = types.NewOrderedMap()
    detailGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &detailGroup.GroupInfo})
    detailGroup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range detailGroup.Source {
        detailGroup.EntityData.Children.Append(types.GetSegmentPath(detailGroup.Source[i]), types.YChild{"Source", detailGroup.Source[i]})
    }
    detailGroup.EntityData.Leafs = types.NewOrderedMap()
    detailGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", detailGroup.GroupAddress})
    detailGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", detailGroup.InterfaceName})
    detailGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", detailGroup.SourceAddress})
    detailGroup.EntityData.Leafs.Append("is-router-exclude-mode", types.YLeaf{"IsRouterExcludeMode", detailGroup.IsRouterExcludeMode})
    detailGroup.EntityData.Leafs.Append("is-host-exclude-mode", types.YLeaf{"IsHostExcludeMode", detailGroup.IsHostExcludeMode})

    detailGroup.EntityData.YListKeys = []string {}

    return &(detailGroup.EntityData)
}

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo
// Basic Group information
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "detail-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source
// List of sources
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is this a local source. The type is bool.
    IsLocal interface{}

    // Is this a remote source. The type is bool.
    IsRemote interface{}

    // Should we forward on this entry. The type is bool.
    IsForward interface{}

    // Should we report the source. The type is bool.
    IsWeReport interface{}

    // Source flags. The type is interface{} with range: -2147483648..2147483647.
    Flags interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Source Address.
    SourceAddress Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
}

func (source *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "detail-group"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &source.SourceAddress})
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", source.Uptime})
    source.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", source.ExpirationTime})
    source.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", source.IsLocal})
    source.EntityData.Leafs.Append("is-remote", types.YLeaf{"IsRemote", source.IsRemote})
    source.EntityData.Leafs.Append("is-forward", types.YLeaf{"IsForward", source.IsForward})
    source.EntityData.Leafs.Append("is-we-report", types.YLeaf{"IsWeReport", source.IsWeReport})
    source.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", source.Flags})
    source.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", source.IsAdded})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress
// Source Address
type Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_DetailGroups_DetailGroup_Source_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "source"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_DefaultContext_NonActiveGroups
// IGMP Non-Active Groups Information
type Igmp_Active_DefaultContext_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of non-active groups. The type is slice of
    // Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups.
    NonActiveGroups []*Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "default-context"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("non-active-groups", types.YChild{"NonActiveGroups", nil})
    for i := range nonActiveGroups.NonActiveGroups {
        nonActiveGroups.EntityData.Children.Append(types.GetSegmentPath(nonActiveGroups.NonActiveGroups[i]), types.YChild{"NonActiveGroups", nonActiveGroups.NonActiveGroups[i]})
    }
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups
// List of non-active groups
type Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Name. The type is string with length: 0..65.
    Interface interface{}

    // Reason for group join not being processed. The type is string with length:
    // 0..257.
    ReasonForNonActivity interface{}

    // Group Address.
    GroupAddress Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress

    // Source Address.
    SourceAddress Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
}

func (nonActiveGroups *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups) GetEntityData() *types.CommonEntityData {
    nonActiveGroups.EntityData.YFilter = nonActiveGroups.YFilter
    nonActiveGroups.EntityData.YangName = "non-active-groups"
    nonActiveGroups.EntityData.BundleName = "cisco_ios_xr"
    nonActiveGroups.EntityData.ParentYangName = "non-active-groups"
    nonActiveGroups.EntityData.SegmentPath = "non-active-groups"
    nonActiveGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonActiveGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonActiveGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonActiveGroups.EntityData.Children = types.NewOrderedMap()
    nonActiveGroups.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &nonActiveGroups.GroupAddress})
    nonActiveGroups.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &nonActiveGroups.SourceAddress})
    nonActiveGroups.EntityData.Leafs = types.NewOrderedMap()
    nonActiveGroups.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", nonActiveGroups.Interface})
    nonActiveGroups.EntityData.Leafs.Append("reason-for-non-activity", types.YLeaf{"ReasonForNonActivity", nonActiveGroups.ReasonForNonActivity})

    nonActiveGroups.EntityData.YListKeys = []string {}

    return &(nonActiveGroups.EntityData)
}

// Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress
// Group Address
type Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "non-active-groups"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress
// Source Address
type Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_NonActiveGroups_NonActiveGroups_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "non-active-groups"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_DefaultContext_SsmMaps
// SSM Map Table
type Igmp_Active_DefaultContext_SsmMaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map information. The type is slice of
    // Igmp_Active_DefaultContext_SsmMaps_SsmMap.
    SsmMap []*Igmp_Active_DefaultContext_SsmMaps_SsmMap
}

func (ssmMaps *Igmp_Active_DefaultContext_SsmMaps) GetEntityData() *types.CommonEntityData {
    ssmMaps.EntityData.YFilter = ssmMaps.YFilter
    ssmMaps.EntityData.YangName = "ssm-maps"
    ssmMaps.EntityData.BundleName = "cisco_ios_xr"
    ssmMaps.EntityData.ParentYangName = "default-context"
    ssmMaps.EntityData.SegmentPath = "ssm-maps"
    ssmMaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMaps.EntityData.Children = types.NewOrderedMap()
    ssmMaps.EntityData.Children.Append("ssm-map", types.YChild{"SsmMap", nil})
    for i := range ssmMaps.SsmMap {
        ssmMaps.EntityData.Children.Append(types.GetSegmentPath(ssmMaps.SsmMap[i]), types.YChild{"SsmMap", ssmMaps.SsmMap[i]})
    }
    ssmMaps.EntityData.Leafs = types.NewOrderedMap()

    ssmMaps.EntityData.YListKeys = []string {}

    return &(ssmMaps.EntityData)
}

// Igmp_Active_DefaultContext_SsmMaps_SsmMap
// SSM Map information
type Igmp_Active_DefaultContext_SsmMaps_SsmMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
}

func (ssmMap *Igmp_Active_DefaultContext_SsmMaps_SsmMap) GetEntityData() *types.CommonEntityData {
    ssmMap.EntityData.YFilter = ssmMap.YFilter
    ssmMap.EntityData.YangName = "ssm-map"
    ssmMap.EntityData.BundleName = "cisco_ios_xr"
    ssmMap.EntityData.ParentYangName = "ssm-maps"
    ssmMap.EntityData.SegmentPath = "ssm-map"
    ssmMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMap.EntityData.Children = types.NewOrderedMap()
    ssmMap.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &ssmMap.GroupAddressXr})
    ssmMap.EntityData.Leafs = types.NewOrderedMap()
    ssmMap.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMap.SsmMapType})
    ssmMap.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMap.GroupAddress})
    ssmMap.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", ssmMap.MapType})
    ssmMap.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", ssmMap.SourceCounts})

    ssmMap.EntityData.YListKeys = []string {}

    return &(ssmMap.EntityData)
}

// Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr
// Group Address
type Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMaps_SsmMap_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "ssm-map"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Active_DefaultContext_ExplicitGroups
// IGMP Explicit Group Database
type Igmp_Active_DefaultContext_ExplicitGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Explicit Group Entry Information. The type is slice of
    // Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup.
    ExplicitGroup []*Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup
}

func (explicitGroups *Igmp_Active_DefaultContext_ExplicitGroups) GetEntityData() *types.CommonEntityData {
    explicitGroups.EntityData.YFilter = explicitGroups.YFilter
    explicitGroups.EntityData.YangName = "explicit-groups"
    explicitGroups.EntityData.BundleName = "cisco_ios_xr"
    explicitGroups.EntityData.ParentYangName = "default-context"
    explicitGroups.EntityData.SegmentPath = "explicit-groups"
    explicitGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroups.EntityData.Children = types.NewOrderedMap()
    explicitGroups.EntityData.Children.Append("explicit-group", types.YChild{"ExplicitGroup", nil})
    for i := range explicitGroups.ExplicitGroup {
        explicitGroups.EntityData.Children.Append(types.GetSegmentPath(explicitGroups.ExplicitGroup[i]), types.YChild{"ExplicitGroup", explicitGroups.ExplicitGroup[i]})
    }
    explicitGroups.EntityData.Leafs = types.NewOrderedMap()

    explicitGroups.EntityData.YListKeys = []string {}

    return &(explicitGroups.EntityData)
}

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup
// IGMP Explicit Group Entry Information
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source/Host Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // No. of hosts who are included. The type is interface{} with range:
    // 0..4294967295.
    IncludeHosts interface{}

    // No. of hosts who are excluded. The type is interface{} with range:
    // 0..4294967295.
    ExcludeHosts interface{}

    // Basic Group information.
    GroupInfo Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo

    // List of hosts. The type is slice of
    // Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host.
    Host []*Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host
}

func (explicitGroup *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup) GetEntityData() *types.CommonEntityData {
    explicitGroup.EntityData.YFilter = explicitGroup.YFilter
    explicitGroup.EntityData.YangName = "explicit-group"
    explicitGroup.EntityData.BundleName = "cisco_ios_xr"
    explicitGroup.EntityData.ParentYangName = "explicit-groups"
    explicitGroup.EntityData.SegmentPath = "explicit-group"
    explicitGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitGroup.EntityData.Children = types.NewOrderedMap()
    explicitGroup.EntityData.Children.Append("group-info", types.YChild{"GroupInfo", &explicitGroup.GroupInfo})
    explicitGroup.EntityData.Children.Append("host", types.YChild{"Host", nil})
    for i := range explicitGroup.Host {
        explicitGroup.EntityData.Children.Append(types.GetSegmentPath(explicitGroup.Host[i]), types.YChild{"Host", explicitGroup.Host[i]})
    }
    explicitGroup.EntityData.Leafs = types.NewOrderedMap()
    explicitGroup.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", explicitGroup.GroupAddress})
    explicitGroup.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", explicitGroup.InterfaceName})
    explicitGroup.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", explicitGroup.SourceAddress})
    explicitGroup.EntityData.Leafs.Append("include-hosts", types.YLeaf{"IncludeHosts", explicitGroup.IncludeHosts})
    explicitGroup.EntityData.Leafs.Append("exclude-hosts", types.YLeaf{"ExcludeHosts", explicitGroup.ExcludeHosts})

    explicitGroup.EntityData.YListKeys = []string {}

    return &(explicitGroup.EntityData)
}

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo
// Basic Group information
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter

    // Source Address.
    SourceAddress Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
}

func (groupInfo *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo) GetEntityData() *types.CommonEntityData {
    groupInfo.EntityData.YFilter = groupInfo.YFilter
    groupInfo.EntityData.YangName = "group-info"
    groupInfo.EntityData.BundleName = "cisco_ios_xr"
    groupInfo.EntityData.ParentYangName = "explicit-group"
    groupInfo.EntityData.SegmentPath = "group-info"
    groupInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupInfo.EntityData.Children = types.NewOrderedMap()
    groupInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &groupInfo.GroupAddressXr})
    groupInfo.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &groupInfo.LastReporter})
    groupInfo.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &groupInfo.SourceAddress})
    groupInfo.EntityData.Leafs = types.NewOrderedMap()
    groupInfo.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", groupInfo.InterfaceNameXr})
    groupInfo.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", groupInfo.Uptime})
    groupInfo.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", groupInfo.ExpirationTime})
    groupInfo.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", groupInfo.ExplicitTrackingEnabled})
    groupInfo.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", groupInfo.IsSelfJoin})
    groupInfo.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", groupInfo.RowStatus})
    groupInfo.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupInfo.IsLowMemory})
    groupInfo.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", groupInfo.RouterFilterMode})
    groupInfo.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", groupInfo.OlderHostVersion1Timer})
    groupInfo.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", groupInfo.OlderHostVersion2Timer})
    groupInfo.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", groupInfo.IsAdded})
    groupInfo.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", groupInfo.IsSuppressed})

    groupInfo.EntityData.YListKeys = []string {}

    return &(groupInfo.EntityData)
}

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr
// Group Address
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter
// Last reporter address
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group-info"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress
// Source Address
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_GroupInfo_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group-info"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host
// List of hosts
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Uptime in seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    Uptime interface{}

    // Exclude flag set. The type is bool.
    IsExclude interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // No. of sources in entry. The type is interface{} with range: 0..4294967295.
    SourceCount interface{}

    // Host Address.
    Address Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address

    // First 3 source addresses. The type is slice of
    // Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress.
    SourceAddress []*Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
}

func (host *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host) GetEntityData() *types.CommonEntityData {
    host.EntityData.YFilter = host.YFilter
    host.EntityData.YangName = "host"
    host.EntityData.BundleName = "cisco_ios_xr"
    host.EntityData.ParentYangName = "explicit-group"
    host.EntityData.SegmentPath = "host"
    host.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    host.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    host.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    host.EntityData.Children = types.NewOrderedMap()
    host.EntityData.Children.Append("address", types.YChild{"Address", &host.Address})
    host.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", nil})
    for i := range host.SourceAddress {
        host.EntityData.Children.Append(types.GetSegmentPath(host.SourceAddress[i]), types.YChild{"SourceAddress", host.SourceAddress[i]})
    }
    host.EntityData.Leafs = types.NewOrderedMap()
    host.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", host.Uptime})
    host.EntityData.Leafs.Append("is-exclude", types.YLeaf{"IsExclude", host.IsExclude})
    host.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", host.ExpirationTime})
    host.EntityData.Leafs.Append("source-count", types.YLeaf{"SourceCount", host.SourceCount})

    host.EntityData.YListKeys = []string {}

    return &(host.EntityData)
}

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address
// Host Address
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "host"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress
// First 3 source addresses
type Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_ExplicitGroups_ExplicitGroup_Host_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "host"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceTable
// IGMP Interface specific Table
type Igmp_Active_DefaultContext_InterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_DefaultContext_InterfaceTable_Interface.
    Interface []*Igmp_Active_DefaultContext_InterfaceTable_Interface
}

func (interfaceTable *Igmp_Active_DefaultContext_InterfaceTable) GetEntityData() *types.CommonEntityData {
    interfaceTable.EntityData.YFilter = interfaceTable.YFilter
    interfaceTable.EntityData.YangName = "interface-table"
    interfaceTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceTable.EntityData.ParentYangName = "default-context"
    interfaceTable.EntityData.SegmentPath = "interface-table"
    interfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceTable.EntityData.Children = types.NewOrderedMap()
    interfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceTable.Interface {
        interfaceTable.EntityData.Children.Append(types.GetSegmentPath(interfaceTable.Interface[i]), types.YChild{"Interface", interfaceTable.Interface[i]})
    }
    interfaceTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceTable.EntityData.YListKeys = []string {}

    return &(interfaceTable.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceTable_Interface
// IGMP Interface
type Igmp_Active_DefaultContext_InterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_DefaultContext_InterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Active_DefaultContext_InterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceTable_Interface_Address
// IP address
type Igmp_Active_DefaultContext_InterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_DefaultContext_InterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts
// IGMP Interface Unicast-Qos-Adjust
type Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust.
    InterfaceUnicastQosAdjust []*Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
}

func (interfaceUnicastQosAdjusts *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjusts.EntityData.YFilter = interfaceUnicastQosAdjusts.YFilter
    interfaceUnicastQosAdjusts.EntityData.YangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjusts.EntityData.ParentYangName = "default-context"
    interfaceUnicastQosAdjusts.EntityData.SegmentPath = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjusts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjusts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjusts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjusts.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjusts.EntityData.Children.Append("interface-unicast-qos-adjust", types.YChild{"InterfaceUnicastQosAdjust", nil})
    for i := range interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust {
        interfaceUnicastQosAdjusts.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]), types.YChild{"InterfaceUnicastQosAdjust", interfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust[i]})
    }
    interfaceUnicastQosAdjusts.EntityData.Leafs = types.NewOrderedMap()

    interfaceUnicastQosAdjusts.EntityData.YListKeys = []string {}

    return &(interfaceUnicastQosAdjusts.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust
// IGMP Interface
type Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Is VirtualAccess Interface. The type is bool.
    IsVirtualAccess interface{}

    // Overall rate in Kbps. The type is interface{} with range: 0..4294967295.
    // Units are kbit/s.
    Rate interface{}

    // Count of rate increments. The type is interface{} with range:
    // 0..4294967295.
    RateIncrements interface{}

    // Count of rate decrements. The type is interface{} with range:
    // 0..4294967295.
    RateDecrements interface{}

    // List of updates. The type is slice of
    // Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update.
    Update []*Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
}

func (interfaceUnicastQosAdjust *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust) GetEntityData() *types.CommonEntityData {
    interfaceUnicastQosAdjust.EntityData.YFilter = interfaceUnicastQosAdjust.YFilter
    interfaceUnicastQosAdjust.EntityData.YangName = "interface-unicast-qos-adjust"
    interfaceUnicastQosAdjust.EntityData.BundleName = "cisco_ios_xr"
    interfaceUnicastQosAdjust.EntityData.ParentYangName = "interface-unicast-qos-adjusts"
    interfaceUnicastQosAdjust.EntityData.SegmentPath = "interface-unicast-qos-adjust" + types.AddKeyToken(interfaceUnicastQosAdjust.InterfaceName, "interface-name")
    interfaceUnicastQosAdjust.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceUnicastQosAdjust.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceUnicastQosAdjust.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceUnicastQosAdjust.EntityData.Children = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Children.Append("update", types.YChild{"Update", nil})
    for i := range interfaceUnicastQosAdjust.Update {
        interfaceUnicastQosAdjust.EntityData.Children.Append(types.GetSegmentPath(interfaceUnicastQosAdjust.Update[i]), types.YChild{"Update", interfaceUnicastQosAdjust.Update[i]})
    }
    interfaceUnicastQosAdjust.EntityData.Leafs = types.NewOrderedMap()
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceUnicastQosAdjust.InterfaceName})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("is-virtual-access", types.YLeaf{"IsVirtualAccess", interfaceUnicastQosAdjust.IsVirtualAccess})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate", types.YLeaf{"Rate", interfaceUnicastQosAdjust.Rate})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-increments", types.YLeaf{"RateIncrements", interfaceUnicastQosAdjust.RateIncrements})
    interfaceUnicastQosAdjust.EntityData.Leafs.Append("rate-decrements", types.YLeaf{"RateDecrements", interfaceUnicastQosAdjust.RateDecrements})

    interfaceUnicastQosAdjust.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceUnicastQosAdjust.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update
// List of updates
type Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is this a rate increment. The type is bool.
    IsAdd interface{}

    // Weight from policy. The type is interface{} with range: 0..4294967295.
    Weight interface{}

    // Time this update is received. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedTime interface{}

    // Source address.
    SourceAddress Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress

    // Group address.
    GroupAddress Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
}

func (update *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update) GetEntityData() *types.CommonEntityData {
    update.EntityData.YFilter = update.YFilter
    update.EntityData.YangName = "update"
    update.EntityData.BundleName = "cisco_ios_xr"
    update.EntityData.ParentYangName = "interface-unicast-qos-adjust"
    update.EntityData.SegmentPath = "update"
    update.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    update.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    update.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    update.EntityData.Children = types.NewOrderedMap()
    update.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &update.SourceAddress})
    update.EntityData.Children.Append("group-address", types.YChild{"GroupAddress", &update.GroupAddress})
    update.EntityData.Leafs = types.NewOrderedMap()
    update.EntityData.Leafs.Append("is-add", types.YLeaf{"IsAdd", update.IsAdd})
    update.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", update.Weight})
    update.EntityData.Leafs.Append("received-time", types.YLeaf{"ReceivedTime", update.ReceivedTime})

    update.EntityData.YListKeys = []string {}

    return &(update.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress
// Source address
type Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "update"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress
// Group address
type Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddress *Igmp_Active_DefaultContext_InterfaceUnicastQosAdjusts_InterfaceUnicastQosAdjust_Update_GroupAddress) GetEntityData() *types.CommonEntityData {
    groupAddress.EntityData.YFilter = groupAddress.YFilter
    groupAddress.EntityData.YangName = "group-address"
    groupAddress.EntityData.BundleName = "cisco_ios_xr"
    groupAddress.EntityData.ParentYangName = "update"
    groupAddress.EntityData.SegmentPath = "group-address"
    groupAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddress.EntityData.Children = types.NewOrderedMap()
    groupAddress.EntityData.Leafs = types.NewOrderedMap()
    groupAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddress.AfName})
    groupAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddress.Ipv4Address})
    groupAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddress.Ipv6Address})

    groupAddress.EntityData.YListKeys = []string {}

    return &(groupAddress.EntityData)
}

// Igmp_Active_DefaultContext_Ranges
// Range table
type Igmp_Active_DefaultContext_Ranges struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Range information. The type is slice of
    // Igmp_Active_DefaultContext_Ranges_Range.
    Range []*Igmp_Active_DefaultContext_Ranges_Range
}

func (ranges *Igmp_Active_DefaultContext_Ranges) GetEntityData() *types.CommonEntityData {
    ranges.EntityData.YFilter = ranges.YFilter
    ranges.EntityData.YangName = "ranges"
    ranges.EntityData.BundleName = "cisco_ios_xr"
    ranges.EntityData.ParentYangName = "default-context"
    ranges.EntityData.SegmentPath = "ranges"
    ranges.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ranges.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ranges.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ranges.EntityData.Children = types.NewOrderedMap()
    ranges.EntityData.Children.Append("range", types.YChild{"Range", nil})
    for i := range ranges.Range {
        ranges.EntityData.Children.Append(types.GetSegmentPath(ranges.Range[i]), types.YChild{"Range", ranges.Range[i]})
    }
    ranges.EntityData.Leafs = types.NewOrderedMap()

    ranges.EntityData.YListKeys = []string {}

    return &(ranges.EntityData)
}

// Igmp_Active_DefaultContext_Ranges_Range
// Range information
type Igmp_Active_DefaultContext_Ranges_Range struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Group Mask. The type is interface{} with range: 0..4294967295.
    GroupMask interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Protocol. The type is IgmpEdmProtocol.
    Protocol interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Group address.
    GroupAddressXr Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr
}

func (self *Igmp_Active_DefaultContext_Ranges_Range) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "range"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "ranges"
    self.EntityData.SegmentPath = "range"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &self.GroupAddressXr})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", self.GroupAddress})
    self.EntityData.Leafs.Append("group-mask", types.YLeaf{"GroupMask", self.GroupMask})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", self.Protocol})
    self.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", self.IsStale})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr
// Group address
type Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_DefaultContext_Ranges_Range_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "range"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Active_DefaultContext_IfrsInterfaces
// IGMP Interface specific
type Igmp_Active_DefaultContext_IfrsInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP IFRS Interface. The type is slice of
    // Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface.
    IfrsInterface []*Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface
}

func (ifrsInterfaces *Igmp_Active_DefaultContext_IfrsInterfaces) GetEntityData() *types.CommonEntityData {
    ifrsInterfaces.EntityData.YFilter = ifrsInterfaces.YFilter
    ifrsInterfaces.EntityData.YangName = "ifrs-interfaces"
    ifrsInterfaces.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaces.EntityData.ParentYangName = "default-context"
    ifrsInterfaces.EntityData.SegmentPath = "ifrs-interfaces"
    ifrsInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaces.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaces.EntityData.Children.Append("ifrs-interface", types.YChild{"IfrsInterface", nil})
    for i := range ifrsInterfaces.IfrsInterface {
        ifrsInterfaces.EntityData.Children.Append(types.GetSegmentPath(ifrsInterfaces.IfrsInterface[i]), types.YChild{"IfrsInterface", ifrsInterfaces.IfrsInterface[i]})
    }
    ifrsInterfaces.EntityData.Leafs = types.NewOrderedMap()

    ifrsInterfaces.EntityData.YListKeys = []string {}

    return &(ifrsInterfaces.EntityData)
}

// Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface
// IGMP IFRS Interface
type Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IFRS Interface Name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Join group count. The type is interface{} with range: 0..4294967295.
    JoinGroupCount interface{}

    // IGMP interface entry.
    IgmpInterfaceEntry Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
}

func (ifrsInterface *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface) GetEntityData() *types.CommonEntityData {
    ifrsInterface.EntityData.YFilter = ifrsInterface.YFilter
    ifrsInterface.EntityData.YangName = "ifrs-interface"
    ifrsInterface.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterface.EntityData.ParentYangName = "ifrs-interfaces"
    ifrsInterface.EntityData.SegmentPath = "ifrs-interface" + types.AddKeyToken(ifrsInterface.InterfaceName, "interface-name")
    ifrsInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterface.EntityData.Children = types.NewOrderedMap()
    ifrsInterface.EntityData.Children.Append("igmp-interface-entry", types.YChild{"IgmpInterfaceEntry", &ifrsInterface.IgmpInterfaceEntry})
    ifrsInterface.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ifrsInterface.InterfaceName})
    ifrsInterface.EntityData.Leafs.Append("join-group-count", types.YLeaf{"JoinGroupCount", ifrsInterface.JoinGroupCount})

    ifrsInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(ifrsInterface.EntityData)
}

// Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry
// IGMP interface entry
type Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
}

func (igmpInterfaceEntry *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry) GetEntityData() *types.CommonEntityData {
    igmpInterfaceEntry.EntityData.YFilter = igmpInterfaceEntry.YFilter
    igmpInterfaceEntry.EntityData.YangName = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.BundleName = "cisco_ios_xr"
    igmpInterfaceEntry.EntityData.ParentYangName = "ifrs-interface"
    igmpInterfaceEntry.EntityData.SegmentPath = "igmp-interface-entry"
    igmpInterfaceEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igmpInterfaceEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igmpInterfaceEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igmpInterfaceEntry.EntityData.Children = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Children.Append("address", types.YChild{"Address", &igmpInterfaceEntry.Address})
    igmpInterfaceEntry.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &igmpInterfaceEntry.QuerierAddress})
    igmpInterfaceEntry.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &igmpInterfaceEntry.SubscriberAddress})
    igmpInterfaceEntry.EntityData.Leafs = types.NewOrderedMap()
    igmpInterfaceEntry.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", igmpInterfaceEntry.InterfaceNameXr})
    igmpInterfaceEntry.EntityData.Leafs.Append("state", types.YLeaf{"State", igmpInterfaceEntry.State})
    igmpInterfaceEntry.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", igmpInterfaceEntry.PrefixLength})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", igmpInterfaceEntry.IsInterfaceUp})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", igmpInterfaceEntry.IsIpEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", igmpInterfaceEntry.IsRouterEnabled})
    igmpInterfaceEntry.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", igmpInterfaceEntry.IgmpVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", igmpInterfaceEntry.HostVersion})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", igmpInterfaceEntry.QueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", igmpInterfaceEntry.QueryTimeout})
    igmpInterfaceEntry.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", igmpInterfaceEntry.QueryMaximumResponseTime})
    igmpInterfaceEntry.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", igmpInterfaceEntry.LastMemberQueryInterval})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", igmpInterfaceEntry.GroupJoins})
    igmpInterfaceEntry.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", igmpInterfaceEntry.GroupLeaves})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", igmpInterfaceEntry.IsQuerier})
    igmpInterfaceEntry.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", igmpInterfaceEntry.TotalActiveGroups})
    igmpInterfaceEntry.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", igmpInterfaceEntry.Robustness})
    igmpInterfaceEntry.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", igmpInterfaceEntry.ProxyInterface})
    igmpInterfaceEntry.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", igmpInterfaceEntry.QuerierUptime})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", igmpInterfaceEntry.LasLlRegistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", igmpInterfaceEntry.LasGetAddressCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", igmpInterfaceEntry.LasUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", igmpInterfaceEntry.LasLlRemoveUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", igmpInterfaceEntry.LasLlAddUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", igmpInterfaceEntry.LasNullUpdateCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", igmpInterfaceEntry.LasUnregistrationCount})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", igmpInterfaceEntry.IsLasRequest})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", igmpInterfaceEntry.IsLasRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", igmpInterfaceEntry.VrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", igmpInterfaceEntry.MteVrfId})
    igmpInterfaceEntry.EntityData.Leafs.Append("location", types.YLeaf{"Location", igmpInterfaceEntry.Location})
    igmpInterfaceEntry.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", igmpInterfaceEntry.Mtu})
    igmpInterfaceEntry.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", igmpInterfaceEntry.VrfState})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", igmpInterfaceEntry.IsConfigurationverify})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", igmpInterfaceEntry.ConfigurationvrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", igmpInterfaceEntry.ConfigurationvrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", igmpInterfaceEntry.ConfigurationMcastVrfSet})
    igmpInterfaceEntry.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", igmpInterfaceEntry.ConfigurationMcastVrfError})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", igmpInterfaceEntry.IsImStateRegistered})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", igmpInterfaceEntry.IsSubscriber})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", igmpInterfaceEntry.SubscriberMode})
    igmpInterfaceEntry.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", igmpInterfaceEntry.IsIdentityPresent})
    igmpInterfaceEntry.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", igmpInterfaceEntry.SubscriberId})
    igmpInterfaceEntry.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", igmpInterfaceEntry.ParentIfhandle})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", igmpInterfaceEntry.TimeSinceLastQueryInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", igmpInterfaceEntry.TimeSinceLastReportInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", igmpInterfaceEntry.RouterUptimeInSeconds})
    igmpInterfaceEntry.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", igmpInterfaceEntry.MteTupleCount})

    igmpInterfaceEntry.EntityData.YListKeys = []string {}

    return &(igmpInterfaceEntry.EntityData)
}

// Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address
// IP address
type Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "igmp-interface-entry"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress
// Address of the Querier
type Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "igmp-interface-entry"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress
// Address of subscriber
type Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_DefaultContext_IfrsInterfaces_IfrsInterface_IgmpInterfaceEntry_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "igmp-interface-entry"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Active_DefaultContext_TrafficCounters
// IGMP Message Traffic Counters
type Igmp_Active_DefaultContext_TrafficCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Running time for counters. The type is interface{} with range:
    // 0..4294967295.
    ElapsedTime interface{}

    // Packets in. The type is interface{} with range: 0..4294967295.
    PacketsIn interface{}

    // Packets out. The type is interface{} with range: 0..4294967295.
    PacketsOut interface{}

    // Malformed packets in. The type is interface{} with range: 0..4294967295.
    FormatErrors interface{}

    // Incoming Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerInputErrors interface{}

    // Outgoing Packet Manager packets dropped. The type is interface{} with
    // range: 0..4294967295.
    PacketManagerOutputErrors interface{}

    // Checksum errors. The type is interface{} with range: 0..4294967295.
    ChecksumErrors interface{}

    // Socket errors on reception. The type is interface{} with range:
    // 0..4294967295.
    ReceiveSocketErrors interface{}

    // Socket errors on send. The type is interface{} with range: 0..4294967295.
    SocketErrors interface{}

    // BadScope errors. The type is interface{} with range: 0..4294967295.
    BadScopeErrors interface{}

    // AuxDataLen errors. The type is interface{} with range: 0..4294967295.
    AuxillaryDataLengthErrors interface{}

    // Invalid Source Address errors. The type is interface{} with range:
    // 0..4294967295.
    InvalidSourceAddressErrors interface{}

    // Packets dropped since no socket connection. The type is interface{} with
    // range: 0..4294967295.
    NoSocketConnection interface{}

    // Packets dropped for other reasons. The type is interface{} with range:
    // 0..4294967295.
    MiscellaneousErrors interface{}

    // Query packets in. The type is interface{} with range: 0..4294967295.
    InputQueries interface{}

    // Reports in. The type is interface{} with range: 0..4294967295.
    InputReports interface{}

    // Leaves in. The type is interface{} with range: 0..4294967295.
    InputLeaves interface{}

    // Mtrace packets in. The type is interface{} with range: 0..4294967295.
    InputMtrace interface{}

    // DVMRP packets in. The type is interface{} with range: 0..4294967295.
    InputDvmrp interface{}

    // PIM packets in. The type is interface{} with range: 0..4294967295.
    InputPim interface{}

    // Query packets out. The type is interface{} with range: 0..4294967295.
    OutputQueries interface{}

    // Reports out. The type is interface{} with range: 0..4294967295.
    OutputReports interface{}

    // Leaves out. The type is interface{} with range: 0..4294967295.
    OutputLeaves interface{}

    // Mtrace packets out. The type is interface{} with range: 0..4294967295.
    OutputMtrace interface{}

    // DVMRP packets out. The type is interface{} with range: 0..4294967295.
    OutputDvmrp interface{}

    // PIM packets out. The type is interface{} with range: 0..4294967295.
    OutputPim interface{}

    // Packet get failed. The type is interface{} with range: 0..4294967295.
    GetPacketFailure interface{}

    // Failures setting 2nd ifhandle. The type is interface{} with range:
    // 0..4294967295.
    OutputNoParentInterfaceHandle interface{}

    // Packets received without idb. The type is interface{} with range:
    // 0..4294967295.
    InputNoIdb interface{}

    // Packets received on idb without VRF. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfInIdb interface{}

    // Packet received on disabled idb. The type is interface{} with range:
    // 0..4294967295.
    InputDisabledIdb interface{}

    // Packets received with Martian Address. The type is interface{} with range:
    // 0..4294967295.
    InputMartianAddress interface{}

    // Packets received with no assigned vrf id. The type is interface{} with
    // range: 0..4294967295.
    InputNoAssignedVrfId interface{}

    // mtrace packets with no vrf associated. The type is interface{} with range:
    // 0..4294967295.
    InputNoVrfMtrace interface{}

    // mtrace packets without platform support. The type is interface{} with
    // range: 0..4294967295.
    InputNoPlatformSupportMtrace interface{}
}

func (trafficCounters *Igmp_Active_DefaultContext_TrafficCounters) GetEntityData() *types.CommonEntityData {
    trafficCounters.EntityData.YFilter = trafficCounters.YFilter
    trafficCounters.EntityData.YangName = "traffic-counters"
    trafficCounters.EntityData.BundleName = "cisco_ios_xr"
    trafficCounters.EntityData.ParentYangName = "default-context"
    trafficCounters.EntityData.SegmentPath = "traffic-counters"
    trafficCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficCounters.EntityData.Children = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs = types.NewOrderedMap()
    trafficCounters.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", trafficCounters.ElapsedTime})
    trafficCounters.EntityData.Leafs.Append("packets-in", types.YLeaf{"PacketsIn", trafficCounters.PacketsIn})
    trafficCounters.EntityData.Leafs.Append("packets-out", types.YLeaf{"PacketsOut", trafficCounters.PacketsOut})
    trafficCounters.EntityData.Leafs.Append("format-errors", types.YLeaf{"FormatErrors", trafficCounters.FormatErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-input-errors", types.YLeaf{"PacketManagerInputErrors", trafficCounters.PacketManagerInputErrors})
    trafficCounters.EntityData.Leafs.Append("packet-manager-output-errors", types.YLeaf{"PacketManagerOutputErrors", trafficCounters.PacketManagerOutputErrors})
    trafficCounters.EntityData.Leafs.Append("checksum-errors", types.YLeaf{"ChecksumErrors", trafficCounters.ChecksumErrors})
    trafficCounters.EntityData.Leafs.Append("receive-socket-errors", types.YLeaf{"ReceiveSocketErrors", trafficCounters.ReceiveSocketErrors})
    trafficCounters.EntityData.Leafs.Append("socket-errors", types.YLeaf{"SocketErrors", trafficCounters.SocketErrors})
    trafficCounters.EntityData.Leafs.Append("bad-scope-errors", types.YLeaf{"BadScopeErrors", trafficCounters.BadScopeErrors})
    trafficCounters.EntityData.Leafs.Append("auxillary-data-length-errors", types.YLeaf{"AuxillaryDataLengthErrors", trafficCounters.AuxillaryDataLengthErrors})
    trafficCounters.EntityData.Leafs.Append("invalid-source-address-errors", types.YLeaf{"InvalidSourceAddressErrors", trafficCounters.InvalidSourceAddressErrors})
    trafficCounters.EntityData.Leafs.Append("no-socket-connection", types.YLeaf{"NoSocketConnection", trafficCounters.NoSocketConnection})
    trafficCounters.EntityData.Leafs.Append("miscellaneous-errors", types.YLeaf{"MiscellaneousErrors", trafficCounters.MiscellaneousErrors})
    trafficCounters.EntityData.Leafs.Append("input-queries", types.YLeaf{"InputQueries", trafficCounters.InputQueries})
    trafficCounters.EntityData.Leafs.Append("input-reports", types.YLeaf{"InputReports", trafficCounters.InputReports})
    trafficCounters.EntityData.Leafs.Append("input-leaves", types.YLeaf{"InputLeaves", trafficCounters.InputLeaves})
    trafficCounters.EntityData.Leafs.Append("input-mtrace", types.YLeaf{"InputMtrace", trafficCounters.InputMtrace})
    trafficCounters.EntityData.Leafs.Append("input-dvmrp", types.YLeaf{"InputDvmrp", trafficCounters.InputDvmrp})
    trafficCounters.EntityData.Leafs.Append("input-pim", types.YLeaf{"InputPim", trafficCounters.InputPim})
    trafficCounters.EntityData.Leafs.Append("output-queries", types.YLeaf{"OutputQueries", trafficCounters.OutputQueries})
    trafficCounters.EntityData.Leafs.Append("output-reports", types.YLeaf{"OutputReports", trafficCounters.OutputReports})
    trafficCounters.EntityData.Leafs.Append("output-leaves", types.YLeaf{"OutputLeaves", trafficCounters.OutputLeaves})
    trafficCounters.EntityData.Leafs.Append("output-mtrace", types.YLeaf{"OutputMtrace", trafficCounters.OutputMtrace})
    trafficCounters.EntityData.Leafs.Append("output-dvmrp", types.YLeaf{"OutputDvmrp", trafficCounters.OutputDvmrp})
    trafficCounters.EntityData.Leafs.Append("output-pim", types.YLeaf{"OutputPim", trafficCounters.OutputPim})
    trafficCounters.EntityData.Leafs.Append("get-packet-failure", types.YLeaf{"GetPacketFailure", trafficCounters.GetPacketFailure})
    trafficCounters.EntityData.Leafs.Append("output-no-parent-interface-handle", types.YLeaf{"OutputNoParentInterfaceHandle", trafficCounters.OutputNoParentInterfaceHandle})
    trafficCounters.EntityData.Leafs.Append("input-no-idb", types.YLeaf{"InputNoIdb", trafficCounters.InputNoIdb})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-in-idb", types.YLeaf{"InputNoVrfInIdb", trafficCounters.InputNoVrfInIdb})
    trafficCounters.EntityData.Leafs.Append("input-disabled-idb", types.YLeaf{"InputDisabledIdb", trafficCounters.InputDisabledIdb})
    trafficCounters.EntityData.Leafs.Append("input-martian-address", types.YLeaf{"InputMartianAddress", trafficCounters.InputMartianAddress})
    trafficCounters.EntityData.Leafs.Append("input-no-assigned-vrf-id", types.YLeaf{"InputNoAssignedVrfId", trafficCounters.InputNoAssignedVrfId})
    trafficCounters.EntityData.Leafs.Append("input-no-vrf-mtrace", types.YLeaf{"InputNoVrfMtrace", trafficCounters.InputNoVrfMtrace})
    trafficCounters.EntityData.Leafs.Append("input-no-platform-support-mtrace", types.YLeaf{"InputNoPlatformSupportMtrace", trafficCounters.InputNoPlatformSupportMtrace})

    trafficCounters.EntityData.YListKeys = []string {}

    return &(trafficCounters.EntityData)
}

// Igmp_Active_DefaultContext_Groups
// IGMP Group Database Table
type Igmp_Active_DefaultContext_Groups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Group Entry Information. The type is slice of
    // Igmp_Active_DefaultContext_Groups_Group.
    Group []*Igmp_Active_DefaultContext_Groups_Group
}

func (groups *Igmp_Active_DefaultContext_Groups) GetEntityData() *types.CommonEntityData {
    groups.EntityData.YFilter = groups.YFilter
    groups.EntityData.YangName = "groups"
    groups.EntityData.BundleName = "cisco_ios_xr"
    groups.EntityData.ParentYangName = "default-context"
    groups.EntityData.SegmentPath = "groups"
    groups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groups.EntityData.Children = types.NewOrderedMap()
    groups.EntityData.Children.Append("group", types.YChild{"Group", nil})
    for i := range groups.Group {
        groups.EntityData.Children.Append(types.GetSegmentPath(groups.Group[i]), types.YChild{"Group", groups.Group[i]})
    }
    groups.EntityData.Leafs = types.NewOrderedMap()

    groups.EntityData.YListKeys = []string {}

    return &(groups.EntityData)
}

// Igmp_Active_DefaultContext_Groups_Group
// IGMP Group Entry Information
type Igmp_Active_DefaultContext_Groups_Group struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Group Address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Uptime in seconds. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    Uptime interface{}

    // Expiration time in seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ExpirationTime interface{}

    // Is explicit tracking enabled. The type is bool.
    ExplicitTrackingEnabled interface{}

    // If local system is member of this group on this interface. The type is
    // bool.
    IsSelfJoin interface{}

    // interface on or off for the group. The type is string with length: 0..16.
    RowStatus interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}

    // Filter mode. The type is interface{} with range: 0..255.
    RouterFilterMode interface{}

    // IGMP Hostversion1timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion1Timer interface{}

    // IGMP Hostversion2timer. The type is interface{} with range: 0..4294967295.
    OlderHostVersion2Timer interface{}

    // Joined. The type is bool.
    IsAdded interface{}

    // Suppressed. The type is bool.
    IsSuppressed interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr

    // Last reporter address.
    LastReporter Igmp_Active_DefaultContext_Groups_Group_LastReporter

    // Source Address.
    SourceAddress Igmp_Active_DefaultContext_Groups_Group_SourceAddress
}

func (group *Igmp_Active_DefaultContext_Groups_Group) GetEntityData() *types.CommonEntityData {
    group.EntityData.YFilter = group.YFilter
    group.EntityData.YangName = "group"
    group.EntityData.BundleName = "cisco_ios_xr"
    group.EntityData.ParentYangName = "groups"
    group.EntityData.SegmentPath = "group"
    group.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    group.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    group.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    group.EntityData.Children = types.NewOrderedMap()
    group.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &group.GroupAddressXr})
    group.EntityData.Children.Append("last-reporter", types.YChild{"LastReporter", &group.LastReporter})
    group.EntityData.Children.Append("source-address", types.YChild{"SourceAddress", &group.SourceAddress})
    group.EntityData.Leafs = types.NewOrderedMap()
    group.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", group.GroupAddress})
    group.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", group.InterfaceName})
    group.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", group.InterfaceNameXr})
    group.EntityData.Leafs.Append("uptime", types.YLeaf{"Uptime", group.Uptime})
    group.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", group.ExpirationTime})
    group.EntityData.Leafs.Append("explicit-tracking-enabled", types.YLeaf{"ExplicitTrackingEnabled", group.ExplicitTrackingEnabled})
    group.EntityData.Leafs.Append("is-self-join", types.YLeaf{"IsSelfJoin", group.IsSelfJoin})
    group.EntityData.Leafs.Append("row-status", types.YLeaf{"RowStatus", group.RowStatus})
    group.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", group.IsLowMemory})
    group.EntityData.Leafs.Append("router-filter-mode", types.YLeaf{"RouterFilterMode", group.RouterFilterMode})
    group.EntityData.Leafs.Append("older-host-version1-timer", types.YLeaf{"OlderHostVersion1Timer", group.OlderHostVersion1Timer})
    group.EntityData.Leafs.Append("older-host-version2-timer", types.YLeaf{"OlderHostVersion2Timer", group.OlderHostVersion2Timer})
    group.EntityData.Leafs.Append("is-added", types.YLeaf{"IsAdded", group.IsAdded})
    group.EntityData.Leafs.Append("is-suppressed", types.YLeaf{"IsSuppressed", group.IsSuppressed})

    group.EntityData.YListKeys = []string {}

    return &(group.EntityData)
}

// Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr
// Group Address
type Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_DefaultContext_Groups_Group_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "group"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Active_DefaultContext_Groups_Group_LastReporter
// Last reporter address
type Igmp_Active_DefaultContext_Groups_Group_LastReporter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (lastReporter *Igmp_Active_DefaultContext_Groups_Group_LastReporter) GetEntityData() *types.CommonEntityData {
    lastReporter.EntityData.YFilter = lastReporter.YFilter
    lastReporter.EntityData.YangName = "last-reporter"
    lastReporter.EntityData.BundleName = "cisco_ios_xr"
    lastReporter.EntityData.ParentYangName = "group"
    lastReporter.EntityData.SegmentPath = "last-reporter"
    lastReporter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastReporter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastReporter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastReporter.EntityData.Children = types.NewOrderedMap()
    lastReporter.EntityData.Leafs = types.NewOrderedMap()
    lastReporter.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", lastReporter.AfName})
    lastReporter.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", lastReporter.Ipv4Address})
    lastReporter.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", lastReporter.Ipv6Address})

    lastReporter.EntityData.YListKeys = []string {}

    return &(lastReporter.EntityData)
}

// Igmp_Active_DefaultContext_Groups_Group_SourceAddress
// Source Address
type Igmp_Active_DefaultContext_Groups_Group_SourceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sourceAddress *Igmp_Active_DefaultContext_Groups_Group_SourceAddress) GetEntityData() *types.CommonEntityData {
    sourceAddress.EntityData.YFilter = sourceAddress.YFilter
    sourceAddress.EntityData.YangName = "source-address"
    sourceAddress.EntityData.BundleName = "cisco_ios_xr"
    sourceAddress.EntityData.ParentYangName = "group"
    sourceAddress.EntityData.SegmentPath = "source-address"
    sourceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceAddress.EntityData.Children = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs = types.NewOrderedMap()
    sourceAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sourceAddress.AfName})
    sourceAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sourceAddress.Ipv4Address})
    sourceAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sourceAddress.Ipv6Address})

    sourceAddress.EntityData.YListKeys = []string {}

    return &(sourceAddress.EntityData)
}

// Igmp_Active_DefaultContext_GroupSummary
// IGMP Groups Summary
type Igmp_Active_DefaultContext_GroupSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No. of (*,G) routes. The type is interface{} with range: 0..4294967295.
    Groutes interface{}

    // No. of (S,G) routes. The type is interface{} with range: 0..4294967295.
    SgRoutes interface{}

    // Current groups accepted. The type is interface{} with range: 0..4294967295.
    GroupCount interface{}

    // Node is running low on memory. The type is bool.
    IsLowMemory interface{}
}

func (groupSummary *Igmp_Active_DefaultContext_GroupSummary) GetEntityData() *types.CommonEntityData {
    groupSummary.EntityData.YFilter = groupSummary.YFilter
    groupSummary.EntityData.YangName = "group-summary"
    groupSummary.EntityData.BundleName = "cisco_ios_xr"
    groupSummary.EntityData.ParentYangName = "default-context"
    groupSummary.EntityData.SegmentPath = "group-summary"
    groupSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupSummary.EntityData.Children = types.NewOrderedMap()
    groupSummary.EntityData.Leafs = types.NewOrderedMap()
    groupSummary.EntityData.Leafs.Append("groutes", types.YLeaf{"Groutes", groupSummary.Groutes})
    groupSummary.EntityData.Leafs.Append("sg-routes", types.YLeaf{"SgRoutes", groupSummary.SgRoutes})
    groupSummary.EntityData.Leafs.Append("group-count", types.YLeaf{"GroupCount", groupSummary.GroupCount})
    groupSummary.EntityData.Leafs.Append("is-low-memory", types.YLeaf{"IsLowMemory", groupSummary.IsLowMemory})

    groupSummary.EntityData.YListKeys = []string {}

    return &(groupSummary.EntityData)
}

// Igmp_Active_DefaultContext_IfrsInterfaceSummary
// IGMP IFRS Interface summary
type Igmp_Active_DefaultContext_IfrsInterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface Count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // Configuration count. The type is interface{} with range: 0..4294967295.
    ConfigurationCount interface{}
}

func (ifrsInterfaceSummary *Igmp_Active_DefaultContext_IfrsInterfaceSummary) GetEntityData() *types.CommonEntityData {
    ifrsInterfaceSummary.EntityData.YFilter = ifrsInterfaceSummary.YFilter
    ifrsInterfaceSummary.EntityData.YangName = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    ifrsInterfaceSummary.EntityData.ParentYangName = "default-context"
    ifrsInterfaceSummary.EntityData.SegmentPath = "ifrs-interface-summary"
    ifrsInterfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ifrsInterfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ifrsInterfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ifrsInterfaceSummary.EntityData.Children = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    ifrsInterfaceSummary.EntityData.Leafs.Append("interface-count", types.YLeaf{"InterfaceCount", ifrsInterfaceSummary.InterfaceCount})
    ifrsInterfaceSummary.EntityData.Leafs.Append("configuration-count", types.YLeaf{"ConfigurationCount", ifrsInterfaceSummary.ConfigurationCount})

    ifrsInterfaceSummary.EntityData.YListKeys = []string {}

    return &(ifrsInterfaceSummary.EntityData)
}

// Igmp_Active_DefaultContext_GlobalInterfaceTable
// IGMP Global Interface 
type Igmp_Active_DefaultContext_GlobalInterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface.
    Interface []*Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface
}

func (globalInterfaceTable *Igmp_Active_DefaultContext_GlobalInterfaceTable) GetEntityData() *types.CommonEntityData {
    globalInterfaceTable.EntityData.YFilter = globalInterfaceTable.YFilter
    globalInterfaceTable.EntityData.YangName = "global-interface-table"
    globalInterfaceTable.EntityData.BundleName = "cisco_ios_xr"
    globalInterfaceTable.EntityData.ParentYangName = "default-context"
    globalInterfaceTable.EntityData.SegmentPath = "global-interface-table"
    globalInterfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalInterfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalInterfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalInterfaceTable.EntityData.Children = types.NewOrderedMap()
    globalInterfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range globalInterfaceTable.Interface {
        globalInterfaceTable.EntityData.Children.Append(types.GetSegmentPath(globalInterfaceTable.Interface[i]), types.YChild{"Interface", globalInterfaceTable.Interface[i]})
    }
    globalInterfaceTable.EntityData.Leafs = types.NewOrderedMap()

    globalInterfaceTable.EntityData.YListKeys = []string {}

    return &(globalInterfaceTable.EntityData)
}

// Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface
// IGMP Interface
type Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
}

func (self *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "global-interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("address", types.YChild{"Address", &self.Address})
    self.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &self.QuerierAddress})
    self.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &self.SubscriberAddress})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("state", types.YLeaf{"State", self.State})
    self.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", self.PrefixLength})
    self.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", self.IsInterfaceUp})
    self.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", self.IsIpEnabled})
    self.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", self.IsRouterEnabled})
    self.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", self.IgmpVersion})
    self.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", self.HostVersion})
    self.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", self.QueryInterval})
    self.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", self.QueryTimeout})
    self.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", self.QueryMaximumResponseTime})
    self.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", self.LastMemberQueryInterval})
    self.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", self.GroupJoins})
    self.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", self.GroupLeaves})
    self.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", self.IsQuerier})
    self.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", self.TotalActiveGroups})
    self.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", self.Robustness})
    self.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", self.ProxyInterface})
    self.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", self.QuerierUptime})
    self.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", self.LasLlRegistrationCount})
    self.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", self.LasGetAddressCount})
    self.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", self.LasUpdateCount})
    self.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", self.LasLlRemoveUpdateCount})
    self.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", self.LasLlAddUpdateCount})
    self.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", self.LasNullUpdateCount})
    self.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", self.LasUnregistrationCount})
    self.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", self.IsLasRequest})
    self.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", self.IsLasRegistered})
    self.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", self.VrfId})
    self.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", self.MteVrfId})
    self.EntityData.Leafs.Append("location", types.YLeaf{"Location", self.Location})
    self.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", self.Mtu})
    self.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", self.VrfState})
    self.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", self.IsConfigurationverify})
    self.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", self.ConfigurationvrfSet})
    self.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", self.ConfigurationvrfError})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", self.ConfigurationMcastVrfSet})
    self.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", self.ConfigurationMcastVrfError})
    self.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", self.IsImStateRegistered})
    self.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", self.IsSubscriber})
    self.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", self.SubscriberMode})
    self.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", self.IsIdentityPresent})
    self.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", self.SubscriberId})
    self.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", self.ParentIfhandle})
    self.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", self.TimeSinceLastQueryInSeconds})
    self.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", self.TimeSinceLastReportInSeconds})
    self.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", self.RouterUptimeInSeconds})
    self.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", self.MteTupleCount})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address
// IP address
type Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress
// Address of the Querier
type Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress
// Address of subscriber
type Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_DefaultContext_GlobalInterfaceTable_Interface_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

// Igmp_Active_DefaultContext_SsmMapDetails
// SSM Map Detail
type Igmp_Active_DefaultContext_SsmMapDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Detail Table information. The type is slice of
    // Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail.
    SsmMapDetail []*Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail
}

func (ssmMapDetails *Igmp_Active_DefaultContext_SsmMapDetails) GetEntityData() *types.CommonEntityData {
    ssmMapDetails.EntityData.YFilter = ssmMapDetails.YFilter
    ssmMapDetails.EntityData.YangName = "ssm-map-details"
    ssmMapDetails.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetails.EntityData.ParentYangName = "default-context"
    ssmMapDetails.EntityData.SegmentPath = "ssm-map-details"
    ssmMapDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetails.EntityData.Children = types.NewOrderedMap()
    ssmMapDetails.EntityData.Children.Append("ssm-map-detail", types.YChild{"SsmMapDetail", nil})
    for i := range ssmMapDetails.SsmMapDetail {
        ssmMapDetails.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetails.SsmMapDetail[i]), types.YChild{"SsmMapDetail", ssmMapDetails.SsmMapDetail[i]})
    }
    ssmMapDetails.EntityData.Leafs = types.NewOrderedMap()

    ssmMapDetails.EntityData.YListKeys = []string {}

    return &(ssmMapDetails.EntityData)
}

// Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail
// SSM Map Detail Table information
type Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSM Map Type. The type is IgmpssmMap.
    SsmMapType interface{}

    // Group address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    GroupAddress interface{}

    // Expiration Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ExpirationTime interface{}

    // Response Pending. The type is bool.
    ResponsePending interface{}

    // Query interval. The type is interface{} with range: 0..4294967295.
    QueryInterval interface{}

    // Elapsed time. The type is interface{} with range: 0..18446744073709551615.
    ElapsedTime interface{}

    // Basic Map Info.
    MapInfo Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo

    // List of sources. The type is slice of
    // Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources.
    Sources []*Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
}

func (ssmMapDetail *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail) GetEntityData() *types.CommonEntityData {
    ssmMapDetail.EntityData.YFilter = ssmMapDetail.YFilter
    ssmMapDetail.EntityData.YangName = "ssm-map-detail"
    ssmMapDetail.EntityData.BundleName = "cisco_ios_xr"
    ssmMapDetail.EntityData.ParentYangName = "ssm-map-details"
    ssmMapDetail.EntityData.SegmentPath = "ssm-map-detail"
    ssmMapDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssmMapDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssmMapDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssmMapDetail.EntityData.Children = types.NewOrderedMap()
    ssmMapDetail.EntityData.Children.Append("map-info", types.YChild{"MapInfo", &ssmMapDetail.MapInfo})
    ssmMapDetail.EntityData.Children.Append("sources", types.YChild{"Sources", nil})
    for i := range ssmMapDetail.Sources {
        ssmMapDetail.EntityData.Children.Append(types.GetSegmentPath(ssmMapDetail.Sources[i]), types.YChild{"Sources", ssmMapDetail.Sources[i]})
    }
    ssmMapDetail.EntityData.Leafs = types.NewOrderedMap()
    ssmMapDetail.EntityData.Leafs.Append("ssm-map-type", types.YLeaf{"SsmMapType", ssmMapDetail.SsmMapType})
    ssmMapDetail.EntityData.Leafs.Append("group-address", types.YLeaf{"GroupAddress", ssmMapDetail.GroupAddress})
    ssmMapDetail.EntityData.Leafs.Append("expiration-time", types.YLeaf{"ExpirationTime", ssmMapDetail.ExpirationTime})
    ssmMapDetail.EntityData.Leafs.Append("response-pending", types.YLeaf{"ResponsePending", ssmMapDetail.ResponsePending})
    ssmMapDetail.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", ssmMapDetail.QueryInterval})
    ssmMapDetail.EntityData.Leafs.Append("elapsed-time", types.YLeaf{"ElapsedTime", ssmMapDetail.ElapsedTime})

    ssmMapDetail.EntityData.YListKeys = []string {}

    return &(ssmMapDetail.EntityData)
}

// Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo
// Basic Map Info
type Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Map Type of group. The type is interface{} with range: 0..4294967295.
    MapType interface{}

    // Count of Sources. The type is interface{} with range: 0..4294967295.
    SourceCounts interface{}

    // Group Address.
    GroupAddressXr Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
}

func (mapInfo *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo) GetEntityData() *types.CommonEntityData {
    mapInfo.EntityData.YFilter = mapInfo.YFilter
    mapInfo.EntityData.YangName = "map-info"
    mapInfo.EntityData.BundleName = "cisco_ios_xr"
    mapInfo.EntityData.ParentYangName = "ssm-map-detail"
    mapInfo.EntityData.SegmentPath = "map-info"
    mapInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mapInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mapInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mapInfo.EntityData.Children = types.NewOrderedMap()
    mapInfo.EntityData.Children.Append("group-address-xr", types.YChild{"GroupAddressXr", &mapInfo.GroupAddressXr})
    mapInfo.EntityData.Leafs = types.NewOrderedMap()
    mapInfo.EntityData.Leafs.Append("map-type", types.YLeaf{"MapType", mapInfo.MapType})
    mapInfo.EntityData.Leafs.Append("source-counts", types.YLeaf{"SourceCounts", mapInfo.SourceCounts})

    mapInfo.EntityData.YListKeys = []string {}

    return &(mapInfo.EntityData)
}

// Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr
// Group Address
type Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (groupAddressXr *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_MapInfo_GroupAddressXr) GetEntityData() *types.CommonEntityData {
    groupAddressXr.EntityData.YFilter = groupAddressXr.YFilter
    groupAddressXr.EntityData.YangName = "group-address-xr"
    groupAddressXr.EntityData.BundleName = "cisco_ios_xr"
    groupAddressXr.EntityData.ParentYangName = "map-info"
    groupAddressXr.EntityData.SegmentPath = "group-address-xr"
    groupAddressXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupAddressXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupAddressXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupAddressXr.EntityData.Children = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs = types.NewOrderedMap()
    groupAddressXr.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", groupAddressXr.AfName})
    groupAddressXr.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", groupAddressXr.Ipv4Address})
    groupAddressXr.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", groupAddressXr.Ipv6Address})

    groupAddressXr.EntityData.YListKeys = []string {}

    return &(groupAddressXr.EntityData)
}

// Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources
// List of sources
type Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (sources *Igmp_Active_DefaultContext_SsmMapDetails_SsmMapDetail_Sources) GetEntityData() *types.CommonEntityData {
    sources.EntityData.YFilter = sources.YFilter
    sources.EntityData.YangName = "sources"
    sources.EntityData.BundleName = "cisco_ios_xr"
    sources.EntityData.ParentYangName = "ssm-map-detail"
    sources.EntityData.SegmentPath = "sources"
    sources.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sources.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sources.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sources.EntityData.Children = types.NewOrderedMap()
    sources.EntityData.Leafs = types.NewOrderedMap()
    sources.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", sources.AfName})
    sources.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", sources.Ipv4Address})
    sources.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", sources.Ipv6Address})

    sources.EntityData.YListKeys = []string {}

    return &(sources.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceStateOffs
// IGMP Interface state off
type Igmp_Active_DefaultContext_InterfaceStateOffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGMP Interface. The type is slice of
    // Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff.
    InterfaceStateOff []*Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff
}

func (interfaceStateOffs *Igmp_Active_DefaultContext_InterfaceStateOffs) GetEntityData() *types.CommonEntityData {
    interfaceStateOffs.EntityData.YFilter = interfaceStateOffs.YFilter
    interfaceStateOffs.EntityData.YangName = "interface-state-offs"
    interfaceStateOffs.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOffs.EntityData.ParentYangName = "default-context"
    interfaceStateOffs.EntityData.SegmentPath = "interface-state-offs"
    interfaceStateOffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOffs.EntityData.Children = types.NewOrderedMap()
    interfaceStateOffs.EntityData.Children.Append("interface-state-off", types.YChild{"InterfaceStateOff", nil})
    for i := range interfaceStateOffs.InterfaceStateOff {
        interfaceStateOffs.EntityData.Children.Append(types.GetSegmentPath(interfaceStateOffs.InterfaceStateOff[i]), types.YChild{"InterfaceStateOff", interfaceStateOffs.InterfaceStateOff[i]})
    }
    interfaceStateOffs.EntityData.Leafs = types.NewOrderedMap()

    interfaceStateOffs.EntityData.YListKeys = []string {}

    return &(interfaceStateOffs.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff
// IGMP Interface
type Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceNameXr interface{}

    // Interface state. The type is interface{} with range: 0..4294967295.
    State interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Is interface up. The type is bool.
    IsInterfaceUp interface{}

    // Is IP enabled. The type is bool.
    IsIpEnabled interface{}

    // Is Router functionality enabled. The type is bool.
    IsRouterEnabled interface{}

    // IGMP Router version. The type is interface{} with range: 0..255.
    IgmpVersion interface{}

    // IGMP Host version. The type is interface{} with range: 0..255.
    HostVersion interface{}

    // Query Interval value in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    QueryInterval interface{}

    // Query Timeout value. The type is interface{} with range: 0..65535.
    QueryTimeout interface{}

    // Max Response Timeout value. The type is interface{} with range: 0..65535.
    QueryMaximumResponseTime interface{}

    // Last Member Query Interval. The type is interface{} with range: 0..65535.
    LastMemberQueryInterval interface{}

    // No. of group joins. The type is interface{} with range: 0..4294967295.
    GroupJoins interface{}

    // No. of group leaves. The type is interface{} with range: 0..4294967295.
    GroupLeaves interface{}

    // Are we querier. The type is bool.
    IsQuerier interface{}

    // Actual number of groups on interface. The type is interface{} with range:
    // 0..4294967295.
    TotalActiveGroups interface{}

    // Robustness Variable value. The type is interface{} with range:
    // 0..4294967295.
    Robustness interface{}

    // Proxy interface index. The type is string with pattern: [a-zA-Z0-9./-]+.
    ProxyInterface interface{}

    // Time since the last querier took over. The type is interface{} with range:
    // 0..65535.
    QuerierUptime interface{}

    // LAS reg count. The type is interface{} with range: 0..4294967295.
    LasLlRegistrationCount interface{}

    // LAS get addr count. The type is interface{} with range: 0..4294967295.
    LasGetAddressCount interface{}

    // LAS Update count. The type is interface{} with range: 0..4294967295.
    LasUpdateCount interface{}

    // LAS LL remove update count. The type is interface{} with range:
    // 0..4294967295.
    LasLlRemoveUpdateCount interface{}

    // LAS LL add update count. The type is interface{} with range: 0..4294967295.
    LasLlAddUpdateCount interface{}

    // LAS Null update count. The type is interface{} with range: 0..4294967295.
    LasNullUpdateCount interface{}

    // LAS unreg count. The type is interface{} with range: 0..4294967295.
    LasUnregistrationCount interface{}

    // LAS req. The type is bool.
    IsLasRequest interface{}

    // LAS registered. The type is bool.
    IsLasRegistered interface{}

    // VRF id. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // MTE VRF id. The type is interface{} with range: 0..4294967295.
    MteVrfId interface{}

    // Location. The type is interface{} with range: 0..4294967295.
    Location interface{}

    // MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Vrf State. The type is interface{} with range: 0..4294967295.
    VrfState interface{}

    // CFG verify. The type is bool.
    IsConfigurationverify interface{}

    // CFG vrf set. The type is bool.
    ConfigurationvrfSet interface{}

    // CFG vrf error. The type is bool.
    ConfigurationvrfError interface{}

    // Is mcast set. The type is bool.
    ConfigurationMcastVrfSet interface{}

    // Is mcast error. The type is bool.
    ConfigurationMcastVrfError interface{}

    // Im state registered. The type is bool.
    IsImStateRegistered interface{}

    // Subscriber interface. The type is bool.
    IsSubscriber interface{}

    // Subscriber mode. The type is interface{} with range: 0..4294967295.
    SubscriberMode interface{}

    // Subscriber ID or Address available from AAA. The type is bool.
    IsIdentityPresent interface{}

    // ID string of subscriber. The type is string with length: 0..257.
    SubscriberId interface{}

    // Parent If Handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentIfhandle interface{}

    // Time elapsed since last query. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastQueryInSeconds interface{}

    // Time elapsed since last report. The type is interface{} with range:
    // 0..4294967295.
    TimeSinceLastReportInSeconds interface{}

    // Uptime since router enabled event. The type is interface{} with range:
    // 0..4294967295.
    RouterUptimeInSeconds interface{}

    // MTE Tuple count. The type is interface{} with range: 0..4294967295.
    MteTupleCount interface{}

    // IP address.
    Address Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address

    // Address of the Querier.
    QuerierAddress Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress

    // Address of subscriber.
    SubscriberAddress Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
}

func (interfaceStateOff *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff) GetEntityData() *types.CommonEntityData {
    interfaceStateOff.EntityData.YFilter = interfaceStateOff.YFilter
    interfaceStateOff.EntityData.YangName = "interface-state-off"
    interfaceStateOff.EntityData.BundleName = "cisco_ios_xr"
    interfaceStateOff.EntityData.ParentYangName = "interface-state-offs"
    interfaceStateOff.EntityData.SegmentPath = "interface-state-off" + types.AddKeyToken(interfaceStateOff.InterfaceName, "interface-name")
    interfaceStateOff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStateOff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStateOff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStateOff.EntityData.Children = types.NewOrderedMap()
    interfaceStateOff.EntityData.Children.Append("address", types.YChild{"Address", &interfaceStateOff.Address})
    interfaceStateOff.EntityData.Children.Append("querier-address", types.YChild{"QuerierAddress", &interfaceStateOff.QuerierAddress})
    interfaceStateOff.EntityData.Children.Append("subscriber-address", types.YChild{"SubscriberAddress", &interfaceStateOff.SubscriberAddress})
    interfaceStateOff.EntityData.Leafs = types.NewOrderedMap()
    interfaceStateOff.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStateOff.InterfaceName})
    interfaceStateOff.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceStateOff.InterfaceNameXr})
    interfaceStateOff.EntityData.Leafs.Append("state", types.YLeaf{"State", interfaceStateOff.State})
    interfaceStateOff.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interfaceStateOff.PrefixLength})
    interfaceStateOff.EntityData.Leafs.Append("is-interface-up", types.YLeaf{"IsInterfaceUp", interfaceStateOff.IsInterfaceUp})
    interfaceStateOff.EntityData.Leafs.Append("is-ip-enabled", types.YLeaf{"IsIpEnabled", interfaceStateOff.IsIpEnabled})
    interfaceStateOff.EntityData.Leafs.Append("is-router-enabled", types.YLeaf{"IsRouterEnabled", interfaceStateOff.IsRouterEnabled})
    interfaceStateOff.EntityData.Leafs.Append("igmp-version", types.YLeaf{"IgmpVersion", interfaceStateOff.IgmpVersion})
    interfaceStateOff.EntityData.Leafs.Append("host-version", types.YLeaf{"HostVersion", interfaceStateOff.HostVersion})
    interfaceStateOff.EntityData.Leafs.Append("query-interval", types.YLeaf{"QueryInterval", interfaceStateOff.QueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("query-timeout", types.YLeaf{"QueryTimeout", interfaceStateOff.QueryTimeout})
    interfaceStateOff.EntityData.Leafs.Append("query-maximum-response-time", types.YLeaf{"QueryMaximumResponseTime", interfaceStateOff.QueryMaximumResponseTime})
    interfaceStateOff.EntityData.Leafs.Append("last-member-query-interval", types.YLeaf{"LastMemberQueryInterval", interfaceStateOff.LastMemberQueryInterval})
    interfaceStateOff.EntityData.Leafs.Append("group-joins", types.YLeaf{"GroupJoins", interfaceStateOff.GroupJoins})
    interfaceStateOff.EntityData.Leafs.Append("group-leaves", types.YLeaf{"GroupLeaves", interfaceStateOff.GroupLeaves})
    interfaceStateOff.EntityData.Leafs.Append("is-querier", types.YLeaf{"IsQuerier", interfaceStateOff.IsQuerier})
    interfaceStateOff.EntityData.Leafs.Append("total-active-groups", types.YLeaf{"TotalActiveGroups", interfaceStateOff.TotalActiveGroups})
    interfaceStateOff.EntityData.Leafs.Append("robustness", types.YLeaf{"Robustness", interfaceStateOff.Robustness})
    interfaceStateOff.EntityData.Leafs.Append("proxy-interface", types.YLeaf{"ProxyInterface", interfaceStateOff.ProxyInterface})
    interfaceStateOff.EntityData.Leafs.Append("querier-uptime", types.YLeaf{"QuerierUptime", interfaceStateOff.QuerierUptime})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-registration-count", types.YLeaf{"LasLlRegistrationCount", interfaceStateOff.LasLlRegistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("las-get-address-count", types.YLeaf{"LasGetAddressCount", interfaceStateOff.LasGetAddressCount})
    interfaceStateOff.EntityData.Leafs.Append("las-update-count", types.YLeaf{"LasUpdateCount", interfaceStateOff.LasUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-remove-update-count", types.YLeaf{"LasLlRemoveUpdateCount", interfaceStateOff.LasLlRemoveUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-ll-add-update-count", types.YLeaf{"LasLlAddUpdateCount", interfaceStateOff.LasLlAddUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-null-update-count", types.YLeaf{"LasNullUpdateCount", interfaceStateOff.LasNullUpdateCount})
    interfaceStateOff.EntityData.Leafs.Append("las-unregistration-count", types.YLeaf{"LasUnregistrationCount", interfaceStateOff.LasUnregistrationCount})
    interfaceStateOff.EntityData.Leafs.Append("is-las-request", types.YLeaf{"IsLasRequest", interfaceStateOff.IsLasRequest})
    interfaceStateOff.EntityData.Leafs.Append("is-las-registered", types.YLeaf{"IsLasRegistered", interfaceStateOff.IsLasRegistered})
    interfaceStateOff.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", interfaceStateOff.VrfId})
    interfaceStateOff.EntityData.Leafs.Append("mte-vrf-id", types.YLeaf{"MteVrfId", interfaceStateOff.MteVrfId})
    interfaceStateOff.EntityData.Leafs.Append("location", types.YLeaf{"Location", interfaceStateOff.Location})
    interfaceStateOff.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", interfaceStateOff.Mtu})
    interfaceStateOff.EntityData.Leafs.Append("vrf-state", types.YLeaf{"VrfState", interfaceStateOff.VrfState})
    interfaceStateOff.EntityData.Leafs.Append("is-configurationverify", types.YLeaf{"IsConfigurationverify", interfaceStateOff.IsConfigurationverify})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-set", types.YLeaf{"ConfigurationvrfSet", interfaceStateOff.ConfigurationvrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configurationvrf-error", types.YLeaf{"ConfigurationvrfError", interfaceStateOff.ConfigurationvrfError})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-set", types.YLeaf{"ConfigurationMcastVrfSet", interfaceStateOff.ConfigurationMcastVrfSet})
    interfaceStateOff.EntityData.Leafs.Append("configuration-mcast-vrf-error", types.YLeaf{"ConfigurationMcastVrfError", interfaceStateOff.ConfigurationMcastVrfError})
    interfaceStateOff.EntityData.Leafs.Append("is-im-state-registered", types.YLeaf{"IsImStateRegistered", interfaceStateOff.IsImStateRegistered})
    interfaceStateOff.EntityData.Leafs.Append("is-subscriber", types.YLeaf{"IsSubscriber", interfaceStateOff.IsSubscriber})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-mode", types.YLeaf{"SubscriberMode", interfaceStateOff.SubscriberMode})
    interfaceStateOff.EntityData.Leafs.Append("is-identity-present", types.YLeaf{"IsIdentityPresent", interfaceStateOff.IsIdentityPresent})
    interfaceStateOff.EntityData.Leafs.Append("subscriber-id", types.YLeaf{"SubscriberId", interfaceStateOff.SubscriberId})
    interfaceStateOff.EntityData.Leafs.Append("parent-ifhandle", types.YLeaf{"ParentIfhandle", interfaceStateOff.ParentIfhandle})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-query-in-seconds", types.YLeaf{"TimeSinceLastQueryInSeconds", interfaceStateOff.TimeSinceLastQueryInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("time-since-last-report-in-seconds", types.YLeaf{"TimeSinceLastReportInSeconds", interfaceStateOff.TimeSinceLastReportInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("router-uptime-in-seconds", types.YLeaf{"RouterUptimeInSeconds", interfaceStateOff.RouterUptimeInSeconds})
    interfaceStateOff.EntityData.Leafs.Append("mte-tuple-count", types.YLeaf{"MteTupleCount", interfaceStateOff.MteTupleCount})

    interfaceStateOff.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStateOff.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address
// IP address
type Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (address *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "interface-state-off"
    address.EntityData.SegmentPath = "address"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", address.AfName})
    address.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", address.Ipv4Address})
    address.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", address.Ipv6Address})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress
// Address of the Querier
type Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (querierAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_QuerierAddress) GetEntityData() *types.CommonEntityData {
    querierAddress.EntityData.YFilter = querierAddress.YFilter
    querierAddress.EntityData.YangName = "querier-address"
    querierAddress.EntityData.BundleName = "cisco_ios_xr"
    querierAddress.EntityData.ParentYangName = "interface-state-off"
    querierAddress.EntityData.SegmentPath = "querier-address"
    querierAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    querierAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    querierAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    querierAddress.EntityData.Children = types.NewOrderedMap()
    querierAddress.EntityData.Leafs = types.NewOrderedMap()
    querierAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", querierAddress.AfName})
    querierAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", querierAddress.Ipv4Address})
    querierAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", querierAddress.Ipv6Address})

    querierAddress.EntityData.YListKeys = []string {}

    return &(querierAddress.EntityData)
}

// Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress
// Address of subscriber
type Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IgmpAfi.
    AfName interface{}

    // IPv4 Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPV6 Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (subscriberAddress *Igmp_Active_DefaultContext_InterfaceStateOffs_InterfaceStateOff_SubscriberAddress) GetEntityData() *types.CommonEntityData {
    subscriberAddress.EntityData.YFilter = subscriberAddress.YFilter
    subscriberAddress.EntityData.YangName = "subscriber-address"
    subscriberAddress.EntityData.BundleName = "cisco_ios_xr"
    subscriberAddress.EntityData.ParentYangName = "interface-state-off"
    subscriberAddress.EntityData.SegmentPath = "subscriber-address"
    subscriberAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberAddress.EntityData.Children = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs = types.NewOrderedMap()
    subscriberAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", subscriberAddress.AfName})
    subscriberAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", subscriberAddress.Ipv4Address})
    subscriberAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", subscriberAddress.Ipv6Address})

    subscriberAddress.EntityData.YListKeys = []string {}

    return &(subscriberAddress.EntityData)
}

